ID,Name,Statement
6b4924b9-b910-49e8-9469-c9073be05307,Pixelparty decode,select   block_timestamp,   args,   args:frameData::string as frame_data,   try_base64_decode_binary(frame_data) as try_decode from   near.core.fact_actions_events_function_call where   tx_hash = 'FffDnwokoLQYPkLC3Vmn7Qt94uZix8qMKcMp3t8oWFS2'
2ce63ba1-1c04-403d-99af-4656c630fd79,Untitled Query,
91c9311a-43db-4f81-9732-2780fd60ac74,NFT Mints Query Examples,with result_set as (   SELECT         block_timestamp,         nft_address,          nft_to_address,         mint_price_eth,          tx_fee     FROM ethereum.core.ez_nft_mints      WHERE block_timestamp::date = '2023-05-06' ) -- general stats -- select  --   count(1), --   count(distinct nft_address), --   sum(mint_price_eth), --   sum(tx_fee), --   min(block_timestamp), --   max(block_timestamp) -- from result_set -- compare to df output select   nft_address,   avg(mint_price_eth) as avg_mint_eth,   max(mint_price_eth) as max_mint_eth,   sum(tx_fee) as gross_fees,   count(1) as ct from result_set group by 1 order by 4 desc -- unique minter ratio -- select --   nft_address, --   count(distinct nft_to_address) as unique_minters, --   count(1) as total_mints, --   unique_minters / total_mints as u_ratio -- from result_set -- group by 1 -- order by 4 desc, 2 desc
5444c919-771c-4ea8-907e-8dc70d19c454,Untitled Query,select distinct marketplace from flow.core.fact_nft_sales
59765229-4645-489d-a8c7-ebc30e350fc2,Untitled Query,SELECT     block_timestamp,     event_attributes:asset as currency,     event_attributes:price as price FROM terra.msg_events WHERE EVENT_TYPE = 'from_contract'      AND event_attributes:action ='feed_prices'     AND BLOCK_TIMESTAMP > '2022-05-09' AND BLOCK_TIMESTAMP < '2022-05-10' limit 200 -- this is only the anchor price feed ( 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun', 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58', 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a', 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'  )
57516eec-30f2-4cea-96b1-a5e43da5f066,WETH owed,SELECT   liquidity_provider,   pool_name,   tokens_owed0_adjusted,   tokens_owed1_adjusted,   token0_symbol,   token1_symbol,   tokens_owed0_usd FROM uniswapv3.positions WHERE pool_name LIKE 'WETH-USDT%' AND is_active = TRUE ORDER BY tokens_owed0_adjusted desc limit 3;
9cc04eb1-be3b-4374-b9d0-d5cdf49626de,bETH Net Change [LDO1],WITH beth_burn AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(amount) as beth_burned FROM ethereum.udm_events WHERE origin_address = '0xc6821958f8d73ad0819502c35e383db8d3077ea2' -- terra deployer   AND from_address = '0xf9dcf31ee6eb94ab732a43c2fba1dc6179c98965' -- bETH Vault GROUP BY 1 ), beth_mint AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10, 6) as beth_minted   FROM terra.msg_events   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'mint'     AND event_attributes:"0_contract_address" = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun'     AND block_timestamp > '2021-08-12T00:00:00Z'   GROUP BY 1   ), net_change AS (   SELECT    	beth_burn.date as date,     beth_minted,     beth_burned,     beth_minted - beth_burned as net_daily_change   FROM beth_burn   JOIN beth_mint   	ON beth_burn.date = beth_mint.date   ) SELECT   date,   beth_minted,   -beth_burned as beth_burned,   SUM(net_daily_change) OVER (ORDER BY date) as cumulative_supply,   SUM(beth_minted) OVER (ORDER BY date) as cumulative_mint,   SUM(beth_burned) OVER (ORDER BY date) as cumulative_burn,   AVG(beth_minted) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as mint_weekly,   AVG(-beth_burned) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as burn_weekly FROM net_change
3eac1b42-77c7-4937-afd7-9d3aaeee8eec,Potential New Accounts from Sweat,with    sweat_receivers as ( select   tx_receiver,   min(block_timestamp) as first_reciept_date from near.core.fact_transactions   where tx_status = 'Success'   and block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_signer = 'sweat_welcome.near' group by 1 ),   new_signers as ( SELECT    tx_signer,   min(block_timestamp) as first_signing_date FROM near.core.fact_transactions WHERE tx_status = 'Success' 	AND block_timestamp::DATE >= '2022-09-01'   	AND block_timestamp::DATE <= '2022-12-31'     and tx_signer in (select tx_receiver from sweat_receivers) GROUP BY 1 ) select   date_trunc('month', first_signing_date) as "Month",   count(distinct tx_signer) as "Count New Signers" from new_signers group by 1 order by 1
9486a66f-f05e-4978-8a6a-01175642e4cc,Terra - ETH bridge volume [T82],WITH bridges AS (   SELECT     date_trunc('hour', block_timestamp) as date,     address_name as token,     sum(event_attributes:amount / pow(10,6)) as amount   FROM terra.msg_events   LEFT JOIN terra.labels l     ON event_attributes:contract_address = l.address   WHERE event_type = 'from_contract'     AND event_attributes:action = 'transfer'     AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc'     AND block_timestamp > CURRENT_DATE - 7   GROUP BY 1,2   ), usd AS (   SELECT     date,   	token,   	amount,     amount * price_usd as amount_usd   FROM bridges   LEFT JOIN terra.oracle_prices p   	ON token = p.symbol ) select * from usd -- SELECT --   date_trunc('day', date) as date, --   token, --   sum(amount) as amount, --   sum(amount_usd) as amount_usd -- FROM usd -- GROUP BY 1,2 -- ORDER BY 1
4154cec5-72e8-4cb9-987d-679fe72f6b95,16 eth shuttle query 2,SELECT date_trunc('day', block_timestamp) as date,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' 	AND block_timestamp > GETDATE() - interval '6 months' GROUP BY 1,2 ORDER BY 1
8cfc4b05-5297-479e-88d6-41b0bd5cd32f,June 22 Terraswap investigation,SELECT * FROM (SELECT  	*, 	CASE   		WHEN msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p' THEN 'burn'   		WHEN msg_value:execute_msg:swap:offer_asset:info:native_token:denom = 'uluna' THEN 'bond'   	END AS type, 	msg_value:execute_msg:send:amount::float / pow(10,6) as amount FROM terra.msgs WHERE block_timestamp LIKE '2021-06-22%' 	AND msg_module = 'wasm' 	AND (msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' OR msg_value:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p') 	AND tx_status = 'SUCCEEDED') WHERE type = 'burn' OR type = 'bond' LIMIT 10 -- top 3 addresses on june 22: -- terra14l56n89zmf4km5m3xj7tq7p9f2w7zq6v2ly0xq -- terra1rf58rw0cnzz3f74g94l5jy0mcv9nsekjk40lkh -- terra13wg8aj26kvzu2q0xwthkttwul4ud72t6y6z92r --  only terra1dta79r3l5dc54npnnyaqjf5kqjumh5nyhyvfyd has coins listed in these swaps over past month. any other bluna swaps further back?
1b1bb44e-23ec-449f-81ff-9259b830ea67,Untitled Query,
a4491f7e-3fbf-4620-8a37-4f7542b2fa5a,terra luna fees over time [T45],WITH rates AS (   SELECT   	date_trunc('week', block_timestamp) as date,   	currency,   	avg(price_usd) as fx_rate   FROM terra.oracle_prices   WHERE block_timestamp > CURRENT_DATE - interval '1 year'   GROUP BY 1, 2 ), fees AS  (   SELECT     date_trunc('week', block_timestamp) as date,     fee[0]:denom::string as currency,     sum(fee[0]:amount)/POW(10,6) as fee,   	count(*) as num_events   FROM terra.transactions   WHERE currency IS NOT NULL   	AND tx_status = 'SUCCEEDED'   	AND block_timestamp > CURRENT_DATE - interval '1 year'   GROUP BY 1,2 )    SELECT   week,     CASE   	  WHEN tx_currency = 'uusd' THEN 'uusd'   	  WHEN tx_currency = 'ukrw' THEN 'ukrw'   	  WHEN tx_currency = 'uluna' THEN 'uluna'   	ELSE 'other'   END AS fee_currency,   sum(terra_fee),   sum(num_events) FROM ( SELECT   *,   fees.currency as tx_currency,   fees.date as week,   (fee * fx_rate) as terra_fee FROM fees JOIN rates   ON (rates.date = fees.date AND rates.currency = fees.currency) ) GROUP BY 1, 2 ORDER BY 1
a4a1290c-1026-4fe4-b58b-ec611b3c8516,MINE Swap Prices [T93],-- Buying TOKEN with UST WITH buys AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_buy_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra178jydtjvj4gw8earkgnqc80c3hrmqj4kw2welz' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy' -- token contract       AND block_timestamp > '2021-07-02T11:00:00Z'       AND block_timestamp < '2021-10-31T23:59:59Z'     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_sell_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra178jydtjvj4gw8earkgnqc80c3hrmqj4kw2welz' -- swap contract       AND block_timestamp > '2021-07-02T11:00:00Z'       AND block_timestamp < '2021-10-31T23:59:59Z'     )   GROUP BY 1   ORDER BY 1) SELECT   buys.date as date,   avg_buy_price,   avg_sell_price,   avg((avg_buy_price+avg_sell_price)/2) OVER (ORDER BY sells.date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as moving_avg -- using 8 hr = 1/3 of a day FROM buys JOIN sells ON sells.date = buys.date
88deace7-d4c9-4b7f-aaa5-9b2b65c21b22,yvBOOST $ Volume [YC1],SELECT   date_trunc('week', block_timestamp) as day,   sum(amount) as crv_total,   avg(crv_total) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as ma FROM ethereum.udm_events WHERE contract_address = lower('0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a') -- yvBOOST   AND origin_function_name = 'deposit'   AND event_name = 'transfer'   AND block_timestamp > '2021-04-29T23:59:00Z' -- vault launched on april 30th GROUP BY 1 ORDER BY 1
a511589b-0d5c-4a20-9803-b0db57b38565,Untitled Query,select * from terra.classic.fact_transactions limit 10;
a58cf5eb-0ec5-4ffe-bf0a-84b3cb1b96c4,THOR LP Unique Users of the past month [THOR6],SELECT   date_trunc('day', block_timestamp) as date,   lp_action,   count(distinct from_address) as unique_users FROM thorchain.liquidity_actions WHERE block_timestamp > CURRENT_DATE - 30 GROUP BY 1, 2
a58569b2-3fc0-46ab-b55e-d3b8e356d3a3,THORChain Liquidity Actions by Hour [THOR8],SELECT   EXTRACT(hour from block_timestamp) as hour,   lp_action,   sum(rune_amount_usd + asset_amount_usd) as liquidty FROM thorchain.liquidity_actions WHERE block_timestamp > '2021-10-03T00:00:00Z' GROUP BY 1, 2 ORDER BY 1
8ed0e014-b5c2-48c0-9cb3-4661bb2ded2a,Stader Unique Users cause the other one broke [S1],with deposits as (   select   	block_timestamp,     tx_id,     msg_value:coins[0]:amount / pow(10,6) as amount,     msg_value:coins[0]:denom as denom,     msg_value:sender as sender,     msg_value:execute_msg:deposit:pool_id as pool_id   from terra.msgs   where msg_value:contract = 'terra1r2vv8cyt0scyxymktyfuudqs3lgtypk72w6m3m' -- stader contract   	and tx_status = 'SUCCEEDED'   	and msg_value:execute_msg like '%deposit%'   	and denom is not null -- exclude two update_config transactions    	and block_timestamp > '2021-11-12T00:00:00Z' -- exclude anything before launch ), aggregations as (   select   	date_trunc('day', block_timestamp) as date,   	case   		when pool_id = 0 then 'blue chip'   		when pool_id = 1 then 'community'   		when pool_id = 2 then 'airdrops plus'   	end as pool_id,   	sum(amount) as amount,   	count(distinct sender) as unique_wallets   from deposits   group by 1, 2   order by 1, 2 ), prices as (   select   	date_trunc('d', block_timestamp) as date,   	avg(price_usd) as avg_price   from terra.oracle_prices   where symbol = 'LUNA'   	and block_timestamp > '2021-11-12T00:00:00Z'   group by 1 ),    agg_usd as (   select   	*,   	sum(amount) over (partition by pool_id order by date) as cumulative_deposits,   	sum(unique_wallets) over (partition by pool_id order by date) as cumulative_depositors   from aggregations   left join prices using (date) ), final as (   select *,     amount * avg_price as amount_usd,   	cumulative_deposits * avg_price as cum_deposits_usd   from agg_usd ) select * from final
a6069cea-6f54-486c-8a65-f483f74060d7,2023-01-31 12:53 PM,select * from terra.classic.dim_daily_balances where address = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6' and date = ''
4ee32598-dac2-4e7d-a4d6-76d620e15d20,Untitled Query,select count(distinct nft_id) from flow.core.fact_nft_sales   where nft_collection ilike '%allday%'
15b0b853-8a2c-4a66-9c27-982726be7fbf,Untitled Query,select * from
a6123183-aa7d-462f-a79c-a0de9c75c5da,Users by Protocol [S1],-- this is boomer's work with raw as (SELECT date_trunc('day', block_timestamp) as dt, msg_value:contract::string as protocol, count(distinct msg_value:sender::string) as users_count from terra.msgs   where dt > '2021-11-12' and tx_status = 'SUCCEEDED' and protocol is not null group by 1,2), label as (select address, address_name    from terra.labels   where address in ('terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s', 'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03', 'terra1r2vv8cyt0scyxymktyfuudqs3lgtypk72w6m3m', 'terra1g7jjjkt5uvkjeyhp8ecdz4e4hvtn83sud3tmh2')) select a.dt, a.protocol, b.address_name, a.users_count from raw a join label b on a.protocol = b.address --terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s anchor --terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03 orion --terra1r2vv8cyt0scyxymktyfuudqs3lgtypk72w6m3m stader --terra1g7jjjkt5uvkjeyhp8ecdz4e4hvtn83sud3tmh2 apollo
a63d6c7f-4e8c-4cb8-8dfc-cbca6c8c203a,[NEAR] Transaction and Primary Receipt,select   t.tx_hash,   t.tx_signer,   t.block_id as tx_block_id,   r.block_id as receipt_block_id,   t.tx:outcome:receipt_ids[0]::string as outcome_receipt_id,   r.receipt_object_id,   t.tx:actions as tx_actions,   r.actions:receipt:Action:actions::string as receipt_actions,   r.receiver_id as tx_receiver_id,   r.receiver_id as receipt_receiver_id,   t.tx,   r.actions,   r.outcome,   r.logs from near.core.fact_transactions t   left join near.core.fact_receipts r using (tx_hash) -- filter for faster querying where t.block_timestamp::date = '2023-04-13'   and t.tx_hash = 'BmVH9RBWonnsHKP3Cx5ph8A6e2aGHkVEJaYQk2qtDMZB'   and r.receipt_object_id = '3MK7dW7XDLcA12jxa7yx1SHN7NYrCEWkCMTGP8xdp2GE' limit 1 select * from near.core.fact_transactions  where tx_hash = 'DqXWhLxZJCeyRMLTmFni7sBH1t25BZRXgF4MrTk4yJui' order by block_id
64af9b3b-72f3-41c0-ad23-66e669924e7c,side liq,SELECT distinct(action) FROM uniswapv3.lp_actions;
02ea74f2-2c4c-465e-950a-83ae2eb495fc,balance over time,with cats as ( select 	date,     round(         sum(balance) / pow(10, 6),         2     ) as balance,     case         when address = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' then 'bLUNA' --anchor hub         else balance_type     end as type from     terra.daily_balances where date > current_date - 30     and currency = 'LUNA'     and balance > 0     AND address NOT IN (          'terra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3nln0mh', --bonded_token_pool         'terra1dp0taj85ruc299rkdvzp4z5pfg6z6swaed74e6', --TFL address         'terra1jv65s3grqf6v6jl3dp4t6c9t9rk99cd8pm7utl', --community poolk         'terra1jgp27m8fykex4e4jtt0l7ze8q528ux2lh4zh0f', --mints/burns         'terra1tygms3xhhs3yv487phx3dw4a95jn7t7l8l07dr', --not_bonded_token_pool         'terra1wqwfwh797tf77e2xpvy9xx082pwpxxlm9x4xws' -- whale address, Do Kwon?     ) group by     date, type   ) select 	date, 	sum(balance) as balance from cats group by 1 order by 1
a65296bc-345c-42ad-9a5d-74518dd48945,LOTA swap prices,-- Buying LOTA with UST WITH buys AS ( SELECT   date_trunc('hour', block_timestamp) as date,   avg(ust/lota) as avg_buy_price FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as lota FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token ) GROUP BY 1 ORDER BY 1), -- Selling LOTA to UST sells AS ( SELECT   date_trunc('hour', block_timestamp) as date,   avg(ust/lota) as avg_sell_price FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as lota,    event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract ) GROUP BY 1 ORDER BY 1) SELECT *, avg((avg_buy_price+avg_sell_price)/2) OVER (ORDER BY sells.date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as five_ma FROM buys JOIN sells ON sells.date = buys.date WHERE buys.date > GETDATE() - interval '2 weeks'
a659dddd-67dc-4c37-8611-3eecda780531,Hunt TX5 - Borrow DAI Against MATIC,SELECT   tx_id,   event_index,   event_name,   tx_to_address_name,   contract_name FROM polygon.events_emitted WHERE tx_id = '0xfdde3ef04efc1372892e83a74c25877258cce8e36ba1cdad7219818bd8826617' ORDER BY event_index
2811225a-3ae6-4c5c-89ca-53ae5735f2af,2023-07-19 09:49 AM,select * from bitcoin.core.ez_miner_rewards order by block_number desc limit 10
aad1b130-36cf-4b65-9b72-11c2f0adbd5e,2022-12-16 03:20 PM,select * from near.core.fact_actions_events_function_call where tx_hash = '56MWdW7NPvfsy6bNctxe3fn6oVP3NfzLoQut9fCQkMm1'
f18fb739-2041-485c-84f6-cb309f85fa38,Flow Events Backfill,with txs as (   select 	date_trunc('d', block_timestamp) as _date,   	count(distinct tx_id) as gross_txs,   	count(distinct block_height) as gross_blocks   from flow.core.fact_transactions   where block_timestamp >= '2022-06-01'   group by 1 ), events as (   select 	date_trunc('d', block_timestamp) as _date,   	count(distinct tx_id) as event_txs,   	count(distinct block_height) as event_blocks   from flow.core.fact_events   where block_timestamp >= '2022-06-01'   group by 1 ), combo as ( select    *,   gross_txs - event_txs as net_txs,   gross_blocks - event_blocks as net_blocks from txs left join events using (_date) ) select * from combo order by 1
49d65210-3360-45d2-b823-b1b9366be5b3,Untitled Query,
03ce8d2b-027f-443c-bc79-533f997396f9,2023-05-24 03:09 PM,select * from near.horizon.fact_decoded_actions
a7458182-c21e-46e4-a755-890eb7bde60c,terraswap pools volume weekly [T57],WITH terraswap_addresses AS (   SELECT     address,     address_name   FROM terra.labels   WHERE label = 'terraswap'     AND label_type = 'dex' ), -- Buying token with UST // UST -> token swap buys AS ( SELECT   -- date_trunc('day', block_timestamp) as date,   pool,   sum(token_amt) as quantity_bought,   sum(ust) as volume_bought FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as ust,      event_attributes:return_amount / pow(10,6) as token_amt,     terraswap_addresses.address_name as pool,     event_attributes:"1_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"0_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'swap'     AND event_attributes:"1_action" = 'transfer'     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' ) GROUP BY 1 ), -- Selling token to UST sells AS ( SELECT   -- date_trunc('day', block_timestamp) as date,   pool,   sum(token_amount) as quantity_sold,   sum(ust) as volume_sold FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as token_amount,     event_attributes:return_amount / pow(10,6) as ust,     terraswap_addresses.address_name as pool,     event_attributes:"0_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"1_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'send'     AND event_attributes:"1_action" = 'swap'     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' ) GROUP BY 1 ) -- main query SELECT * FROM (   SELECT     buys.pool,     -- quantity_bought,     -- volume_bought,     -- -quantity_sold as sold_neg,     -- -volume_sold as vol_sold_neg,     -- quantity_bought - quantity_sold as net_daily_token_volume     sum(volume_bought + volume_sold) as gross_daily_volume     -- RANK() OVER (PARTITION BY buys.date ORDER BY gross_daily_volume desc) as rank   FROM buys   JOIN sells ON sells.pool = buys.pool   GROUP BY 1) ORDER BY 2 desc LIMIT 5
7fa0643a-f208-4542-a17e-275d40ee8ab6,MDAO Workshop - Anchor Collateral Events - bETH,select 	date_trunc('d',block_timestamp) as date,   	event_type,   	count(distinct tx_id) as tx_count    from anchor.collateral where contract_label = 'bETH mmCustody' group by 1,2 order by 1
a7068fe1-18f4-4b1c-97db-e1436ecd0366,Count of Event Type,-- COUNT OF EVENT TYPE WITH liquid as (   SELECT distinct tx_id   FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%'   AND tx_status = 'SUCCEEDED'   -- AND block_timestamp > '2021-06-01T00:00:00Z' ) SELECT 	date_trunc('day', block_timestamp) as date, 	event_type, 	count(*) FROM terra.msg_events a RIGHT JOIN liquid ON liquid.tx_id = a.tx_id -- WHERE block_timestamp > '2021-06-01T00:00:00Z' GROUP BY 1, 2 ORDER BY 1, 3 desc
a78573e4-b5bd-4b09-8d25-f1d1d47df8ae,query 6,with swaps as (     select distinct tx_hash from ethereum.core.fact_traces where      from_address = lower('0x5777d92f208679DB4b9778590Fa3CAB3aC9e2168')     or to_address = lower('0x5777d92f208679DB4b9778590Fa3CAB3aC9e2168') ) select      date_trunc('m',block_timestamp) as month,     avg(gas_price) as avg_gas_per_swap from ethereum.core.fact_transactions as t  inner join swaps on t.tx_hash = swaps.tx_hash group by month
04496055-1e00-4788-b952-5e789f08ae26,THORChain Top Swap Volume, past 2 weeks [THOR22],SELECT   pool_name,   sum(to_amount_usd) as gross_volume,   count(1) as num_swaps,   gross_volume / num_swaps as avg_swap_size FROM thorchain.swaps WHERE block_timestamp < CURRENT_DATE - interval '2 weeks' GROUP BY 1 ORDER BY 3 desc LIMIT 10
a868e152-a0ca-44c1-a9d4-11dbff01876c,ratio,SELECT 	platform,   	amount as total_bluna_unbonded,   	amount / sum(amount) OVER (ORDER BY amount) AS pct FROM (SELECT 	CASE   		WHEN msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p' THEN 'terraswap'   		WHEN msg_value:execute_msg:send:contract = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' THEN 'anchor'   	END as platform,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount   FROM terra.msgs WHERE block_timestamp > GETDATE() - interval '1 month'   	-- 7gp is the bLUNA contract. This filters all messages down to just those involving bonded LUNA. This will include other anchor interactions such as   	-- deposit collateral. The CASE statement above labels the types of transactions by smart contract address based on manual research. 	AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' 	AND tx_status = 'SUCCEEDED'   	AND (platform = 'terraswap' OR platform = 'anchor') GROUP BY 1)
81c507f6-d805-4ad6-a3cb-ba1b9f17ce44,Daily Active Wallets,select    block_timestamp::date as _date,   count(distinct tx_signer) as unique_signers from near.core.fact_transactions where block_timestamp::date >= '2023-01-01' and tx_status = 'Success' group by 1 order by 1
823b4fde-88fc-4318-9fea-faba1168402b,All Day vs Top Shot - Buyer Overlap,WITH   nfl_all_day AS (     SELECT DISTINCT       BUYER     FROM       flow.core.ez_nft_sales     WHERE       NFT_COLLECTION in (         'A.e4cf4bdc1751c65d.PackNFT',         'A.329feb3ab062d289.NFL_NFT',         'A.e4cf4bdc1751c65d.AllDay'       )   ),   nba_topshot AS (     SELECT DISTINCT       BUYER     FROM       flow.core.ez_nft_sales     WHERE       NFT_COLLECTION in (         'A.0b2a3299cc857e29.TopShot',         'A.c1e4f4f4c4257510.TopShotMarketV3',         'A.c1e4f4f4c4257510.Market',         'A.c4ff83bddcf08500.TopshotData',         'A.c1e4f4f4c4257510.TopShotMarketV2',         'A.ef4d8b44dd7f7ef6.TopShotShardedCollection',         'A.0b2a3299cc857e29.TopShotLocking'       )   ),   overlapping_users AS (     SELECT       BUYER     FROM       nfl_all_day     WHERE       buyer in (         select distinct           buyer         from           nba_topshot       )   ),   total_users AS (     SELECT       COUNT(DISTINCT BUYER) AS total_users     FROM       flow.core.ez_nft_sales     WHERE       NFT_COLLECTION IN (         'A.e4cf4bdc1751c65d.PackNFT',         'A.329feb3ab062d289.NFL_NFT',         'A.e4cf4bdc1751c65d.AllDay',         'A.0b2a3299cc857e29.TopShot',         'A.c1e4f4f4c4257510.TopShotMarketV3',         'A.c1e4f4f4c4257510.Market',         'A.c4ff83bddcf08500.TopshotData',         'A.c1e4f4f4c4257510.TopShotMarketV2',         'A.ef4d8b44dd7f7ef6.TopShotShardedCollection',         'A.0b2a3299cc857e29.TopShotLocking'       )   ) SELECT   COUNT(1) / (     SELECT       total_users     FROM       total_users   ) AS proportion_of_overlapping_users FROM   overlapping_users;
ab661e4b-ec4f-4ec5-aa77-059611d872c4,NEAR Backfill - Blocks,select   block_timestamp::date as _date,   iff(block_timestamp::date>='2021-09-01','existing','backfill') as status,   count(distinct block_id) from near.core.fact_blocks where block_timestamp::date < current_date group by 1 order by 1
83ca3899-198e-4757-8b92-6353148aaf9d,Untitled Query,with ust_ask as (   select    	block_timestamp,   	offer_amount,     offer_currency,     token_1_amount, -- token 1 is ask     (token_0_amount * price0_usd) / token_1_amount as ust_p,     token_0_amount, -- token 0 is offer     price0_usd,     price1_usd as ust_oracle   from terra.swaps   where ask_currency = 'UST'     and price0_usd is not null     and offer_currency = 'LUNA' ), ask_agg as (      select   	time_slice(block_timestamp, 10, 'minute') as _date,   	avg(ust_p) as ust_ask_swap_price,     	avg(ust_oracle) as avg_ust_oracle   from ust_ask   where block_timestamp >= '2022-05-07'   group by 1 ) select * from ask_agg order by 1
84a34d61-9085-4c27-a9e7-83b7312becf3,Untitled Query,SELECT    date,   balance FROM terra.daily_balances    WHERE date > CURRENT_DATE - 60 -- last n days    AND CURRENCY IN ('UST', 'LUNA')   AND BALANCE > 0   AND ADDRESS IN ('terra1kq2rzz6fq2q7fsu75a9g7cpzjeanmk68wplle5')
47d1aaf0-e7e2-4de3-bffd-43e6bcf675bd,Untitled Query,select * from near.core.fact_receipts where tx_hash = '8h8A54mJnHs6doVm6hgmbpzZ8KZ5PFNykjesFGKNULAA';
9575e35c-6dda-426b-a707-7f78e283ca8d,Untitled Query,
ac9e9bfa-8777-4e29-aa89-75f75563d14b,Flow May 2 Txs from New Payers,with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       *     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'       and payer in (         select           payer         from           new_payers       )   ) select   count(distinct tx_id) as txs,   count(distinct payer) as payers from   may_txs
ac7fb3f8-e675-4183-96c8-489417078d66,Untitled Query,
0c79306a-1cac-4f2f-b1ea-1c628a1f0cec,41 - dec 2019 fee outlier - details,SELECT 	*,     fee[0]:denom::string as currency,     fee[0]:amount/POW(10,6) as l_fee   FROM terra.transactions   WHERE currency IS NOT NULL   	AND tx_status = 'SUCCEEDED'     AND block_timestamp > '2019-12-24T23:59:00Z'     AND block_timestamp < '2019-12-26T03:00:00Z'     AND currency = 'uluna'   -- GROUP BY 1,2 ORDER BY 15 desc
01a017ed-7861-4126-994b-8018ef65e9a7,Untitled Query,
43175417-7d15-4d98-821e-e8f16775d662,Untitled Query,
f7069538-4c35-4f9e-8ea7-db209ebcfc6b,Minting Cost Overview copy,-- forked from alitaslimi / Minting Cost Overview @ https://flipsidecrypto.xyz/alitaslimi/q/minting-cost-daily-pI6v1O  with ------------------------------ Prices ------------------------------   prices as (     select       hour::date as date,       'AVAX' as symbol,       avg(price) as price     from       avalanche.core.fact_hourly_token_prices     where       symbol = 'WAVAX'     group by       date     union     select       hour::date as date,       'BNB' as symbol,       avg(price) as price     from       bsc.core.fact_hourly_token_prices     where       symbol = 'WBNB'     group by       date     union     select       hour::date as date,       'ETH' as symbol,       avg(price) as price     from       ethereum.core.fact_hourly_token_prices     where       hour::date between '{{Since}}' and (current_date - 1)       and symbol = 'WETH'     group by       date     union     select       recorded_hour::date as date,       'FLOW' as symbol,       avg(close) as price     from       flow.core.fact_hourly_prices     where       recorded_hour::date between '{{Since}}' and (current_date - 1)       and token = 'Flow'     group by       date     union     select       timestamp::date as date,       'NEAR' as symbol,       avg(price_usd) as price     from       near.core.fact_prices     where       timestamp::date between '{{Since}}' and (current_date - 1)       and symbol = 'wNEAR'     group by       date     union     select       hour::date as date,       'MATIC' as symbol,       avg(price) as price     from       polygon.core.fact_hourly_token_prices     where       hour::date between '{{Since}}' and (current_date - 1)       and symbol = 'MATIC'     group by       date     union     select       recorded_hour::date as date,       'SOL' as symbol,       avg(close) as price     from       solana.core.ez_token_prices_hourly     where       recorded_hour::date between '{{Since}}' and (current_date - 1)       and symbol = 'sol'     group by       date   ), ------------------------------ Arbitrum ------------------------------   arbitrum_raw_mints as ( 	select       block_timestamp,       tx_hash,       event_inputs:to as minter,       event_inputs:tokenId as tokenid 	from       arbitrum.core.fact_event_logs 	where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_status = 'SUCCESS'       and event_name = 'Transfer'       and event_inputs:tokenId is not null       and event_inputs:from = '0x0000000000000000000000000000000000000000'       and event_inputs:to <> '0x0000000000000000000000000000000000000000'   ),   arbitrum_mints as (     select       count(distinct tx_hash) as txn,       count(distinct minter) as minters,       count(distinct tokenid) as nfts     from       arbitrum_raw_mints   ),   arbitrum_transactions as (     select       sum(tx_fee * price) as fees     from       arbitrum.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from arbitrum_raw_mints)       and prices.symbol = 'ETH'   ), ------------------------------ Avalanche ------------------------------   avalanche_raw_mints as ( 	select       block_timestamp,       tx_hash,       decoded_log:to as minter,       decoded_log:tokenId as tokenid 	from       avalanche.core.fact_decoded_event_logs 	where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and event_name = 'Transfer'       and decoded_log:tokenId is not null       and decoded_log:from = '0x0000000000000000000000000000000000000000'       and decoded_log:to <> '0x0000000000000000000000000000000000000000'   ),   avalanche_mints as (     select       count(distinct tx_hash) as txn,       count(distinct minter) as minters,       count(distinct tokenid) as nfts     from       avalanche_raw_mints   ),   avalanche_transactions as (     select       sum(tx_fee * price) as fees     from       avalanche.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from avalanche_raw_mints)       and prices.symbol = 'AVAX'   ), ------------------------------ BSC ------------------------------   bsc_raw_mints as ( 	select       block_timestamp,       tx_hash,       decoded_log:to as minter,       decoded_log:tokenId as tokenid 	from       bsc.core.fact_decoded_event_logs 	where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and event_name = 'Transfer'       and decoded_log:tokenId is not null       and decoded_log:from = '0x0000000000000000000000000000000000000000'       and decoded_log:to <> '0x0000000000000000000000000000000000000000'   ),   bsc_mints as (     select       count(distinct tx_hash) as txn,       count(distinct minter) as minters,       count(distinct tokenid) as nfts     from       bsc_raw_mints   ),   bsc_transactions as (     select       sum(tx_fee * price) as fees     from       bsc.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from bsc_raw_mints)       and prices.symbol = 'BNB'   ), ------------------------------ Ethereum ------------------------------   ethereum_mints as (     select       count(distinct tx_hash) as txn,       count(distinct nft_to_address) as minters,       count(distinct tokenid) as nfts     from       ethereum.core.ez_nft_mints     where       block_timestamp::date between '{{Since}}' and (current_date - 1)   ),   ethereum_transactions as (     select       sum(tx_fee * price) as fees     from       ethereum.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from ethereum.core.ez_nft_mints)       and prices.symbol = 'ETH'   ), ------------------------------ Flow ------------------------------   flow_raw_mints as (     select       block_timestamp,       tx_id,       coalesce(event_data:address, event_data:recipient) as minter,       coalesce(event_data:id, event_data:nftId, event_data:momentID) as tokenid     from       flow.core.fact_events     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_succeeded       and event_type like '%Mint%'       and event_contract in (select distinct nft_collection from flow.core.ez_nft_sales)   ),   flow_mints as (     select       count(distinct tx_id) as txn,       count(distinct minter) as minters,       count(distinct tokenid) as nfts     from       flow_raw_mints   ),   flow_transactions as (   	select       sum(event_data:amount * price) as fees   	from       flow.core.fact_events transactions       join prices on transactions.block_timestamp::date = prices.date   	where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_succeeded       and event_type = 'FeesDeducted'       and tx_id in (select distinct tx_id from flow_raw_mints)       and prices.symbol = 'FLOW'   ), ------------------------------ NEAR ------------------------------   near_mints as (     select       count(distinct tx_hash) as txn,       count(distinct tx_signer) as minters,       count(distinct coalesce(token_id, nft_address)) as nfts     from       near.core.ez_nft_mints     where       block_timestamp::date between '{{Since}}' and (current_date - 1)   ),   near_transactions as (     select       sum(transaction_fee * price) / pow(10, 24) as fees     from       near.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from near.core.ez_nft_mints)       and prices.symbol = 'NEAR'   ), ------------------------------ Optimism ------------------------------   optimism_raw_mints as ( 	select       block_timestamp,       tx_hash,       event_inputs:to as minter,       event_inputs:tokenId as tokenid 	from       optimism.core.fact_event_logs 	where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and event_name = 'Transfer'       and event_inputs:tokenId is not null       and event_inputs:from = '0x0000000000000000000000000000000000000000'       and event_inputs:to <> '0x0000000000000000000000000000000000000000'   ),   optimism_mints as (     select       count(distinct tx_hash) as txn,       count(distinct minter) as minters,       count(distinct tokenid) as nfts     from       optimism_raw_mints   ),   optimism_transactions as (     select       sum(tx_fee * price) as fees     from       optimism.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from optimism_raw_mints)       and prices.symbol = 'ETH'   ), ------------------------------ Polygon ------------------------------   polygon_mints as (     select       count(distinct tx_hash) as txn,       count(distinct nft_to_address) as minters,       count(distinct tokenid) as nfts     from       polygon.core.ez_nft_mints     where       block_timestamp::date between '{{Since}}' and (current_date - 1)   ),   polygon_transactions as (     select       sum(tx_fee * price) as fees     from       polygon.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_hash in (select distinct tx_hash from polygon.core.ez_nft_mints)       and prices.symbol = 'MATIC'   ), ------------------------------ Solana ------------------------------   solana_mints as (     select       count(distinct tx_id) as txn,       count(distinct purchaser) as minters,       count(distinct mint) as nfts     from       solana.core.fact_nft_mints     where       block_timestamp::date between '{{Since}}' and (current_date - 1)   ),   solana_transactions as (     select       sum(fee * price) / pow(10, 9) as fees     from       solana.core.fact_transactions transactions       join prices on transactions.block_timestamp::date = prices.date     where       block_timestamp::date between '{{Since}}' and (current_date - 1)       and tx_id in (select distinct tx_id from solana.core.fact_nft_mints)       and prices.symbol = 'SOL'   ), ------------------------------ Result ------------------------------   result as (   select     'Arbitrum' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     arbitrum_mints mints,     arbitrum_transactions transactions   union   select     'Avalanche' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     avalanche_mints mints,     avalanche_transactions transactions   union   select     'BSC' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     bsc_mints mints,     bsc_transactions transactions   union   select     'Ethereum' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     ethereum_mints mints,     ethereum_transactions transactions   union   select     'Flow' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 6) as "Fees/NFT"   from     flow_mints mints,     flow_transactions transactions   union   select     'NEAR' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     near_mints mints,     near_transactions transactions   union   select     'Optimism' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     optimism_mints mints,     optimism_transactions transactions   union   select     'Polygon' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     polygon_mints mints,     polygon_transactions transactions   union   select     'Solana' as "Blockchain",     mints.txn as "Mints",     mints.minters as "Minters",     mints.nfts as "NFTs",     round(transactions.fees, 2) as "Fees",     round("Fees" / "Mints", 4) as "Fees/Mint",     round("Fees" / "Minters", 4) as "Fees/Minter",     round("Fees" / "NFTs", 4) as "Fees/NFT"   from     solana_mints mints,     solana_transactions transactions   order by     "Blockchain"   ) select   * from   result where   "Blockchain" not like (iff('{{Ethereum}}' = 'Included', '', 'Ethereum'))
9837b5c7-2273-4e7c-af6d-23c34e0a6462,Untitled Query,
0f588837-86da-4262-ac0d-530b8707a16f,Untitled Query,SELECT * FROM ethereum.nft_events nft WHERE contract_address = '0x76be3b62873462d2142405439777e971754e8e77'   AND event_type = 'sale'   and nft.token_id in ('10159') select * from ethereum.fact_nft_events where price is null limit 100 SELECT * FROM thorchain.liquidity_actions -- WHERE RUNE_AMOUNT = 0 and asset_amount = 0     limit 100
8a3badab-fece-4bff-9600-72798d19965b,2023-08-27 10:09 AM,select distinct post_type from near.social.fact_posts limit 5;
10e79031-b065-4458-98a2-5a0955228759,LUNA Liquidators,with liquidations as (   SELECT     date_trunc('h', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10,6) as luna_liquidated,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND block_timestamp > CURRENT_DATE - INTERVAL '24 hours'     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ORDER BY 1   ), price as (   select   	date_trunc('h', block_timestamp) as date,   	avg(price_usd) as avg_price   from terra.oracle_prices   where symbol = 'LUNA'     AND block_timestamp > CURRENT_DATE - INTERVAL '24 hours'   group by 1    ) SELECT   price.date,   price.avg_price,   coalesce(liquidations.luna_liquidated,0) as luna_liquidated,   coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   coalesce(liquidations.num_liquidations,0) as num_liquidations from price left join liquidations using (date)
3020f0cb-434d-476d-abf6-d471d290cc28,Untitled Query,
e83566dc-15db-47bc-9a6d-df077f71577e,Activity by Org,with org_stats as ( select   date_trunc('month', createdat) as month,   org,   count(distinct createdat) as activity_created,   count(distinct closedat) as activity_closed,   count(distinct id) as activity_count,   count(distinct author) as author_count,   rank() over (partition by month order by activity_count desc) as month_rank from near.beta.github_activity where createdat::date >= '2022-01-01' group by 1,2 ) select * from org_stats  order by 1, month_rank
11843ef0-ff19-40fb-a347-d5b304732355,stETH-ETH Liquidity Events - longterm [C2],WITH adds AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(amount) as token_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events   WHERE to_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 90     AND origin_function_name = 'add_liquidity'   GROUP BY 1 ), removals AS (   SELECT     date_trunc('day', block_timestamp) as date,     -sum(amount) as r_token_amount,     -sum(amount_usd) as r_usd_amount   FROM ethereum.udm_events   WHERE from_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 90     AND origin_function_name IN ('remove_liquidity', 'remove_liquidity_one_coin', 'remove_liquidity_imbalance')   GROUP BY 1 ) SELECT * FROM adds JOIN removals   ON adds.date = removals.date
adf3fcc0-4238-44c8-9536-e73b10c6dc5a,bLUNA Hub daily balance [T46],SELECT * FROM terra.daily_balances WHERE address = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' ORDER BY 1
addc0c2c-5575-4059-a6e8-c405d39ee0d5,ANC yield reserve balance - recent,SELECT * FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8' 	AND currency = 'UST'   	AND date > '2021-07-14T00:00:00Z' ORDER BY date
141f95b0-79c3-4a8c-a237-97a59013e5bb,OpenseaPro NFT Rank copy,-- forked from 0x33569c101562e1fAF5b24581057E5cEE4c8288D7 / OpenseaPro NFT Rank @ https://flipsidecrypto.xyz/0x33569c101562e1fAF5b24581057E5cEE4c8288D7/q/2023-04-04-11-14-am-ePOuzF  WITH base AS (SELECT from_address, min(block_timestamp) as first_gem_txn_ts FROM ethereum.core.fact_transactions ft WHERE ft.to_address IN  ('0x0000000035634b55f3d99b071b5a354f48e10bef','0x4326275317acc0fae4aa5c68fce4c54c74dc08d3','0x539ea5d6ec0093ff6401dbcd14d049c37a77151b' ,'0xeda0edeee797f579bdb0d055ae135ecb71709d28','0xf2458bd228d8a39b64bd3b9f84890e957cac3bbc','0x1cb16367b3a775e3d6d93906cd3e671e5ec3d07d', '0x9c049c5a973e9637cdf5f7c31b93ec074161d2fe', '0x094e654351cf152112e136923ad21508401d64d3','0xf24629fbb477e10f2cf331c2b7452d8596b5c7a5', '0x83c8f28c26bf6aaca652df1dbbe0e1b56f8baba2','0xae9c73fd0fd237c1c6f66fe009d24ce969e98704', '0xf22007700b8c443bcb36a39580f7804bffdb1169','0x29ab6d8f7e3d815168d6b40ebb12625b4fe13998', '0x35ca26a7a7f3ca98f3e60bd94c139c892e45b6c3','0x9e97195f937c9372fe5fda5e3b86e9b88cbefed7', '0x00000000a50bb64b4bbeceb18715748dface08af','0x241b8e59e81455e66b9cd0e2ffb2506be1838144','0x0000000031f7382a812c64b604da4fc520afef4b') GROUP BY 1), ranked as ( SELECT *, RANK() OVER (ORDER BY first_gem_txn_ts) as gem_user_rank FROM base ) SELECT * FROM ranked WHERE from_address =  LOWER('{{YOUR_ADDRESS}}')
ae3a5b70-a798-4282-ad79-0391a2605818,Copy of 16 eth shuttle query 2,SELECT date_trunc('hour', block_timestamp) as date,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' 	AND block_timestamp > '2021-03-10T19:00:00Z'   	AND block_timestamp < '2021-03-10T' GROUP BY 1,2 ORDER BY 1
6649ddfd-8948-478d-a252-8ac8b63c3232,Untitled Query,
9c44fd18-e409-4aa4-a97c-5d62f46eaa84,User Comp,with elsina_method as (   SELECT date_trunc('day', block_timestamp) AS date,    COUNT(DISTINCT tx_from) AS elsina_count FROM terra.transactions GROUP BY 1 ORDER BY 1    ), forg_method as (     SELECT     date_trunc('day', block_timestamp) as date,     count(distinct msg_value:sender) as forg_count   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL   GROUP BY 1    ), combo as ( select  f.date, forg_count, elsina_count, elsina_count - forg_count as diff from forg_method f left join elsina_method using (date) order by 1   ) select 	*, 	sum(forg_count) over (order by date rows between 6 preceding and current row) as forg_ma, 	sum(elsina_count) over (order by date rows between 6 preceding and current row) as elsina_ma, 	sum(diff) over (order by date rows between 6 preceding and current row) as diff_ma    from combo
50df1ad2-9b87-4e59-b4c0-1c0bb01ce230,Active Profiles Count,with social_txs as (   select * from near.core.fact_transactions    where lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near'     and tx_hash != '56MWdW7NPvfsy6bNctxe3fn6oVP3NfzLoQut9fCQkMm1' -- broken args ), profile_update as ( select    block_timestamp,   object_keys(try_parse_json(args):data)[0]::string as wallet_address from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)   and method_name = 'set'     and action_id != '8Fn2T8We3GRVBk2ZhdNBqFB26htQ8McAvDaVgUJVP7qC-1' ) select    count(distinct wallet_address) as "Active Profiles" from profile_update
83148250-f582-45b8-91c2-3cf0ffd63e1d,stETH Remove Liquidity [C2],SELECT   date_trunc('day', block_timestamp) as date,   symbol,   sum(amount) as token_amount,   sum(amount_usd) as usd_amount FROM ethereum.udm_events WHERE from_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool   AND block_timestamp > CURRENT_DATE - 30   AND origin_function_name IN ('remove_liquidity', 'remove_liquidity_one_coin', 'remove_liquidity_imbalance') GROUP BY 1,2 ORDER BY 1
aea44187-0fef-475d-9a79-c35cb8445884,Anchor Borrows Table,WITH daily_ust_supply AS (     SELECT         date,         sum(balance) as ust_supply     FROM terra.daily_balances     WHERE currency = 'UST'         AND date > '2021-03-16T00:00:00Z'     GROUP BY 1     ), borrow_event AS (     SELECT         block_timestamp,     CASE         WHEN event_attributes:action = 'borrow_stable' THEN event_attributes:borrow_amount::float / pow(10,6)         WHEN event_attributes:action = 'repay_stable' THEN -event_attributes:repay_amount::float / pow(10,6)         WHEN event_attributes:"0_action" = 'liquidate_collateral' THEN -event_attributes:"0_repay_amount"::float / pow(10,6)     END as amount     FROM terra.msg_events     WHERE event_type = 'from_contract'         AND tx_status = 'SUCCEEDED'         AND block_timestamp > '2021-03-16T23:59:59Z'     ), net_borrow AS (     SELECT         date_trunc('day', block_timestamp) as date,         SUM(amount) as net_borrow     FROM borrow_event     GROUP BY 1     ORDER BY 1     ) SELECT     net_borrow.date as date,     net_borrow,     ust_supply FROM net_borrow JOIN daily_ust_supply     ON net_borrow.date = daily_ust_supply.date
9d595eb1-b4f1-4bf2-b4f4-98b68b0ea2d2,2023-01-20 03:35 PM,
1641daca-061f-4296-9b11-17249a8ffd6a,General Contract Activity,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date >= '2022-10-01' ) select   block_timestamp::date as "Date",   iff(tx_signer='social.near', 'signer','receiver') as "Contract Role",   count(distinct tx_hash) as "Contract Interaction Transactions" from social_txs   group by 1,2   order by 1
8f5fa45e-18bc-416b-b471-d7e0b59a82a1,2023-01-17 11:47 AM,select   * from   osmosis.core.fact_msgs where   tx_id in (     'A9262D2C9443F2CDB9174D43EDFC070CCBB38A739663586E4961B73865BB704E'   )
05962175-61f9-4b6c-85be-603982fd22cd,ENS Airdrop Claims [ENS4],with claims as (   select     date_trunc('hour', block_timestamp) as date,     sum(event_inputs:value / pow(10,16)) as amount   from ethereum.events_emitted   where contract_address ='0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'     and event_name = 'Claim'   group by 1   ), price as (   select     hour as date,   	price   from ethereum.token_prices_hourly   where symbol = 'ENS' ), final as (   select    	claims.date as date,   	claims.amount as amount,   	price.price as price   from claims   left join price using (date) ) select * from final
7684d095-dd70-446d-b4d4-c56d3f10e4ed,Untitled Query,
163dafec-4af2-4803-abe5-54d4875dcd95,Signers by Acount Name,with    sweat_receivers as ( select   tx_receiver,   'sweat' as account_label,   min(block_timestamp) as first_reciept_date from near.core.fact_transactions   where tx_status = 'Success'   and block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_signer = 'sweat_welcome.near' group by 1,2 ), append_label as (   select     block_timestamp,     tx_signer,     coalesce(account_label, 'something else') as account_label   from near.core.fact_transactions t   left join sweat_receivers s on t.tx_signer = s.tx_receiver   where block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_status = 'Success' ) select   date_trunc('month',block_timestamp) as "Month",   iff(tx_signer ilike '%.near', '.near', account_label) as account_label,   count(distinct tx_signer) as "Count Tx Signers" from append_label group by 1,2
163a77af-245f-4cb1-b494-793e3ea8063c,MATIC Stablecoin Bridge Volume - dup check [P1],WITH stables AS ( SELECT   block_timestamp as date,   contract_name as coin,   CASE -- tether and usdc = 6, dai and ust = 18 decimals     WHEN contract_name = 'Tether USD' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)      WHEN contract_name = 'Tether USD' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6) -- why 2 ways? this is annoying   	WHEN contract_name = 'USD Coin' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)   	WHEN contract_name = 'USD Coin' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,18)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:wad IS NOT NULL THEN event_inputs:wad::float / pow(10,18)     WHEN contract_name = 'Wrapped UST' THEN event_inputs:value::float / pow(10,18)   END AS amount,   tx_id FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'Transfer'   AND contract_name IN ('Multi-collateral DAI', 'Wrapped UST', 'Tether USD', 'USD Coin')   AND tx_succeeded = 'TRUE'   AND block_timestamp > CURRENT_DATE - INTERVAL '4 months' ORDER BY 1, 4) SELECT   date_trunc('day', date) as date,   count(*),   count(distinct tx_id) FROM stables GROUP BY 1 ORDER BY 1
51f72f99-19fc-4015-9df7-4ad7e57dc3ea,2023-08-23 10:01 AM,select * from flow.core.fact_events where event_type = 'SetMetadataUpdated' and event_contract = 'A.329feb3ab062d289.UFC_NFT'
166678a6-0bef-4f20-90d6-13c629070e8d,Flow: Token Supply copy,-- forked from captncrunch / Flow: Token Supply @ https://flipsidecrypto.xyz/captncrunch/q/2023-04-29-08-35-am-aKkDuK  with token_supply as ( select    block_timestamp,   event_data:amount::float as value,   'mint' as inflation_source from flow.core.fact_events where event_type like 'TokensMinted' and event_contract = 'A.1654653399040a61.FlowToken' and tx_succeeded = 'true' ), final as ( select    date_trunc('month', block_timestamp) as _time,   inflation_source,   round(sum(value), 2) as total_supply from token_supply group by 1,2 ) select   _time,   inflation_source,   total_supply,   sum(total_supply) over (partition by inflation_source order by _time) as cumulative_inflation from final order by 1,2
bc85dc0a-d17a-4b79-934f-4461a22a9ae1,2023-08-23 09:46 AM,select   event_type,   count(1) as events,   count(distinct tx_id) as txs,   any_value(event_data) as example,   min(array_size(object_keys(event_data))) as min_object_size,   max(array_size(object_keys(event_data))) as max_object_size from   flow.core.fact_events WHERE   event_contract in (     -- 'A.e06a203a98ba7633.UFC_FAN_NFT',     'A.329feb3ab062d289.UFC_NFT'   ) group by   1
165ee369-408d-47c5-94e4-d411d089536a,MATIC Stablecoin Bridge Volume - check [P1],SELECT   block_timestamp as date,   contract_name as coin,   CASE -- tether and usdc = 6, dai and ust = 18 decimals     -- WHEN contract_name = 'Tether USD' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)     -- WHEN contract_name = 'Tether USD' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)   	WHEN contract_name = 'USD Coin' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)   	WHEN contract_name = 'USD Coin' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)     -- WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,18)     -- WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:wad IS NOT NULL THEN event_inputs:wad::float / pow(10,18)     -- WHEN contract_name = 'Wrapped UST' THEN event_inputs:value::float / pow(10,18)   END AS amount,   tx_id FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'Transfer'   AND contract_name =  'USD Coin' ORDER BY tx_id LIMIT 10000
1702d163-35b6-4326-bc6e-5f24829fef8d,query 5,with eth_txns as ( SELECT   matic_value as value_matic, block_number, block_timestamp FROM   polygon.core.fact_transactions WHERE   matic_value > 0   AND block_timestamp > dateadd(day, -30, current_timestamp)   AND status = 'SUCCESS' ) SELECT     SUM(CASE WHEN value_matic * price_close < 100 THEN value_matic * price_close ELSE 0 END) AS less_than_usd_100,     SUM(CASE WHEN value_matic * price_close BETWEEN 100 AND 500 THEN value_matic * price_close ELSE 0 END) AS usd_100_to_500,     SUM(CASE WHEN value_matic * price_close BETWEEN 501 AND 1000 THEN value_matic * price_close ELSE 0 END) AS usd_501_to_1000,     SUM(CASE WHEN value_matic * price_close BETWEEN 1001 AND 5000 THEN value_matic * price_close ELSE 0 END) AS usd_1001_to_5000,     SUM(CASE WHEN value_matic * price_close BETWEEN 5001 AND 10000 THEN value_matic * price_close ELSE 0 END) AS usd_5001_to_10000,     SUM(CASE WHEN value_matic * price_close BETWEEN 10001 AND 50000 THEN value_matic * price_close ELSE 0 END) AS usd_10001_to_50000,     SUM(CASE WHEN value_matic * price_close BETWEEN 50001 AND 100000 THEN value_matic * price_close ELSE 0 END) AS usd_50001_to_100000,     SUM(CASE WHEN value_matic * price_close BETWEEN 100001 AND 500000 THEN value_matic * price_close ELSE 0 END) AS usd_100001_to_500000,     SUM(CASE WHEN value_matic * price_close BETWEEN 500001 AND 1000000 THEN value_matic * price_close ELSE 0 END) AS usd_500001_to_1000000,     SUM(CASE WHEN value_matic * price_close > 1000000 THEN value_matic * price_close ELSE 0 END) AS greater_than_usd_1000000 FROM eth_txns LEFT JOIN     (SELECT hour, price as price_close from ethereum.core.fact_hourly_token_prices          WHERE hour > dateadd(day, -30, current_timestamp)   		and symbol = 'MATIC') AS prices      on date_trunc('h',eth_txns.block_timestamp) = hour
af3c7fec-3de9-4bea-bada-7e32dd7d7a26,Check,select * from information_schema.databases; select * from <database>.information_schema.tables; select * from solana.information_schema.schemata; select * from ethereum.information_schema.schemata; select * from SNOWFLAKE$GDS.information_schema.tables; select * from SNOWFLAKE$GDS.information_schema.APPLICABLE_ROLES; use role velocity_internal; show grants on role velocity_internal; show grants on role velocity_ethereum; use role velocity_ethereum; select * from LIVEQUERY.information_schema.schemata; select * from mdao_harmony.information_schema.schemata select * from mdao_harmony.information_schema.tables select * from mdao_harmony.prod.TOKENS limit 10 drop view mdao_harmony.prod.tokens; show grants on view mdao_harmony.prod.tokens insert into mdao_harmony.prod.TOKENS values (   '0xABC',   'token name this is fake',   'fake',   12 ) create view mdao_harmony.dev.tokens_too as select * from mdao_harmony.prod.tokens; SELECT * FROM table(result_scan(last_query_id())) limit 10;
77aa1533-ff93-4328-9a0e-8e3528fe7ea2,Daily sum of deposits [T32],WITH withdraw AS (SELECT  	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount - redemption_amount as daily_change,   SUM(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date) as cumulative_deposits FROM   (SELECT     	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1
09454803-9a25-4a2e-aba0-43fb1e2ae2a4,Untitled Query,
af35667a-70c2-4626-b9cc-2e99e7487a53,Copy of Flow NFT CPI,with flowsales as (   select    	date_trunc('h', block_timestamp) as _date,     currency,     nft_collection,     price   from flow.core.fact_nft_sales   where currency = 'A.1654653399040a61.FlowToken'   ), flowprice as (   select    	date_trunc('h', timestamp) as _date,     avg(price_usd) as hourly_price   from flow.core.fact_prices   where timestamp >= '2022-04-20'   	and token = 'Flow'   group by 1 ), adj_flowsales as (   select     s._date,     currency,     nft_collection,     price,     hourly_price as flow_price,     price * hourly_price as price_usd   from flowsales s     left join flowprice p using (_date)   ), dollarsales as (   select * from flow.core.fact_nft_sales   where currency != 'A.1654653399040a61.FlowToken' ), tbl_union as (   select     _date,     currency,     nft_collection,     price_usd as price   from adj_flowsales   union   select     block_timestamp as _date,     currency,     nft_collection,     price   from dollarsales   ) select    date_trunc('day', _date) AS sale_date,   split_part(nft_collection, '.', 3) AS collection_name,   MEDIAN(price) AS median_price,   AVG(price) AS mean_price,   min(price) AS min_price,   max(price) AS max_price,   sum(price) AS total_volume,   count(1) as total_sales from tbl_union group by 1, 2, 3 order by 1, 2, 3;
d2b6d961-2eb5-4d36-9f5e-3f2ea828edaf,2024-02-20 04:50 PM,
1b1d9e03-547e-4732-be0c-4fca6cf4fb0b,Atlas - Top Apps,with  transactions as (   select block_timestamp, tx_receiver, tx_signer, tx_hash from near.core.fact_transactions where block_timestamp >= current_date() - interval '180 day' ), first_transactions as (   select tx_signer as wallet, min(block_timestamp) as first_tx    from near.core.fact_transactions    where block_timestamp >= current_date() - interval '60 days'   group by 1 ), past_days as (   select      CASE         WHEN tr.tx_receiver IN ('token.sweat','tge-lockup.sweat','e589457354361489a89039b8be6737cbc2db4d13919b6ccf23889a60f3b0d8f3','ccb91e1db61e8d7e1d4ae3e043001140132959a86ee35a548b6563a46284a6ea','staking-pool.sweatmint.near') THEN 'Sweat Economy'        WHEN tr.tx_receiver = 'embr.playember_reserve.near' THEN 'Play Ember'        WHEN tr.tx_receiver LIKE '%fewandfar.near' THEN 'Few and Far'        WHEN tr.tx_receiver in ('tickets.stlb.near', 'collectables.stlb.near', 'token.stlb.near') THEN 'SeatLab'        WHEN tr.tx_receiver in ('social.near') THEN 'NEAR Social'        WHEN tr.tx_receiver in ('app.nearcrowd.near','mdteam.near') THEN 'NEAR Crowd'        WHEN tr.tx_receiver in ('login.learnclub.near','referralnft.learnclub.near','redeem.learnclub.near','referral.learnclub.near', 'learnernft.learnclub.near') THEN 'Learn NEAR Club'        WHEN tr.tx_receiver in ('boostfarm.ref-labs.near','token.v2.ref-finance.near','v2.ref-finance.near','xtoken.ref-finance.near', 'v2.ref-farming.near', 'dclv2.ref-labs.near') THEN 'REF'        WHEN tr.tx_receiver in ('marketplace.paras.near','x.paras.near','token.paras.near','staking.paras.near') THEN 'Paras'        WHEN tr.tx_receiver LIKE '%.factory.bridge.near' THEN 'Rainbow Bridge'        WHEN tr.tx_receiver LIKE '%.pool%' THEN 'Staking Pools'        WHEN tr.tx_receiver in ('5c33c6218d47e00ef229f60da78d0897e1ee9665312550b8afd5f9c7bc6957d2','d73888a2619c7761735f23c798536145dfa87f9306b5f21275eb4b1a7ba971b9',                             '4b8a5f175fe1df178782f8c28ef71ad55363b5eddee1b525574fec447ff8a96c','1e6ef8464ce09f96c6fc22583ead00fa0b65119128daa9732366d2a2e856e960',                             '423df0a6640e9467769c55a573f15b9ee999dc8970048959c72890abf5cc3a8e','d93f6f23f55e5a4723e4c4dd063233947bb124d58ef948f6fab04a582e046c00',                             '2937e06f4ef2ad010c922bf7527cdaa9070a202a29f416f02f0138af2f3a9b72') THEN 'Exchanges'        WHEN tr.tx_receiver in ('wrap.near') THEN 'Wrapped NEAR'        WHEN tr.tx_receiver in ('spot.spin-fi.near','v2_0_2.perp.spin-fi.near','v1.vault.spin-fi.near') THEN 'SPIN'        WHEN tr.tx_receiver in ('asset-manager.orderly-network.near') THEN 'Orderly'        WHEN tr.tx_receiver in ('jumptoken.jumpfinance.near','jumphunter.near','nftstaking.jumpfinance.near','lockedjumptoken.jumpfinance.near','xjumptoken.jumpfinance.near', 'launchpad.jumpfinance.near') THEN 'Jump Finance'        WHEN tr.tx_receiver in ('canvas-war.feiyu.near') THEN 'Feiyu'        WHEN tr.tx_receiver in ('token.v1.realisnetwork.near') THEN 'Realis Network'        WHEN tr.tx_receiver in ('ftv2.nekotoken.near','stake.nekotoken.near') THEN 'Neko'        WHEN tr.tx_receiver in ('meta-pool.near','meta-token.near') THEN 'Metapool'        WHEN tr.tx_receiver in ('storage.herewallet.near', 'nft.herewallet.near') THEN 'HERE Wallet'        WHEN tr.tx_receiver in ('contract.main.burrow.near','token.burrow.near') THEN 'Burrow'        WHEN tr.tx_receiver in ('v2-nearx.stader-labs.near') THEN 'Stader'        WHEN tr.tx_receiver in ('linear-protocol.near') THEN 'LiNEAR'        WHEN tr.tx_receiver = 'mintbus.near' or tr.tx_receiver like '%mintbase%' THEN 'Mintbase'        WHEN tr.tx_receiver in ('token.pembrock.near','v1.pembrock.near','rewards.v1.pembrock.near') THEN 'Pembrock'        WHEN tr.tx_receiver in ('fusotao.octopus-registry.near') THEN 'Octopus'        WHEN tr.tx_receiver in ('zomland.near','ft.zomland.near') THEN 'Zomland'        WHEN tr.tx_receiver in ('%.playible.near') THEN 'Playible'        WHEN tr.tx_receiver in ('app.l2e.near','gold.l2e.near') THEN 'Land 2 Empire'        WHEN tr.tx_receiver in ('usdt.tether-token.near') THEN 'USDT'        WHEN tr.tx_receiver in ('devgovgigs.near') THEN 'devgovgigs'        WHEN tr.tx_receiver in ('citizen.bodega-lab.near') THEN 'Bodega Lab'        WHEN tr.tx_receiver in ('bearversegame_wallet.near') THEN 'Beavers'        WHEN tr.tx_receiver in ('app-rewards.lazyfi-wallet.near.near','app-rewards.lazyfi-wallet.near') THEN 'LazyFI'        WHEN tr.tx_receiver in ('market.tradeport.near') THEN 'TradePort'        WHEN tr.tx_receiver in ('bvrs_the_last_winter.near') THEN 'Bearverse'        WHEN tr.tx_receiver in ('token.cheddar.near') THEN 'Cheddar Farm'        WHEN tr.tx_receiver in ('pixeltoken.near') THEN 'Cryptoheroes'        WHEN tr.tx_receiver in ('artex.marbledao.near','dex.marbledex.near','farming.marbledex.near') THEN 'Marble DAO'        WHEN tr.tx_receiver in ('phoenix-bonds.near') THEN 'Phoenix Bonds'        WHEN tr.tx_receiver in ('token.dangelfund.near') THEN 'dAngel Fund'        WHEN tr.tx_receiver in ('asac.marketplaces.near') THEN 'ASAC'        WHEN tr.tx_receiver in ('token.elcafecartel.near','staking.elcafecartel.near') THEN 'El Cafe Cartel'        WHEN tr.tx_receiver in ('launchpad.bocachica_mars.near') THEN 'Boca Chica'        WHEN tr.tx_receiver in ('megapont.marketplaces.near') THEN 'Megapont'        WHEN tr.tx_receiver in ('Bitverse_games.near') THEN 'Bitverse'        when tr.tx_receiver in ('pack_minter.basketball.playible.near', 'game.basketball.playible.near', 'athlete.promotional.basketball.playible.near', 'pack.promotional.basketball.playible.near', 'open_pack.promotional.baskbetball.playible.near', 'pack_minter.playible.near', 'open_pack.nfl.playible.near', 'pack.pack_minter.playible.near', 'athlete.nfl.playible.near', 'game.nfl.playible.near', 'athlete.promotional.nfl.playible.near', 'pack.promotional.nfl.playible.near', 'open_pack.promotional.nfl.playible.near') then 'Playible' 	   when tr.tx_receiver = 'raigarh_x_airchains.near' then 'Forest Aadhar' 	   when tr.tx_receiver = 'sankalp_taru_zk.near' then 'Sankalpataru' 	   when tr.tx_receiver = 'zupple_hpcl.near' then 'HPCL' 	   when tr.tx_receiver in ('thelittles.near', 'stars.thelittles.near', 'prizes.thelittles.near') then 'The Little' 	   when tr.tx_receiver in ('dock-sailgp.near', 'nft.dock-sailgp.near') then 'SailGP' 	   when tr.tx_receiver in ('clashrowtoken.near', 'nft.clashrow.near') then 'Hamthor' 	   when tr.tx_receiver = 'jungly-smartcontract-nft.near' then 'Nestle Jungly' 	   when tr.tx_receiver = 'dropt.wallets.fewandfar.near' then 'Dropt' 	   when tr.tx_receiver = 'stacksports.near' then 'StackSports' 	   when tr.tx_receiver = 'rownd.near' then 'Rownd'        when tr.tx_receiver = 'arterra.near' then 'Arterra Labs' 	   when tr.tx_receiver in ('main.arkana.near', 'u.arkana.near') then 'Arkana by Paras' 	   when tr.tx_receiver in ('fractal.i-am-human.near', 'registry.i-am-human.near') then 'I-AM-HUMAN'  	   when tr.tx_receiver in ('dragon.recurforever.near', 'recur.recurforever.near', 'papaya.recurforever.near', 'pear.recurforever.near', 'mango.recurforever.near', 'apple.recurforever.near', 'cherry.recurforever.near', 'cherry.recurforever.near') then 'Recur'        when tr.tx_receiver in ('wallet.kaiching', 'earn.kaiching','hotwallet.kaiching') then'Kai-Ching'        when tr.tx_receiver in ('earn.preprod-kaiching.near', 'wallet.preprod-kaiching.near') then 'Cosmose AI - Preprod'        when tr.tx_receiver like '%nearapac%' then 'NEAR APAC'        when tr.tx_receiver like '%hideyourcash%' then 'HideYourCash'        when tr.tx_receiver = 'starbox.herewallet.near' then 'HERE Wallet'        when tr.tx_receiver = 'app.coinflow.near' then 'Coinflow'        when tr.tx_receiver = '17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1' then 'USDC'        when tr.tx_receiver = 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near' then 'USDC.e'        when tr.tx_receiver  = 'anthropocene.seventhage.near' then 'Seventh Age'        when tr.tx_receiver in ('elections.ndc-gwg.near', 'nominations.ndc-gwg.near', 'devgovgigs') then 'NDC'        when tr.tx_receiver = 'fusotao-token.near' then 'Fustao'        when tr.tx_receiver like '%jumbo_exchange%' then 'Jumbo Exchange'        when right(tr.tx_receiver,5) <> '.near' THEN 'OTHER'        else tr.tx_receiver     end as "Contract Address",     count(distinct tr2.tx_hash) as "Total Transactions",     count(distinct case when tr.block_timestamp >= current_date - interval '30 Days' AND tr.block_timestamp < current_date THEN tr.tx_hash END) as "Transactions - 30 Days",     count(distinct case when tr.block_timestamp >= current_date - interval '30 days' and tr.block_timestamp < current_date then tr.tx_signer end) as "Past 30 Days",     count(distinct case when tr.block_timestamp >= current_date - interval '60 days' and tr.block_timestamp < current_date - interval '30 days' then tr.tx_signer end) as "30-60 Days Ago",     count(distinct case when first_tx >= current_date - interval '30 days' and first_tx < current_date then tr.tx_signer end) as "New MAAs",     count(distinct case when first_tx >= current_date - interval '60 days' and first_tx < current_date - interval '30 days'             and tr.block_timestamp >= current_date - interval '30 days' and tr.block_timestamp < current_date then tr.tx_signer end) as "Retained MAAs",     count(distinct case when first_tx >= current_date - interval '60 days' and first_tx < current_date - interval '30 days' then tr.tx_signer end) as "M2 New MAAs",     ((count(distinct case when tr.block_timestamp >= current_date - interval '24 hours' and tr.block_timestamp < current_date then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '48 hours' and tr.block_timestamp < current_date - interval '24 hours' then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '72 hours' and tr.block_timestamp < current_date - interval '48 hours' then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '96 hours' and tr.block_timestamp < current_date - interval '72 hours' then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '120 hours' and tr.block_timestamp < current_date - interval '96 hours' then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '144 hours' and tr.block_timestamp < current_date - interval '120 hours' then tr.tx_signer end)      + count(distinct case when tr.block_timestamp >= current_date - interval '168 hours' and tr.block_timestamp < current_date - interval '144 hours' then tr.tx_signer end)) / 7) as "Daily Average"     --sum(tr.fee) as "Tx Fee"   from transactions tr   join first_transactions b      on tr.tx_signer = b.wallet   left join transactions tr2     on tr.block_timestamp = tr2.block_timestamp   where tr.block_timestamp >= current_date - interval '90 days'     and tr.block_timestamp < current_date   group by 1 ), final as (select * from past_days union select    'Overall' as "Contract Address",   count(distinct tr.tx_hash) as "Total Transactions",   count(distinct case when tr.block_timestamp >= current_date - interval '30 Days' AND tr.block_timestamp < current_date THEN tr.tx_hash END) as "Transactions - 30 Days",   count(distinct case when tr.block_timestamp >= current_date - interval '30 days' and tr.block_timestamp < current_date then tx_signer end) as "Past 30 Days",   count(distinct case when tr.block_timestamp >= current_date - interval '60 days' and tr.block_timestamp < current_date - interval '30 days' then tx_signer end) as "30-60 Days Ago",   count(distinct case when first_tx >= current_date - interval '30 days' and first_tx < current_date then tx_signer end) as "new maas",      count(distinct case when first_tx >= current_date - interval '60 days' and first_tx < current_date - interval '30 days'           and tr.block_timestamp >= current_date - interval '30 days' and tr.block_timestamp < current_date then tx_signer end) as "retained maas",   count(distinct case when first_tx >= current_date - interval '60 days' and first_tx < current_date - interval '30 days' then tx_signer end) as "m2 new maas",      ((count(distinct case when tr.block_timestamp >= current_date - interval '24 hours' and tr.block_timestamp < current_date then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '48 hours' and tr.block_timestamp < current_date - interval '24 hours' then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '72 hours' and tr.block_timestamp < current_date - interval '48 hours' then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '96 hours' and tr.block_timestamp < current_date - interval '72 hours' then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '120 hours' and tr.block_timestamp < current_date - interval '96 hours' then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '144 hours' and tr.block_timestamp < current_date - interval '120 hours' then tx_signer end)    + count(distinct case when tr.block_timestamp >= current_date - interval '168 hours' and tr.block_timestamp < current_date - interval '144 hours' then tx_signer end)) / 7) as "daily average"   --sum(tr.fee) as "Tx Fee" from transactions tr join first_transactions b    on tr.tx_signer = b.wallet where tr.block_timestamp >= current_date - interval '90 days'   and tr.block_timestamp < current_date order by 2 desc limit 50) select       "Contract Address",        "Past 30 Days",       "30-60 Days Ago",       case when "30-60 Days Ago" > 0 then (("Past 30 Days"/"30-60 Days Ago"-1)*100)::decimal(18,2) else 0 end as "M/M",        "New MAAs",       case when "M2 New MAAs" > 0 then ("Retained MAAs"/ "M2 New MAAs" * 100)::decimal(18,2) else 0 end as "M2 Retention",        "Daily Average",       case when "Past 30 Days" > 0 then ("Daily Average"/"Past 30 Days" * 100)::decimal(18,2) else 0 end as "DAU / MAU",       "Total Transactions",       --"Tx Fee",       "Transactions - 30 Days",        CASE WHEN "Past 30 Days" > 0 THEN ("Transactions - 30 Days" / "Past 30 Days")::DECIMAL(18,2) ELSE 0 END AS "Avg Txn per MAU" from final order by 2 desc
538a03ef-848c-47fb-8c62-bcc5af0558d0,Untitled Query,
af75e5a3-21e6-4d9e-ac89-b9feb8fe13ce,Top Validators w names,-- SELECT * --   FROM    -- (SELECT  --   date, --   validator, --   voting_power / sum(voting_power) OVER (PARTITION BY date) as voting_pct -- FROM -- (SELECT --   date_trunc('week', block_timestamp) as date, --   address as validator, --   avg(voting_power) as voting_power -- FROM terra.validator_voting_power --   WHERE block_timestamp > GETDATE() - interval '1 month' -- GROUP BY 1, 2) sub -- ORDER BY 1, 3 desc) main -- LEFT JOIN ( --   SELECT distinct validator_address, --   validator_address_name --   from terra.staking ) c --   ON main.validator = c.validator_address -- WHERE main.voting_pct > .05 -- ORDER BY 1 asc, 3 desc select * from terra.transfers where event_to_label_subtype = 'validator' limit 100;
af9886b6-a6cc-4205-80d4-7fb63cef587c,Mattel NFT events,select   event_contract,   event_type,   count(distinct tx_id) as num_txs,   try_parse_json(max(event_data::string)) as example,   min(block_timestamp) as earliest_date from flow.core.fact_events where event_contract  in (   'A.d0bcefdf1e67ea85.HWGarageCard',   'A.d0bcefdf1e67ea85.HWGaragePM',   'A.d0bcefdf1e67ea85.HWGaragePack'   ) group by 1,2 order by 1, 3 desc
959e90ed-e241-47bc-9518-55aeddc2f10e,Terra Daily Active Wallets [Flash119],WITH daws AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct msg_value:sender) as unique_wallets   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL   GROUP BY 1   ) SELECT   date,   unique_wallets,   avg(unique_wallets) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM daws ORDER BY 1
70c0afa5-2fec-4c17-a7f2-bcf0cc2eaff9,Untitled Query,select     date_trunc('d',block_timestamp),     case      when _event_data_type:fields is null then 'is_null'     else 'is_not_null'     end as null_status,     count(1) from flow.silver.events where block_timestamp >= '2022-04-01' group by 1,2 order by 1;
9593990c-24bf-467a-a746-3f0928ee0181,Starbucks Odyssey,select * from polygon.core.ez_decoded_event_logs where tx_hash = '0x85e0aff68fd8219476357b7ae5f2f3b945ac5ee70d34a4eb9e18b841e3037aa6'
9596a16b-c70e-4273-906a-2ee99c3900a9,Terra - Unique Wallets Participating in Staking Events [Flash119],SELECT   date_trunc('day', block_timestamp) as date,   CASE     WHEN msg_type = 'distribution/MsgWithdrawDelegatorReward' THEN 'distribution/MsgWithdrawDelegationReward' -- label changes on 10/1 idk why     ELSE msg_type   END AS msg_type,   count(distinct msg_value:delegator_address) as unique_wallets FROM terra.msgs WHERE msg_value:delegator_address IS NOT NULL   -- AND block_timestamp > CURRENT_DATE - 30   AND msg_module != 'oracle'   AND msg_module != 'core' GROUP BY 1,2 ORDER BY 1,2
97f5bdb5-1118-4fc3-b268-7c0a57c39e84,2023-04-12 02:28 PM,select    block_id,   header:total_supply::int / pow(10,24) as total_supply from near.core.fact_blocks  order by block_id desc limit 10
934fe484-78b3-4404-9e31-f227e7c89ce8,Untitled Query,select * from    ethereum.core.fact_event_logs   -- ethereum.core.fact_traces   where tx_hash = '0x520df61bf4bbbdde7423381f0668f1d8b46648ebf4d329e881b01891fe17fc2e';
a52c760d-0a1c-4d50-b8bf-e8286db9dab6,2023-04-14 05:12 PM,select * from solana.core.fact_transactions limit 10
4f7a8352-44d8-4cae-989a-6eca2ed95a2b,Sales Overview copy,-- forked from alitaslimi / Sales Overview @ https://flipsidecrypto.xyz/alitaslimi/q/IMzQO--ED4RB/sales-overview  with ------------------------------ Gamma ------------------------------   gamma as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       transactions.outputs[1]:scriptPubKey:address AS buyer,       input3.pubkey_script_address AS seller,       transactions.outputs[2]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and input3.index = 2       and input4.index = 3       and input1.value = 0.000006       and input2.value = 0.000006       and outputs[0]:value = 0.000012       and input1.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input2.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input3.pubkey_script_address != transactions.outputs[0]:scriptPubKey:address       and (         transactions.outputs[3]:scriptPubKey:address = 'bc1qyylrgsxjrmaearjqqradhy8ferh4u0ydw4yuze'         or (           input3.pubkey_script_address = transactions.outputs[2]:scriptPubKey:address           and transactions.outputs[3]:scriptPubKey:address is null         )       )   ), ------------------------------ Magic Eden ------------------------------   magic_eden as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       transactions.outputs[1]:scriptPubKey:address AS buyer,       input3.pubkey_script_address AS seller,       outputs[2]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id     where       transactions.block_number > 767429       and input3.index = 2       and input4.index = 3       and transactions.outputs[3]:scriptPubKey:address = 'bc1qcq2uv5nk6hec6kvag3wyevp6574qmsm9scjxc2'       and input4.pubkey_script_address = transactions.outputs[6]:scriptPubKey:address   ), ------------------------------ OKX ------------------------------   okx as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       input1.pubkey_script_address AS buyer,       input3.pubkey_script_address AS seller,       outputs[2]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and input3.index = 2       and input1.value = 0.000006       and input2.value = 0.000006       and input3.value = 0.00000546       and outputs[0]:value = 0.000012       and outputs[1]:value = 0.00000546       and outputs[3]:value = 0.000006       and outputs[4]:value = 0.000006       and input3.pubkey_script_address = transactions.outputs[2]:scriptPubKey:address   ), ------------------------------ Ordinals Market ------------------------------   ordinals_market as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       transactions.outputs[1]:scriptPubKey:address AS buyer,       input3.pubkey_script_address AS seller,       transactions.outputs[2]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and input3.index = 2       and input4.index = 3       and input1.value = 0.000006       and input2.value = 0.000006       and outputs[0]:value = 0.000012       and input1.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input2.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[4]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[5]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[6]:scriptPubKey:address       and transactions.outputs[3]:scriptPubKey:address = 'bc1p39tdzrddy5swrsf4ysu9k867283nhq754lnfhj23u543a72r60wsz8c74p'   ), ------------------------------ Ordinals Wallet ------------------------------   ordinals_wallet as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       input1.pubkey_script_address AS buyer,       input2.pubkey_script_address AS seller,       outputs[1]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and outputs[0]:value = 0.000006       and transactions.outputs[3]:scriptPubKey:address = 'bc1p6yd49679azsaxqgtr52ff6jjvj2wv5dlaqwhaxarkamevgle2jaqs8vlnr'       and input1.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address   ), ------------------------------ Ordswap ------------------------------   ordswap as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       input1.pubkey_script_address AS buyer,       input2.pubkey_script_address AS seller,       outputs[1]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and input3.index = 2       and input1.pubkey_script_address = input3.pubkey_script_address       and input2.pubkey_script_address = transactions.outputs[1]:scriptPubKey:address       and input3.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and transactions.outputs[3]:scriptPubKey:address = 'bc1psypqqyvsc64dngq4mlc4grwf5776x9snhz4stfvzdrztlafl46pqneup8x'   ), ------------------------------ UniSat ------------------------------   unisat as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       input4.pubkey_script_address AS buyer,       input3.pubkey_script_address AS seller,       outputs[2]:value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input1 on transactions.tx_id = input1.tx_id       join bitcoin.core.fact_inputs input2 on transactions.tx_id = input2.tx_id       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id     where       transactions.block_number > 767429       and input1.index = 0       and input2.index = 1       and input3.index = 2       and input4.index = 3       and input1.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input1.pubkey_script_address = transactions.outputs[3]:scriptPubKey:address       and input2.pubkey_script_address = transactions.outputs[0]:scriptPubKey:address       and input3.pubkey_script_address = transactions.outputs[2]:scriptPubKey:address       and input4.pubkey_script_address = transactions.outputs[1]:scriptPubKey:address       and input4.pubkey_script_address != transactions.outputs[0]:scriptPubKey:address   ), ------------------------------ Result ------------------------------   result as (     select       'Gamma' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       gamma     union     select       'Magic Eden' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       magic_eden     union     select       'OKX' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       okx     union     select       'Ordinals Market' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       ordinals_market     union     select       'Ordinals Wallet' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       ordinals_wallet     union     select       'Ordswap' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       ordswap     union     select       'UniSat' as "Marketplace",       count(distinct tx_id) as "Sales",       count(distinct buyer) as "Buyers",       count(distinct seller) as "Sellers",       sum(amount) as "Volume",       avg(amount) as "Price Average",       median(amount) as "Price Median",       max(amount) as "Price Max",       min(amount) as "Price Min"     from       unisat   ) select   sum("Sales") as "Total Sales",   sum("Buyers") as "Total Buyers",   sum("Sellers") as "Total Sellers",   sum("Volume") as "Total Volume",   avg("Price Average") as "Average Price",   avg("Price Median") as "Median Price",   avg("Price Max") as "Highest Price",   avg("Price Min") as "Lowest Price" from   result
3a4f822f-e949-48b9-bb63-3c14223a367b,Total NEAR Staked, Locked, Liquid, Circulating, Total Supply copy copy,-- forked from brian-terra / Total NEAR Staked, Locked, Liquid, Circulating, Total Supply copy @ https://flipsidecrypto.xyz/brian-terra/q/total-near-staked-locked-liquid-circulating-total-supply-Isu1do -- forked from Total NEAR Staked, Locked, Liquid, Circulating, Total Supply @ https://flipsidecrypto.xyz/edit/queries/931bf47c-283e-4f51-8153-a3128936b609 WITH   latest AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address       )   ),   month1 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '1 month'       )   ),   month2 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '2 month'       )   ),   month3 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '3 month'       )   ),   month4 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '4 month'       )   ),   month5 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '5 month'       )   ),   month6 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '6 month'       )   ),   month7 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '7 month'       )   ),   month8 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '8 month'       )   ),   month9 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '9 month'       )   ),   month10 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '10 month'       )   ),   month11 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '11 month'       )   ),   month12 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '12 month'       )   ),   month13 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '13 month'       )   ),   month14 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '14 month'       )   ),   month15 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '15 month'       )   ),   month16 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '16 month'       )   ),   month17 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '17 month'       )   ),   month18 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '18 month'       )   ),   month19 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '19 month'       )   ),   month20 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '20 month'       )   ),   month21 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '21 month'       )   ),   month22 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '22 month'       )   ),   month23 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '23 month'       )   ),   month24 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '24 month'       )   ),   total_staked as (     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       latest     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month1     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month2     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month3     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month4     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month5     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month6     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month7     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month8     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month9     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month10     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month11     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month12     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month13     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month14     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month15     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month16     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month17     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month18     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month19     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month20     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month21     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month22     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month23     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month24   ),   txns as (     select distinct       tx_hash     from       near.core.fact_transactions     where       tx_status = 'Success'       and (         tx_receiver = 'lockup.near'         or tx_signer = 'lockup.near'       )   ),   to_lockup as (     select       block_timestamp,       tx_hash,       action_id,       deposit * 1e-24 as deposit     from       near.core.fact_transfers     where       tx_receiver = 'lockup.near'       and action_id like '%-2'   ),   release_durations as (     select       a.block_timestamp,       a.tx_hash,       a.deposit,       b.args:lockup_duration / 86400 as lockup_duration_days,       b.args:lockup_timestamp::datetime as lockup_start,       b.args:release_duration / 86400 as release_duration_days,       b.args:vesting_schedule:VestingSchedule:start_timestamp::datetime as vesting_start,       b.args:vesting_schedule:VestingSchedule:end_timestamp::datetime as vesting_end     from       near.core.fact_actions_events_function_call b,       to_lockup a     where       a.tx_hash = b.tx_hash       and b.method_name = 'create'       and lockup_duration_days > (         CASE           WHEN vesting_start is null           AND release_duration_days is null THEN 1000           ELSE -1         END       )   ),   total_locked as (     select distinct       TO_CHAR(block_timestamp, 'MMMM YYYY') AS month,       date_trunc('month', block_timestamp) as mon,       sum(deposit) OVER (         order by           mon asc       ) as total_near_locked     from       to_lockup     order by       mon desc   ),   total_near_supply as (     select       date_trunc('month', block_timestamp) as mon,       total_supply * 1e-24 as total_supply     from       near.core.fact_blocks   ),   near_supply as (     select       TO_CHAR(mon, 'MMMM YYYY') AS month,       mon,       max(total_supply) as total_near     from       total_near_supply     group by       mon     order by       mon desc   ),   circu_supply as (     SELECT       '2021-07-01'::datetime AS mon,       'July 2021' AS month,       396757000 AS circ_supply     UNION ALL     SELECT       '2021-08-01'::datetime AS mon,       'August 2021' AS month,       422907000 AS circ_supply     UNION ALL     SELECT       '2021-09-01'::datetime AS mon,       'September 2021' AS month,       446336000 AS circ_supply     UNION ALL     SELECT       '2021-10-01'::datetime AS mon,       'October 2021' AS month,       472542000 AS circ_supply     UNION ALL     SELECT       '2021-11-01'::datetime AS mon,       'November 2021' AS month,       531339000 AS circ_supply     UNION ALL     SELECT       '2021-12-01'::datetime AS mon,       'December 2021' AS month,       568848000 AS circ_supply     UNION ALL     SELECT       '2022-01-01'::datetime AS mon,       'January 2022' AS month,       602419000 AS circ_supply     UNION ALL     SELECT       '2022-02-01'::datetime AS mon,       'February 2022' AS month,       630769000 AS circ_supply     UNION ALL     SELECT       '2022-03-01'::datetime AS mon,       'March 2022' AS month,       643424000 AS circ_supply     UNION ALL     SELECT       '2022-04-01'::datetime AS mon,       'April 2022' AS month,       660441000 AS circ_supply     UNION ALL     SELECT       '2022-05-01'::datetime AS mon,       'May 2022' AS month,       676076000 AS circ_supply     UNION ALL     SELECT       '2022-06-01'::datetime AS mon,       'June 2022' AS month,       703648000 AS circ_supply     UNION ALL     SELECT       '2022-07-01'::datetime AS mon,       'July 2022' AS month,       725911000 AS circ_supply     UNION ALL     SELECT       '2022-08-01'::datetime AS mon,       'August 2022' AS month,       751801000 AS circ_supply     UNION ALL     SELECT       '2022-09-01'::datetime AS mon,       'September 2022' AS month,       775580000 AS circ_supply     UNION ALL     SELECT       '2022-10-01'::datetime AS mon,       'October 2022' AS month,       799891000 AS circ_supply     UNION ALL     SELECT       '2022-11-01'::datetime AS mon,       'November 2022' AS month,       818414000 AS circ_supply     UNION ALL     SELECT       '2022-12-01'::datetime AS mon,       'December 2022' AS month,       833208000 AS circ_supply     UNION ALL     SELECT       '2023-01-01'::datetime AS mon,       'January 2023' AS month,       848718000 AS circ_supply     UNION ALL     SELECT       '2023-02-01'::datetime AS mon,       'February 2023' AS month,       853199000 AS circ_supply     UNION ALL     SELECT       '2023-03-01'::datetime AS mon,       'March 2023' AS month,       864484000 AS circ_supply     UNION ALL     SELECT       '2023-04-01'::datetime AS mon,       'April 2023' AS month,       883626000 AS circ_supply   ),   circ as (     select       mon,       month,       circ_supply as circulating_supply     from       circu_supply     order by       circulating_supply desc   ) select   date,   a.month,   total_staked as staked,   total_near - circulating_supply as locked,   circulating_supply - total_staked as liquid,   circulating_supply as circulating,   total_near as total_supply from   total_staked a,   near_supply c,   circ d where   a.month = c.month   and c.month = d.month
b0a30572-4748-4fe3-a32d-d57f124b5183,T19 query 1,-- SELECT * -- FROM terra.daily_balances --   WHERE date like '2021-07-15%' --   AND balance_usd > 0 --   order by balance_usd desc --   limit 20; select distinct address_label, address from terra.daily_balances
3b35b699-3046-4d0c-b3c1-7475d6056ab3,Corn Blocks/Txs,with   daily_metrics as (     select       date_trunc('day', block_timestamp) as _date,       count(distinct block_number) as blocks,       sum(tx_count) as txs     from       bitcoin.core.fact_blocks     group by       1   ) select   _date,   sum(blocks) over (     order by       _date rows between 6 preceding       and current row   ) as blocks_wma,   sum(txs) over (     order by       _date rows between 6 preceding       and current row   ) as txs_wma from   daily_metrics order by   1
95aca0c2-e1cd-4347-9e42-10ac6f59117c,T19 Mirror Sell volume,select   date_trunc('day', block_timestamp) as date,   l.address_name,   sum(event_attributes:return_amount::float) / pow(10,6) as gross_sell_volume from terra.msg_events LEFT JOIN terra.labels l   ON event_attributes:offer_asset = l.address WHERE tx_status = 'SUCCEEDED' 	AND event_type = 'from_contract'   	AND event_attributes:ask_asset != ''   	AND block_timestamp > GETDATE() - interval '3 months'   	-- buy transactions are marked as 'swap' under the main action of the from_contract message   	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)   	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract   	-- AND event_attributes:"0_action" = 'send'   	-- exclude non-mirror tokens   	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST') group by 1, 2 order by 1, 3 desc
19db395a-4d49-41e2-837c-d972a8b2d528,Burn Portal (May 10-16) Challenge Burns copy copy,-- forked from kellen / Burn Portal (May 10-16) Challenge Burns copy @ https://flipsidecrypto.xyz/kellen/q/burn-portal-may-10-16-challenge-burns-7Q98CK  -- forked from Diamond / Burn Portal (May 10-16) Challenge Burns @ https://flipsidecrypto.xyz/Diamond/q/burn-portal-may-10-16-premium-unlock-hA9yfW    -- May 10-16 Playbook, Common Burn Tracker WITH   updated_metadata AS (     SELECT       nft_id as "ID",       --moment_stats_full['ID'] AS "unique_id",       CASE         WHEN player = 'N/A' THEN team         ELSE player       END AS "Player",       team as "Team",       series as "Series",       set_name AS "Set Name",       moment_stats_full['flowID'] AS "marketplace_id",       moment_tier AS "Tier",       SERIAL_NUMBER AS "Serial #"     FROM       flow.core.dim_allday_metadata   ),   burn as (     SELECT       block_timestamp as "Date",       tx_id as "tx",       y.*     FROM       flow.core.fact_events x       LEFT join updated_metadata y on x.event_data:id::STRING = y."ID"     WHERE       event_contract = 'A.e4cf4bdc1751c65d.AllDay'       AND event_type = 'MomentNFTBurned'       and block_timestamp::date >= '2023-05-09'     order by       1 desc   ) SELECT    "Player",   "ID",   "tx",   "Team",   "Series",   "Set Name",   "Serial #",   "Tier",   ("Date") as "🔥 Burned Timestamp (UTC)" from   burn WHERE "tx" = 'e94a9aab50c2113cbcd71a03d24c716d2bd13b59e438e14a27df168fb1691d82' -- WHERE --   "Tier" in ('COMMON') -- group by --   1, --   2, --   3, --   4, --   5, --   6 order by   7 desc limit   5000
1a2514be-cbc4-4b4c-a485-6abf639dec19,LOTA buy price,-- Buying LOTA with UST SELECT   date_trunc('hour', block_timestamp) as date,   avg(ust/lota) as avg_sell_price FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as lota FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token ) GROUP BY 1 ORDER BY 1
51da75e7-4dac-40a6-87f0-7546d47e0d1c,Swaps by Hour, by Pool - TOP Tokens ex stable (UTC) [THOR8],SELECT   extract(hour from block_timestamp) as hour,   pool_name,   sum(from_amount_usd) as volume FROM thorchain.swaps WHERE block_timestamp > '2021-10-03T00:00:00Z'   AND pool_name IN ('BTC.BTC', 'ETH.ETH', 'BNB.BNB', 'BNB.BTCB-1DE', 'BNB.ETH-1C9') GROUP BY 1, 2  ORDER BY 1, 3 desc
a2478e62-91e6-4a14-a885-95b8393c8a76,THOR Hunt - Swap,SELECT * FROM thorchain.swap_events WHERE tx_id = '0F5897F8BDA5734D81D22C3FE004E513D79ED043791C71F03E193049D89C2F8F'
a25fb296-a693-48a4-a7f3-f0b09c85951a,Polygon Hunt December 2021,SELECT *  FROM polygon.transactions WHERE lower(tx_id)=lower('0x0adb56f3869c65d737cd4d446fcc564d9dd3254bf8b04bb5d2c505d369c719e2');
bbcdafbf-142f-4ecd-8d90-36a18384e392,April liquidations,-- PULL LIQUIDATION TX IDS AND THEIR MESSAGES WITH liquid as (   SELECT distinct tx_id   FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%'   AND tx_status = 'SUCCEEDED'   AND block_timestamp > '2021-04-01T00:00:00Z'   AND block_timestamp < '2021-04-30T00:00:00Z'   ) SELECT * FROM terra.msg_events a RIGHT JOIN liquid ON liquid.tx_id = a.tx_id WHERE block_timestamp > '2021-04-01T00:00:00Z'   AND block_timestamp < '2021-04-30T00:00:00Z' ORDER BY 2, 5
52f46745-62c3-44d5-b9f0-cdb76fe36d27,Liquidity Rewards by Pool ANNUALIZED [THOR7],-- liquidity fee by pool WITH liquidity_fee AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     sum(liq_fee_in_rune_e8) / pow(10,8) as liq_fee_rune   FROM thorchain.swap_events   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1, 2   ), -- rune rewards by pool total_pool_rewards AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     sum(rune_e8) / pow(10,8) as rewards_rune   FROM thorchain.rewards_event_entries   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1,2 ), total_liquidity_rewards AS (   SELECT     liquidity_fee.date as date,     liquidity_fee.pool_name as pool_name,     liq_fee_rune + rewards_rune as liquidity_reward -- note: in rune   FROM liquidity_fee   LEFT JOIN total_pool_rewards     ON (liquidity_fee.pool_name = total_pool_rewards.pool_name       AND liquidity_fee.date = total_pool_rewards.date)   ), pool_depth AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     avg(rune_e8 / pow(10,8)) as rune_amount,     avg(asset_e8 / pow(10,8)) as asset_amount,     rune_amount * 2 as est_gross_rune   FROM thorchain.block_pool_depths   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1, 2 ), yield AS (   SELECT      pool_depth.date as date,     pool_depth.pool_name as pool_name,     est_gross_rune,     liquidity_reward,     liquidity_reward / est_gross_rune as daily_return,     (pow((liquidity_reward / est_gross_rune) + 1, 365) - 1) * 100 as annual_return        FROM pool_depth   JOIN total_liquidity_rewards     ON (pool_depth.date = total_liquidity_rewards.date       AND pool_depth.pool_name = total_liquidity_rewards.pool_name)   ORDER BY 1, 5 desc   ) -- final query SELECT   date,   pool_name,   est_gross_rune as pool_depth,   liquidity_reward,   annual_return,   avg(annual_return) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as annualized_yield_ma FROM yield ORDER BY 1, 3 desc
be490d35-cff7-43aa-a9bb-959d83506b8d,LUNA liquidations around mayday [T49],SELECT   date_trunc('day', block_timestamp),   sum(event_attributes:"0_amount"::float) / pow(10,6) as amount_liquidated,   sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as repay_amount FROM terra.msg_events WHERE event_type = 'from_contract'   AND event_attributes:"0_action" LIKE '%liquidate_collateral%'   AND block_timestamp > '2021-05-16T23:59:59Z'   AND block_timestamp < '2021-05-24T23:59:59Z'   AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1
bd137a12-9165-4083-8229-94e6c651f828,Copy of UST Peg on Ethereum, from Swaps [2],with ust_in as ( select   block_number,   tx_hash,   amount_out_usd / (amount_in / pow(10,6)) as ust_price    from ethereum_core.ez_dex_swaps where token_in = '0xa693b19d2931d498c5b318df961919bb4aee87a5'   and block_timestamp > current_date - 3 ), ust_out as (   select     block_number,     tx_hash,     amount_in_usd / (amount_out / pow(10,6)) as ust_price        from ethereum_core.ez_dex_swaps   where token_out = '0xa693b19d2931d498c5b318df961919bb4aee87a5'     and block_timestamp > current_date - 3    ), combo as (   select * from ust_in   union   select * from ust_out    ), agg as ( select   block_number,   avg(ust_price) as ust_price from combo where block_number >= 14726564 -- first block on 5/7 UTC group by 1 ), add_date as (   select   	a.block_number,   	a.ust_price,   	b.block_timestamp   from agg a   	left join ethereum_core.fact_blocks b using (block_number) ) select * from add_date   where ust_price < 3 -- exclude outliers order by 1 -- first on 5/7: 14726564 -- last on 5/8: 14739154
ce3dc298-6af0-40d5-bbbf-38e3558f93fc,Untitled Query,
10aa23e0-9d03-4fe6-b7eb-8b0974335778,6 mo. daily USD balance - all tokens,SELECT 	DATE, 	CURRENCY, 	SUM(BALANCE) as native_balance, 	SUM(BALANCE_USD) as usd_balance FROM terra.daily_balances WHERE DATE > GETDATE() - interval '6 months' GROUP BY 1,2 ORDER BY 1,4 desc
0196fa71-0012-418a-b512-62a4d9b13086,Untitled Query,-- select -- 	date_trunc('d', block_timestamp) as _date, -- 	count(txn_hash) as txns -- from mdao_near.transactions -- group by 1 -- order by 1 select * from mdao_near.metrics_daily_gas
bda5a578-6af3-4d86-943e-6894aec525f7,topshot,with transactions as (select * from flow.core.ez_nft_sales where marketplace IN ('A.c1e4f4f4c4257510.TopShotMarketV3', 'A.c1e4f4f4c4257510.Market') and TX_SUCCEEDED = 'TRUE' ),    volume as ( select nft_id, sum(price::numeric) as total_volume from transactions  group by 1)      , joined as ( select a.nft_id as id, a.total_volume as total_volume, b.* from volume as a   left join (select * from flow.core.dim_topshot_metadata) as b  on a.nft_id = b.nft_id), final as (select player, sum(total_volume) as total_volume from joined  -- where substring(player,1,9) LIKE ('Shaquille') group by 1 order by total_volume desc) select *   from final  -- where player <> ''  -- order by 2 desc
2376354a-afe0-412a-9d88-ac8733ef1b8f,Beer is NEAR, Aggregations by Customer,WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE >= '2022-09-11' ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE >= '2022-09-11' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE >= '2022-09-11'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE >= '2022-09-11'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ), aggs as ( 	select 		spender,   		count(1) as "Total Sales",   		sum(deposit_amount_usd) as "Gross Volume, EUR"   from final   group by 1 ) select * from aggs
c883e647-bc2e-4c10-a833-350105e0c268,UST on Astroport with CMC Data [2],with astro as (     select         a.address,         address_name as symbol,         label,         label_subtype,         label_type     from        (select         distinct return_currency as address     from astroport.swaps) a         left join terra.labels using (address)     where address_name is not null ), prices as (   select       p.recorded_at as _date,       p.symbol,       p.price as price_usd,       l.address as currency   from FLIPSIDE_PROD_DB.SILVER.PRICES_V2 p       left join astro l using (symbol)   where p.symbol in (select symbol from astro)   and (platform:name = 'Terra' or (symbol = 'LUNA' and name = 'Terra'))   and _date >= '2022-05-07' ),    -- sells ust_ask as (   select    	date_trunc('minute', block_timestamp) as _date,   	offer_amount,     offer_currency as currency,     return_amount -- token 1 is ask   from astroport.swaps   where return_currency = 'uusd'     and block_timestamp >= '2022-05-07' ), ask_prices as (   select   	u._date,   	offer_amount,   	currency,   	return_amount,   	price_usd,   	(offer_amount * price_usd) / return_amount as ust_p   from ust_ask u   left join prices using (_date, currency) ), ask_agg as (      select   	time_slice(_date, 10, 'minute') as _date,   	avg(ust_p) as ust_ask_swap_price   from ask_prices   group by 1 ), -- buys ust_offer as (   select    	date_trunc('minute', block_timestamp) as _date,   	offer_amount,     return_currency as currency,     return_amount   from astroport.swaps   where offer_currency = 'uusd'     and block_timestamp >= '2022-05-07' ), offer_prices as (   select   	o._date,   	offer_amount,   	currency,   	return_amount,   	price_usd,   	(return_amount * price_usd) / offer_amount as ust_p   from ust_offer o   left join prices using (_date, currency) ),    offer_agg as (      select   	time_slice(_date, 10, 'minute') as _date,   	avg(ust_p) as ust_offer_swap_price   from offer_prices   group by 1 ), combo as (   select   	a._date,   	a.ust_ask_swap_price,   	o.ust_offer_swap_price   from ask_agg a   left join offer_agg o    	using (_date)    ) select * from combo   where ust_ask_swap_price < 2 and ust_offer_swap_price < 2 order by 1
593c0332-fe30-410c-9458-27d9b5cd60ed,Wormhole Investigating the Outbound non-native transfers 12/7/2021,select  event_attributes:"1_contract_address" from terra.msg_events where event_type = 'from_contract' and event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' and event_attributes:"1_contract_address" != 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' and event_attributes:"2_contract_address" is null and event_attributes:"0_action" = 'complete_transfer_native' -- set 2 contract address to these to find some weird shit -- aust terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu -- bluna reward terra17yap3mhph35pcwvhza38c2lkj7gzywzy05h7l0 -- null is just inbound non native wh
5fb18854-dff6-4063-aae1-48f7fbb85b3e,Blank,
c0f35672-21ff-4bec-96d0-898339d33dc9,Untitled Query,select * from flow.core.fact_bridge_transactions where flow_wallet_address not like '0x%'
245704f5-1144-46a1-aca5-1ee4a4c9b939,Berachain Transfers (wETH, wBERA // Monad Metrics Guild),-- forked from nice-ivory @ https://flipsidecrypto.xyz/studio/queries/1d075237-14a1-41dd-a9b8-88c7deeaa477 with token_transfers AS (   select     block_timestamp,     tx_hash,     contract_address,     contract_name,     decoded_log,     COALESCE(       decoded_log :from :: STRING,       decoded_log :src :: STRING     ) AS from_address,     COALESCE(       decoded_log :to :: STRING,       decoded_log :dst :: STRING     ) AS to_address,     COALESCE(       decoded_log :value :: DOUBLE,        decoded_log :wad :: DOUBLE,       decoded_log :amount :: DOUBLE     ) AS transfer_value   from    berachain.testnet.ez_decoded_event_logs l   where l.block_timestamp >= sysdate() - interval '8 days'   and event_name in ('Deposit', 'Transfer')   and lower(contract_address) in (       lower('0x6e1e9896e93f7a71ecb33d4386b49deed67a231a'),       lower('0x767230a157d9a419d1bea97e0e37f9d2668f6b08'),       lower('0x7507c1dc16935B82698e4C63f2746A2fCf994dF8')   ) ) select   date_trunc('day', block_timestamp) as _date,   contract_address,   contract_name,   count(distinct tx_hash) as transfer_count,   count(distinct from_address) as distinct_senders,   count(distinct to_address) as distinct_recipients,   sum(transfer_value) as gross_volume_raw,   sum(transfer_value) / pow(10,18) as gross_volume from token_transfers group by 1,2,3 order by 1,2,3;
5a3d9404-401a-4420-a4d5-a059fc837b0d,Beer is NEAR, Top Level Sales Data, by Currency (9/11-9/18),WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'    ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE BETWEEN '2022-09-11' AND '2022-09-18'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ) select   currency,   count(1) as total_transactions,   count(distinct spender) as unique_customer_wallets,   sum(deposit_amount) as gross_deposit_token_amt,   sum(deposit_amount_usd) as gross_sales_deposited_usd,   sum(withdraw_amount) as gross_withdraw_token_amt,   sum(withdraw_amount_usd) as gross_purchases_withdrawn_usd from final group by 1
23f47914-8cf4-4f88-a0e6-acf5b4b00444,ETH Bridged to Polygon - events_emitted table [P1],SELECT   date_trunc('week', block_timestamp) as date,   sum(event_inputs:amount::float) / pow(10,18) as amount FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'LockedEther'   AND block_timestamp > CURRENT_DATE - interval '4 months'   AND tx_succeeded = 'TRUE' GROUP BY 1 ORDER BY 1
5bef8430-298b-447b-af34-1bb14c9a91a8,ETH Bridge Coming Back [LDO1],WITH eth_bridges AS (   SELECT     block_timestamp,     event_attributes:contract_address as token_address,     event_attributes:amount::float / pow(10,6) as amount   FROM terra.msg_events   -- WHERE tx_id = '78EE94525FD0E61441765F1EC64A11D100524E85A4E881AF12FDEEB6041ADC88'   WHERE event_attributes:action = 'transfer'     AND event_type = 'from_contract'     AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' -- eth bridge     -- AND event_attributes:contract_address = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' -- beth   ) SELECT   date_trunc('week', block_timestamp) as date,   address_name,   sum(amount) as gross_amount FROM eth_bridges b LEFT JOIN terra.labels l   ON token_address = l.address GROUP BY 1,2 ORDER BY 1, 3 desc
3f65b821-ca86-4b4c-933c-670cd3ef94dd,Untitled Query,
c3b86581-7ec2-4f6e-851f-8cb391c33c4f,anchor locked collateral [T33],SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit FROM terra.msgs alpha WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg:send:msg LIKE '%deposit_collateral%' GROUP BY 1 ORDER BY 1
5be971cb-3a46-479d-b79e-00df5c8d5542,T19 mstock buy volume,SELECT * FROM       (SELECT *,     RANK() OVER (PARTITION BY date ORDER BY gross_buy_volume desc) as rank   FROM      (select       l.address_name,       -- event_attributes:ask_asset,       -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,       -- event_attributes:offer_asset as offer_asset,       sum(event_attributes:offer_amount::float) / pow(10,6) as gross_buy_volume          from terra.msg_events     LEFT JOIN terra.labels l       ON event_attributes:ask_asset = l.address     WHERE tx_status = 'SUCCEEDED'     	AND event_type = 'from_contract'       	AND event_attributes:ask_asset != ''       	AND block_timestamp > GETDATE() - interval '4 days'       	-- buy transactions are marked as 'swap' under the main action of the from_contract message       	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)       	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract       	AND event_attributes:"0_action" = 'swap'       	-- exclude non-mirror tokens       	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')       	AND event_attributes:offer_amount::float > 0          group by 1, 2)) WHERE rank < 11 ORDER BY 1, 4
46af6465-e955-4d68-9588-c7c87c85263a,Untitled Query,select min(block_number) from optimism.core.fact_transactions
5c315498-d82e-4f6b-a695-da36426621a3,MINE Swap Prices [T93],-- Buying TOKEN with UST WITH buys AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_buy_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = '{{swap_contract}}' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy' -- token contract       AND block_timestamp > '2021-07-02T11:00:00Z'       AND block_timestamp < '2021-10-31T23:59:59Z'     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_sell_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1kcthelkax4j9x8d3ny6sdag0qmxxynl3qtcrpy' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra178jydtjvj4gw8earkgnqc80c3hrmqj4kw2welz' -- swap contract       AND block_timestamp > '2021-07-02T11:00:00Z'       AND block_timestamp < '2021-10-31T23:59:59Z'     )   GROUP BY 1   ORDER BY 1) SELECT   buys.date as date,   avg_buy_price,   avg_sell_price,   avg((avg_buy_price+avg_sell_price)/2) OVER (ORDER BY sells.date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as moving_avg -- using 8 hr = 1/3 of a day FROM buys JOIN sells ON sells.date = buys.date
5c1c94e6-b13e-4605-a7d6-dc8967efe30e,MDAO Workshop - Anchor Collateral - Median Transaction by Collateral,select   date_trunc('d',block_timestamp) as date,   contract_label,   median(amount_usd) as median_amount    from anchor.collateral group by 1,2 order by 1
96daf68a-693a-4916-bef3-fd80dc0a6e3c,Beer is NEAR, Top Level Sales Data (9/11-9/18),WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'    ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE BETWEEN '2022-09-11' AND '2022-09-18'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ) select   count(1) as total_transactions,   count(distinct spender) as unique_customer_wallets,   sum(deposit_amount_usd) as gross_sales_deposited_usd,   sum(withdraw_amount_usd) as gross_purchases_withdrawn_usd from final
c41af826-b473-4fa9-9345-551699bffca9,Newly Created Accounts,select   block_timestamp::DATE as _date,   count(distinct tx_id) as tx_ct from flow.core.fact_events where event_type = 'AccountCreated' and block_timestamp::date >= '2023-01-01' group by 1 order by 1
026ca14e-2c0f-4a68-bb0d-4acbccb00ae4,pudgy penguins sales buckets,SELECT   -- date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   -- avg(price) as avg_eth,   -- count(*) as num_tx,   -- max(price) as hour_max,   -- min(price) as hour_min   CONVERT_TIMEZONE('America/New_York', block_timestamp) as date,   price,   CASE     WHEN price > 0 AND price < 0.2 THEN 'low'     WHEN price > 0.19 AND price < 0.5 THEN 'low-med'     WHEN price > 0.49 AND price < 0.75 THEN 'med'   	WHEN price > 0.74 AND price < 1.5 THEN 'high'   	WHEN price > 1.49 THEN 'whale'   END AS bucket FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8'   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '3 days' -- GROUP BY 1 ORDER BY 1
7fb87561-4dda-4576-bb55-6b1852b41b02,Untitled Query,
5c84d037-a03b-4546-8964-c7facf693e3c,daily delegator LUNA rewards master query [T65],WITH rewards AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(event_attributes:amount[0]:amount::float) / pow(10,6) as luna_amt FROM terra.transitions WHERE block_timestamp > CURRENT_DATE - 30   AND block_timestamp < CURRENT_DATE   AND event = 'rewards'   AND transition_type = 'end_block' GROUP BY 1 ORDER BY 1), staking AS (   SELECT   date,   sum(balance) as balance FROM terra.daily_balances WHERE balance_type = 'staked'   AND date > CURRENT_DATE - 30   AND date < CURRENT_DATE   AND currency = 'LUNA' GROUP BY 1 ) SELECT   rewards.date,   luna_amt,   balance,   (luna_amt / balance) * 1000 as luna_per_thousand_staked FROM rewards JOIN staking   ON rewards.date = staking.date
246e8266-d50a-4956-b8f7-6240156ce4e3,BSC Delay,with   bsc as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_blocks' as table_name     from       bsc.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_transactions' as table_name     from       bsc.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_event_logs' as table_name     from       bsc.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_traces' as table_name     from       bsc.core.fact_traces   ) select   * from   bsc
80960f39-f005-4432-a2ef-3a14bffc2e34,Untitled Query,
4c147b17-300d-42b1-8d7c-428dd3516661,Purchase GLXY // Mirror Hunt,SELECT block_id::string as block_id,   msg_type,   c.address_name as contract_label,   msg_value:coins[0]:amount / pow(10,6) as ust_amount,   msg_value:execute_msg:swap:belief_price as price,   ust_amount / price as glxy_purchased FROM terra.msgs LEFT OUTER JOIN terra.labels c   ON msg_value:contract::string = c.address WHERE tx_id = '91C3F5E5360E758736463E9075E1F22534A8C8EFA804DD0630CEC8D144CC1101'
468f394b-2707-489c-be43-a29133726b3f,Untitled Query,
62eb1b03-1ede-4c29-8950-2058a7579369,Untitled Query,select 	date_trunc('d', block_timestamp),     count(block_number) from bsc.core.fact_blocks group by 1
05263133-3b4a-4742-a082-27bc2eede9fd,Copy of Flow NFT CPI,WITH daily_flow_price AS (   SELECT date_trunc('day', timestamp) AS day, AVG(price_usd) AS flow_price, 'A.1654653399040a61.FlowToken' AS currency   FROM FLOW.CORE.fact_prices    WHERE   token = 'Flow' AND symbol = 'FLOW'   GROUP BY day ) SELECT  date_trunc('day', block_timestamp) AS sale_date, split_part(nft_collection, '.', 3) AS collection_name,   sales.currency, MEDIAN(price * coalesce(flow_price, 1)) AS median_price, AVG(price * coalesce(flow_price, 1)) AS mean_price, min(price * coalesce(flow_price, 1)) AS min_price, max(price * coalesce(flow_price, 1)) AS max_price, sum(price * coalesce(flow_price, 1)) AS total_volume FROM FLOW.CORE.FACT_NFT_SALES sales JOIN daily_flow_price price ON date_trunc('day', block_timestamp) = price.day AND sales.currency = price.currency GROUP BY sale_date, collection_name, 3 order by 1,2,3
c7c9b319-493c-4a1f-b21f-bbeb5e3efeb8,New Authorizers copy,-- forked from 69856e79-1d53-4ae5-9f4f-0a9e4514d888   with  social_inits as (   select * from near.core.fact_actions_events_addkey     where receiver_id = 'social.near' ) select * from social_inits order by block_timestamp limit 10; -- , -- add_signer as ( --   select --     k.tx_hash, --     k.block_id, --     k.block_timestamp, --     t.tx_signer, --     k.allowance, --     t.tx_signer = t.tx_receiver --   from social_inits k --     left join near.core.fact_transactions t using (tx_hash) -- ), -- de_dupe_resigners as ( --   select --     block_timestamp, --     tx_signer --   from add_signer --   -- ignore subsequent authorizations by the same signer --   qualify ROW_NUMBER() over ( --   PARTITION BY tx_signer --   ORDER BY --     block_timestamp ASC -- ) = 1    -- ) -- select --   block_timestamp::date as "Date", --   count(distinct tx_signer) as "Unique Authorizers", --   sum("Unique Authorizers") over (order by "Date") as "Cumulative Unique Authorizers" -- from de_dupe_resigners -- group by 1 -- order by 1
703d6726-c483-4d0a-bed3-79b48bc2582c,Untitled Query,select max(block_timestamp) from near.core.fact_blocks limit 20;
61eccab0-24f2-4ad7-9fa3-e6a030b3c22e,Large Anchor Deposits,with large_deposits as (   SELECT   *   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   	and msg_value:coins[0]:amount::float / pow(10,6) > 100000000   and block_timestamp > '2021-11-23T00:00:00Z' -- we know this didn't happen before 11/24 ) select from large_deposits
60a95d08-7cce-4900-b777-c441b4e8e74c,Untitled Query,
c955f039-4c70-44fb-85e9-b374e19b7227,daily messages across terra [T19],select date_trunc('day', block_timestamp) as date,   count(*) from terra.msgs GROUP BY 1 ORDER BY 1
a046906e-b9f9-4830-9444-cc014c242ea7,Untitled Query,
fbd1c112-00a2-43e5-849f-a066695d6c5d,Flowverse Owner Distribution (All Contracts) - Theirs,tSELECT   EVENT_CONTRACT,   CASE     WHEN EVENT_CONTRACT = 'A.28abb9f291cadaf2.BarterYardClubWerewolf' THEN 5000     ELSE TOTAL_NFTS   END AS TOTAL_NFTS,   UNIQUE_OWNERS FROM   (     SELECT       D.EVENT_CONTRACT,       SUM(         CASE           WHEN D.NFTS_DEPOSITED - IFNULL(W.NFTS_WITHDRAWN, 0) > 0 THEN D.NFTS_DEPOSITED - IFNULL(W.NFTS_WITHDRAWN, 0)           ELSE 0         END       ) AS TOTAL_NFTS,       SUM(         CASE           WHEN D.NFTS_DEPOSITED - IFNULL(W.NFTS_WITHDRAWN, 0) > 0 THEN 1           ELSE 0         END       ) AS UNIQUE_OWNERS     FROM       (         SELECT           EVENT_CONTRACT,           EVENT_DATA ['to'] AS ADDRESS,           count(1) AS NFTS_DEPOSITED         FROM           FLOW.CORE.FACT_EVENTS         WHERE           EVENT_TYPE = 'Deposit'           AND TX_SUCCEEDED = true         GROUP BY           ADDRESS,           EVENT_CONTRACT       ) AS D       LEFT JOIN (         SELECT           EVENT_CONTRACT,           EVENT_DATA ['from'] AS ADDRESS,           count(1) AS NFTS_WITHDRAWN         FROM           FLOW.CORE.FACT_EVENTS         WHERE           EVENT_TYPE = 'Withdraw'           AND TX_SUCCEEDED = true         GROUP BY           ADDRESS,           EVENT_CONTRACT       ) AS W ON D.ADDRESS = W.ADDRESS       AND D.EVENT_CONTRACT = W.EVENT_CONTRACT     GROUP BY       1   ) X;
cb046381-d090-4c9a-8bd4-0947cd9ecc8c,Flowverse Owner Distribution (All Contracts) - Mine,WITH events AS (   SELECT     event_contract,     event_type,     event_data ['to'] :: STRING as address_to,     event_data ['from'] :: STRING as address_from   FROM     flow.core.fact_events   WHERE     tx_succeeded     AND event_type IN ('Deposit', 'Withdraw') ), d AS (   SELECT     address_to AS address,     event_contract,     COUNT(1) AS nfts_deposited   FROM     events   WHERE     event_type = 'Deposit'   GROUP BY     1,     2 ), w AS (   SELECT     address_from AS address,     event_contract,     COUNT(1) AS nfts_withdrawn   FROM     events   WHERE     event_type = 'Withdraw'   GROUP BY     1,     2 ), FINAL AS (   SELECT     d.event_contract,     SUM(       IFF(         COALESCE(d.nfts_deposited, 0) - COALESCE(w.nfts_withdrawn, 0) > 0,         COALESCE(d.nfts_deposited, 0) - COALESCE(w.nfts_withdrawn, 0),         0       )     ) AS total_nfts,     SUM(       (         COALESCE(d.nfts_deposited, 0) - COALESCE(w.nfts_withdrawn, 0) > 0       ) :: INT     ) AS unique_owners   FROM     d     LEFT JOIN W ON d.address = w.address     AND d.event_contract = w.event_contract   GROUP BY     1 ) SELECT   event_contract,   IFF(     event_contract = 'A.28abb9f291cadaf2.BarterYardClubWerewolf',     5000,     total_nfts   ) AS total_nfts,   unique_owners FROM   FINAL ORDER BY   2 DESC
266e06cc-c59d-479f-b78c-bbb1275c6383,whale explorer [T37],SELECT   -- date_trunc('day', block_timestamp) as date,   liquidity_provider,   action,   pool_name,   sum(amount0_usd) + sum(amount1_usd) FROM uniswapv3.lp_actions WHERE block_timestamp > GETDATE() - interval '24 hours' GROUP BY 1, 2, 3 ORDER BY 1, 4 desc
1734fb46-e3f6-459e-a81a-8f0ed1b8ca98,Copy of 4. [Easy 🍳] Decentralization of Validator System,SELECT *   FROM    (SELECT    date,   validator,   voting_power / sum(voting_power) OVER (PARTITION BY date) as voting_pct FROM (SELECT   date_trunc('week', block_timestamp) as date,   address as validator,   avg(voting_power) as voting_power FROM terra.validator_voting_power   WHERE block_timestamp > GETDATE() - interval '1 month' GROUP BY 1, 2) sub ORDER BY 1, 3 desc) main WHERE main.voting_pct > .05 ORDER BY 1 asc, 3 desc
96b9695e-2056-4b5a-8353-b6d0799f9477,ENS Transaction - Registrations months prior [ENS5],with txs as (   select     distinct tx_id   from ethereum.udm_events   where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'     and origin_function_signature = '0xf7a16963'     and block_timestamp > '2021-09-01T00:00:00Z'     and block_timestamp < '2021-11-01T23:59:59Z' ), fee_details as (   select     block_timestamp,     txs.tx_id as tx_id,     fee_usd,     gas_limit,     gas_price,     gas_used   from ethereum.transactions   right join txs using (tx_id)   where block_timestamp > '2021-09-01T00:00:00Z'   and block_timestamp < '2021-11-01T23:59:59Z' ), registration as (   select 	block_timestamp,     tx_id,   	amount,     amount_usd from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp > '2021-09-01T00:00:00Z'   and block_timestamp < '2021-11-01T23:59:59Z' ), full_details as (   select   	registration.block_timestamp as block_timestamp,   	registration.tx_id as tx_id   	-- registration.amount as amount,   	-- registration.amount_usd as amount_usd,   	-- fee_details.fee_usd as fee_usd,   	-- fee_details.gas_limit as gas_limit,    --  fee_details.gas_price /pow(10,9) as gwei,    --  fee_details.gas_used as gas_used,   	-- (fee_usd / (fee_usd + amount_usd)) as fee_pct   from registration   join fee_details using (tx_id) ), final as (   select   	date_trunc('day', block_timestamp) as date,   	count(1) as registration_count   from full_details   group by 1   )    select   *,   avg(registration_count) over (order by date rows between 6 preceding and current row) as ma from final
cc957bef-91fe-4e42-8411-cb601a24d8a8,3Crv claim size vs fee paid (outliers) [YC2],WITH claims AS (   SELECT     block_timestamp,     amount,     tx_id   FROM ethereum.udm_events   WHERE contract_address = '0x6c3f90f043a72fa612cbac8115ee7e52bde6e490' -- 3crv address     AND from_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV pool     AND origin_function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z'   ), fees AS (   SELECT     tx_id,     tx_fee,     fee_usd,     to_address,     from_address   FROM ethereum.transactions   WHERE success = 'TRUE'     AND to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'     AND function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z' ), combo AS (   SELECT     date_trunc('hour', block_timestamp) as block_time,     amount,     tx_fee,     fee_usd,     claims.tx_id as tx_id,     from_address   FROM claims   JOIN fees     ON claims.tx_id = fees.tx_id ), prices AS (   SELECT     hour,     price   FROM ethereum.token_prices_hourly WHERE symbol = 'CRV'   AND hour > '2021-02-04T23:59:00Z' )  SELECT   block_time,   amount,   price,   amount * price as amount_usd,   tx_fee,   fee_usd,   (fee_usd / amount_usd) * 100 as fee_pct,   tx_id FROM combo c JOIN prices   ON prices.hour = c.block_time WHERE amount_usd < 10   AND amount > 0   AND fee_usd IS NOT NULL
d6b6194c-f8c6-401d-a79b-d0238e36c221,MDAO Workshop - Anchor Average Transaction by Collateral - excl outliers,select   date_trunc('d',block_timestamp) as date,   contract_label,   avg(amount_usd) as avg_amount    from anchor.collateral where amount_usd < 50000000    group by 1,2 order by 1
61f856aa-f0ba-4733-aa6d-35c17fcf41b9,MDAO Workshop - Anchor Collateral - Median Transaction by Event Type,select   date_trunc('d',block_timestamp) as date,   event_type,   median(amount_usd) as median_amount    from anchor.collateral group by 1,2 order by 1
96ad7b8d-2c0f-4c1a-8454-7929302eb166,Copy of null voting power,with nulls as ( select  	*  from terra.gov_vote where voting_power is null and block_timestamp > current_date - 30   limit 1000   ) select * from nulls where voter = 'terra1chfhmgttzj6y5xl4w7qt0896tvdkuvz40ukvwm' select * from terra.daily address = 'terra1chfhmgttzj6y5xl4w7qt0896tvdkuvz40ukvwm'
cce4785b-f2ca-4c22-8e63-d51e37283fc1,Ethereum payouts,SELECT   date_trunc('hour', block_timestamp) as date,   symbol,   amount,   amount_usd,   sum(amount_usd) OVER (ORDER BY date) as cumulative_earnings FROM ethereum.udm_events WHERE to_address = lower('0x04ae8c108743167c7457073ba8C1571FD5D56325')   AND from_address = '0xd152f549545093347a162dce210e7293f1452150'
cd221ed5-5bdc-4696-8997-79cdb9530cb5,Anchor Collateral - Null Check,select       date_trunc('d',block_timestamp),   count(1)    from anchor.collateral    where amount_usd is nul    group by 1 order by 1
cd2b6788-0a5d-437c-8441-32c3d56c3530,NFT, Volume by Collection,
ce8d7719-490f-426b-9542-1e1b8c9fcf3c,Top Swappers [THOR5],SELECT   from_address,   pool_name,   count(1) as transaction_count FROM thorchain.swaps WHERE block_timestamp < CURRENT_DATE - interval '24 hours' GROUP BY 1, 2 ORDER BY 3 DESC
fe416124-d93c-4ec3-b78f-3edead855bcd,empty-red,select     live.udf_api(         'GET',         '{Service}/api/minting/assets',         { 'x-api-key': '{Authentication}' },         {},         'Vault/prod/flow/snag-api'     ) :: VARIANT AS response
6865c4b8-bf21-4de7-acb8-9700607b2984,test query,select * from terra.msgs limit 10
077732a3-1ab0-4466-9396-63fddaf2e16c,Untitled Query,
3cc89c1f-d47c-4b30-9558-e7905802607c,NFT, Top Collections by Distinct Buyers,select    block_timestamp::date as _date,   split(nft_collection, '.')[2] as nft_collection,   count(distinct buyer) as unique_buyers,   count(distinct tx_id) as sale_txs,   count(1) as gross_sale_ct from flow.core.ez_nft_sales  where block_timestamp::date >= '2023-01-01' group by 1,2 order by 1,3 desc
cf4562bd-0208-4914-ac13-f48da807db78,Untitled Query,select    event_type, min(block_timestamp), max(block_timestamp), count(distinct tx_id)  from flow.core.fact_events    where event_contract = 'A.b715b81853fef53f.AllDay' group by 1 -- and event_type = 'Withdraw' select block_timestamp::Date, nft_collection, currency, sum(price), median(price), count(1) from flow.core.ez_nft_sales where nft_collection ilike '%gola%' group by 1,2,3
cf216d22-e8d1-4015-aef9-e49b4da91a49,19T combined volume,SELECT * FROM (SELECT *,   RANK() OVER (PARTITION BY date ORDER BY total_trading_volume desc) as rank FROM   (SELECT    	sell.date,     	sell.asset,     	-- gross_buy_volume,     	-- sell.gross_sell_volume,     	sum(gross_buy_volume) + sum(sell.gross_sell_volume) as total_trading_volume   FROM      (select       date_trunc('day', block_timestamp) as date,       l.address_name as asset,       -- event_attributes:ask_asset,       -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,       -- event_attributes:offer_asset as offer_asset,       sum(event_attributes:offer_amount::float) / pow(10,6) as gross_buy_volume          from terra.msg_events     LEFT JOIN terra.labels l       ON event_attributes:ask_asset = l.address     WHERE tx_status = 'SUCCEEDED'     	AND event_type = 'from_contract'       	AND event_attributes:ask_asset != ''       	AND block_timestamp > GETDATE() - interval '3 months'       	-- buy transactions are marked as 'swap' under the main action of the from_contract message       	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)       	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract       	AND event_attributes:"0_action" = 'swap'       	-- exclude non-mirror tokens       	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')       	AND event_attributes:offer_amount::float > 0               group by 1, 2) buy        LEFT JOIN          (select         date_trunc('day', block_timestamp) as date,         l.address_name as asset,         sum(event_attributes:return_amount::float) / pow(10,6) as gross_sell_volume              from terra.msg_events       LEFT JOIN terra.labels l         ON event_attributes:offer_asset = l.address       WHERE tx_status = 'SUCCEEDED'       	AND event_type = 'from_contract'         	AND event_attributes:ask_asset != ''         	AND block_timestamp > GETDATE() - interval '3 months'         	-- buy transactions are marked as 'swap' under the main action of the from_contract message         	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)         	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract         	AND event_attributes:"0_action" = 'send'         	-- exclude non-mirror tokens         	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')              group by 1, 2) sell          ON (buy.asset = sell.asset AND buy.date = sell.date)        GROUP BY 1, 2)) WHERE rank < 11 ORDER BY 1, 3 desc
04f68d16-2cae-4e82-8b22-0ec7364bd1e4,Untitled Query,
cf1d994c-9e27-4434-b57d-f405f5efd3ea,Thorchain Liquidity Outliers [THOR8],SELECT   * FROM thorchain.liquidity_actions WHERE block_timestamp > '2021-10-03T00:00:00Z' ORDER BY rune_amount_usd desc LIMIT 25
1d4d2544-b8bb-48bb-ac7d-7e9f03b0cd9a,Untitled Query,Select * FROM terra.validator_labels order by 1 LIMIT 500
27895eb3-80f6-44e6-8929-ca4b334c0448,2023-04-25 10:31 AM,select max(   convert_timezone('UTC', 'America/Denver', block_timestamp) ) from axelar.core.fact_transactions
11125ae6-a47e-4761-ab9b-6e3bcac8b911,ENS Registrations [ENS7],with ens_registration as ( 	select   		*   	from ethereum.udm_events  	where to_label = 'ens' 		and symbol = 'ETH'   ), gas as (   select   	block_timestamp, 	tx_id,   	gas_limit,   	gas_price,   	gas_used,   	fee_usd   from ethereum.transactions)   select * from register   left join gas on    gas.tx_id = register.tx_id
cff65bbb-6d0d-4d9b-a095-45fb3698c2db,Untitled Query,with No_TX as ( SELECT COUNT(tx_id) total_tx from osmosis.core.fact_msgs   WHERE block_timestamp >= dateadd('month',-4,CURRENT_DATE)   ), No_failed_TX as (   SELECT COUNT(tx_id) failed_tx from osmosis.core.fact_msgs   WHERE block_timestamp >= dateadd('month',-4,CURRENT_DATE) and tx_status = 'FAILED' ), No_succ_TX as (   SELECT COUNT(tx_id) succ_tx from osmosis.core.fact_msgs   WHERE block_timestamp >= dateadd('month',-4,CURRENT_DATE) and tx_status = 'SUCCEEDED' ) SELECT T1.total_tx * 1. as "TOTAL No. of TX", typeof(T2.failed_tx::number) as "TOTAL No. of FAILED TX", round(T3.succ_tx::number,0) as "TOTAL No. of SUCCEEDED TX", ROUND(100 * T2.failed_tx / T1.total_tx,2) "FAILED TX RATE (%)" FROM NO_TX T1 FULL JOIN No_failed_TX T2  FULL JOIN No_succ_TX T3
69b316ca-50c9-4a68-adfa-3682ea6ea161,Bridged bETH to ETH individual txs,SELECT   * FROM terra.msg_events WHERE event_attributes:"0_action" = 'transfer'   AND event_type = 'from_contract'   AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' -- eth bridge   AND event_attributes:"0_contract_address" = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' -- beth ORDER BY block_id
12c308a7-5128-4a9c-88ab-a6b2502fe77a,query 2,with transactionn_gas_used as (     select block_timestamp, gas_price, gas_used, gas_price * gas_used as gas_amount, tx_hash     from ethereum.core.fact_transactions ) select date_trunc('day', block_timestamp) as block_date,     count(*) as transaction_count,     avg(gas_price) / 1e9 as average_gas_price,     sum(gas_used) / 1e9 as sum_gas_used,     avg(gas_used) as average_gas_used,     sum(gas_amount) / 1e18 as sum_gas_amount,     avg(gas_amount) / 1e18 as average_gas_amount from transactionn_gas_used group by block_date order by block_date
5ece72b0-370c-4105-9221-2c8a2b655498,Terra Wormhole - Cumulative outbound in t$,WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id,     CASE       WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'       ELSE 'LUNA'     END as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     AND destination_chain_id IS NOT NULL   GROUP BY 1,2,3   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount     -- CASE     --   WHEN token = 'LUNA' THEN amount * avg_price     --   ELSE amount     -- END AS amount_usd   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token = 'LUNA'   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token = 'UST' ), outbound_vol AS (   SELECT     date,     sum(amount) as volume_usd   FROM combo   JOIN chain_ids ON combo.destination_chain_id = chain_ids.id   GROUP BY 1   ) SELECT   *,   sum(volume_usd) OVER (ORDER BY date) as gross_volume FROM outbound_vol
295d62d1-5ac2-46fb-98ad-ca17df2cfef5,Untitled Query,select min(block_timestamp) from arbitrum.core.fact_transactions
28d2ae90-5d94-4743-a8f3-65edb279c3a3,UST Astroport Swaps (collateral only) [2],with prices as (     select 	  date_trunc('m', block_timestamp) as _date,       event_attributes:asset as currency,       event_attributes:price as price_usd   from terra.msg_events   where EVENT_TYPE = 'from_contract'        AND event_attributes:action ='feed_prices'       and block_timestamp >= '2022-05-07' ), -- sells ust_ask as (   select    	date_trunc('minute', block_timestamp) as _date,   	offer_amount,     offer_currency as currency,     return_amount -- token 1 is ask   from astroport.swaps   where return_currency = 'uusd'     and block_timestamp >= '2022-05-07'   	and currency in (       'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun',       'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58',       'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a',       'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'      ) ), ask_prices as (   select   	u._date,   	offer_amount,   	currency,   	return_amount,   	price_usd,   	(offer_amount * price_usd) / return_amount as ust_p   from ust_ask u   left join prices using (_date, currency) ), ask_agg as (      select   	time_slice(_date, 10, 'minute') as _date,   	avg(ust_p) as ust_ask_swap_price   from ask_prices   group by 1 ), -- buys ust_offer as (   select    	date_trunc('minute', block_timestamp) as _date,   	offer_amount,     return_currency as currency,     return_amount   from astroport.swaps   where offer_currency = 'uusd'     and block_timestamp >= '2022-05-07'   	and currency in (       'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun',       'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58',       'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a',       'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'      ) ), offer_prices as (   select   	o._date,   	offer_amount,   	currency,   	return_amount,   	price_usd,   	(return_amount * price_usd) / offer_amount as ust_p   from ust_offer o   left join prices using (_date, currency) ),    offer_agg as (      select   	time_slice(_date, 10, 'minute') as _date,   	avg(ust_p) as ust_offer_swap_price   from offer_prices   group by 1 ), combo as (   select   	a._date,   	a.ust_ask_swap_price,   	o.ust_offer_swap_price   from ask_agg a   left join offer_agg o    	using (_date)    ) select * from combo   where ust_ask_swap_price < 4 and ust_offer_swap_price < 4 -- exclude outliers order by 1
de05ac29-3b06-4f59-9a21-0fe5e1f2bb1c,2023-11-10 11:42 AM,select * from near.atlas.fact_maas limit 5
d2492b40-85fa-4227-ab03-011e0e755875,Anchor Gross Volume of Top Users,with deposit_volume as (      select        block_timestamp,     sender,     deposit_amount        from anchor.deposits    ), redemption_events as (   select     *   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'    ), top_depositors as (   select      	sender,     sum(deposit_amount) as gross_deposit      from deposit_volume   group by 1   order by 2 desc   limit 25    ),    deposits as (   select      	sender,   	date_trunc('month', block_timestamp) as month,     sum(deposit_amount) as gross_deposit      from deposit_volume   where sender in      (select sender from top_depositors)   group by 1,2   order by 1, 2 ),    top_redemptions as (   select     event_attributes:"0_from" as sender,   	sum(event_attributes:redeem_amount::float) / pow(10,6) as gross_redemption   from redemption_events   group by 1   order by 2 desc   limit 25    ), redemptions as (   select     event_attributes:"0_from" as sender,     date_trunc('month', block_timestamp) as month,     sum(event_attributes:redeem_amount::float) / pow(10,6) as gross_redemption      from redemption_events   where sender in      (select sender from top_redemptions)   group by 1,2   order by 1,2    ), net_volume as (   select 	redemptions.sender,   	redemptions.month,     coalesce(gross_deposit,0) as gross_deposit,   	coalesce(gross_redemption,0) as gross_redemption,   	gross_deposit - gross_redemption as net_earn      from deposits   left join redemptions using (sender, month) ) select * from net_volume
d28388c5-f3b4-4c0d-81dd-c44f145a1777,sweat_welcome.near Transaction Receivers,SELECT    date_trunc('month',block_timestamp) as "Month",   iff(tx_receiver='token.sweat', 'token.sweat', 'Other') as tx_receiver,    count(distinct tx_hash) as "Transaction Count" from near.core.fact_transactions where tx_signer = 'sweat_welcome.near'   and block_timestamp::date between '2022-05-01' and '2022-12-31' group by 1,2 order by 3 desc
d41b6d1a-55ca-445f-8789-d990ecb7a7b9,NEAR Lands - setTiles volume by space,with tiles as (   select   	tx_hash,     block_timestamp,     try_parse_json(args):tiles as tiles   from near.core.fact_actions_events_function_call     where method_name = 'setTiles' 		and try_parse_json(args) is not null ) select * from tiles  limit 100
d40ed9b3-6910-4687-a75d-276a23034fab,SDS Price Feed copy,-- forked from d600adb1-d81b-4de5-b60c-d5755db73472   select  block_number, block_timestamp, tx_hash, origin_from_address, origin_to_address, contract_address, event_name, decoded_log:current as raw_value, decoded_log:roundId as round_id, decoded_log:updatedAt::timestamp as updated_at, raw_value / pow(10,27) as sds_price from ethereum.core.ez_decoded_event_logs where contract_address = '0xc7bb32a4951600fbac701589c73e219b26ca2dfc' and topics[0] = '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f' order by block_timestamp desc
8d88b23e-2f77-427f-a0d9-8212d4c54173,price,SELECT date_trunc('day', block_timestamp) as block_date,   avg(price_usd) FROM terra.oracle_prices WHERE SYMBOL = 'LUNA' 	AND block_timestamp > GETDATE() - interval '6 weeks' GROUP BY 1 ORDER BY 1
d17adb5a-c0bb-4976-9bfb-4b76ae3e04e9,10 mins or more,with blocktime as ( select   block_number,   block_timestamp,   lag(block_timestamp) over (order by block_number) as prev_timestamp,   datediff('second', prev_timestamp, block_timestamp) as block_time from bitcoin.core.fact_blocks  where date_trunc('day', block_timestamp) >= '2023-01-01' ) select   date_trunc('day', block_timestamp) as _date,   avg(block_time) / 60 as avg_blocktime_min from blocktime group by 1
ae90e09d-81c4-4407-bc9f-2d6d200734ed,Untitled Query,
0d1d857e-f26e-4fac-840a-81577c69d24b,Untitled Query,select * from ethereum.udm_events limit 100
d51295b0-bf39-4950-be6f-6eea5354491b,DEX, Volume by Token,with   swap as (     select       block_timestamp::date as _date,       tx_id,       trader,       TOKEN_IN_CONTRACT,       TOKEN_IN_AMOUNT,       TOKEN_OUT_CONTRACT,       TOKEN_OUT_AMOUNT     from       flow.core.ez_swaps     where       block_timestamp::date >= '2023-01-01'   ) select   _date,   token_out_contract,   token_in_contract,   count(DISTINCT tx_id) as total_tx,   count(DISTINCT trader) as total_wallets,   sum(token_in_amount) as volume_native_token,   avg(token_in_amount) as avg_volume from   swap group by 1,2,3 order by 1,5 desc
256dccca-8481-44f0-939f-7bb4f83fa2c2,NEAR Gas,select 	date_trunc('d', block_timestamp) as _date, 	case 		when gas_used > attached_gas then 'more' 		when gas_used < attached_gas then 'less' 		when gas_used = attached_gas then 'same' 		else 'ERROR' 	end as gas_usage, 	count(distinct tx_hash) as txs from near.core.fact_transactions group by 1,2 order by 1,3;
db49e270-4fd0-442c-8c05-62fb55afa409,Daily TPS, 2023,with base as (   SELECT     block_timestamp::date as _date,     count(distinct tx_hash) as daily_tx_count   from near.core.fact_transactions   where block_timestamp::date >= '2023-01-01'   and tx_status = 'Success'   group by 1 ) select   _date,   daily_tx_count / (24 * 60 * 60) as tps from base order by 1
295b55ac-4f9f-4905-9a4c-d7964c771d0f,Orion Constellation Hunt - UST deposit,SELECT * FROM ethereum.udm_events WHERE tx_id = '0xd77a4e487283b3b7441ee22ac332dfdbf5d92b72dcec1068c1ed4a9e89c753d8' -- approve ust for deposit
d6a516e3-2a4c-4d47-bb84-c6130450b707,pudgy penguins sale prices,SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price) as avg_eth,   count(*) as num_tx FROM ethereum.core.ez_nft_sales WHERE nft_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8' GROUP BY 1 ORDER BY 1
d7398b3c-9217-48c5-9d9d-7ae05ffcfd23,UST since 3/17 vs borrow [T49],WITH daily AS ( SELECT   date,   sum(balance) as ust_supply FROM terra.daily_balances WHERE currency = 'UST'   AND date > '2021-03-16T00:00:00Z' GROUP BY 1), borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1), repay AS (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ), liquidations AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10,6) as amount_liquidated,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as liquidation_repay_amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND block_timestamp > '2021-03-16T23:59:59Z'     AND tx_status = 'SUCCEEDED'   GROUP BY 1 )   -- top level query SELECT   event_date,   SUM(supply_change) OVER (ORDER BY date) as cumulative_supply,   cum_net_borrow,   CASE      WHEN cumulative_supply IS NULL THEN NULL     ELSE cum_net_borrow / cumulative_supply    END AS borrow_pct   -- subquery 1 FROM ( SELECT    *,   ust_supply - LAG(ust_supply) OVER (ORDER BY daily.date) as supply_change FROM daily    -- subquery 2-ish JOIN (      SELECT     borrow.date as event_date,     daily_borrow_amount,     daily_repay_amount,     daily_borrow_amount - daily_repay_amount as net_borrow,     SUM(daily_borrow_amount - daily_repay_amount) OVER (ORDER BY borrow.date) as cum_net_borrow   FROM repay   JOIN (     SELECT       borrow.date as event_date,            FROM borrow     JOIN liquidations ON borrow.date = liquidations.date   ) sub_three -- woof     ON borrow.date = repay.date) sub   ON daily.date = sub.event_date) -- end of subquery 2-ish
b5b7c360-5d77-467b-8f75-015ededf2de6,eth price and standard deviation [T31],SELECT 	date_trunc('day', hour) as date, 	avg(price) as price,   	STDDEV(avg(price)) OVER (ORDER BY date) as stdv_eth FROM ethereum.token_prices_hourly WHERE symbol = 'ETH' 	AND hour > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1
d74f0c8d-87a2-4b91-b313-0e6f8d03c830,ENS Transaction - Registrations [ENS5],with txs as (   select     distinct tx_id   from ethereum.udm_events   where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'     and origin_function_signature = '0xf7a16963'     and block_timestamp > '2021-10-20T00:00:00Z'     and block_timestamp < '2021-11-07T23:59:59Z' ), fee_details as (   select     block_timestamp,     txs.tx_id as tx_id,     fee_usd,     gas_limit,     gas_price,     gas_used   from ethereum.transactions   right join txs using (tx_id)   where block_timestamp > '2021-10-20T00:00:00Z'   and block_timestamp < '2021-11-07T23:59:59Z' ), registration as (   select 	block_timestamp,     tx_id,   	amount,     amount_usd from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp > '2021-10-20T00:00:00Z'   and block_timestamp < '2021-11-07T23:59:59Z' ), full_details as (   select   	registration.block_timestamp as block_timestamp,   	registration.tx_id as tx_id   	-- registration.amount as amount,   	-- registration.amount_usd as amount_usd,   	-- fee_details.fee_usd as fee_usd,   	-- fee_details.gas_limit as gas_limit,    --  fee_details.gas_price /pow(10,9) as gwei,    --  fee_details.gas_used as gas_used,   	-- (fee_usd / (fee_usd + amount_usd)) as fee_pct   from registration   join fee_details using (tx_id) ), final as (   select   	date_trunc('day', block_timestamp) as date,   	count(1) as registration_count   from full_details   group by 1   )    select * from final
d7f2f886-6453-40c7-827d-ee0f636302cb,bLUNA burn - in anchor,SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount   FROM terra.msgs WHERE block_timestamp > GETDATE() - interval '1 month'   AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   AND msg_value:execute_msg:send:contract = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1 ASC -- bluna contract msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' 	-- tx with this contract include: deposit_collateral, swap, increase_allowance,  	-- looking for execute_msg:send:msg = 'unbond' using the below contract -- bluna burn msg_value:execute_msg:send:contract: = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   -- msg_value:sender as sender
1a700366-bdaa-4ef6-8da1-8093583969b4,Untitled Query,SELECT     date_trunc('week', date) as week,     avg(balance) as total_luna_staked    FROM terra.daily_balances    -- WHERE DATEDIFF(day, date, GETDATE()) between 0 and 60     WHERE address = 'terra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3nln0mh' and currency = 'LUNA' and balance_type = 'liquid'    GROUP BY week ORDER BY week
4e9622d1-1531-4110-992b-e861e59f454d,Untitled Query,select * from
782e3140-eaab-4809-9a87-db64fd6907b4,Untitled Query,
d9488246-b46e-4eda-bc13-80754437bd6c,LOTA sell price,-- Selling LOTA to UST SELECT   date_trunc('hour', block_timestamp) as date,   avg(ust/lota) as avg_sell_price FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as lota,    event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract ) GROUP BY 1 ORDER BY 1
d930b284-5128-4616-9432-b423de5fbd47,mir buy [T19],select   date_trunc('minute', block_timestamp) as date,   -- l.address_name,   -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,   -- event_attributes:offer_asset as offer_asset,   sum(event_attributes:offer_amount::float) / pow(10,6) as volume from terra.msg_events LEFT JOIN terra.labels l   ON event_attributes:ask_asset = l.address WHERE tx_status = 'SUCCEEDED' 	AND event_type = 'from_contract'   	AND event_attributes:ask_asset != ''   	AND block_timestamp > GETDATE() - interval '30 minutes'   	-- buy transactions are marked as 'swap' under the main action of the from_contract message   	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)   	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract   	AND event_attributes:"0_action" = 'swap'   	-- exclude non-mirror tokens   	-- AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')   	AND l.address_name = 'MIR' group by 1 order by 1
5f94b307-7227-4d8b-b871-74c37cfd1406,LUNA Liquidators,with liquidations as (   SELECT     date_trunc('h', block_timestamp) as hour,     sum(event_attributes:"0_amount"::float) / pow(10,6) as luna_liquidated,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND block_timestamp > CURRENT_DATE - INTERVAL '24 hours'     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ORDER BY 1   ), price as (   select   	date_trunc('h', block_timestamp) as hour,   	avg(price_usd) as avg_price   from terra.oracle_prices   where symbol = 'LUNA'     AND block_timestamp > CURRENT_DATE - INTERVAL '24 hours'   group by 1    ) SELECT   price.hour,   price.avg_price,   coalesce(liquidations.luna_liquidated,0) as luna_liquidated,   coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   coalesce(liquidations.num_liquidations,0) as num_liquidations from price left join liquidations on liquidations.hour = price.hour
af8f9936-69da-4ef4-a247-a466acc71d7a,Untitled Query,
d9bc7706-b513-4872-8206-d2f3da132483,Anchor Withdraws since COL-5,with col_five_withdraws as (   select     date_trunc('day', block_timestamp) as date,     sum(msg_value:execute_msg:send:amount) / pow(10,6) as amount   from terra.msgs   where msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract     and msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and block_timestamp > '2021-09-30T00:00:00Z'     and tx_status = 'SUCCEEDED'     and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=' -- withdraw   group by 1 ) select * from col_five_withdraws
2bf20ba0-b598-4700-8879-4d22be64e6c5,daily fees - starter [T45],-- In this query we are summarizing fees paid per day per currency SELECT   date_trunc('day', block_timestamp) as date,   fee[0]:denom::string as currency,   sum(fee[0]:amount)/POW(10,6) as fee FROM terra.transactions WHERE currency = 'ukrw'   AND block_timestamp > CURRENT_DATE - interval '1 week' GROUP BY 1,2 ORDER BY 1 DESC
da0bdda7-7ca9-4a7b-ab5a-688ed26f050e,stETH Add Liquidity [C2],SELECT   date_trunc('day', block_timestamp) as date,   symbol,   sum(amount) as token_amount,   sum(amount_usd) as usd_amount FROM ethereum.udm_events WHERE to_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool   AND block_timestamp > CURRENT_DATE - 30   AND origin_function_name = 'add_liquidity' GROUP BY 1,2 ORDER BY 1
b01ef524-eee7-4ea4-a681-a2dd76ef160f,Untitled Query,
afffeaee-c7f7-4cea-9dc5-1bb8002eaae4,2023-04-26 03:58 PM,WITH dim_epochs AS (  	SELECT epoch_id   		 , min(block_id) AS min_block_id   		 , max(block_id) AS max_block_id   		 , count(*) AS blocks   		 , count(distinct block_author) AS block_producers   		 , min(block_timestamp) AS start_time   		 , max(block_timestamp) AS end_time   		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num      	FROM near.core.fact_blocks AS b   	WHERE block_id >= (SELECT min(block_id) FROM near.core.fact_blocks WHERE epoch_id = '4ZhPXTpkB6njvkDFgqquu36S4TPDNU5wwgom86vVBwJn')  -- epoch #900   	  AND epoch_id != (SELECT epoch_id FROM near.core.fact_blocks QUALIFY row_number() OVER (order by block_timestamp desc) = 1) -- exclude current epoch   	GROUP BY 1 ), staking_actions AS (   	SELECT r.tx_hash       	 , r.block_timestamp       	 , r.receiver_id AS validator_address       	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num       	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance            FROM near.core.fact_receipts AS r   	   , lateral flatten( input => r.logs ) AS l        WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )       AND r.tx_hash IN ( SELECT tx_hash        				     FROM near.core.fact_actions_events_function_call       				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )       AND left(l.value::string, 6) = 'Epoch '   	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1 ), proposals AS (   	SELECT b.block_id       	 , b.block_timestamp       	 , b.epoch_id       	 , vp.value['account_id'] AS validator_address       	 , vp.value['stake']::bigint / 1e24 AS staked_balance     FROM near.core.fact_blocks AS b        , lateral flatten( input => b.chunks ) AS c        , lateral flatten( input => c.value['validator_proposals']) AS vp   	WHERE b.block_timestamp >= '2021-09-01'     QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1 ), proposals_per_epoch AS (   	SELECT p.block_timestamp   		 , p.epoch_id   		 , p.validator_address   		 , p.staked_balance   		 , e.epoch_num      	FROM proposals AS p   		INNER JOIN dim_epochs AS e   			ON e.epoch_id = p.epoch_id   	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1 ), block_producers_per_epoch AS (   	SELECT b.epoch_id   		 , e.epoch_num   		 , b.block_author AS validator_address   		 , sa.staked_balance   		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced      	FROM near.core.fact_blocks AS b   		INNER JOIN dim_epochs AS e   			ON e.epoch_id = b.epoch_id   		INNER JOIN staking_actions AS sa   			ON sa.epoch_num = e.epoch_num   			AND sa.validator_address = b.block_author   	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1 ), dim_validators AS (   	SELECT validator_address   		 , min(epoch_num) AS start_epoch   		 , min(block_timestamp) AS start_time      	FROM staking_actions AS sa   	GROUP BY 1 ), dim_table AS (   	SELECT v.validator_address   		 , e.epoch_num   		 , e.start_time      	FROM dim_validators AS v, dim_epochs AS e   	WHERE v.start_epoch <= e.epoch_num ), validator_status_per_epoch AS (   	SELECT dt.epoch_num   		 , dt.start_time   		 , dt.validator_address   		 , coalesce(   				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS   					OVER (partition by dt.validator_address    					  	  order by dt.epoch_num   					  	  rows between unbounded preceding   								   and current row),   				0) AS staked_balance   		 , bp.blocks_produced   		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer      	FROM dim_table AS dt   		LEFT JOIN block_producers_per_epoch AS bp   			ON bp.epoch_num = dt.epoch_num   			AND bp.validator_address= dt.validator_address   		LEFT JOIN proposals_per_epoch AS p   			ON p.epoch_num = dt.epoch_num   			AND p.validator_address= dt.validator_address ), ranked_validators AS (   	SELECT epoch_num   		 , start_time   		 , validator_address   		 , staked_balance   		 , blocks_produced   		 , is_proposer   		 , row_number() OVER (partition by epoch_num order by staked_balance desc) AS _rank 		 , sum(staked_balance) OVER (partition by epoch_num order by staked_balance desc) AS _cumulative_total_stake   		 , staked_balance / _cumulative_total_stake AS _stake_ratio      	FROM validator_status_per_epoch ), thresholded_validators AS (   	SELECT *         -- MIN_STAKE_RATIO=0.000160 from https://github.com/near/nearcore/blob/136de1510bbf96f29d5de6cf6e15d5a988698d6d/core/primitives/src/epoch_manager.rs   	   	-- Protocol update v1.23.0 - from thresholding to top 100 stake (epoch 1048 is just estimated from release date)   	 	-- Protocol update v1.29.0 - chunk-only producers added (epoch 1499 is just estimated from release date)   		 , (CASE WHEN epoch_num < 1048   				 THEN min(CASE WHEN blocks_produced > 0 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 WHEN epoch_num < 1499   				 THEN min(CASE WHEN _rank <= 100 AND _stake_ratio > 0.000160 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 ELSE min(CASE WHEN _rank <= 300 AND _stake_ratio > 0.000160 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 END) AS pseudo_seat_price   		 , (CASE WHEN staked_balance >= pseudo_seat_price    				  AND _rank <= 100    				  AND _stake_ratio > 0.000160    				 THEN True ELSE False END) AS is_block_producer      		 , (CASE WHEN epoch_num >= 1499    				  AND _rank BETWEEN 101 AND 300   				  AND _stake_ratio > 0.000160    				 THEN True ELSE False END) AS is_chunk_only_producer      		 , (CASE WHEN is_block_producer = True THEN 'Active (Block Producer)'   				 WHEN is_chunk_only_producer = True THEN 'Active (Chunk-Only Producer)'   				 ELSE 'Idle' END) AS validator_status      	FROM ranked_validators ) SELECT * FROM near.core.fact_blocks QUALIFY lag(block_id) OVER (order by block_id) != block_id - 1 LIMIT 1000
80265710-bd81-40bc-afb2-9dadc66db178,Subgraph LiveQuery,with livequery_call as ( select   livequery.live.udf_api(     'POST',     '<API_URL>',     {'Content-Type': 'application/json'},     {       'query': {},       'variables': {}     }   ) as res ) select * from livequery_call
dbf7cc69-5ac5-4f71-9f98-4132bd8342c6,Copy of 101. [Elite] Crypto-Cosmology, Part 1: Wormhole - Adoption rate,with shuttle_bridge_contract as(     (         select              'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' as contract_address,             'Account | Terra Bridge BSC' as contract_name     )     union     (         select             'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' as contract_address,             'Account | Terra Bridge ETH' as contract_name     ) ), shuttle_bridge_activity_list as(     (         select              block_timestamp,              tx_id,             msg_value:execute_msg:transfer:recipient::string as address         from              terra.msgs         where              msg_value:sender::string in (                 select                     contract_address                 from                     shuttle_bridge_contract             )     )     union all      (         select              block_timestamp,              tx_id,             msg_value:sender::string as address         from              terra.msgs         where              msg_value:execute_msg:transfer:recipient::string in (                 select                     contract_address                 from                     shuttle_bridge_contract             )     )     union all     (         select              block_timestamp,              tx_id,             msg_value:from_address::string as address         from              terra.msgs         where              msg_value:to_address::string in (                 select                     contract_address                 from                     shuttle_bridge_contract             )     )     union all     (         select              block_timestamp,              tx_id,             msg_value:to_address::string as address         from              terra.msgs         where              msg_value:from_address::string in (                 select                     contract_address                 from                     shuttle_bridge_contract             )     )   ), shuttle_bridge_address_list as(     select         distinct address     from          shuttle_bridge_activity_list ), receiving_native_terra_asset as(     select          block_timestamp,          event_attributes:recipient::string as address,          event_attributes:denom::string as symbol,          event_attributes:amount::float/1e6 as amount      from         terra.msg_events     where tx_id in (         select              tx_id          from              terra.msgs          where              msg_value:contract::string = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'         and              msg_value:execute_msg:submit_vaa is not null     )      and          event_type = 'from_contract'     and          event_attributes:action::string = 'complete_transfer_terra_native'     and          tx_status = 'SUCCEEDED' ), receiving_wrapped_asset as(     select          block_timestamp,          event_attributes:recipient::string as address,          event_attributes:"1_contract_address"::string as symbol,          event_attributes:"0_amount"::float/1e6 as amount      from          terra.msg_events     where          tx_id in (             select                  tx_id              from                  terra.msgs              where                  msg_value:contract::string = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'             and                  msg_value:execute_msg:submit_vaa is not null         )      and          event_type = 'from_contract'     and          tx_status = 'SUCCEEDED'     and          event_attributes:"0_action"::string = 'complete_transfer_wrapped' ), sending_asset as(     select          block_timestamp,          msg_value:sender::string as address,           case when              msg_value:execute_msg:initiate_transfer:asset:info:native_token:denom::string is not null then msg_value:execute_msg:initiate_transfer:asset:info:native_token:denom::string         when              msg_value:execute_msg:initiate_transfer:asset:info:token:contract_addr::string is not null then msg_value:execute_msg:initiate_transfer:asset:info:token:contract_addr::string          end as              symbol,         msg_value:execute_msg:initiate_transfer:recipient_chain::float as chain_ID,         msg_value:execute_msg:initiate_transfer:asset:amount::float/1e6 as amount, msg_value from terra.msgs     where          msg_value:contract::string = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     and          tx_status = 'SUCCEEDED'     and          msg_value:execute_msg:initiate_transfer:recipient_chain is not null ), wormhole_activity_list as(     (         select             block_timestamp,             address         from             receiving_native_terra_asset     )     union all      (         select             block_timestamp,             address         from             receiving_wrapped_asset     )         union all      (         select             block_timestamp,             address         from             sending_asset     ) ) select      blocktime,      count(address) over (partition by blocktime order by blocktime),     count(address) over (order by blocktime) from(     select          blocktime,          address,          row_number() over (partition by address order by blocktime) as row_number      from(         select             date_trunc('day', wormhole_activity_list.block_timestamp) as blocktime,              shuttle_bridge_address_list.address as address         from              wormhole_activity_list         left join             shuttle_bridge_address_list         on             wormhole_activity_list.address = shuttle_bridge_address_list.address     )   	where   		address is not null     qualify    		row_number = 1 )
2eaafe91-f73e-48e3-be3c-fdf61447caac,Untitled Query,SELECT * FROM terra.msg_events WHERE event_attributes::string LIKE 'terra1en087uygr8f57vdczvkhy9465t9y6su4ztq4u3' limit 10
1f02620f-b602-4957-beab-8a60b7aeed49,Anchor Earn - Net Balances [T123],-- updated w col-5 data  WITH    redemptions as (   select      date_trunc('d', block_timestamp) as date,     sum(event_attributes:redeem_amount::float) / pow(10,6) as redemption_amount,     avg(event_attributes:redeem_amount::float) / pow(10,6) as avg_redemption,     min(event_attributes:redeem_amount::float) / pow(10,6) as min_redemption,     max(event_attributes:redeem_amount::float) / pow(10,6) as max_redemption, 	count(1) as redemption_tx_count   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   group by 1  -- below returns aUST not UST      --  select  --    date_trunc('day', block_timestamp) as date,  --    sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount,  --    avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption,  --    min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption,  --    max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, 	-- count(1) as redemption_tx_count  --  from terra.msgs  --  where tx_status = 'SUCCEEDED'  --  	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract  --  	and   --  		-- col 4  --  		(msg_value:execute_msg:send:msg LIKE '%redeem_stable%'  --  		or  --  		-- col 5  --    		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract  --  			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=') --col 5 withdraw message  --  	)  --  group by 1 ), all_deposit as (   SELECT     date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount,   	avg(msg_value:coins[0]:amount::float) / pow(10,6) as avg_deposit,   	min(msg_value:coins[0]:amount::float) / pow(10,6) as min_deposit,   	max(msg_value:coins[0]:amount::float) / pow(10,6) as max_deposit,   	count(1) as deposit_tx_count   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1 ), combined_activity as (   select     *,     deposit_amount - redemption_amount as net_depositor_change   from all_deposit   left join redemptions using (date) ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     avg(event_attributes:"0_repay_amount"::float) / pow(10,6) as avg_repay,     min(event_attributes:"0_repay_amount"::float) / pow(10,6) as min_repay,     max(event_attributes:"0_repay_amount"::float) / pow(10,6) as max_repay,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1 ), anchor_earn as (   select   	combined_activity.date,   	combined_activity.deposit_amount,   	combined_activity.avg_deposit,   	combined_activity.min_deposit,   	combined_activity.max_deposit,   	combined_activity.deposit_tx_count,   	combined_activity.redemption_amount,   	combined_activity.avg_redemption,   	combined_activity.min_redemption,   	combined_activity.max_redemption,   	combined_activity.redemption_tx_count,   	combined_activity.net_depositor_change,     -- handle null values cause liqidations don't happen daily   	coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   	coalesce(liquidations.avg_repay,0) as avg_repay,   	coalesce(liquidations.min_repay,0) as min_repay,   	coalesce(liquidations.max_repay,0) as max_repay   from combined_activity   left join liquidations using (date) ),    aggregations as (   SELECT     *,     net_depositor_change as daily_change,     SUM(deposit_amount) OVER (ORDER BY date) as cumulative_deposits,     -SUM(redemption_amount) OVER (ORDER BY date) as cumulative_redemptions,     -SUM(loan_autorepay_amount) OVER (ORDER BY date) as cumulative_liquidations,     SUM(daily_change) OVER (ORDER BY date) as cumulative_anchor_earn,   	avg(avg_deposit) over (order by date rows between 6 preceding and current row) as deposit_ma,   	avg(avg_redemption) over (order by date rows between 6 preceding and current row) as redemption_ma,   	avg(avg_repay) over (order by date rows between 6 preceding and current row) as repay_ma,   	avg(deposit_tx_count) over (order by date rows between 6 preceding and current row) as deposit_tx_ma,   	avg(redemption_tx_count) over (order by date rows between 6 preceding and current row) as redemption_tx_ma,   	avg(max_deposit) over (order by date rows between 6 preceding and current row) as max_deposit_ma,   	avg(max_redemption) over (order by date rows between 6 preceding and current row) as max_redemption_ma   FROM anchor_earn   ORDER BY 1   ),    final as (      select * from aggregations    ) select * from final
ddaa5906-596d-4fdb-8ae4-ec6d63d1f2c1,Untitled Query,SELECT DATE(block_timestamp) AS _date,        count(tx_hash) FROM ethereum.core.ez_nft_sales   WHERE DATE(block_timestamp) BETWEEN '2022-07-01' AND '2022-07-31'    GROUP BY 2, 1   ORDER BY _date;
a594e836-31b2-431a-9a89-35e31f617ef4,KRT transaction volume [T68],WITH krt AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_amount) as total,     sum(event_amount_usd) as total_usd   FROM terra.transfers   WHERE tx_status = 'SUCCEEDED'     AND event_currency = 'KRT'     AND block_timestamp > CURRENT_DATE - 90     AND block_timestamp < CURRENT_DATE   GROUP BY 1 ) SELECT   *,   avg(total) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as total_weekly_ma,   avg(total_usd) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as total_usd_weekly_ma FROM krt
2edc7882-bdc6-4714-b8f8-934d47cee75c,Flow Macro Events,with   txs as (     select       tx_id,       block_timestamp,       proposer,       payer,       authorizers     from       flow.core.fact_transactions     where       block_timestamp::date >= current_date - interval '14 days'       and tx_succeeded       and block_timestamp::date != current_date   ) select   block_timestamp::date as _time,   count(distinct proposer) as distinct_proposers,   count(distinct VALUE) as distinct_authorizers,   count(distinct payer) as distinct_payers,   count(distinct tx_id) as tx_count from   txs,   lateral flatten(input => authorizers) group by   1 order by   1
62b7828d-8d51-40e9-8431-0f66f83409cd,Untitled Query,select * from avalanche.transfers limit 100
ddbfb6ca-c5f3-433f-aac6-2fdb4f8adc3f,Untitled Query,select    action_id,   txn_hash,   block_timestamp,   args,   args:msg::object as msg,   typeof(msg),   msg:force,   msg:actions,   msg:actions[1]:token_out from mdao_near_dynamic.actions_events_function_call    where txn_hash = 'BmEy5HiG7xdgDab3bH7B5htM2JBq1k5E89wHMogjcJRd' and args:msg::object:actions[1]:token_out = 'usn'
13936e14-9cfc-4d88-af86-56db70148272,THORChain Liquidity Actions since restart [THOR22],WITH actions AS (   SELECT     date_trunc('day', block_timestamp) as date,     lp_action,     sum(rune_amount_usd + asset_amount_usd) as liquidty   FROM thorchain.liquidity_actions   WHERE block_timestamp > '2021-11-17T00:00:00Z'   GROUP BY 1, 2   ORDER BY 1   ) SELECT   *,   sum(liquidty) OVER (PARTITION BY lp_action ORDER BY date) as cumsum FROM actions
2f3800cc-088f-4f17-8ba4-7680002d2dfd,Terra Daily Active Wallets by Protocol [Flash119],-- standard events like transfers, swaps and ibc WITH daws AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct msg_value:sender) as unique_wallets   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL   GROUP BY 1   ), staking AS (   SELECT     date_trunc('day', block_timestamp) as date,     CASE       WHEN msg_type = 'distribution/MsgWithdrawDelegatorReward' THEN 'distribution/MsgWithdrawDelegationReward' -- label changes on 10/1 idk why       ELSE msg_type     END AS msg_type,     count(distinct msg_value:delegator_address) as unique_wallets FROM terra.msgs WHERE msg_value:delegator_address IS NOT NULL   -- AND block_timestamp > CURRENT_DATE - 30   AND msg_module != 'oracle'   AND msg_module != 'core' GROUP BY 1,2 )    -- price AS ( --   SELECT --     date_trunc('day', block_timestamp) as date, --     avg(price_usd) as avg_price --   FROM terra.oracle_prices --   WHERE symbol = 'LUNA' --   GROUP BY 1 -- ) SELECT   *,   avg(unique_wallets) OVER (ORDER BY daws.date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM daws JOIN price   ON daws.date = price.date ORDER BY 1
de4dc677-03e1-457e-9e38-c603ac717307,ANC yield reserve balance & luna price [T33],WITH luna AS (SELECT   date_trunc('day', block_timestamp) as luna_date,   avg(price_usd) as avg_price FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-03-14T00:00:00Z' GROUP BY 1 ORDER BY 1)    SELECT   date_trunc('day', date) as anc_date,   avg(balance) as daily_ust_balance,   avg_price FROM terra.daily_balances anc   JOIN luna ON luna.luna_date = anc_date WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8' 	AND currency = 'UST' GROUP BY 1 ORDER BY 1
333ef9ad-f6e9-454a-8435-1202db56696f,2023-04-04 06:19 PM,
dbe6e347-c56a-4601-95b5-cd9bc8e966f7,Magic Eden Sales With Join copy,-- forked from alitaslimi / Magic Eden Sales With Join @ https://flipsidecrypto.xyz/alitaslimi/q/Ywtf6KMx1tZi/magic-eden-sales-with-join  with ------------------------------ Magic Eden ------------------------------   magic_eden as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       output2.pubkey_script_address AS buyer,       input3.pubkey_script_address AS seller,       output3.value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id       join bitcoin.core.fact_outputs output2 on transactions.tx_id = output2.tx_id       join bitcoin.core.fact_outputs output3 on transactions.tx_id = output3.tx_id       join bitcoin.core.fact_outputs output4 on transactions.tx_id = output4.tx_id       join bitcoin.core.fact_outputs output7 on transactions.tx_id = output7.tx_id     where       transactions.block_number > 767429       and transactions.block_timestamp::date >= '2023-03-20'       and input3.index = 2       and input4.index = 3       and output2.index = 1       and output3.index = 2       and output4.index = 3       and output7.index = 6       and output4.pubkey_script_address = 'bc1qcq2uv5nk6hec6kvag3wyevp6574qmsm9scjxc2'       and input4.pubkey_script_address = output7.pubkey_script_address   ) ------------------------------ Result ------------------------------ select   block_timestamp::date as "Date",   'Magic Eden' as "Marketplace",   count(distinct buyer) as "Buyers",   sum(amount) as "Volume" from   magic_eden group by   "Date" order by   "Date" desc
55bef025-c1c0-46f9-922d-c2f24b02885a,Untitled Query,select min(block_timestamp) from flow.core.fact_blocks
e01dd09f-f594-4b8b-a61f-5cd1f2c4b56f,MIR terraswap volume [T57],-- Buying token with UST // UST -> token swap WITH buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(token) as quantity_bought,   sum(ust) as volume_bought FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as token FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1amv303y8kzxuegvurh0gug2xe9wkgj65enq2ux' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6' -- MIR token ) GROUP BY 1 ORDER BY 1), -- Selling token to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(token) as quantity_sold,   sum(ust) as volume_sold FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as token,   event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6' -- MIR token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1amv303y8kzxuegvurh0gug2xe9wkgj65enq2ux' -- swap contract ) GROUP BY 1 ORDER BY 1) SELECT   buys.date,   -- quantity_bought,   volume_bought,   -- -quantity_sold as sold_neg,   volume_sold,   -- quantity_bought - quantity_sold as net_daily_token_volume,   volume_bought + volume_sold as gross_volume_buy_sell FROM buys JOIN sells ON sells.date = buys.date WHERE buys.date > GETDATE() - interval '2 weeks' ORDER BY 1
89344ccc-3c0e-4040-8be0-9df9e5528463,Untitled Query,select count(distinct nft_id) from flow.core.dim_topshot_metadata
30de678b-6c29-49ba-b01f-b10889fdb3dc,aUST Bridge Txs,SELECT * FROM terra.msg_events WHERE event_type = 'from_contract'   AND event_attributes:action = 'transfer'   AND event_attributes:contract_address = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST   AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc'   AND block_timestamp > CURRENT_DATE - 30
311a443e-c2d2-4430-be05-b2462f023140,Untitled Query,select * from flow.core.fact_nft_sales where price is null;
23583717-d536-4e7f-b721-575c9eb4b5e0,Anchor Mariner Hunt 2,SELECT * FROM terra.msg_events WHERE tx_id = 'E9334A904FA2BFDC5AAFC37548A4729F1E6807A07A39DDF4F6EDA051362C2652'   AND event_type = 'execute_contract'
e04c6b3c-7e09-45ef-ae1f-88ad190c32d7,RUNE price vs swap volume [THOR9],WITH trading_volume AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1   ), price AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(rune_usd) as price   FROM thorchain.prices   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1   ), combined AS (   SELECT     price.date as date,     volume,     price   FROM price   JOIN trading_volume   	ON price.date = trading_volume.date ) SELECT   date,   volume,   avg(volume) OVER (ORDER BY date ROWS BETWEEN 72 PRECEDING AND CURRENT ROW) as volume_ma,   price FROM combined ORDER BY 1
e1568775-2a46-4020-aa6d-4ffc003d1bcc,Untitled Query,select * from near.core.dim_address_labels limit 10;
b44a9723-c909-4cd2-89d4-5d2bbc7ca1d8,Hunt TX1 - Swap MATIC for AAVE,SELECT   block_id,   tx_id,   to_label FROM polygon.transactions WHERE tx_id = '0xfdde3ef04efc1372892e83a74c25877258cce8e36ba1cdad7219818bd8826617'
544c9ae2-4087-4e47-aea8-d852f021c43e,Untitled Query,select 	block_timestamp::date, 	count(distinct )
32725f43-4740-4f12-9adb-689a36d31e59,UST On Chain Swaps - terraswap,with ust_ask as (   select    	block_timestamp,   	offer_amount,     offer_currency,     token_1_amount, -- token 1 is ask     (token_0_amount * price0_usd) / token_1_amount as ust_p,     token_0_amount, -- token 0 is offer     price0_usd,     price1_usd as ust_oracle   from terra.swaps   where ask_currency = 'UST'     and price0_usd is not null     and offer_currency = 'LUNA' ), ask_agg as (      select   	time_slice(block_timestamp, 10, 'minute') as _date,   	avg(ust_p) as ust_ask_swap_price,     	avg(ust_oracle) as avg_ust_oracle   from ust_ask   where block_timestamp >= '2022-05-07'   group by 1 ), ust_offer as (   select    	block_timestamp,     ask_currency,     token_1_amount, -- token 1 is ask     (token_1_amount * price1_usd) / offer_amount as ust_p,     token_0_amount, -- token 0 is offer     price1_usd,     price0_usd as ust_oracle   from terra.swaps   where offer_currency = 'UST'     and price1_usd is not null     and ask_currency = 'LUNA'    ), offer_agg as (      select   	time_slice(block_timestamp, 10, 'minute') as _date,   	avg(ust_p) as ust_offer_swap_price,     avg(ust_oracle) as avg_ust_oracle   from ust_offer   where block_timestamp >= '2022-05-07'   group by 1 ), combo as (   select   	a._date,   	a.ust_ask_swap_price,   	o.ust_offer_swap_price,   	a.avg_ust_oracle   from ask_agg a   left join offer_agg o    	using (_date)    ) select * from combo order by 1
97e04fcf-7b4e-4a7e-9bb4-7d1d013f7458,Anchor Withdrawals,-- with -- og_withdraw AS --   (SELECT  -- 	date_trunc('day', block_timestamp) as date, --   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount, --   	avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption, --   	min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption, --   	max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, -- 	count(1) as redemption_tx_count --   FROM terra.msgs --   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract --   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%' --   	AND tx_status = 'SUCCEEDED' --   and block_timestamp < '2021-09-30T00:00:00Z' -- col-5 migration --   GROUP BY 1 -- ), -- col_five_withdraw as ( --   select --     date_trunc('day', block_timestamp) as date, --     sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount, --     avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption, --     min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption, --     max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, -- 	count(1) as redemption_tx_count --   from terra.msgs --   where msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract --     and msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract --     and block_timestamp > '2021-10-01T00:00:00Z' --     and tx_status = 'SUCCEEDED' --     and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=' -- withdraw --   group by 1 -- ), -- transition_day as ( --   select --   	block_timestamp, --   	msg_value --   from terra.msgs --   where tx_status = 'SUCCEEDED' --   	and block_timestamp LIKE '2021-09-30%' --   	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' --   	and (msg_value:execute_msg:send:msg LIKE '%redeem_stable%' --   		or --     		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' --   			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=') --   	) -- ), -- transition_day_agg as ( --   select --     date_trunc('day', block_timestamp) as date, --     sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount, --     avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption, --     min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption, --     max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, -- 	count(1) as redemption_tx_count --   from transition_day --   group by 1 -- ),    -- all_withdraw as ( --   select * from og_withdraw --   UNION --   select * from col_five_withdraw --   UNION --   select * from transition_day_agg -- ) -- select * from all_withdraw with redemptions as (   select  --    date_trunc('day', block_timestamp) as date,  --    sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount,  --    avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption,  --    min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption,  --    max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, 	-- count(1) as redemption_tx_count   *   from terra.msgs   where tx_status = 'SUCCEEDED'   	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	and (msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   		or     		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=')   	)   -- group by 1 )       select * from redemptions limit 1000
97ad8b2f-8e51-4c86-bc4e-fce6c25354ec,Inbound Non-Native Tokens [T101],WITH inbound_non_native AS (   SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_assets AS (   SELECT    'terra103c6z8jq8s2yszvxj9mpah0jlvky2pek54f2yg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra127ww0al7uj9vyg7cv2gtcqenhrjzlnq5vaq6dh' as token_contract_address,   'whUST' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra132zppkzw88j35hpwxkrpzymujekky3wcuru65n' as token_contract_address,   'whATOM' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur' as token_contract_address,   'whwstETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r' as token_contract_address,   'whWETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk' as token_contract_address,   'whSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19phjr9363x44yukx6dl6d4zvn2wqc8gpkk0tm7' as token_contract_address,   'whETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19t8cxscre0jss7nejqy29c97fkg7els3v8zujg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55' as token_contract_address,   'whWBTC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva' as token_contract_address,   'whUSDT' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8' as token_contract_address,   'whWBNB' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq' as token_contract_address,   'weMATIC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8' as token_contract_address,   'whWMATIC' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dx9f62gmeyjerskc3uf5pyuwq3vhwuf6a8wpn4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl' as token_contract_address,   'whMIR' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1fme0uqgjucph3kelyejm6yuj60e4te8647gx6v' as token_contract_address,   'whLUNA' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gdapfuda0dxtjc98raemhszntcxty7chyr0wpd' as token_contract_address,   'whORION' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gtjr689cyaau20k8ezdxy8eup34tntun5xr9l2' as token_contract_address,   'whDOGE' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1jlh9xlyahg2d2qwat8jl4evqzuua452dafzqs5' as token_contract_address,   'whWETH' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1jpkhwg9skkgml95v8y8hhp8n2wlktzqx6w2gzc' as token_contract_address,   'whRIN' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1k7tstwhf25wm45x329ny84xe4n2z2nnq9ekuv2' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x' as token_contract_address,   'whUSDC' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03' as token_contract_address,   'ORION' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1mzm7nflz93qm7qhftykquv3yklyepwn4x2ujuw' as token_contract_address,   'whBETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06' as token_contract_address,   'whUSDC' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1pkfkxzxqawdze8wa6enwh0hfw8yhlkswnqn328' as token_contract_address,   'whaUST' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd' as token_contract_address,   'whBUSD' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap' as token_contract_address,   'whstSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1tnndhfm0khgm3h766edku6833rz392p8cr82y8' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '5' as decimals   UNION   SELECT    'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx' as token_contract_address,   'whMIR' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1v584dmdvtlh7rpa22cslnzwkennm39ud5ngdld' as token_contract_address,   'whONT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd' as token_contract_address,   'whUSDT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1xu3nyee55dfe5vxqtg9m4rkex8u2t6n2etl08h' as token_contract_address,   'whUSDT' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu' as token_contract_address,   'whUSDC' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95' as token_contract_address,   'whDAI' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ukmck39pkrhljc0my0hw7yu0quarncajcqyfz8' as token_contract_address,   'whCake-LP' as name,   '4' as asset_chain,   '8' as decimals ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), named_assets AS (   SELECT     block_timestamp,     name,     asset_chain,     amount,     decimals   FROM inbound_non_native   JOIN wh_assets ON inbound_non_native.token_contract_address = wh_assets.token_contract_address   ), adjusted AS (   SELECT     block_timestamp,     named_assets.name as asset,     chain_ids.name as origin_chain,     amount,     amount / pow(10, decimals) as adjusted_amount   FROM named_assets   JOIN chain_ids ON named_assets.asset_chain = chain_ids.id   ) SELECT   date_trunc('day', block_timestamp) as date,   origin_chain,   asset,   sum(adjusted_amount) as token_count FROM adjusted GROUP BY 1,2,3 ORDER BY 1
97d95b04-1812-4f96-9a89-7eb971c76b7e,yearn.finance vault deposit,SELECT block_timestamp,   tx_id,   event_name,   event_id,   symbol,   amount,   amount_usd FROM ethereum.udm_events WHERE from_address = lower('0x04ae8c108743167c7457073ba8C1571FD5D56325') OR origin_address = lower('0x04ae8c108743167c7457073ba8C1571FD5D56325') ORDER BY 1 desc LIMIT 4
e3439242-8f47-4899-8fc8-8e9227ba9bb9,Untitled Query,select count(distinct nft_id) from flow.core.dim_topshot_metadata
e30d79c4-d481-490b-8ec6-e939985de27d,Untitled Query,with eth_txns as ( SELECT   matic_value as value_matic, block_number, block_timestamp FROM   polygon.core.fact_transactions WHERE   matic_value > 0   AND block_timestamp > dateadd(day, -30, current_timestamp)   AND status = 'SUCCESS' ) SELECT     SUM(CASE WHEN value_matic * price_close < 100 THEN value_matic * price_close ELSE 0 END) AS less_than_usd_100,     SUM(CASE WHEN value_matic * price_close BETWEEN 100 AND 500 THEN value_matic * price_close ELSE 0 END) AS usd_100_to_500,     SUM(CASE WHEN value_matic * price_close BETWEEN 501 AND 1000 THEN value_matic * price_close ELSE 0 END) AS usd_501_to_1000,     SUM(CASE WHEN value_matic * price_close BETWEEN 1001 AND 5000 THEN value_matic * price_close ELSE 0 END) AS usd_1001_to_5000,     SUM(CASE WHEN value_matic * price_close BETWEEN 5001 AND 10000 THEN value_matic * price_close ELSE 0 END) AS usd_5001_to_10000,     SUM(CASE WHEN value_matic * price_close BETWEEN 10001 AND 50000 THEN value_matic * price_close ELSE 0 END) AS usd_10001_to_50000,     SUM(CASE WHEN value_matic * price_close BETWEEN 50001 AND 100000 THEN value_matic * price_close ELSE 0 END) AS usd_50001_to_100000,     SUM(CASE WHEN value_matic * price_close BETWEEN 100001 AND 500000 THEN value_matic * price_close ELSE 0 END) AS usd_100001_to_500000,     SUM(CASE WHEN value_matic * price_close BETWEEN 500001 AND 1000000 THEN value_matic * price_close ELSE 0 END) AS usd_500001_to_1000000,     SUM(CASE WHEN value_matic * price_close > 1000000 THEN value_matic * price_close ELSE 0 END) AS greater_than_usd_1000000 FROM eth_txns LEFT JOIN     (SELECT hour, price as price_close from ethereum.core.fact_hourly_token_prices          WHERE hour > dateadd(day, -30, current_timestamp)   		and symbol = 'MATIC') AS prices      on date_trunc('m',eth_txns.block_timestamp) = block_timestamp
500ef522-9326-4c78-bc55-d5c46b273fd0,top delegators and delegations [T44],WITH delegations AS ( SELECT   delegator_address,   validator_address_label,   action,   event_amount,     CASE       WHEN action = 'delegate' THEN event_amount       WHEN action = 'undelegate' THEN -event_amount   	  WHEN action = 'redelegate' THEN -event_amount   END AS net_amount FROM terra.staking ORDER BY 3 desc ), delegators AS ( SELECT   address,   balance -- total staked amount, only for pulling top 25 FROM terra.daily_balances WHERE balance_type = 'staked' 	AND date LIKE '2021-08-17%'   	AND address != 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' ORDER BY balance DESC LIMIT 25) SELECT * FROM delegators JOIN delegations ON delegations.delegator_address = delegators.address WHERE action = 'delegate' ORDER BY 1, 2 desc
f9585d48-8622-4a37-b777-e2e001b8e7be,delegation events [T44],WITH top AS ( SELECT address, balance FROM terra.daily_balances WHERE balance_type = 'staked'   AND address != 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' -- choosing to not include bLUNA   AND date LIKE '2021-08-17%' ORDER BY balance desc limit 25), delegations AS ( SELECT   msg_value:delegator_address as delegator_address,   msg_value:amount:amount::float / pow(10,6) as amount,   msg_value:validator_address as validator_address,   label FROM terra.msgs JOIN terra.validator_labels ON msg_value:validator_address = operator_address WHERE msg_type = 'staking/MsgDelegate') SELECT 	address,   	label,   	sum(amount),   	sum(balance) as balance FROM top JOIN delegations ON top.address = delegations.delegator_address GROUP BY 1, 2 ORDER BY 1, balance desc
1bc461e6-82e4-40fc-a34d-ec0c30ce5df3,RUNE price vs swap volume since restart [THOR22],WITH trading_volume AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-11-18T00:00:00Z'   GROUP BY 1   ), price AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(rune_usd) as price   FROM thorchain.prices   WHERE block_timestamp > '2021-11-18T00:00:00Z'   GROUP BY 1   ), combined AS (   SELECT     price.date as date,     volume,     price   FROM price   JOIN trading_volume   	ON price.date = trading_volume.date ) SELECT   date,   volume,   avg(volume) OVER (ORDER BY date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as volume_ma,   price FROM combined ORDER BY 1
1ed1eaf2-5849-4f86-a63b-69ff0a673947,Untitled Query,select * from terra.blocks where block_timestamp like '2022-04-01%' order by 1
2277ae61-a538-4a56-a9b6-ac6b6c9229d8,terraswap pools volume [T57],WITH terraswap_addresses AS (   SELECT     address,     address_name   FROM terra.labels   WHERE label = 'terraswap'     AND label_type = 'dex' ), -- Buying token with UST // UST -> token swap buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   pool,   sum(token_amt) as quantity_bought,   sum(ust) as volume_bought FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as ust,      event_attributes:return_amount / pow(10,6) as token_amt,     terraswap_addresses.address_name as pool,     event_attributes:"1_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"0_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'swap'     AND event_attributes:"1_action" = 'transfer'     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' ) GROUP BY 1, 2 ORDER BY 1), -- Selling token to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   pool,   sum(token_amount) as quantity_sold,   sum(ust) as volume_sold FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as token_amount,     event_attributes:return_amount / pow(10,6) as ust,     terraswap_addresses.address_name as pool,     event_attributes:"0_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"1_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'send'     AND event_attributes:"1_action" = 'swap'     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' ) GROUP BY 1, 2 ORDER BY 1) -- main query SELECT * FROM (   SELECT     buys.date,     buys.pool,     -- quantity_bought,     -- volume_bought,     -- -quantity_sold as sold_neg,     -- -volume_sold as vol_sold_neg,     -- quantity_bought - quantity_sold as net_daily_token_volume     sum(volume_bought + volume_sold) as gross_daily_volume,     RANK() OVER (PARTITION BY buys.date ORDER BY gross_daily_volume desc) as rank   FROM buys   JOIN sells ON sells.date = buys.date   GROUP BY 1, 2   ORDER BY 1) WHERE rank < 6 ORDER BY 1, rank
97ea90d7-6c41-4239-aa51-c5ce8475eabd,41 - total transaction volume,WITH fee_tx AS ( SELECT   date_trunc('week', block_timestamp) as week,   count(distinct tx_id) as fee_txs FROM terra.transactions WHERE block_timestamp > '2020-10-25T23:59:59Z'   AND fee[0]:denom::string IS NOT NULL GROUP BY 1 ORDER BY 1 ), no_fee_tx AS (   SELECT   date_trunc('week', block_timestamp) as week,   count(distinct tx_id) as no_fee_txs FROM terra.transactions WHERE block_timestamp > '2020-10-25T23:59:59Z' GROUP BY 1 ORDER BY 1 ) SELECT * FROM fee_tx JOIN no_fee_tx ON fee_tx.week = no_fee_tx.week
bc11e9d3-f502-41c4-a560-21d8e3604cfb,Untitled Query,select * from near.core.fact_receipts where tx_hash = 'J2oZpZCQV5qZRKUH62StnjUhB199zDTTGjeikgRjPGkm' order by receipt_index desc
bc3fe136-b5ea-4f58-9043-748939b09638,Cosmos Delay,with   cosmos as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_blocks' as table_name     from       cosmos.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_transactions' as table_name     from       cosmos.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msgs' as table_name     from       cosmos.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msg_attributes' as table_name     from       cosmos.core.fact_msg_attributes   ) select   *,   min_delay / 60 as hrs_delay from   cosmos
b685fb56-c9ac-445d-bb80-f78e079c188e,Untitled Query,
608b57c2-2def-49f2-9895-26fb01cd0495,NEAR Contract Visualizer (near crowd)  copy,-- forked from kida / NEAR Contract Visualizer (near crowd)  @ https://flipsidecrypto.xyz/kida/q/dllKAL11PGsA/near-contract-visualizer-near-crowd  with call_contracts as (     select        block_timestamp::date as date,       lower(trim(project_name)) as project_name,        count(method_name) as call_contracts,        count(         DISTINCT(tx_hash)       ) as transactions,        count(         DISTINCT(signer_id)       ) as users      from        near.core.fact_actions_events_function_call a        join near.core.dim_address_labels b on a.receiver_id = b.address      where        block_timestamp::date >= '2021-01-01'        and block_timestamp::date <= CURRENT_DATE        and (lower(trim(project_name)) IN ('nearcrowd') or lower(trim(b.address)) IN ('nearcrowd'))     group by        1,2   ),    volume as (     select        block_timestamp::date as date,       lower(trim(b.project_name)) as project_name,        sum(         deposit / pow(10, 24)       ) as near_amount,        avg(         deposit / pow(10, 24)       ) as avg_near_amount     from        NEAR.core.fact_transfers a        join near.core.dim_address_labels b on a.tx_receiver = b.address      where        block_timestamp::date >= '2021-01-01'        and block_timestamp::date <= CURRENT_DATE        and (lower(trim(project_name)) IN ('nearcrowd') or lower(trim(b.address)) IN ('nearcrowd'))       and STATUS = 'true'      group by        1,2   ),   gas_fee as (     select        block_timestamp::date as date,       lower(trim(b.project_name)) as project_name,        sum(         TRANSACTION_FEE / pow(10, 24)       ) as gas_amount,       avg(         TRANSACTION_FEE / pow(10, 24)       ) as avg_gas_amount     from        NEAR.core.fact_transactions a        join near.core.dim_address_labels b on a.tx_receiver = b.address      where        block_timestamp::date >= '2021-01-01'        and block_timestamp::date <= CURRENT_DATE        and (lower(trim(project_name)) IN ('nearcrowd') or lower(trim(b.address)) IN ('nearcrowd'))     group by        1,2   ),      date_object as (     select distinct       date_day as date,       lower(trim(project_name)) as project_name     from       ethereum.core.dim_dates d     join        near.core.dim_address_labels l     where       date_day >= '2021-01-01'        and date_day <= CURRENT_DATE        and (lower(trim(project_name)) IN ('nearcrowd') or lower(trim(l.address)) IN ('nearcrowd'))   ),      agg as (     select       coalesce(c.date, d.date) as date,       coalesce(c.project_name, d.project_name) as project_name,        users,       transactions,       call_contracts,       near_amount,       avg_near_amount,       coalesce(gas_amount, 0) as gas_amount,       coalesce(avg_gas_amount, 0) as avg_gas_amount          from (     select        coalesce(a.date, b.date) as date,       coalesce(a.project_name, b.project_name) as project_name,        coalesce(users, 0) as users,        coalesce(transactions, 0) as transactions,        coalesce(call_contracts, 0) as call_contracts,        coalesce(near_amount, 0) as near_amount,        coalesce(avg_near_amount, 0) as avg_near_amount     from        volume a      full outer join call_contracts b on a.project_name = b.project_name  and a.date = b.date   ) c     full outer join gas_fee d on c.project_name = d.project_name and c.date = d.date   ),      date_agg as (     select       d.date,       d.project_name,       nvl(users, 0) as users,        nvl(transactions, 0) as transactions,        nvl(call_contracts, 0) as call_contracts,        nvl(near_amount, 0) as near_amount,        nvl(avg_near_amount, 0) as avg_near_amount,        nvl(gas_amount, 0) as gas_amount,       nvl(avg_gas_amount, 0) as avg_gas_amount     from       date_object d     join       agg a     on a.date = d.date and a.project_name = d.project_name        )      select       *,       sum(near_amount) over (partition by project_name order by date) as cum_near_amount,       sum(transactions) over (partition by project_name order by date) as cum_transactions,       sum(call_contracts) over (partition by project_name order by date) as cum_call_contracts   from date_agg   order by date, project_name
bcc2fa98-7850-40b4-98bf-7835991e2d24,Untitled Query,select * from terra.oracle_prices where block_timestamp like '2021-10-13%'   and symbol = 'PSI'   limit 100
d908f76f-c980-4eff-8393-6b0dfb89689f,Untitled Query,
a5f6c5cb-0225-458d-ac2e-d34653410f2b,Aurora Block Check Enhanced copy,-- forked from TheLaughingMan / Aurora Block Check Enhanced @ https://flipsidecrypto.xyz/TheLaughingMan/q/KuqFXHlXqWHQ/aurora-block-check-enhanced  -- forked from Aurora Block Check @ https://flipsidecrypto.xyz/edit/queries/e63bd8c0-dab3-491c-b31a-353c602f4d98 -- forked from Aurora Base @ https://flipsidecrypto.xyz/edit/queries/430db199-f894-42e3-96c0-950babe16171  with base as (   SELECT      b.BLOCK_NUMBER     , t.BLOCK_NUMBER as t_block_no     , b.tx_count as b_txns     , b.block_timestamp::date as ddate     , CASE WHEN t_block_no IS NULL AND b_txns!=0 THEN 1 ELSE 0 END as missing   FROM aurora.core.fact_blocks b   LEFT JOIN aurora.core.fact_transactions t ON b.block_number = t.block_number   ORDER BY BLOCK_NUMBER ASC ) SELECT    SUM(missing) as missing   , ddate from base GROUP BY ddate ORDER BY ddate DESC
5a9853e7-d4f2-4e86-a85b-8bd1daff469e,2023-03-20 04:13 PM,select   date_trunc(     'hour',     convert_timezone('UTC', 'America/Denver', block_timestamp)   ) as time_period,   count(distinct tx_hash) as txs from   arbitrum.core.fact_transactions where   block_timestamp::date >= '2023-03-23' group by   1 select max(block_number) from arbitrum.core.fact_transactions -- 72859234 vs -- 72868890
b7b9b848-f42b-4de2-8651-efc74f2160d9,Flow Payers - May 2 2023 copy,-- forked from Flow Payers - May 2 2023 @ https://flipsidecrypto.xyz/edit/queries/f21c4060-e81d-4702-bbab-dc304c1662bd  with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ) select   count(distinct payer) as distinct_new_payers from   payer_date where   first_tx_date = '2023-05-02'
a8906dbb-6b5e-4184-a89e-e592d9d47c5d,Untitled Query,select * from terra.msgs where tx_id = 'ED45FC9D1CE79CB26525D83A23F85CCE4C3A9352C53CB2F3B4CDC8488CB68DFE'
7e11eedc-f2e5-4220-9b55-b00583fedc7c,Untitled Query,
c27376cd-44e7-479a-a5dc-8f8ecd1a55a3,Copy of 101. [Elite] Crypto-Cosmology, Part 1: Wormhole - Receiving,with receiving_native_terra_asset as(   select block_timestamp, event_attributes:recipient::string as address, event_attributes:denom::string as symbol, event_attributes:amount::float/1e6 as amount from terra.msg_events   where tx_id in (   select tx_id from terra.msgs where msg_value:contract::string = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   and msg_value:execute_msg:submit_vaa is not null   )    and event_type = 'from_contract'   and event_attributes:action::string = 'complete_transfer_terra_native'   and tx_status = 'SUCCEEDED' ), receiving_wrapped_asset as (   select block_timestamp, event_attributes:recipient::string as address, event_attributes:"1_contract_address"::string as symbol, event_attributes:"0_amount"::float/1e6 as amount from terra.msg_events   where tx_id in (     select tx_id from terra.msgs where msg_value:contract::string = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     and msg_value:execute_msg:submit_vaa is not null     )    and event_type = 'from_contract'   and tx_status = 'SUCCEEDED'   and event_attributes:"0_action"::string = 'complete_transfer_wrapped' ) select distinct symbol from receiving_native_terra_asset union  select distinct symbol from receiving_wrapped_asset
c23f4d88-af25-4463-8ace-a1ea824a739e,Finding Largest Transactions [T66],-- SELECT * --   -- msg_value:amount[0]:amount / pow(10, 6) -- FROM terra.msgs -- WHERE block_timestamp > CURRENT_DATE - 30 --   AND tx_status = 'SUCCEEDED' --   AND msg_type = 'wasm/MsgExecuteContract' -- LIMIT 1000 SELECT * FROM terra.transactions WHERE block_timestamp > CURRENT_DATE - 30 ORDER BY gas_used DESC limit 10
c252a90b-0c90-418d-927a-4cc8a3f81568,LOOP DEX LP Events [T93] LOOP-UST,WITH deposits AS (   SELECT     block_timestamp,     CASE       WHEN event_attributes:assets[0]:denom != 'uusd' THEN event_attributes:assets[0]:amount / pow(10,6)       ELSE event_attributes:assets[1]:amount / pow(10,6)     END as LOOP_token,     CASE       WHEN event_attributes:assets[0]:denom = 'uusd' THEN event_attributes:assets[0]:amount / pow(10,6)       ELSE event_attributes:assets[1]:amount / pow(10,6)     END as UST      FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'provide_liquidity'     AND event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- LOOP-UST pair     AND block_timestamp > '2021-10-07T00:00:00Z'     AND block_timestamp < '2021-10-10T23:59:59Z'   ) SELECT   date_trunc('hour', block_timestamp) as date,   sum(LOOP_token) as loop_deposited,   sum(UST) as ust_deposited,   ust_deposited * 2 AS est_liquidity_add   -- sum(LOOP_token) OVER (ORDER BY date) as cumulative_loop_deposit,   -- sum(UST) OVER (ORDER BY date) as cumulative_loop_deposit FROM deposits GROUP BY 1 ORDER BY 1
c23dcc4d-25ef-401c-bb1c-a2c387e87fd6,Anchor Coll,SELECT     -- date_trunc('day', block_timestamp) as date,     -- sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw     *   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:execute_msg LIKE '%withdraw_collateral%'     and msg_value:contract = 'terra1ptjp2vfjrwh0j0faj9r6katm640kgjxnwwq9kn' --bluna custody   -- GROUP BY 1 limit 1000 -- pretty big difference in bLUNA withdraws if i  -- terra10cxuzggyvvv44magvrh3thpdnk9cmlgk93gmx2 is beth
c297ff75-f601-4bfa-9163-c8c0872429d9,Non-Native Transfer by select token [T101],SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" / pow(10,8) as amount,     tx_id   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'     AND (event_attributes:"1_contract_address" = 'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl'       OR event_attributes:"1_contract_address" = 'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx')
0bbf076a-05d9-4db4-b12e-a1502775e03e,Untitled Query,
b96da6cc-c022-4cf1-b3a2-2a98a64586c4,Untitled Query,select * from terra.msg_events  where tx_id = 'FBBA42C82F369B57E17E625FAE0016A7C3FDC3865BCEB0984384370B1360EEF6' and block_timestamp > current_date - 120
601603b4-2eda-4fe9-afdb-cb78452a1dd8,query 4,with log as (     select         date_trunc('month', block_timestamp) as month,         count(from_address) as active_wallets     from polygon.core.fact_transactions     where status = 'SUCCESS'     group by month ) select * from log order by 1 desc
4e26caf6-3def-4a16-9c2c-a075eb3cf013,ENS Registrations - Method B,with tx_list as (   select   	tx_id   from ethereum.udm_events     where event_name = 'NameRegistered' 	and contract_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   	and block_timestamp > CURRENT_DATE - 30 ), registrations as (   select 	block_timestamp,     tx_id,   	amount,   	amount_usd   from ethereum.udm_events   right join tx_list using (tx_id)   	where block_timestamp > CURRENT_DATE - 30     and to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   	and event_type = 'native_eth'    ) select   date_trunc('day', block_timestamp) as date,   count(distinct tx_id) as unique_transactions,   sum(amount) as amount,   sum(amount_usd) as amount_usd,   count(1) as event_count from registrations group by 1
c8082999-cae0-4346-b673-93e9a40abdb8,LOOP Swap Volume [T93],-- Buying TOKEN with UST // UST -> TOKEN swap WITH buys AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(token) as quantity_bought,     sum(ust) as volume_bought   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(token) as quantity_sold,     sum(ust) as volume_sold   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract     )   GROUP BY 1   ORDER BY 1) SELECT   buys.date as date,   volume_bought,   volume_sold,   volume_bought + volume_sold as gross_volume_buy_sell   -- optional, if quantity is of note   -- quantity_bought,   -- -quantity_sold as sold_neg,   -- quantity_bought - quantity_sold as net_daily_token_volume, FROM buys JOIN sells ON sells.date = buys.date WHERE buys.date > '2021-10-07T00:00:00Z'   AND buys.date < '2021-10-10T23:59:59Z' ORDER BY 1
60a406e6-1507-4021-b6b4-a13a75bca568,lota stake unbonding request,SELECT   date_trunc('hour', block_timestamp) as date,   sum(msg_value:execute_msg:unbond_stake:amount::float) / pow(10,6) as lota_unbonded FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:contract = 'terra1342fp86c3z3q0lksq92lncjxpkfl9hujwh6xfn' -- LOTA staking contract 	AND msg_value:execute_msg LIKE '%unbond_stake%'   	AND block_timestamp > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1
605e9d79-7e01-46cc-98b7-5f928fbc00f9,MATIC Stablecoin Bridge Volume [P1],WITH stables AS ( SELECT   block_timestamp as date,   contract_name as coin,   CASE -- tether and usdc = 6, dai and ust = 18 decimals     WHEN contract_name = 'Tether USD' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)      WHEN contract_name = 'Tether USD' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6) -- why 2 ways? this is annoying   	WHEN contract_name = 'USD Coin' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)   	WHEN contract_name = 'USD Coin' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,18)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:wad IS NOT NULL THEN event_inputs:wad::float / pow(10,18)     WHEN contract_name = 'Wrapped UST' THEN event_inputs:value::float / pow(10,18)   END AS amount FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'Transfer'   AND contract_name IN ('Multi-collateral DAI', 'Wrapped UST', 'Tether USD', 'USD Coin')   AND tx_succeeded = 'TRUE'   AND block_timestamp > CURRENT_DATE - INTERVAL '4 months' ) SELECT   date_trunc('day', date) as date,   coin,   sum(amount),   count(amount) FROM stables GROUP BY 1, 2 ORDER BY 1, 3 desc
60aa4fda-c147-4810-b7d4-952f2d240785,Base Tx gap check,with blocks as ( SELECT block_number, tx_count from base.goerli.fact_blocks ), txs as ( select block_number, count(distinct tx_hash) as tx_count from base.goerli.fact_transactions group by 1 ) select b.block_number, b.tx_count as tx_count_block, t.tx_count as tx_count_tx from blocks b left join txs t using (block_number) where b.tx_count != t.tx_count order by 1
c88fc3a5-a797-46ad-9b21-b6df91be6fbe,Terra-BSC Bridge Outbound Volume by Asset [T104],with terra_bsc as (   select          block_timestamp,     event_from as sender,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id        from terra.transfers   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), -- bsc_terra as ( --   select    --     block_timestamp, --     event_to as recipient, --     event_amount as amount, --     event_amount_usd as amount_usd, -- 	event_currency as currency, --     tx_id --   from terra.transfers --   where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' -- ), labels as (   select * from terra.labels ), terra_bsc_agg as (   select   	date_trunc('day', block_timestamp) as date,   	currency,   	sum(amount) as amount,     sum(amount_usd) as amount_usd   from terra_bsc   group by 1,2 ), -- bsc_terra_agg as ( --   select --   	date_trunc('day', block_timestamp) as date, --     sum(amount_usd) as amount_usd, --   	'inbound' as direction --   from bsc_terra --   group by 1 -- ), named as (   select * from terra_bsc_agg   left join labels on terra_bsc_agg.currency = labels.address ), final as (   select     date,     currency,     case when address_name is null then currency else address_name end as address_name,     amount,     -amount_usd   from named   where date > '2021-01-24T00:00:00Z'   	and currency is not null   	and amount_usd > 100   ) select * from final
c84e0678-e6d6-44f0-b1a5-526eeed4875f,Contracts, Top Interactions,with   contracts as (     select       events.block_timestamp as date,       receiver_id as receiver,       row_number() over (         partition by           receiver_id         order by           events.block_timestamp asc       ) as nums     from       near.core.fact_actions_events events       join near.core.fact_receipts rec on rec.tx_hash = events.tx_hash     where       action_name ilike '%DEPLOYCONTRACT%'       AND events.block_timestamp::date < CURRENT_DATE     group by       receiver,       date     qualify       nums = 1   ) select   count(distinct tx_hash) as transactions,   tx_receiver as contract_address from   near.core.fact_transactions tr   join (     select       date,       receiver,       nums     from       contracts   ) as contract on contract.receiver = tr.tx_receiver where   tr.block_timestamp >= '2023-01-01' group by   tx_receiver order by   transactions desc limit 10
c89a7cae-20a2-491f-87fa-03dbc7e202e0,Untitled Query,select     block_height,       case          when event_data::string = '{}' then 'bad event {}'          else 'good'     end as status,     count(distinct block_height) as bloks from flow.core.fact_events where block_height between 35859281 and 36742325   and status != 'good' group by 1,2 order by 1;
c87a857d-4abd-4fc9-b16c-578e243d0809,Terra Wormhole - UST Transfer Spread [T101] [T103],WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   )    SELECT   date_trunc('day', block_timestamp) as date,   chain_ids.name,   token,   amount FROM outbound JOIN chain_ids ON outbound.destination_chain_id = chain_ids.id WHERE token = 'UST'
c8d3f2e3-6073-46c1-b229-c164a309770e,DEX, Traders by Pool,select    block_timestamp::date as _date,   swap_contract,   count(distinct trader) as unique_traders from flow.core.ez_swaps where block_timestamp::date >= '2023-01-01' group by 1,2 order by 1, 3 desc
c8cfe5d7-2feb-42b6-beb5-4ff44e152608,Anchor Borrow balances and luna price [T33],WITH borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1), luna AS (SELECT   date_trunc('day', block_timestamp) as luna_date,   avg(price_usd) as avg_price FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-03-14T00:00:00Z' GROUP BY 1 ORDER BY 1)    SELECT   borrow.date,   daily_borrow_amount,   daily_repay_amount,   daily_borrow_amount - daily_repay_amount as net_borrow,   SUM(daily_borrow_amount - daily_repay_amount) OVER (ORDER BY borrow.date) as cum_net_borrow FROM (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ) repay JOIN borrow ON borrow.date = repay.date ORDER BY 1
4724251e-fbf9-46ff-8359-17f86d77c957,Untitled Query,select min(block_timestamp) from arbitrum.core.fact_blocks
a02b274e-7bb8-4e60-974a-d2777c14ccd3,Untitled Query,
babe1190-e621-492c-a06a-46272c2c2db4,Untitled Query,
cd44c7e3-b602-434b-af7e-56168b57ce7a,SNX Debt Share Events - FlashLoan copy,-- forked from 72040985-d61b-4d96-a6ba-8a9464e656c8   -- forked from 2811b1ac-b3b6-4074-a984-feb696526cdf   /* 2.    Useful information Synthetix Addresses can be found here: https://github.com/Synthetixio/synthetix-docs/blob/master/content/addresses.md Ethereum L1 Example Addresses: SNX Token - 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F SNX Legacy Token - 0xC011A72400E58ecD99Ee497CF89E3775d4bd732F, 0xF244176246168F24e3187f7288EdbCA29267739b SDS Token - 0x89fcb32f29e509cc42d0c8b6f058c993013a843f SDS Chainlink Price Feed - 0xc7BB32a4951600FBac701589C73e219b26Ca2DFC Cratio changes – tracked by SystemSettings changes */ -- SNX Debt Shares Events with Mint as ( select *  from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0x67260f6993d7c5d48c5bcf0c4b6d29e65fc73b3394446a1b424d1b3524e89334' and block_timestamp > '2023-01-01' ), Burn as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5' and block_timestamp > '2023-01-01' -- temp bypass for flashloan and (tx_hash = '0x67260f6993d7c5d48c5bcf0c4b6d29e65fc73b3394446a1b424d1b3524e89334' -- temp bypass for liquidateself -- or tx_hash = '0x55b9d0426f093c5f2c3d054e6697d7bb784c0734661222f5f52b2c7bf12d5155' ) --and tx_hash = '0xfce8e22a5d7e5eb842691fffd3069507282620383ef2d8d5c034905dd0118121' ), /* -- not sure if i need transfer, it also contains mints and burns Transfer as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' and block_timestamp > '2023-02-01' ), */ /* DebtCacheUpdated as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0x88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68' and block_timestamp > '2023-02-01' limit 10 ), */ RawTraces as ( select  row_number() over ( PARTITION BY tx_hash, input, to_address order by gas asc) as trace_index, input, output, data, gas, tx_hash, from_address, to_address, '0x' || substr(input,3+24+8,40) as wallet_address from ethereum.core.fact_traces where 1=1 and substr(input,0,10) = '0x70a08231' -- function balanceOf and block_timestamp > '2023-02-01' and tx_hash = '0x67260f6993d7c5d48c5bcf0c4b6d29e65fc73b3394446a1b424d1b3524e89334' --qualify trace_index = 1 ) -- left join traces to find current sds balance. --0x7a727d04c39b796b9a53b3f6413d5d772a0cac1bc8fb2161d92f7e5ccf1e45e8 -- func sig: 0x70a08231: balance off ,final_mints as ( select m.block_timestamp, m.tx_hash, 'Mint' as event_name, ethereum.public.udf_hex_to_int(m.data)::integer / pow(10,18) as sds_difference, '0x' || substr(m.topics[1], 3+24, 40) as wallet_address, t1.gas as t1gas, t2.gas as t2gas, t3.gas as t3gas, ethereum.public.udf_hex_to_int(t1.data:output)::integer / pow(10,18) + sds_difference as sds_balance, ethereum.public.udf_hex_to_int(t2.data:output)::integer / pow(10,18) as snx_balance, ethereum.public.udf_hex_to_int(t3.data:output)::integer / pow(10,18) as snx_escrow_balance from Mint m left join RawTraces t1 on m.tx_hash = t1.tx_hash and t1.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t1.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share left join RawTraces t2 on m.tx_hash = t2.tx_hash and t2.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t2.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx left join RawTraces t3 on m.tx_hash = t3.tx_hash and t3.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t3.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- escrow ) ,final_burns as ( select m.block_timestamp, m.tx_hash, 'Burn' as event_name, ethereum.public.udf_hex_to_int(m.data)::integer / pow(10,18) * -1  as sds_difference, '0x' || substr(m.topics[1], 3+24, 40) as wallet_address, t1.gas as t1gas, t2.gas as t2gas, t3.gas as t3gas, ethereum.public.udf_hex_to_int(t1.data:output)::integer / pow(10,18) + sds_difference as sds_balance, ethereum.public.udf_hex_to_int(t2.data:output)::integer / pow(10,18) as snx_balance, ethereum.public.udf_hex_to_int(t3.data:output)::integer / pow(10,18) as snx_escrow_balance from Burn m left join RawTraces t1 on m.tx_hash = t1.tx_hash and t1.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t1.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share left join RawTraces t2 on m.tx_hash = t2.tx_hash and t2.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t2.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx left join RawTraces t3 on m.tx_hash = t3.tx_hash and t3.wallet_address = '0x' || substr(m.topics[1], 3+24, 40) and t3.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- escrow ) select * from final_burns
cdcaf9f5-c1ff-42d9-aacd-d4e6ec6d0746,Untitled Query,select * from terra.transactions where tx_id = 'E6457B2B2CADBE1D1CF5F9AC15771340DEBFF1E038209A6CFD371CDC43840302'
cdd8ca31-c56b-4f55-b14c-8546891b7da9,Near Epochs and Proposal,WITH dim_epochs AS (  	SELECT epoch_id   		 , min(block_id) AS min_block_id   		 , max(block_id) AS max_block_id   		 , count(*) AS blocks   		 , count(distinct block_author) AS block_producers   		 , min(block_timestamp) AS start_time   		 , max(block_timestamp) AS end_time   		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num      	FROM near.core.fact_blocks AS b   	WHERE block_id >= (SELECT min(block_id) FROM near.core.fact_blocks WHERE epoch_id = '4ZhPXTpkB6njvkDFgqquu36S4TPDNU5wwgom86vVBwJn')  -- epoch #900   	  AND epoch_id != (SELECT epoch_id FROM near.core.fact_blocks QUALIFY row_number() OVER (order by block_timestamp desc) = 1) -- exclude current epoch   	GROUP BY 1 ), staking_actions AS (   	SELECT r.tx_hash       	 , r.block_timestamp       	 , r.receiver_id AS validator_address       	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num       	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance            FROM near.core.fact_receipts AS r   	   , lateral flatten( input => r.logs ) AS l        WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )       AND r.tx_hash IN ( SELECT tx_hash        				     FROM near.core.fact_actions_events_function_call       				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )       AND left(l.value::string, 6) = 'Epoch '   	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1 ), proposals AS (   	SELECT b.block_id       	 , b.block_timestamp       	 , b.epoch_id       	 , vp.value['account_id'] AS validator_address       	 , vp.value['stake']::bigint / 1e24 AS staked_balance     FROM near.core.fact_blocks AS b        , lateral flatten( input => b.chunks ) AS c        , lateral flatten( input => c.value['validator_proposals']) AS vp   	WHERE b.block_timestamp >= '2021-09-01'     QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1 ), proposals_per_epoch AS (   	SELECT p.block_timestamp   		 , p.epoch_id   		 , p.validator_address   		 , p.staked_balance   		 , e.epoch_num      	FROM proposals AS p   		INNER JOIN dim_epochs AS e   			ON e.epoch_id = p.epoch_id   	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1 ), block_producers_per_epoch AS (   	SELECT b.epoch_id   		 , e.epoch_num   		 , b.block_author AS validator_address   		 , sa.staked_balance   		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced      	FROM near.core.fact_blocks AS b   		INNER JOIN dim_epochs AS e   			ON e.epoch_id = b.epoch_id   		INNER JOIN staking_actions AS sa   			ON sa.epoch_num = e.epoch_num   			AND sa.validator_address = b.block_author   	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1 ), dim_validators AS (   	SELECT validator_address   		 , min(epoch_num) AS start_epoch   		 , min(block_timestamp) AS start_time      	FROM staking_actions AS sa   	GROUP BY 1 ), dim_table AS (   	SELECT v.validator_address   		 , e.epoch_num   		 , e.start_time      	FROM dim_validators AS v, dim_epochs AS e   	WHERE v.start_epoch <= e.epoch_num ), validator_status_per_epoch AS (   	SELECT dt.epoch_num   		 , dt.start_time   		 , dt.validator_address   		 , coalesce(   				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS   					OVER (partition by dt.validator_address    					  	  order by dt.epoch_num   					  	  rows between unbounded preceding   								   and current row),   				0) AS staked_balance   		 , bp.blocks_produced   		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer      	FROM dim_table AS dt   		LEFT JOIN block_producers_per_epoch AS bp   			ON bp.epoch_num = dt.epoch_num   			AND bp.validator_address= dt.validator_address   		LEFT JOIN proposals_per_epoch AS p   			ON p.epoch_num = dt.epoch_num   			AND p.validator_address= dt.validator_address ), ranked_validators AS (   	SELECT epoch_num   		 , start_time   		 , validator_address   		 , staked_balance   		 , blocks_produced   		 , is_proposer   		 , row_number() OVER (partition by epoch_num order by staked_balance desc) AS _rank 		 , sum(staked_balance) OVER (partition by epoch_num order by staked_balance desc) AS _cumulative_total_stake   		 , staked_balance / _cumulative_total_stake AS _stake_ratio      	FROM validator_status_per_epoch ), thresholded_validators AS (   	SELECT *         -- MIN_STAKE_RATIO=0.000160 from https://github.com/near/nearcore/blob/136de1510bbf96f29d5de6cf6e15d5a988698d6d/core/primitives/src/epoch_manager.rs   	   	-- Protocol update v1.23.0 - from thresholding to top 100 stake (epoch 1048 is just estimated from release date)   	 	-- Protocol update v1.29.0 - chunk-only producers added (epoch 1499 is just estimated from release date)   		 , (CASE WHEN epoch_num < 1048   				 THEN min(CASE WHEN blocks_produced > 0 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 WHEN epoch_num < 1499   				 THEN min(CASE WHEN _rank <= 100 AND _stake_ratio > 0.000160 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 ELSE min(CASE WHEN _rank <= 300 AND _stake_ratio > 0.000160 THEN staked_balance ELSE NULL END) OVER (partition by epoch_num)   				 END) AS pseudo_seat_price   		 , (CASE WHEN staked_balance >= pseudo_seat_price    				  AND _rank <= 100    				  AND _stake_ratio > 0.000160    				 THEN True ELSE False END) AS is_block_producer      		 , (CASE WHEN epoch_num >= 1499    				  AND _rank BETWEEN 101 AND 300   				  AND _stake_ratio > 0.000160    				 THEN True ELSE False END) AS is_chunk_only_producer      		 , (CASE WHEN is_block_producer = True THEN 'Active (Block Producer)'   				 WHEN is_chunk_only_producer = True THEN 'Active (Chunk-Only Producer)'   				 ELSE 'Idle' END) AS validator_status      	FROM ranked_validators ) SELECT * FROM near.core.fact_blocks WHERE block_id BETWEEN 46675065 - 2 AND 46675065 + 2 -- QUALIFY lag(block_id) OVER (order by block_id) != block_id - 1 LIMIT 1000
ce436daf-4ff2-40a9-91fb-142af9366f50,MIR only volume [T19],SELECT    	sell.date,     	sell.asset,     	sum(gross_buy_volume),     	sum(sell.gross_sell_volume),     	sum(gross_buy_volume) + sum(sell.gross_sell_volume) as total_trading_volume   FROM      (select       date_trunc('day', block_timestamp) as date,       l.address_name as asset,       -- event_attributes:ask_asset,       -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,       -- event_attributes:offer_asset as offer_asset,       sum(event_attributes:offer_amount::float) / pow(10,6) as gross_buy_volume          from terra.msg_events     LEFT JOIN terra.labels l       ON event_attributes:ask_asset = l.address     WHERE tx_status = 'SUCCEEDED'     	AND event_type = 'from_contract'       	AND event_attributes:ask_asset != ''       	AND block_timestamp > GETDATE() - interval '1 week'       	-- buy transactions are marked as 'swap' under the main action of the from_contract message       	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)       	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract       	AND event_attributes:"0_action" = 'swap'       	-- exclude non-mirror tokens       	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')       	AND event_attributes:offer_amount::float > 0               group by 1, 2) buy        LEFT JOIN          (select         date_trunc('day', block_timestamp) as date,         l.address_name as asset,         sum(event_attributes:return_amount::float) / pow(10,6) as gross_sell_volume              from terra.msg_events       LEFT JOIN terra.labels l         ON event_attributes:offer_asset = l.address       WHERE tx_status = 'SUCCEEDED'       	AND event_type = 'from_contract'         	AND event_attributes:ask_asset != ''       		AND block_timestamp > GETDATE() - interval '1 week'         	AND event_attributes:"0_action" = 'send'         	-- exclude non-mirror tokens         	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')              group by 1, 2) sell          ON (buy.asset = sell.asset AND buy.date = sell.date) WHERE sell.asset = 'MIR' GROUP BY 1, 2 ORDER BY 1
8dafc62b-2590-4b89-9de8-8c1448cb80d3,Total NEAR Staked, Locked, Liquid, Circulating, Total Supply copy,-- forked from brian-terra / Total NEAR Staked, Locked, Liquid, Circulating, Total Supply @ https://flipsidecrypto.xyz/brian-terra/q/2023-04-13-10-07-pm-SiYQ-s WITH   latest AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address       )   ),   month1 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '1 month'       )   ),   month2 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '2 month'       )   ),   month3 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '3 month'       )   ),   month4 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '4 month'       )   ),   month5 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '5 month'       )   ),   month6 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '6 month'       )   ),   month7 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '7 month'       )   ),   month8 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '8 month'       )   ),   month9 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '9 month'       )   ),   month10 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '10 month'       )   ),   month11 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '11 month'       )   ),   month12 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '12 month'       )   ),   month13 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '13 month'       )   ),   month14 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '14 month'       )   ),   month15 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '15 month'       )   ),   month16 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '16 month'       )   ),   month17 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '17 month'       )   ),   month18 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '18 month'       )   ),   month19 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '19 month'       )   ),   month20 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '20 month'       )   ),   month21 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '21 month'       )   ),   month22 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '22 month'       )   ),   month23 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '23 month'       )   ),   month24 AS (     SELECT DISTINCT       address,       balance,       block_timestamp     FROM       near.core.fact_staking_pool_balances a     WHERE       block_timestamp = (         SELECT           max(block_timestamp)         FROM           near.core.fact_staking_pool_balances b         WHERE           a.address = b.address           AND block_timestamp < getdate () - interval '24 month'       )   ),   total_staked as (     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       latest     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month1     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month2     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month3     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month4     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month5     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month6     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month7     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month8     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month9     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month10     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month11     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month12     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month13     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month14     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month15     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month16     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month17     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month18     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month19     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month20     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month21     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month22     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month23     UNION ALL     SELECT       MAX(block_timestamp) as date,       TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month,       SUM(balance) AS total_staked     FROM       month24   ),   txns as (     select distinct       tx_hash     from       near.core.fact_transactions     where       tx_status = 'Success'       and (         tx_receiver = 'lockup.near'         or tx_signer = 'lockup.near'       )   ),   to_lockup as (     select       block_timestamp,       tx_hash,       action_id,       deposit * 1e-24 as deposit     from       near.core.fact_transfers     where       tx_receiver = 'lockup.near'       and action_id like '%-2'   ),   release_durations as (     select       a.block_timestamp,       a.tx_hash,       a.deposit,       b.args:lockup_duration / 86400 as lockup_duration_days,       b.args:lockup_timestamp::datetime as lockup_start,       b.args:release_duration / 86400 as release_duration_days,       b.args:vesting_schedule:VestingSchedule:start_timestamp::datetime as vesting_start,       b.args:vesting_schedule:VestingSchedule:end_timestamp::datetime as vesting_end     from       near.core.fact_actions_events_function_call b,       to_lockup a     where       a.tx_hash = b.tx_hash       and b.method_name = 'create'       and lockup_duration_days > (         CASE           WHEN vesting_start is null           AND release_duration_days is null THEN 1000           ELSE -1         END       )   ),   total_locked as (     select distinct       TO_CHAR(block_timestamp, 'MMMM YYYY') AS month,       date_trunc('month', block_timestamp) as mon,       sum(deposit) OVER (         order by           mon asc       ) as total_near_locked     from       to_lockup     order by       mon desc   ),   total_near_supply as (     select       date_trunc('month', block_timestamp) as mon,       total_supply * 1e-24 as total_supply     from       near.core.fact_blocks   ),   near_supply as (     select       TO_CHAR(mon, 'MMMM YYYY') AS month,       mon,       max(total_supply) as total_near     from       total_near_supply     group by       mon     order by       mon desc   ),   circu_supply as (     SELECT       '2021-07-01'::datetime AS mon,       'July 2021' AS month,       396757000 AS circ_supply     UNION ALL     SELECT       '2021-08-01'::datetime AS mon,       'August 2021' AS month,       422907000 AS circ_supply     UNION ALL     SELECT       '2021-09-01'::datetime AS mon,       'September 2021' AS month,       446336000 AS circ_supply     UNION ALL     SELECT       '2021-10-01'::datetime AS mon,       'October 2021' AS month,       472542000 AS circ_supply     UNION ALL     SELECT       '2021-11-01'::datetime AS mon,       'November 2021' AS month,       531339000 AS circ_supply     UNION ALL     SELECT       '2021-12-01'::datetime AS mon,       'December 2021' AS month,       568848000 AS circ_supply     UNION ALL     SELECT       '2022-01-01'::datetime AS mon,       'January 2022' AS month,       602419000 AS circ_supply     UNION ALL     SELECT       '2022-02-01'::datetime AS mon,       'February 2022' AS month,       630769000 AS circ_supply     UNION ALL     SELECT       '2022-03-01'::datetime AS mon,       'March 2022' AS month,       643424000 AS circ_supply     UNION ALL     SELECT       '2022-04-01'::datetime AS mon,       'April 2022' AS month,       660441000 AS circ_supply     UNION ALL     SELECT       '2022-05-01'::datetime AS mon,       'May 2022' AS month,       676076000 AS circ_supply     UNION ALL     SELECT       '2022-06-01'::datetime AS mon,       'June 2022' AS month,       703648000 AS circ_supply     UNION ALL     SELECT       '2022-07-01'::datetime AS mon,       'July 2022' AS month,       725911000 AS circ_supply     UNION ALL     SELECT       '2022-08-01'::datetime AS mon,       'August 2022' AS month,       751801000 AS circ_supply     UNION ALL     SELECT       '2022-09-01'::datetime AS mon,       'September 2022' AS month,       775580000 AS circ_supply     UNION ALL     SELECT       '2022-10-01'::datetime AS mon,       'October 2022' AS month,       799891000 AS circ_supply     UNION ALL     SELECT       '2022-11-01'::datetime AS mon,       'November 2022' AS month,       818414000 AS circ_supply     UNION ALL     SELECT       '2022-12-01'::datetime AS mon,       'December 2022' AS month,       833208000 AS circ_supply     UNION ALL     SELECT       '2023-01-01'::datetime AS mon,       'January 2023' AS month,       848718000 AS circ_supply     UNION ALL     SELECT       '2023-02-01'::datetime AS mon,       'February 2023' AS month,       853199000 AS circ_supply     UNION ALL     SELECT       '2023-03-01'::datetime AS mon,       'March 2023' AS month,       864484000 AS circ_supply     UNION ALL     SELECT       '2023-04-01'::datetime AS mon,       'April 2023' AS month,       883626000 AS circ_supply   ),   circ as (     select       mon,       month,       circ_supply as circulating_supply     from       circu_supply     order by       circulating_supply desc   ) select   date,   a.month,   total_staked as staked,   total_near - circulating_supply as locked,   circulating_supply - total_staked as liquid,   circulating_supply as circulating,   total_near as total_supply from   total_staked a,   near_supply c,   circ d where   a.month = c.month   and c.month = d.month
4069c190-5844-449b-9092-79d172f9259c,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
28b14003-9591-4360-83ea-c60190f656d6,LOOPR to LOOP Swaps,-- -- Buying TOKEN with UST // UST -> TOKEN swap -- WITH buys AS ( --   SELECT --     date_trunc('day', block_timestamp) as date, --     sum(token) as quantity_bought, --     sum(ust) as volume_bought --   FROM ( --     SELECT --       *, --       event_attributes:offer_amount / pow(10,6) as ust, --       event_attributes:return_amount / pow(10,6) as token --     FROM terra.msg_events --     WHERE tx_status = 'SUCCEEDED' --       AND event_type = 'from_contract' --       AND event_attributes:"0_action" = 'swap' --       AND event_attributes:"0_contract_address" = 'terra154jt8ppucvvakvqa5fyfjdflsu6v83j4ckjfq3' -- swap contract --       AND event_attributes:"1_action" = 'transfer' --       AND event_attributes:"1_contract_address" = 'terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q' -- token contract --     ) --   GROUP BY 1 --   ORDER BY 1), -- Selling TOKEN to UST WITH sells AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(token) as quantity_sold,     sum(ust) as volume_sold   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra154jt8ppucvvakvqa5fyfjdflsu6v83j4ckjfq3' -- swap contract     )   GROUP BY 1   ORDER BY 1) SELECT   date,   -- volume_bought,   volume_sold,   -- volume_bought + volume_sold as gross_volume_buy_sell   -- optional, if quantity is of note   -- quantity_bought,   quantity_sold as quantity_sold   -- quantity_bought - quantity_sold as net_daily_token_volume, FROM sells -- JOIN sells ON sells.date = buys.date WHERE date > GETDATE() - interval '12 hours' ORDER BY 1
0c393f8e-9702-4094-80da-6e66cb6f7759,Validators self delegating Top 5 - 30 June [T30],-- adjusting this to select max block at the end of June WITH mb AS (SELECT max(block_id) as max_id FROM terra.validator_voting_power   WHERE block_timestamp LIKE '2021-06-30%') SELECT  	validator_name as validator,   	balance as self_delegation,   	voting_power,   	balance / voting_power * 100 as self_delegation_percentage FROM   (     SELECT   		block_timestamp,     	lab.label as validator_name,     	lab.delegator_address, -- daily_balances use the delegator address so we need to join on this       	voting_power     FROM     (         SELECT address, voting_power, block_timestamp       FROM terra.validator_voting_power       -- limit selection to latest block only       JOIN mb ON block_id = mb.max_id              ORDER BY 2 desc     ) top_val     -- join labels for friendly charting     JOIN terra.validator_labels lab     	ON top_val.address = lab.vp_address     -- we'll limit later, but to ensure speedy queries limit to 10mm luna and up     WHERE voting_power > 10000000   ) top_val JOIN (   SELECT address, balance   FROM terra.daily_balances   	WHERE balance_type = 'staked'   		AND date LIKE '2021-06-30%' -- i tried a lot of methods but couldn't quite get this to parse down without hard coding today's date ) db ON top_val.delegator_address = db.address ORDER BY voting_power desc LIMIT 5
d2d01ba2-9e5d-41d7-bc5a-a904e2fa70b7,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
434ad73a-3faf-4d93-a8f0-f829536e3334,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
d29a53d0-49a3-4028-bb53-6d1fcdc9945c,Latest Block - terra,SELECT * FROM terra.blocks ORDER BY block_id DESC limit 10
65b8b4f9-c584-4992-a571-a8a93b22d46f,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
a9a3611e-f51f-462d-973c-af793724bb04,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
131e9792-db49-46a0-8ec9-78238c353a92,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
d3167ed4-5be6-4ac5-b390-766a4b6d8e48,2023-04-20 03:34 PM,select * from near.core.fact_actions_events limit 10
29052051-d641-4238-8a1d-9bf68a912c44,unbonding debugging,SELECT   msg_value,   msg_value:execute_msg:unbond_stake:amount::float / pow(10,6) as lota_unbonded FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:contract = 'terra1342fp86c3z3q0lksq92lncjxpkfl9hujwh6xfn' 	AND msg_value:execute_msg LIKE '%unbond_stake%'   	AND block_timestamp > GETDATE() - interval '1 week'
d36e8196-d08e-4fa4-bc19-27515ab58997,LOTA volume,-- Buying LOTA with UST // UST -> LOTA swap WITH buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(lota) as quantity_bought,   sum(ust) as volume_bought FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as lota FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token ) GROUP BY 1 ORDER BY 1), -- Selling LOTA to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(lota) as quantity_sold,   sum(ust) as volume_sold FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as lota,   event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract ) GROUP BY 1 ORDER BY 1) SELECT   buys.date,   -- quantity_bought,   volume_bought,   -- -quantity_sold as sold_neg,   volume_sold,   -- quantity_bought - quantity_sold as net_daily_token_volume,   volume_bought + volume_sold as gross_volume_buy_sell FROM buys JOIN sells ON sells.date = buys.date WHERE buys.date > GETDATE() - interval '2 weeks' ORDER BY 1
952f0e53-90e2-46f0-b225-0fccc939bb01,Untitled Query,select * from FLIPSIDE_PROD_DB.TERRA.DAILY_BALANCES where Date > CURRENT_DATE - 150   -- and balance_type = 'staked'   and currency = 'UST'   and address = 'terra17unjntqg786pu8tamt79m0ay8mfxpgnj5rm0z2' order by 1
6398d051-4ddb-4056-9656-076a6d34cd35,Untitled Query,
2adc185f-57be-45c4-b44f-0070ab674b43,Swaps by Hour, by Pool - TOP Tokens (UTC) [THOR8],SELECT   extract(hour from block_timestamp) as hour,   pool_name,   sum(from_amount_usd) as volume FROM thorchain.swaps WHERE block_timestamp > '2021-10-03T00:00:00Z'   AND pool_name IN ('BNB.BUSD-BD1', 'BTC.BTC', 'ETH.ETH', 'BNB.BNB', 'BNB.BTCB-1DE', 'BNB.ETH-1C9') GROUP BY 1, 2  ORDER BY 1, 3 desc
d7bf7b3a-4880-40ee-ad4f-bf0a63c9d898,YFI Swap,SELECT block_timestamp,   tx_id,   event_name,   event_id,   symbol,   amount,   amount_usd FROM ethereum.udm_events WHERE tx_id = lower('0x0f63c6c5c309a930f0c80256b1b47de011557f5e0e5c958ead0a6764b4dc68ba')
d7baa8f3-2c48-4057-a8a0-7e44d728cced,Untitled Query,select * from near.core.fact_transactions where tx_hash = '4D9PSLQiHbAHJVgsKyPCPcwxpy7nq7JQ9LooFxYQyH77'
d858f097-23b7-4d77-9887-1f74e4d6aa5d,LUNA earnings - better way,WITH multisend_tx AS (   SELECT     tx_id   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND msg_type = 'bank/MsgMultiSend'     AND tx_status = 'SUCCEEDED'   ),    multi_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     value:coins[0]:amount / pow(10, 6) as amount   FROM terra.msgs m   RIGHT JOIN multisend_tx ON multisend_tx.tx_id = m.tx_id, LATERAL FLATTEN(INPUT => msg_value:outputs)   WHERE value:address = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'   ),    direct_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     event_amount as amount   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND event_to = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'     AND tx_status = 'SUCCEEDED'   ORDER BY block_timestamp   ), all_income AS (   SELECT * FROM direct_send   UNION ALL   SELECT * FROM multi_send   ),    prices AS (   SELECT     block_timestamp,     price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'     AND block_timestamp > '2021-07-01T00:00:00Z'   ) SELECT   date,   amount,   amount * price_usd as at_cost,   SUM(at_cost) OVER (ORDER BY date) as cumulative_earnings FROM all_income JOIN prices ON all_income.date = prices.block_timestamp
1e6ae6a9-a3ff-439b-9163-300d80ec9278,Utilization Rate,SELECT   date_trunc('day', block_hour) as week,   aave_version,   avg(utilization_rate) as avg_rate FROM aave.market_stats GROUP BY 1,2
7ea848de-2a38-4fb3-9049-91ee951c3ded,2023-07-27 08:26 PM,
0819241a-a4d5-4fc7-b1db-977908d6eafd,bonded luna out of total [T46],WITH gross AS ( SELECT   date,   sum(balance) as luna_balance FROM terra.daily_balances WHERE currency = 'LUNA'   AND date > '2021-03-16T00:00:00Z' GROUP BY 1 ORDER BY 1), bluna AS ( SELECT   date,   balance as bluna_balance FROM terra.daily_balances WHERE address = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   AND currency = 'LUNA'   AND date > '2021-03-16T00:00:00Z' ORDER BY 1 ) SELECT   gross.date,   luna_balance,   bluna_balance,   luna_balance - bluna_balance as total_less_bluna FROM gross JOIN bluna ON bluna.date = gross.date
3d0108e0-e87e-4e26-bfac-a499bcb75270,41 - dec 2019 fee exploration,SELECT     date_trunc('hour', block_timestamp) as date,     fee[0]:denom::string as currency,     sum(fee[0]:amount)/POW(10,6) as fee   FROM terra.transactions   WHERE currency IS NOT NULL   	AND tx_status = 'SUCCEEDED'     AND block_timestamp > '2019-12-24T23:59:00Z'     AND block_timestamp < '2019-12-26T03:00:00Z'     AND currency = 'uluna'   GROUP BY 1,2 ORDER BY 1
231602f0-4ffe-4d0f-8490-60ece1a1d54a,Flow May 2 activity plot copy,-- forked from Flow May 2 activity plot @ https://flipsidecrypto.xyz/edit/queries/8abc9aba-bd34-4de9-a0cb-3cd12e071339  -- forked from Flow May 2 Top Event Contracts @ https://flipsidecrypto.xyz/edit/queries/42a23231-fca6-4876-901f-3f5a26ec0985 -- forked from Flow May 2 Txs from New Payers @ https://flipsidecrypto.xyz/edit/queries/ac9e9bfa-8777-4e29-aa89-75f75563d14b with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       payer in (         select           payer         from           new_payers       ) as _new_payer,       payer,       block_timestamp,       tx_id     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'   ) select   * from flow.core.fact_events where tx_id in (select tx_id frrom )
d8564b3c-af37-4706-a73e-a82beee4f54d,Untitled Query,select * from flipside_prod_db.mdao_near.metrics_daily_transactions    limit 1000
d890a7f9-51b0-40e8-9702-a51bb1c730d4,LUNA plus ETH earnings,WITH multisend_tx AS (   SELECT     tx_id   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND msg_type = 'bank/MsgMultiSend'     AND tx_status = 'SUCCEEDED'   ),    multi_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     value:coins[0]:amount / pow(10, 6) as amount   FROM terra.msgs m   RIGHT JOIN multisend_tx ON multisend_tx.tx_id = m.tx_id, LATERAL FLATTEN(INPUT => msg_value:outputs)   WHERE value:address = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'   ),    direct_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     event_amount as amount   FROM terra.transfers   JOIN prices ON direct_send.date = prices.block_timestamp   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND event_to = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'     AND tx_status = 'SUCCEEDED'   ORDER BY block_timestamp   ),    prices AS (   SELECT     block_timestamp,     price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'     AND block_timestamp > '2021-07-01T00:00:00Z'   ), eth AS (   SELECT     date_trunc('hour', block_timestamp) as date,     symbol,     amount,     amount_usd   FROM ethereum.udm_events   WHERE to_address = lower('0x04ae8c108743167c7457073ba8C1571FD5D56325')     AND from_address = '0xd152f549545093347a162dce210e7293f1452150' ), terra_income AS (   SELECT   date,   amount,   price_usd,   amount * price_usd as amount_usd   FROM (     SELECT * FROM direct_send     UNION ALL     SELECT * FROM multi_send     ) sub   JOIN prices ON prices.block_timestamp = sub.date   ) SELECT   * FROM terra_income
2b5bd10b-7de5-43e3-861b-1d5b77bcfc61,Terra - DAW/MAW [Flash119],WITH users AS (   -- addresses in the regular msgs: transfers, swaps, ibc   SELECT     date_trunc('month', block_timestamp) as date,     msg_value:sender as address   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL      UNION   -- staking events   SELECT     date_trunc('month', block_timestamp) as date,     msg_value:delegator_address as address   FROM terra.msgs   WHERE msg_value:delegator_address IS NOT NULL     AND msg_module != 'oracle'     AND msg_module != 'core'   UNION   -- bank module events   SELECT     date_trunc('month', block_timestamp) as date,     msg_value:from_address as address   FROM terra.msgs   WHERE msg_type = 'bank/MsgSend'     AND msg_value:from_address IS NOT NULL        AND msg_module != 'oracle'     AND msg_module != 'core'   -- now we add some governance engagement    UNION -- is this enough unions for you?   SELECT     date_trunc('month', block_timestamp) as date,     msg_value:voter as address   FROM terra.msgs   WHERE msg_type = 'gov/MsgVote'     AND msg_value:voter IS NOT NULL     AND msg_module != 'oracle'     AND msg_module != 'core'   ), price AS (   SELECT     date_trunc('month', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ), summation as (   SELECT     date,     count(address) as addresses   FROM users   GROUP BY 1   ) SELECT    *,   avg(addresses) OVER (ORDER BY summation.date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as weekly_ma FROM summation JOIN price   ON summation.date = price.date ORDER BY 1
2b27e598-8ccc-4ede-9607-0cc090d19a88,LUNA Price - daily change - standard deviation may - present,SELECT   date_trunc('day', block_timestamp) as date,   avg(price_usd) as price,   STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv   -- avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date) as change,   -- (avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date)) / (LAG(avg(price_usd)) OVER (ORDER BY date)) as pct_change FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-05-22T00:00:00Z'   AND block_timestamp < '2021-07-19T00:00:00Z' GROUP BY 1 ORDER BY 1
2b65a29a-21ce-40e3-9948-a7005307ce2b,Monitoring - Blocks Gaps,-- individual missing blocks WITH source AS (     SELECT         {{block_num_column}},         LAG(             {{block_num_column}},             1         ) over (             ORDER BY                 {{block_num_column}} ASC         ) AS prev_block_height     FROM         (select distinct {{block_num_column}} from           {{blockchain}}.core.fact_blocks          )  ) SELECT     date_trunc('d', b.block_timestamp) as _date,     -- a.block_height,         -- a.prev_block_height,     sum(a.{{block_num_column}} - a.prev_block_height - 1) AS gap FROM     source a         left join {{blockchain}}.core.fact_blocks b using ({{block_num_column}}) WHERE     a.{{block_num_column}} - a.prev_block_height <> 1     and block_timestamp > current_date - interval '{{date_interval}}' GROUP BY 1
7265c0c5-e5c4-46c0-93c3-52d1796485d2,liquidity frequency,SELECT   action,   count(distinct(liquidity_provider)) as Unique_Addresses FROM uniswapv3.lp_actions  WHERE block_timestamp > GETDATE() - interval '1 week' GROUP BY 1;
dc4c4de4-3db9-444c-8f67-391fcff58eac,topshot ,select * from flow.core.dim_topshot_metadata  limit 1000; select count(1) from flow.core.dim_topshot_metadata; select count(distinct nft_id) from flow.core.fact_nft_sales; select count(distinct nft_id) from flow.core.fact_nft_sales where nft_collection like '%TopShot%'; select * from flow.core.fact_nft_sales where tx_id = 'eeaf233ff079ad7c8067098cdf9e6aede2241ea4ff947ec2cec8c4f45f76a7b8';
825ca802-745e-40f7-9937-b364aa71992c,usdc - uniswap mvmt,SELECT    contract_address,   date_trunc('day', block_timestamp) as daystamp,   sum(amount) as total_amount FROM ethereum.udm_events WHERE   to_label is not null AND   amount > 0 AND   event_type = 'erc20_transfer' AND   symbol = 'USDC' AND   to_label = 'uniswap' AND   block_timestamp >= GETDATE() - interval'30 days' GROUP BY daystamp, contract_address ORDER BY daystamp, total_amount DESC;
dc909216-fc63-4782-bf8c-8b1eaa7cd288,Provide MIR-UST Liquidity,SELECT   block_id::string as block_id,   event_type,   event_attributes,   tx_status,   block_timestamp FROM terra.msg_events WHERE tx_id = '9F178BA0413FA4D733929D08BD73E7D7A02AB151F312105A4277D91BD93F37EA';
90c395c7-a340-40f6-b0d3-56fdce45c975,Untitled Query,
bff98c0a-47f5-4bd9-8032-d4c5dea6a0ae,Untitled Query,select * from ethereum.transactions limit 100
bfd27b09-b057-4c89-98ab-c707285ef716,terraswap buys volume  [T57],WITH terraswap_addresses AS (   SELECT     address,     address_name   FROM terra.labels   WHERE label = 'terraswap'     AND label_type = 'dex' ), -- Buying token with UST // UST -> token swap buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   pool,   sum(token_amt) as quantity_bought,   sum(ust) as volume_bought FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as ust,      event_attributes:return_amount / pow(10,6) as token_amt,     terraswap_addresses.address_name as pool,     event_attributes:"1_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"0_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'swap'     AND event_attributes:"1_action" = 'transfer'     -- use previous full day     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' ) GROUP BY 1, 2 ORDER BY 1) SELECT * FROM buys
63d9c6e8-78cc-46ec-b470-35b596afe5fa,UST ERC20 Relative Prices in UNI [T28],WITH uni AS (     SELECT     	date_trunc('hour', block_timestamp) as date,   		avg(price_0_1) as ust_price_on_eth     FROM uniswapv3.pool_stats     WHERE pool_name LIKE 'UST-USDT%'   		AND block_timestamp > '2021-05-06T00:00:00Z'     GROUP BY 1 ), ter AS (   SELECT   	date_trunc('hour', block_timestamp) as date,   	avg(price_usd) as terra_price   FROM terra.oracle_prices   WHERE SYMBOL = 'UST'   	AND block_timestamp > '2021-05-06T00:00:00Z'   GROUP BY 1   ORDER BY 1 ) SELECT 	uni.date,   	ust_price_on_eth / ter.terra_price as uni_relative_price FROM uni JOIN ter 	ON uni.date = ter.date
cad64d5f-2151-4ee2-9652-09d2264beb5c,16 ETH Shuttle,SELECT 	date_trunc('day', block_timestamp) as date,   CASE   	WHEN event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'out'   	WHEN event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'in'   END AS direction,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE 	block_timestamp > GETDATE() - interval '9 months'   	AND (event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' OR event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')   	AND tx_status = 'SUCCEEDED' GROUP BY 1,2 ORDER BY 1
bf9e74a4-88a4-47c3-85d6-06eb33d58ce6,Avg Fee on Polygon vs ETH [P7],WITH matic AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(fee) as avg_fee_polygon,     avg(fee_usd) as avg_fee_usd_polygon   FROM polygon.transactions   WHERE block_timestamp > '2021-06-01T00:00:00Z'     AND success = 'TRUE'   GROUP BY 1 ), eth AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(tx_fee) as avg_fee_ethereum,     avg(fee_usd) as avg_fee_usd_ethereum   FROM ethereum.transactions   WHERE block_timestamp > '2021-06-01T00:00:00Z'     AND success = 'TRUE'   GROUP BY 1 ) SELECT * FROM matic JOIN eth ON matic.date = eth.date
1cb0ecf5-fed2-4187-807a-8df96c698c77,UFC Test - Connect,WITH metadata_info AS (     SELECT         NFT_ID::string as nft_id,         -- typeof(nft_id),         metadata:ATHLETE_NAME AS "Athlete",         SERIAL_NUMBER AS "Serial",         metadata:EDITION_SIZE AS "Edition Size",         metadata:TIER AS "Tier",         metadata:SERIES AS "Series",         metadata:SET AS "Set"     FROM         flow.nft.dim_ufc_strike_metadata -- where nft_id in (887708, 1843267) where nft_id = 126789 ), ufc_events AS (     SELECT         tx_id,         PARSE_JSON(event_data:ashMeta) AS data,         data[0]:value:value::string AS nft_id     FROM         flow.core.fact_events     WHERE         EVENT_CONTRACT = 'A.e2a89587100c6096.AshesV2'         AND EVENT_TYPE = 'AshMinted'         AND EVENT_DATA:ashMeta IS NOT NULL         AND BLOCK_TIMESTAMP >= '2023-10-01'         -- and tx_id = 'f683e938a321de5fa19fe3e50d00a86c7338122ae90fed634167931e02740a8f'         and tx_id = 'f683e938a321de5fa19fe3e50d00a86c7338122ae90fed634167931e02740a8f'         ORDER BY block_timestamp DESC ) SELECT     mi.nft_id,     mi."Athlete",     mi."Serial",     mi."Edition Size",     mi."Tier",     mi."Series",     mi."Set",     ue.tx_id,     ue.data FROM     metadata_info mi LEFT JOIN     ufc_events ue using (nft_id) where tx_id is not null -- limit 25
4ed9c71c-d79f-4f7c-b516-ea6031c2e86f,[T41] - luna fees over time,WITH rates AS (   SELECT   	date_trunc('week', block_timestamp) as date,   	currency,   	avg(price_usd) as fx_rate   FROM terra.oracle_prices   WHERE block_timestamp > '2020-10-25T23:59:59Z'   GROUP BY 1, 2 ), fees AS  (   SELECT     date_trunc('week', block_timestamp) as date,     fee[0]:denom::string as currency,     sum(fee[0]:amount)/POW(10,6) as fee,   	count(*) as num_events   FROM terra.transactions   WHERE currency IS NOT NULL   	AND tx_status = 'SUCCEEDED'   	AND block_timestamp > '2020-10-25T23:59:59Z'   GROUP BY 1,2 )    SELECT   week,     CASE   	  WHEN tx_currency = 'uusd' THEN 'uusd'   	  WHEN tx_currency = 'ukrw' THEN 'ukrw'   	  WHEN tx_currency = 'uluna' THEN 'uluna'   	ELSE 'other'   END AS fee_currency,   sum(terra_fee),   sum(num_events) FROM ( SELECT   *,   fees.currency as tx_currency,   fees.date as week,   (fee * fx_rate) as terra_fee FROM fees JOIN rates   ON (rates.date = fees.date AND rates.currency = fees.currency) ) GROUP BY 1, 2 ORDER BY 1
0fb6eef5-8c1e-4a6e-bf60-922f5b782e5e,avg gas per day past 90 [T66],WITH gas AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(gas_used) as gas_used,     count(*) as num_tx   FROM terra.transactions   WHERE block_timestamp > CURRENT_DATE - 90     AND block_timestamp < CURRENT_DATE     AND tx_status = 'SUCCEEDED'   GROUP BY 1 )    SELECT    *,   avg(gas_used) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_tot_gas,   gas_used / num_tx as gas_per_tx,   avg(gas_per_tx) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_tx_gas FROM gas
9dd6c262-a2d3-415d-a5ab-4425ca0516cf,2023-11-30 02:51 PM,select * from flow.nft.dim_ufc_strike_metadata where nft_id = '173772393';
167436bf-7753-41f3-b371-9e51746fa3bf,2023-11-30 02:50 PM,select * from flow.core.fact_events where tx_id = '98b88af2d8e0eda74991738cdeca49a622dd87bd2a27976cab549aac64aaaeef'
0389886a-fdae-4055-99e1-e726c6cef9e1,MDAO Workshop - Anchor Collateral Events - data check,select 	date_trunc('d',block_timestamp) as date,   	count(1) as tx_count,   	count(distinct tx_id) as unique_txs,     tx_count - unique_txs as diff    from anchor.collateral group by 1 order by 1
dcce29b2-a230-4d6d-9ff2-9b497a939b40,Daily Blocks & Transactions,with blocks as (   select     block_timestamp::date as _date,     count(distinct block_id) as daily_blocks   from near.core.fact_blocks   where block_timestamp::date >= '2023-01-01'   group by 1 ), txs as (   select     block_timestamp::date as _date,     count(distinct tx_hash) as daily_txs   from near.core.fact_transactions   where block_timestamp::date >= '2023-01-01'   group by 1 ), receipts as (   select     block_timestamp::date as _date,     count(distinct receipt_object_id) as daily_receipts   from near.core.fact_receipts   where block_timestamp::date >= '2023-01-01'   group by 1 ) select   b._date,   daily_blocks,   daily_txs,   daily_receipts from blocks b left join txs t using (_date) left join receipts using (_date)
2e1eaf3d-f72d-4661-9c06-1c1bdcda67a7,null voting power,with nulls as ( select   date_trunc('d', block_timestamp) as date,     count(1) as null_count  from terra.gov_vote where voting_power is null group by 1 ),    non_nulls as ( select   date_trunc('d', block_timestamp) as date,     count(1) as non_null_count  from terra.gov_vote where voting_power is not null group by 1 ) select   n.date,   coalesce(null_count,0) as null_count,   coalesce(non_null_count,0) as non_null_count from non_nulls n left join nulls using(date) order by 1
dcef14d7-ef52-424a-b044-dfdf6db5f526,Gov Votes,select 	proposal_id,   sum(voting_power) from terra.gov_vote where year(block_timestamp) > 2021 group by 1
2e5a4137-e311-4284-aa34-ddd44c79f597,Anchor Borrow balances [T33] - december copy,WITH borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1) SELECT   borrow.date,   daily_borrow_amount,   daily_repay_amount,   daily_borrow_amount - daily_repay_amount as net_borrow,   SUM(daily_borrow_amount - daily_repay_amount) OVER (ORDER BY borrow.date) as cum_net_borrow FROM (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ) repay JOIN borrow ON borrow.date = repay.date ORDER BY 1
dd1024cb-9762-4cb3-b67a-226cc2230564,Cumulative Anchor Deposits [T49],WITH withdraw AS (SELECT  	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount - redemption_amount as daily_change,   SUM(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date) as cumulative_deposits FROM   (SELECT     	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1
3f121626-f942-4901-a656-a08c5179bba0,Untitled Query,select count(1) from flow.core.ez_nft_sales
a282c53c-fdc4-46fd-8bb2-0695dc25315d,Untitled Query,
e08eed23-f9f0-4233-950a-6a006369e009,swap test,-- select * -- from terra.swaps -- order by block_timestamp desc --   limit 100; select * from terra.msgs order by block_timestamp desc   limit 100;
04c72be2-42ba-4b12-9d41-ae6f36c14cbb,Untitled Query,select      CASE WHEN NFT_COLLECTION = 'A.e4cf4bdc1751c65d.PackNFT' OR NFT_COLLECTION = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation   		WHEN NFT_COLLECTION = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation   		WHEN NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzMarketplace' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzDrops' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation   		WHEN NFT_COLLECTION = 'A.bae9e93397796df2.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation   		WHEN NFT_COLLECTION IN ('A.12450e4bb3b7666e.Genies', 'A.f018642f0ebeca21.Genies', 'A.f018642f0ebeca21.GeniesShardedCollection', 'A.12450e4bb3b7666e.GeniesShardedCollection', 'A.9c2234b992667d22.GeniesShardedCollection') THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation   		WHEN NFT_COLLECTION = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation   		WHEN NFT_COLLECTION IN ('A.9969d64233d69723.Blockletes_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT_V2', 'A.329feb3ab062d289.BlockleteGames_NFT') THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation   		WHEN NFT_COLLECTION IN ('A.329feb3ab062d289.AtlantaHawks_NFT', 'A.14c2f30a9e2e923f.AtlantaHawks_NFT', 'A.329feb3ab062d289.AtlantaNft_NFT') THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation   		WHEN NFT_COLLECTION IN ('A.8529aaf64c168952.MonoCat', 'A.8529aaf64c168952.MonoPaymentMinter', 'A.8529aaf64c168952.MonoGold', 'A.8529aaf64c168952.MonoCatMysteryBox', 'A.8529aaf64c168952.MonoSilver') THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation   		ELSE NFT_COLLECTION END AS NFT_COLLECTION   ,	CASE WHEN CURRENCY IN ('A.ead892083b3e2c6c.DapperUtilityCoin', 'A.4eded0de73020ca5.FazeUtilityCoin', 'A.3c5959b568896393.FUSD', 'A.b19436aae4d94622.FiatToken') THEN 'USD'    		WHEN CURRENCY IN ('A.1654653399040a61.FlowToken', 'A.ead892083b3e2c6c.FlowUtilityToken') THEN 'FLOW'   		ELSE CURRENCY END AS CURRENCY   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -60, GETDATE()) AND DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End) AS volume_30_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End ) AS volume_30   , (volume_30/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -60, GETDATE()) AND DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_30 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) Then 1 Else 0 End ) AS sales_30   ,	CASE WHEN sales_30 > 0 THEN volume_30 / sales_30 ELSE 0 End AS avg_price_30   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_30   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -14, GETDATE()) AND DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End) AS volume_7_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End ) AS volume_7   , (volume_7/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -14, GETDATE()) AND DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_7 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) Then 1 Else 0 End ) AS sales_7   ,	CASE WHEN sales_7 > 0 THEN volume_7 / sales_7 ELSE 0 End AS avg_price_7   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_7   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -2, GETDATE()) AND DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End) AS volume_1_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End ) AS volume_1   , (volume_1/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -2, GETDATE()) AND DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_1 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) Then 1 Else 0 End ) AS sales_1   ,	CASE WHEN sales_1 > 0 THEN volume_1 / sales_1 ELSE 0 End AS avg_price_1   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_1 from FLOW.CORE.EZ_NFT_SALES where TX_SUCCEEDED = TRUE AND BLOCK_TIMESTAMP > DATEADD(day, -60, GETDATE()) GROUP BY  CASE WHEN NFT_COLLECTION = 'A.e4cf4bdc1751c65d.PackNFT' OR NFT_COLLECTION = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation   		WHEN NFT_COLLECTION = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation   		WHEN NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzMarketplace' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzDrops' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation   		WHEN NFT_COLLECTION = 'A.bae9e93397796df2.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation   		WHEN NFT_COLLECTION IN ('A.12450e4bb3b7666e.Genies', 'A.f018642f0ebeca21.Genies', 'A.f018642f0ebeca21.GeniesShardedCollection', 'A.12450e4bb3b7666e.GeniesShardedCollection', 'A.9c2234b992667d22.GeniesShardedCollection') THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation   		WHEN NFT_COLLECTION = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation   		WHEN NFT_COLLECTION IN ('A.9969d64233d69723.Blockletes_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT_V2', 'A.329feb3ab062d289.BlockleteGames_NFT') THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation   		WHEN NFT_COLLECTION IN ('A.329feb3ab062d289.AtlantaHawks_NFT', 'A.14c2f30a9e2e923f.AtlantaHawks_NFT', 'A.329feb3ab062d289.AtlantaNft_NFT') THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation   		WHEN NFT_COLLECTION IN ('A.8529aaf64c168952.MonoCat', 'A.8529aaf64c168952.MonoPaymentMinter', 'A.8529aaf64c168952.MonoGold', 'A.8529aaf64c168952.MonoCatMysteryBox', 'A.8529aaf64c168952.MonoSilver') THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation   		ELSE NFT_COLLECTION END,   		CASE WHEN CURRENCY IN ('A.ead892083b3e2c6c.DapperUtilityCoin', 'A.4eded0de73020ca5.FazeUtilityCoin', 'A.3c5959b568896393.FUSD', 'A.b19436aae4d94622.FiatToken') THEN 'USD'    		WHEN CURRENCY IN ('A.1654653399040a61.FlowToken', 'A.ead892083b3e2c6c.FlowUtilityToken') THEN 'FLOW'   		ELSE CURRENCY END
0984a11f-0e28-495a-91d2-33a77e5ac546,yveCRV New Address Volume June 1 - present [YC1],WITH addy AS (   SELECT     date_trunc('day', block_timestamp) as day,     count(*) as approvals   FROM ethereum.transactions   WHERE to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV Vault (old)     AND function_name = 'approve'     AND block_timestamp > '2021-06-01T00:00:00Z'   GROUP BY 1   ) SELECT   day,   approvals,   avg(approvals) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM addy ORDER BY 1
404857b4-49ed-4157-a353-19177415ceaf,Untitled Query,select 	block_timestamp::date,   	count(tx_id) as records,     count(distinct tx_id) as txs,     sum(price) as gross_vol3 from flow.core.ez_nft_sales where nft_collection = 'A.e4cf4bdc1751c65d.AllDay'   group by 1   order by 1
529ee33f-c4cc-42c7-a52b-103acbd39a7e,Near Horizon Methods,select   method_name,   count(1) as receipt_ct,   count(distinct tx_hash) as tx_ct from   near.horizon.fact_decoded_actions group by   1 order by   3 desc
27fb4f68-de8d-4d71-b451-44b06ef7b15c,crypgoat's validator reward query from [T9],WITH terra_rewards as (     SELECT       	date_trunc('day',block_timestamp) as block_hour,       	event_attributes:validator::string as validator,       	SUM(event_attributes:amount[0]:amount::float/POW(10,6)) as amount_luna     FROM terra.transitions     WHERE     	block_timestamp BETWEEN CURRENT_DATE-30 AND CURRENT_DATE-1     	AND     	event='rewards'     	AND     	transition_type='end_block'     GROUP BY 1,2     ORDER BY 1) 	, prices as (   	SELECT   		hour,   		price as price_usd   	FROM ethereum.token_prices_hourly   	WHERE   		token_address=lower('0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9')   		AND    		hour BETWEEN CURRENT_DATE-30 AND CURRENT_DATE -1),   	combined as (     SELECT     	block_hour,     	validator,     	amount_luna,     	price_usd,     	amount_luna*price_usd as amount_usd     FROM terra_rewards     JOIN prices ON terra_rewards.block_hour=prices.hour) SELECT 	block_hour, 	amount_luna as daily_amount_luna, 	amount_usd as daily_amount_usd FROM combined
1a8293c7-3c2b-4606-80f2-e3080059f195,aUST Bridged from ETH to Terra,SELECT   date_trunc('day', block_timestamp) as date,   sum(event_attributes:amount / pow(10,6)) as amount FROM terra.msg_events WHERE event_type = 'from_contract'   AND event_attributes:action = 'transfer'   AND event_attributes:contract_address = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc'   AND block_timestamp > CURRENT_DATE - 30 GROUP BY 1
5a9dd69b-9606-45cf-b6a6-17d7b22b5e2d,Anchor Collateral Outliers,select * from anchor.collateral order by amount_usd desc limit 10
23ca9e16-b633-4f34-9238-91a0b246e938,Swaps by Hour (UTC) [THOR8],SELECT   extract(hour from block_timestamp) as hour,   sum(from_amount_usd) as volume FROM thorchain.swaps WHERE block_timestamp > '2021-10-03T00:00:00Z' GROUP BY 1 ORDER BY 1
c47b2313-2d0c-4b14-af11-1a453d7f75f2,yveCRV 3crv claims [YC1] [YC2],WITH claims AS (   SELECT     date_trunc('week', block_timestamp) as day,     sum(amount) as claims,     count(*) as claim_tx_count,     count(distinct origin_address) as unique_claimants   FROM ethereum.udm_events   WHERE contract_address = '0x6c3f90f043a72fa612cbac8115ee7e52bde6e490' -- 3crv address     AND from_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV pool     AND origin_function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z'   GROUP BY 1   ORDER BY 1   )    SELECT   day,   claims,   avg(claims) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as ma,   sum(claims) OVER (ORDER BY day) as cumulative,   claim_tx_count,   unique_claimants,   claim_tx_count / unique_claimants as claims_per_user,   claims / claim_tx_count as avg_3crv_size FROM claims
dfa56083-5179-4c51-8c1e-016a37483b04,oracle check,select   date_trunc('day', block_timestamp),   currency,   count(*) from terra.oracle_prices group by 1,2 order by 1
e2525871-0c7c-44c7-88f6-e6028ee2b493,LOTA-UST contract balance,SELECT * FROM terra.daily_balances WHERE address = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' AND balance > 0 ORDER BY 1
45f306d2-aa67-446d-a332-1563359833fa,UFC Strike,select * from flow.nft.dim_ufc_strike_metadata sample (50 rows)
65d123c8-fb4f-46f9-a7a6-36d7cc7d3cce,UST balance,SELECT date, SUM(balance) as total_ust FROM terra.daily_balances WHERE CURRENCY  = 'UST' and date = (SELECT max(date) FROM terra.daily_balances) GROUP BY 1
5eaeb172-eddd-4888-ae47-f8fce5388df6,uni v3 mdao 101,select 	*,   	event_inputs:amount0,   	event_inputs:amount1   from ethereum.core.fact_event_logs lo   -- left join ethereum.core.dim_labels la on lo.origin_to_address = la.address 	where event_name = 'Swap' 	and origin_to_address = '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45'   	and block_timestamp::date >= current_date - 30   	and contract_name ilike 'UniswapV3%' limit 100
cb8e49e0-081f-439d-8cd0-950901118f37,Untitled Query,select * from flow.core.dim_swap_pool_labels
e49a843a-d2b9-48ed-bc8a-3715c6d3bf6b,Untitled Query,select * from flipside_prod_db.terra.labels where address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'
99f18578-5a30-4d2b-9e49-2ae84e384c84,Untitled Query,
438b10e9-9d32-4e3d-a840-cd37cfd42fc4,Orion Constellation Hunt - ORION staking,SELECT * FROM ethereum.udm_events WHERE tx_id = '0xcbd0d816260f79f9b77803cc023c9592a7b24acc76355f0a70b3c6e4ab9dfbeb' -- ORION staking approval
9926bc5b-ba2f-4652-b08d-30184f142ffd,Untitled Query,SELECT * FROM ethereum.core.fact_event_logs  WHERE tx_hash = '0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3' ORDER BY event_index; select * from ethereum.core.dim_labels where address = '0x60594a405d53811d3bc4766596efd80fd545a270';
11d88d4d-779c-4bc9-b56d-4b94d6cfe216,Untitled Query,select * from near.core.fact_prices limit 100;
c81eda5b-fa0c-4ca6-af9d-43d0e813b430,plotx [P HUNT],SELECT block_timestamp,   tx_id,   event_inputs,   event_name,   contract_name FROM polygon.events_emitted WHERE tx_id = '0x9214d7d40fcba8d503595fc05c0dc374a6364942b1971b4163795cc04899cc99'
6292c4b9-afd6-48df-a0d3-209a5beb3901,Test swap,select * from ethereum.core.ez_dex_swaps where tx_hash = '0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff' -- my swap BAL->ETH  --  where platform ilike '%uniswap%' 	-- and block_timestamp > CURRENT_DATE - 7   limit 10 select * from ethereum.core.fact_transactions where tx_hash = '0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff'
042abf0f-435d-433e-82c9-42ecef6713b3,NEAR Top 10 Monthly Signers by Tx Count, 2022,with signers as ( SELECT DATE_TRUNC('month', block_timestamp) AS month,   tx_signer,   count(distinct tx_hash) as txs_signed,   rank() over (partition by month order by txs_signed desc) as signer_rank FROM near.core.fact_transactions WHERE tx_status = 'Success' 	AND block_timestamp::DATE >= '2022-01-01'   	AND block_timestamp::DATE <= '2022-12-31' GROUP BY 1,2 ) SELECT   month,   tx_signer,   txs_signed,   signer_rank from signers where signer_rank <= 10 order by 1, 4
9870e1c3-cb4b-4a4c-ae92-80e7f1fc9cbc,NEAR Swaps Issue?,-- look at USDC amount in select * from near.core.ez_dex_swaps where tx_hash = '3a8YGaNuEhpSET91FwZm6BP8SxWAYG3y1WX4YRaveRPc';
3a4d0d93-b79e-46b6-a48c-872c2cc8f83b,Untitled Query,SELECT distinct method_name FROM flipside_prod_db.mdao_near.actions_events_function_call where method_name like '{%'   limit 100
e7593818-5b25-4eb0-979a-22b5c9bc64aa,Terra Wormhole - total outbound by token,WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id,     CASE       WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'       ELSE 'LUNA'     END as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     AND destination_chain_id IS NOT NULL   GROUP BY 1,2,3   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount     -- CASE     --   WHEN token = 'LUNA' THEN amount * avg_price     --   ELSE amount     -- END AS amount_usd   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token = 'LUNA'   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token = 'UST' ), outbound_vol AS (   SELECT     token,     sum(amount) as volume_usd   FROM combo   JOIN chain_ids ON combo.destination_chain_id = chain_ids.id   GROUP BY 1   ) SELECT  * FROM outbound_vol
be74219f-085b-4092-8d99-43593fca6802,Untitled Query,select * from flow.core.dim_allday_metadata where nft_id = 1085;
09e714de-98ff-4f3b-8748-26b962bd3778,Untitled Query,
388439ec-7e32-4567-8f85-160862c1e13f,broken,select   date_trunc('d',block_timestamp) as date,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1 order by 1
2b30de83-fdeb-4dfe-8091-b65134ff24cf,Ethereum Price,SELECT   hour,   price FROM ethereum.token_prices_hourly WHERE symbol = 'ETH'   AND hour > CURRENT_DATE - interval '30 days'
90546708-3b6b-4e46-b6b2-720d0a127097,residential-tomato,
31911da7-e555-4c05-9218-5c3d8208828c,Guessing game,SELECT   uniform(1, 100, random()) as random_num,   iff({{guess}} = random_num, 'YES', 'NO LOL') as did_u_win FROM   table (generator(rowCount => 1))
3c7df939-91ab-44ae-a05a-afc6281f48f1,Untitled Query,with eth as (   select   	date_trunc('d',block_timestamp) as date,   	count(distinct from_address) as uniq_wallets   from ethereum_core.fact_transactions   where block_timestamp > '2022-02-01'   group by 1   order by 1    )
320c3808-c776-40e9-ac60-0de7bf980c05,2023-11-01 01:01 PM,
5bef5ca9-505c-4c62-8c62-a0cb2d3ebeac,Terra-BSC Bridge Gross Volume [T104],with terra_bsc as (   select          block_timestamp,     event_from as sender,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id        from terra.transfers   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), bsc_terra as (   select        block_timestamp,     event_to as recipient,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id   from terra.transfers   where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), labels as (   select * from terra.labels ), terra_bsc_agg as (   select   	date_trunc('day', block_timestamp) as date,     -sum(amount_usd) as amount_usd,   	'outbound' as direction   from terra_bsc   group by 1 ), bsc_terra_agg as (   select   	date_trunc('day', block_timestamp) as date,     sum(amount_usd) as amount_usd,   	'inbound' as direction   from bsc_terra   group by 1 ), final as (   select * from terra_bsc_agg   union   select * from bsc_terra_agg ) select * from final where direction = 'outbound' and date > '2021-01-24T00:00:00Z'
ec6d2d28-37c2-4c60-bc1c-053a4d1609ef,Anchor Deposits over july [T32],WITH withdraw AS (SELECT  	date_trunc('day', block_timestamp) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount - redemption_amount as daily_change,   SUM(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date) as cumulative_deposits FROM   (SELECT     	date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date WHERE withdraw.date > '2021-07-01T00:00:00Z' ORDER BY 1
ec698ba6-3db4-4904-b8ca-50e45c0a0bac,Failed ETH transaction fees [P7],SELECT   date_trunc('day', block_timestamp) as date,   sum(tx_fee) as avg_fee_ethereum,   sum(fee_usd) as avg_fee_usd_ethereum FROM ethereum.transactions WHERE block_timestamp > '2021-06-01T00:00:00Z'   AND success = 'FALSE' GROUP BY 1 ORDER BY 1
ccc9d5b1-fe03-481c-beb5-26cf631f1520,Untitled Query,
afdf2486-62fc-40aa-b342-8c6b813c961a,Untitled Query,
de980a1a-8758-4f3f-b331-15d9ada37bc7,Untitled Query,with block_check as (   select distinct block_id as b from near.core.fact_transactions   where block_timestamp is null ), all_blocks as (   select distinct block_id as b from near.core.fact_blocks   where round(block_id,-4) = 83420000 ) select * from block_check except select * from all_blocks
27528d06-b624-4672-9c4c-d7138613c85e,Beer is NEAR, Gross by Hour,WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE >= '2022-09-11' ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE >= '2022-09-11' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE >= '2022-09-11'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE >= '2022-09-11'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ), aggs as ( 	select   		date_trunc('hour', block_timestamp) as "Time",   		count(1) as "Total Sales",   		sum(deposit_amount_usd) as "Gross Sales, EUR"   from final   group by 1 ) select 	*,   	sum("Total Sales") over (order by "Time") as "Cumulative Transaction Count",   	sum("Gross Sales, EUR") over (order by "Time") as "Cumulative Volume, EUR" from aggs order by 1
8909c775-5397-4f9e-a170-dc0ab7bfde2f,LUNA quantity [T46],WITH bonded AS ( SELECT   date,   balance as bonded_bal FROM terra.daily_balances WHERE currency = 'LUNA'   AND date > '2021-03-16T00:00:00Z'   AND address = 'terra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3nln0mh' ), not_bonded AS ( SELECT date,   balance as not_bonded_bal FROM terra.daily_balances WHERE currency = 'LUNA'   AND date > '2021-03-16T00:00:00Z'   AND address = 'terra1tygms3xhhs3yv487phx3dw4a95jn7t7l8l07dr' ) SELECT * FROM bonded JOIN not_bonded ON bonded.date = not_bonded.date
e2b2cd1e-dfc3-4495-9c18-a5c41dcfb151,anchor depositor behavior [t123],-- anchor tables are not set up to handle col-5... with deposits as (   select     date_trunc('d', block_timestamp) as date,     sum(deposit_amount) as gross_deposit,     count(distinct sender) as unique_depositors,     count(1) as deposit_tx_count,     avg(deposit_amount) as avg_deposit,     min(deposit_amount) as min_deposit,     max(deposit_amount) as max_deposit   from anchor.deposits   group by 1 ), redemptions as (   select     date_trunc('d', block_timestamp) as date,     sum(amount) as gross_withdraw,     count(distinct sender) as unique_withdrawers,     count(1) as withdraw_tx_count,     avg(amount) as avg_withdraw,     min(amount) as min_withdraw,     max(amount) as max_withdraw   from anchor.redeem   group by 1 ), earn as (   select * from deposits   left join redemptions using (date) ), earn_net as (   select     *,     gross_deposit - gross_withdraw as daily_deposit_change   from earn ), liquidations as (   select     date_trunc('d', block_timestamp) as date,     sum(repay_amount) as gross_repay,   	count(distinct borrower) as unique_borrower,   	count(1) as liquidation_tx_count,   	avg(repay_amount) as avg_repay,   	min(repay_amount) as min_repay,   	max(repay_amount) as max_repay   from anchor.liquidations   group by 1 ), anchor_final as (   select     *,   	earn_net.daily_deposit_change - liquidations.gross_repay as net_daily_change   from earn_net   left join liquidations using (date) ),    final as (   select     *,   	sum(net_daily_change) over (order by date) as cumulative_earn_deposit   from anchor_final   order by 1 ) select * from final
090574df-e529-4a5e-a64a-0698cd8cf083,swaps,SELECT * FROM terra.swaps WHERE trader = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'
1577c545-7deb-4a51-8408-edd5b3c7407c,Untitled Query,
7383f4aa-64bb-4bad-8ca3-1b9c9afbed1a,Untitled Query,SELECT     CASE         WHEN nft_collection = 'A.e4cf4bdc1751c65d.PackNFT'         OR nft_collection = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation         WHEN nft_collection = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation         WHEN nft_collection = 'A.62b3063fbe672fc8.ZeedzMarketplace'         OR nft_collection = 'A.62b3063fbe672fc8.ZeedzDrops'         OR nft_collection = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation         WHEN nft_collection = 'A.bae9e93397796df2.CheezeNFT'         OR nft_collection = 'A.5a8fb12692f5a446.CheezeNFT'         OR nft_collection = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation         WHEN nft_collection IN (             'A.12450e4bb3b7666e.Genies',             'A.f018642f0ebeca21.Genies',             'A.f018642f0ebeca21.GeniesShardedCollection',             'A.12450e4bb3b7666e.GeniesShardedCollection',             'A.9c2234b992667d22.GeniesShardedCollection'         ) THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation         WHEN nft_collection = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation         WHEN nft_collection IN (             'A.9969d64233d69723.Blockletes_NFT',             'A.9969d64233d69723.BlockleteMarket_NFT',             'A.9969d64233d69723.BlockleteMarket_NFT_V2',             'A.329feb3ab062d289.BlockleteGames_NFT'         ) THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation         WHEN nft_collection IN (             'A.329feb3ab062d289.AtlantaHawks_NFT',             'A.14c2f30a9e2e923f.AtlantaHawks_NFT',             'A.329feb3ab062d289.AtlantaNft_NFT'         ) THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation         WHEN nft_collection IN (             'A.8529aaf64c168952.MonoCat',             'A.8529aaf64c168952.MonoPaymentMinter',             'A.8529aaf64c168952.MonoGold',             'A.8529aaf64c168952.MonoCatMysteryBox',             'A.8529aaf64c168952.MonoSilver'         ) THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation         ELSE nft_collection     END AS nft_collection,     CASE         WHEN currency IN (             'A.ead892083b3e2c6c.DapperUtilityCoin',             'A.4eded0de73020ca5.FazeUtilityCoin',             'A.3c5959b568896393.FUSD',             'A.b19436aae4d94622.FiatToken'         ) THEN 'USD'         WHEN currency IN (             'A.1654653399040a61.FlowToken',             'A.ead892083b3e2c6c.FlowUtilityToken'         ) THEN 'FLOW'         ELSE currency     END AS currency,     SUM(         CASE             WHEN block_timestamp BETWEEN DATEADD(DAY, -60, getdate())             AND DATEADD(DAY, -30, getdate()) THEN price             ELSE 0END         ) AS volume_30_prev,         SUM(             CASE                 WHEN block_timestamp > DATEADD(DAY, -30, getdate()) THEN price                 ELSE 0END             ) AS volume_30,             (                 volume_30 / NULLIF(                     SUM(                         CASE                             WHEN block_timestamp BETWEEN DATEADD(DAY, -60, getdate())                             AND DATEADD(DAY, -30, getdate()) THEN price                             ELSE 0END                         ),                         0                     )                 ) -1 AS growth_30 -- want to return "-" instead of 0,                 SUM(                     CASE                         WHEN block_timestamp > DATEADD(DAY, -30, getdate()) THEN 1                         ELSE 0END                     ) AS sales_30,                     CASE                         WHEN sales_30 > 0 THEN volume_30 / sales_30                         ELSE 0                     END AS avg_price_30,                     COUNT(                         DISTINCT (                             CASE                                 WHEN block_timestamp > DATEADD(DAY, -30, getdate()) > 0 THEN buyer                                 ELSE NULLEND                             )                         ) AS unique_buyers_30,                         SUM(                             CASE                                 WHEN block_timestamp BETWEEN DATEADD(DAY, -14, getdate())                                 AND DATEADD(DAY, -7, getdate()) THEN price                                 ELSE 0END                             ) AS volume_7_prev,                             SUM(                                 CASE                                     WHEN block_timestamp > DATEADD(DAY, -7, getdate()) THEN price                                     ELSE 0END                                 ) AS volume_7,                                 (                                     volume_7 / NULLIF(                                         SUM(                                             CASE                                                 WHEN block_timestamp BETWEEN DATEADD(DAY, -14, getdate())                                                 AND DATEADD(DAY, -7, getdate()) THEN price                                                 ELSE 0END                                             ),                                             0                                         )                                     ) -1 AS growth_7 -- want to return "-" instead of 0,                                     SUM(                                         CASE                                             WHEN block_timestamp > DATEADD(DAY, -7, getdate()) THEN 1                                             ELSE 0END                                         ) AS sales_7,                                         CASE                                             WHEN sales_7 > 0 THEN volume_7 / sales_7                                             ELSE 0                                         END AS avg_price_7,                                         COUNT(                                             DISTINCT (                                                 CASE                                                     WHEN block_timestamp > DATEADD(DAY, -7, getdate()) > 0 THEN buyer                                                     ELSE NULLEND                                                 )                                             ) AS unique_buyers_7,                                             SUM(                                                 CASE                                                     WHEN block_timestamp BETWEEN DATEADD(DAY, -2, getdate())                                                     AND DATEADD(DAY, -1, getdate()) THEN price                                                     ELSE 0END                                                 ) AS volume_1_prev,                                                 SUM(                                                     CASE                                                         WHEN block_timestamp > DATEADD(DAY, -1, getdate()) THEN price                                                         ELSE 0END                                                     ) AS volume_1,                                                     (                                                         volume_1 / NULLIF(                                                             SUM(                                                                 CASE                                                                     WHEN block_timestamp BETWEEN DATEADD(DAY, -2, getdate())                                                                     AND DATEADD(DAY, -1, getdate()) THEN price                                                                     ELSE 0END                                                                 ),                                                                 0                                                             )                                                         ) -1 AS growth_1 -- want to return "-" instead of 0,                                                         SUM(                                                             CASE                                                                 WHEN block_timestamp > DATEADD(DAY, -1, getdate()) THEN 1                                                                 ELSE 0END                                                             ) AS sales_1,                                                             CASE                                                                 WHEN sales_1 > 0 THEN volume_1 / sales_1                                                                 ELSE 0                                                             END AS avg_price_1,                                                             COUNT(                                                                 DISTINCT (                                                                     CASE                                                                         WHEN block_timestamp > DATEADD(DAY, -1, getdate()) > 0 THEN buyer                                                                         ELSE NULLEND                                                                     )                                                                 ) AS unique_buyers_1                                                                 FROM                                                                     flow.core.ez_nft_sales                                                                 WHERE                                                                     tx_succeeded = TRUE                                                                     AND block_timestamp > DATEADD(DAY, -60, getdate())                                                                 GROUP BY                                                                     CASE                                                                         WHEN nft_collection = 'A.e4cf4bdc1751c65d.PackNFT'                                                                         OR nft_collection = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation                                                                         WHEN nft_collection = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation                                                                         WHEN nft_collection = 'A.62b3063fbe672fc8.ZeedzMarketplace'                                                                         OR nft_collection = 'A.62b3063fbe672fc8.ZeedzDrops'                                                                         OR nft_collection = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation                                                                         WHEN nft_collection = 'A.bae9e93397796df2.CheezeNFT'                                                                         OR nft_collection = 'A.5a8fb12692f5a446.CheezeNFT'                                                                         OR nft_collection = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation                                                                         WHEN nft_collection IN (                                                                             'A.12450e4bb3b7666e.Genies',                                                                             'A.f018642f0ebeca21.Genies',                                                                             'A.f018642f0ebeca21.GeniesShardedCollection',                                                                             'A.12450e4bb3b7666e.GeniesShardedCollection',                                                                             'A.9c2234b992667d22.GeniesShardedCollection'                                                                         ) THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation                                                                         WHEN nft_collection = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation                                                                         WHEN nft_collection IN (                                                                             'A.9969d64233d69723.Blockletes_NFT',                                                                             'A.9969d64233d69723.BlockleteMarket_NFT',                                                                             'A.9969d64233d69723.BlockleteMarket_NFT_V2',                                                                             'A.329feb3ab062d289.BlockleteGames_NFT'                                                                         ) THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation                                                                         WHEN nft_collection IN (                                                                             'A.329feb3ab062d289.AtlantaHawks_NFT',                                                                             'A.14c2f30a9e2e923f.AtlantaHawks_NFT',                                                                             'A.329feb3ab062d289.AtlantaNft_NFT'                                                                         ) THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation                                                                         WHEN nft_collection IN (                                                                             'A.8529aaf64c168952.MonoCat',                                                                             'A.8529aaf64c168952.MonoPaymentMinter',                                                                             'A.8529aaf64c168952.MonoGold',                                                                             'A.8529aaf64c168952.MonoCatMysteryBox',                                                                             'A.8529aaf64c168952.MonoSilver'                                                                         ) THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation                                                                         ELSE nft_collection                                                                     END,                                                                     CASE                                                                         WHEN currency IN (                                                                             'A.ead892083b3e2c6c.DapperUtilityCoin',                                                                             'A.4eded0de73020ca5.FazeUtilityCoin',                                                                             'A.3c5959b568896393.FUSD',                                                                             'A.b19436aae4d94622.FiatToken'                                                                         ) THEN 'USD'                                                                         WHEN currency IN (                                                                             'A.1654653399040a61.FlowToken',                                                                             'A.ead892083b3e2c6c.FlowUtilityToken'                                                                         ) THEN 'FLOW'                                                                         ELSE currency                                                                     END
3ab88157-674e-416e-bdb2-daf1e30eb73a,Untitled Query,select * from flow.core.dim_moment_metadata   where nft_collection = 'A.87ca73a41bb50ad5.Golazos' limit 10
f4ab1b7b-df72-438c-b100-88d189d561c6,Monitoring - blocks vs expectation,-- blocks / day select     date_trunc('d', block_timestamp) as _date,     count(distinct {{block_num_column}}) as blocks,     (max({{block_num_column}}) - min({{block_num_column}})) as ex_blocks from {{blockchain}}.core.fact_blocks where block_timestamp > current_date - interval '{{date_interval}}' group by 1
377c4447-65d8-47c7-a261-7a7e5d4750bf,2023-07-05 12:22 PM,
fc6bf77e-af25-40fe-816e-298464ddcee7,Untitled Query,
f544debe-12b5-411e-9781-ab76bc29b0de,Untitled Query,select * from flow.core.ez_nft_sales   where nft_collection = 'A.c6945445cdbefec9.TuneGONFT'   limit 10
69357408-b99d-4433-92d3-0324514f86a5,Untitled Query,
cf8e4b00-2297-40d5-9845-f599cfadc5f1,Untitled Query,select distinct platform from near.core.ez_dex_swaps
b8257b25-b2de-47dd-807a-d28e449f8256,bLUNA burn combined,SELECT    a.date,   b.terraswap,   a.anchor FROM    (SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as terraswap FROM terra.msgs   WHERE block_timestamp > GETDATE() - interval '1 month' 	AND msg_module = 'wasm'   AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   AND msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p'  AND tx_status = 'SUCCEEDED' GROUP BY 1) b JOIN (SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as anchor   FROM terra.msgs WHERE block_timestamp > GETDATE() - interval '1 month'   AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   AND msg_value:execute_msg:send:contract = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   AND tx_status = 'SUCCEEDED' GROUP BY 1) a 	ON a.date = b.date    ORDER BY 1 asc
5d909e2a-7f50-4bca-9aba-bef50691301e,Monitoring - Block Gaps by Size,-- individual missing blocks WITH source AS (     SELECT         {{block_num_column}},         LAG(             {{block_num_column}},             1         ) over (                          ORDER BY                 {{block_num_column}} ASC         ) AS prev_block_height     FROM         (select distinct {{block_num_column}} from           {{blockchain}}.core.fact_blocks          )  ) SELECT     date_trunc('d', b.block_timestamp) as _date,     a.{{block_num_column}} as block,         a.prev_block_height as prev_block,     a.{{block_num_column}} - a.prev_block_height - 1 AS gap FROM     source a         left join {{blockchain}}.core.fact_blocks b using ({{block_num_column}}) WHERE     a.{{block_num_column}} - a.prev_block_height <> 1     and block_timestamp > current_date - interval '{{date_interval}}' order by gap desc
6a46a712-5846-4cdc-bf22-0112eafc6c99,Untitled Query,select distinct marketplace from flow.core.ez_nft_sales
3dcd756c-d7b6-43e4-ad1e-e5c61a2c0d9a,2023-05-17 01:21 PM,select * from near.core.fact_nft_mints limit 10
76abcdad-0ad2-40e7-ae52-81dacba075f9,Copy of Total No. of Wallets on Terra,with from_address as    SELECT event_from as address FROM terra.transfers ), to_address as (   SELECT event_to as address FROM terra.transfers ), combo as (   select * from from_address   UNION   select * from to_address ), filter as (   select count(distinct address) from combo ) select * from filter
d0ea701a-0ce6-44cb-b106-94662a86de28,anchor liquidations,SELECT *   -- date_trunc('day', block_timestamp) as date,   -- sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit FROM terra.transactions -- WHERE tx_status = 'SUCCEEDED' 	-- AND msg_value:execute_msg LIKE '%liquidate_collateral%'   	WHERE tx_id = 'CF97523EE54AE2CDBDE06F3A704E66291FE4D20489F97F2B9911D939EDA705DF' -- GROUP BY 1 -- ORDER BY 1
fc9dfbbb-6920-40e9-b4a7-7e75b745e3b3,yveCRV New Address Volume [YC1],WITH yvecrv AS (   SELECT     date_trunc('day', block_timestamp) as day,     count(*) as yvecrv_approvals   FROM ethereum.transactions   WHERE to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV Vault     AND function_name = 'approve'     AND block_timestamp > '2021-02-04T23:59:00Z'   GROUP BY 1   ), yvboost AS (   SELECT     date_trunc('day', block_timestamp) as day,     count(*) as boost_approvals   FROM ethereum.transactions   WHERE to_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvBOOST Vault     AND function_name = 'approve'     AND block_timestamp > '2021-04-29T23:59:00Z'   GROUP BY 1   ), combo AS (   SELECT     yvecrv.day as day,     yvecrv_approvals,     boost_approvals   FROM yvecrv   LEFT JOIN yvboost ON yvecrv.day = yvboost.day ) SELECT   day,   yvecrv_approvals,   avg(yvecrv_approvals) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as yve_crv_weekly_ma,   boost_approvals,   avg(boost_approvals) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as boost_weekly_ma FROM combo ORDER BY 1
fc9314c8-618b-4c55-9af0-ea8ec4a74e6b,Anchor Daily Active Users [Flash119],WITH anchor AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2022-01-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN ('terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s', 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8', 'terra1w9ky73v4g7v98zzdqpqgf3kjmusnx4d4mvnac6', 'terra1f32xyep306hhcxxxf7mlyh0ucggc00rm2s9da5', 'terra14ku9pgw5ld90dexlyju02u4rn6frheexr5f96h', 'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9', 'terra146ahqn6d3qgdvmj8cj96hh03dzmeedhsf0kxqm', 'terra10cxuzggyvvv44magvrh3thpdnk9cmlgk93gmx2')     ) SELECT   date,   count(distinct address) as unique_wal FROM anchor GROUP BY 1 ORDER BY 1
90b8aa8c-1f11-4c6c-b659-5947d75f77ed,flexible-magenta,with daily_signers as ( select     date_trunc('day', block_timestamp) as day,     count(distinct tx_signer) as unique_signer_ct,     count(distinct tx_hash) as tx_ct,     count(distinct block_id) as block_ct from near.core.fact_transactions where block_timestamp >= '2025-02-01' group by 1 ), price as ( select   date_trunc('day', HOUR) as day,   avg(price) as avg_daily_price from near.price.ez_prices_hourly where is_native   and lower(symbol) = 'near'   and hour >= '2025-02-01' group by 1  ) select   d.day,   unique_signer_ct,   tx_ct,   block_ct,   avg_daily_price from daily_signers d left join price p using (day)
19dfb337-8c24-4bbe-9111-56102e753ac7,Untitled Query,
fd5cf05e-1d7f-469f-9ffa-c3e796769c5c,Sushiswap Hunt - Swap for SUSHI,SELECT * FROM polygon.udm_events WHERE tx_id = '0xeaba072a4fae9cfa5d62be81429bcdf2ed9af725a007468ec41f117a5a7f648c'
28dacad0-e5a4-4891-9a59-fbb571e29e25,2023-04-12 10:24 PM,select    date_trunc('hour', convert_timezone('UTC', 'America/Denver', block_timestamp)) as time_period,   avg(price_usd) as avg_price from terra.classic.dim_oracle_prices where block_timestamp::date like '2022-05%' and upper(symbol) = 'ASTRO' group by 1 order by 1
b4aae43e-5990-40c2-9ba9-9cb9a8eaee3c,Widget Activity - FS,with   decoded_actions as (     select       *     FROM       near.social.fact_decoded_actions     WHERE       NODE = 'widget'   ),   widgets as (     select       tx_hash,       action_id_social,       block_id,       block_timestamp,       signer_id,       node_data,       object_keys(try_parse_json(node_data)) [0]::string as widget_name, -- id 7qAfCCvMXyytKnT4yCweSTtn6ytnKGbcQ1zgXp91iEWz-0-widget fucking this up w just "$ARGS"       node_data[widget_name] as js_code,       concat(         'https://near.social/#/',         signer_id,         '/widget/',         widget_name       ) as widget_url,     concat_ws('-', signer_id, widget_name) as widget_id,     iff(js_code ilike '%flipside%', 'Flipside', 'All other') as fs_test     from       decoded_actions   ) SELECT   block_timestamp::date as _date,   fs_test,   count(1) as commits,   count(distinct widget_id) as unique_widget_activity,   count(distinct signer_id) as unique_developers from widgets where _date >= '2023-03-01' group by 1,2 order by 1,2
2c63b96c-e7b3-4f00-9205-2c7e13fcba6f,daily delegator LUNA rewards w USD value [T65],WITH block_rewards as (   SELECT     date_trunc('hour', block_timestamp) as block_hour,     event_attributes:validator::string as validator,     sum(event_attributes:amount[0]:amount::float / pow(10,6)) as luna_amt   FROM terra.transitions   WHERE block_timestamp > CURRENT_DATE - 30     AND block_timestamp < CURRENT_DATE     AND event = 'rewards'     AND transition_type = 'end_block'   GROUP BY 1, 2   ORDER BY 1), 	 prices as (   SELECT     date_trunc('hour', block_timestamp) as hour,     avg(price_usd) as price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ),    combined as (   SELECT     block_hour,     validator,     luna_amt,     price_usd,     luna_amt * price_usd as usd_amt   FROM block_rewards   JOIN prices ON block_rewards.block_hour = prices.hour) SELECT   date_trunc('day',block_hour) as date,   sum(luna_amt) as daily_luna_reward,   sum(usd_amt) as daily_usd_reward FROM combined GROUP BY 1
5b13ce4b-d7bd-43ce-8649-4ff2b9177f5c,Current Validator Voting Power,SELECT   block_timestamp,    block_id,   address,   voting_power FROM terra.validator_voting_power WHERE block_id = (SELECT MAX(block_id)    					  FROM terra.validator_voting_power)
e5fdf1b2-f6a6-455a-84ec-630bcb11ac22,anchor borrow repay and liquidations,WITH borrow AS ( SELECT   block_timestamp,   CASE     WHEN event_attributes:action = 'borrow_stable' THEN event_attributes:borrow_amount::float / pow(10,6)     WHEN event_attributes:action = 'repay_stable' THEN -event_attributes:repay_amount::float / pow(10,6)     WHEN event_attributes:"0_action" = 'liquidate_collateral' THEN -event_attributes:"0_repay_amount"::float / pow(10,6)   END as amount FROM terra.msg_events WHERE event_type = 'from_contract'   AND tx_status = 'SUCCEEDED'   AND block_timestamp > '2021-03-16T23:59:59Z') SELECT    date,   SUM(net_borrow) OVER (ORDER BY date) as cumulative_borrow FROM (   SELECT     date_trunc('day', block_timestamp) as date,     SUM(amount) as net_borrow   FROM borrow   GROUP BY 1) ORDER BY 1
4d67ae63-dd3b-490a-8f1c-42254530d870,eth - usdc transfers,SELECT     date_trunc('day', block_timestamp) as metric_date,     sum(amount) as total_amount FROM ethereum.udm_events WHERE     event_type = 'erc20_transfer' AND     symbol = 'USDC' AND     amount > 0 AND     block_timestamp >= '2021-05-01T00:00:00Z' AND     block_timestamp <= '2021-06-03T00:00:00Z' GROUP BY metric_date ORDER BY metric_date DESC;
f6933855-08ad-42db-9d4e-c712634749b0,Atlas - New NEAR MAAs,with dates as  (select distinct block_timestamp::date as day from near.core.fact_transactions ), txns as  ( select   block_timestamp::date as active_day,   tx_signer from near.core.fact_transactions ) select   day,   'NEAR' as chain,   count(distinct tx_signer) as maa from dates d   left outer join txns t     on t.active_day < d.day and t.active_day >= d.day - interval '30 day' where day != current_date() group by 1 order by 1 desc
bb864f9d-4528-4a87-bc7a-e737a2b0a351,Untitled Query,select min(block_number) from ethereum.core.fact_transactions
87362b43-0abd-49c1-81cb-39d4bbf456ff,THORChain Top Swap Volume, past 24h - unique users [THOR5],SELECT   pool_name,   count(distinct from_address) as unique_users FROM thorchain.swaps WHERE block_timestamp < CURRENT_DATE - interval '24 hours' GROUP BY 1 ORDER BY 2 DESC
877e5e15-e497-4e2b-8cf0-3d0020c6d588,2023-01-20 03:28 PM,WITH xcomics_paras as (   SELECT    	DATE(block_timestamp) as date,     SUM(ZEROIFNULL(TRY_PARSE_JSON(TRY_PARSE_JSON(SUBSTR(logs[0], 12)):data[0]:memo):price::float / 1e24)) as daily_volume,     SUM(ZEROIFNULL(TRY_PARSE_JSON(TRY_PARSE_JSON(SUBSTR(logs[0], 12)):data[0]:memo):price::float / 1e24) * p.price) as daily_volume_usd   FROM near.core.fact_receipts   JOIN (   	SELECT DATE(timestamp) as date, AVG(price_usd) as price     FROM near.core.fact_prices     WHERE token_contract = 'wrap.near'     GROUP BY 1   ) p ON DATE(block_timestamp) = p.date   WHERE receiver_id IN ('comic.paras.near', 'x.paras.near')     AND REGEXP_SUBSTR(status_value, 'Success') IS NOT NULL   GROUP BY 1 ), other as (   SELECT      DATE(block_timestamp) as date,     SUM(ZEROIFNULL(TRY_PARSE_JSON(logs[0]):params:price::float / 1e24)) as daily_volume,   	SUM(ZEROIFNULL(TRY_PARSE_JSON(logs[0]):params:price::float / 1e24) * p.price) as daily_volume_usd   FROM near.core.fact_receipts   JOIN (   	SELECT DATE(timestamp) as date, AVG(price_usd) as price     FROM near.core.fact_prices     WHERE token_contract = 'wrap.near'   GROUP BY 1   ) p ON DATE(block_timestamp) = p.date   WHERE (receiver_id::string ILIKE '%paras.near' AND receiver_id::string NOT IN ('x.paras.near', 'comic.paras.near'))     AND REGEXP_SUBSTR(status_value, 'Success') IS NOT NULL     AND TRY_PARSE_JSON(logs[0]):type::string IN ('resolve_purchase', 'accept_trade')   GROUP BY 1 ) SELECT COALESCE(o.date, p.date) as daydate,    (ZEROIFNULL(o.daily_volume) + ZEROIFNULL(p.daily_volume)) as daily,    (ZEROIFNULL(o.daily_volume_usd) + ZEROIFNULL(p.daily_volume_usd)) as daily_usd,    SUM(daily) OVER (ORDER BY daydate) as cumulative,   SUM(daily_usd) OVER (ORDER BY daydate) as cumulative_usd FROM xcomics_paras p FULL JOIN other o ON p.date = o.date ORDER BY 1
2a2658e3-d39f-4626-814a-3a8e7795048a,Untitled Query,SELECT block_timestamp::date, count(distinct tx_id) as txs, count(distinct block_height) as blocks from flow.core.fact_events   where block_timestamp::date >= '2022-08-01'   group by 1 order by 1; select * from flow.core.fact_events   where block_timestamp::date >= '2022-09-07'    and event_data::string = '{}'   limit 100;
74204ec8-2731-42f5-bb82-1f2afcf9b422,bETH Mint Supply,WITH beth AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10, 6) as beth_minted   FROM terra.msg_events   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'mint'     AND event_attributes:"0_contract_address" = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun'     AND block_timestamp > '2021-08-12T00:00:00Z'   GROUP BY 1   ) SELECT   *,   sum(beth_minted) OVER (ORDER BY date) as cumulative,   avg(beth_minted) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM beth
6cbb8729-9a51-450e-a7dc-9e6ea84f6c2d,Daily Active Tx Proposer Count,select   block_timestamp::date as _date,   count(distinct proposer) as unique_proposer from flow.core.fact_transactions where block_timestamp::date >= '2023-01-01' and tx_succeeded group by 1 order by 1
b4cf4d99-7cc2-4994-b8ac-145c62f044da,Untitled Query,
6e4fe35d-f7c9-4998-a3aa-333860335bb9,Native 6 mo. daily balance - all tokens,SELECT 	DATE, 	CURRENCY, 	SUM(BALANCE) as native_balance, 	SUM(BALANCE_USD) as usd_balance FROM terra.daily_balances WHERE DATE > GETDATE() - interval '6 months' GROUP BY 1,2 ORDER BY 1,4 desc
30d89f57-0e26-4286-9269-bb707137878a,UST Peg on Ethereum, from Swaps,with ust_in as ( select   block_number,   tx_hash,   amount_out_usd / amount_in as ust_price    from ethereum.core.ez_dex_swaps where token_in = '0xa693b19d2931d498c5b318df961919bb4aee87a5'   and block_timestamp ilike '2022-05%' ), ust_out as (   select     block_number,     tx_hash,     amount_in_usd / amount_out as ust_price        from ethereum.core.ez_dex_swaps   where token_out = '0xa693b19d2931d498c5b318df961919bb4aee87a5'     and block_timestamp ilike '2022-05%'    ), combo as (   select * from ust_in   union   select * from ust_out    ) select   floor(block_number,-2) as block_number,   avg(ust_price) as ust_price from combo where block_number >= 14726564 -- first block on 5/7 UTC 	-- and block_number <= 14739154 -- last block on 5/8 UTC   and block_number <= 14775000 group by 1 order by 1 -- first on 5/7: 14726564 -- last on 5/8: 14739154
d0b09b7c-5579-47a8-8545-0feb7ef3ee15,Anchor 100mm+ Deposits,with large_deposits as (   select   	*   from terra.msgs   where tx_status = 'SUCCEEDED'   	and msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	and msg_value:execute_msg LIKE '%deposit_stable%'   	and msg_value:coins[0]:amount::float / pow(10,6) > 100000000   and block_timestamp > '2021-11-23T00:00:00Z' -- we know this didn't happen before 11/24    ), parsed as (   select      msg_value:coins[0]:amount::float / pow(10,6) as amount,     msg_value:sender::string as sender,     block_timestamp,     tx_id   from large_deposits   order by 1    ) select * from parsed
6eff2573-0622-4df3-9852-ab13c01f9245,July liquidation messages,-- PULL LIQUIDATION TX IDS AND THEIR MESSAGES WITH liquid as (   SELECT distinct tx_id   FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%'   AND tx_status = 'SUCCEEDED'   AND block_timestamp > '2021-07-01T00:00:00Z') SELECT * FROM terra.msg_events a RIGHT JOIN liquid ON liquid.tx_id = a.tx_id WHERE block_timestamp > '2021-07-01T00:00:00Z' ORDER BY 2, 5
f07296d2-c53c-4e2e-8810-698cf3726021,UST Transfers - user counts,with ust_transfers as (      select *   from terra.transfers   where event_currency = 'UST'     and block_timestamp > '2021-01-01T00:00:00Z'     and block_timestamp < CURRENT_DATE    ), users as (   select   	block_timestamp,     event_from,   	event_to,   	event_amount   from ust_transfers    ), agg as (   select   	date_trunc('d', block_timestamp) as date,   	count(distinct event_from) as unique_senders,   	count(distinct event_to) as unique_recipients   from users   group by 1    ), windows as (   select        *,     avg(unique_senders) over (order by date rows between 6 preceding and current row) as senders_ma,     avg(unique_recipients) over (order by date rows between 6 preceding and current row) as recipients_ma      from agg ) select * from windows
f05fb48e-3d66-4cc2-9d0e-93a5243f35a9,16 ETH shuttle from Terra,SELECT date_trunc('day', block_timestamp) as date,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' 	AND block_timestamp > GETDATE() - interval '6 months'   	AND tx_status = 'SUCCEEDED' GROUP BY 1,2 ORDER BY 1
f0a59436-d676-4b27-8c06-6cc7def238a5,FLOW Txs and Payers 11/25+,select   block_timestamp::date,   count(distinct payer),   count(distinct tx_id),   count(distinct block_height) from flow.core.fact_transactions where block_timestamp::date >= '2022-11-25' group by 1 order by 1
f1185f09-64a4-406c-9a83-12f75de68adc,Untitled Query,SELECT   tx_json:receipt:logs FROM ethereum.core.fact_transactions  WHERE tx_hash = '0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3'
f8257338-d0d7-4d4a-9550-067c6ce3e143,2023-04-26 09:04 PM,
f86380fe-e7e3-4edc-b67b-4c746cf72329,ENS Transaction - Fee and Registration Cost Data [ENS7],with txs as (   select     tx_id   from ethereum.udm_events   where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'     and origin_function_signature = '0xf7a16963'     and block_timestamp > '2021-12-01T00:00:00Z'     and block_timestamp < '2021-12-09T23:59:59Z' ), fee_details as (   select     block_timestamp,     txs.tx_id as tx_id,     fee_usd,     gas_limit,     gas_price,     gas_used   from ethereum.transactions   right join txs using (tx_id) ), registration as (   select 	block_timestamp,     tx_id,   	amount,     amount_usd from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp > '2021-12-01T00:00:00Z'   and block_timestamp < '2021-12-09T23:59:59Z' ), full_details as (   select   	registration.block_timestamp as block_timestamp,   	registration.tx_id as tx_id,   	registration.amount as amount,   	registration.amount_usd as amount_usd,   	fee_details.fee_usd as fee_usd,   	fee_details.gas_limit as gas_limit,     fee_details.gas_price /pow(10,9) as gwei,     fee_details.gas_used as gas_used,   	(fee_usd / (fee_usd + amount_usd)) as fee_pct   from registration   join fee_details using (tx_id) ) select * from full_details limit 1000 -- final as ( --   select -- ) -- add tx_id  -- maybe -- avg gas per day -- or avg gas per registration? -- avg gas against count of registrations -- avg gas spent vs avg reg fee -- then gas as pct of reg fee -- does count go down as this pct goes up ?
f91a0a29-79af-4ede-86a1-aba2d2fb5579,Untitled Query,select * from flipside_prod_db.tokenflow_eth.tokens_metadata limit 100
7422fbfa-edd3-45e1-a619-e0a3a74ad381,Beer is NEAR, Aggregations by Currency,WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE >= '2022-09-11' ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE >= '2022-09-11' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE >= '2022-09-11'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE >= '2022-09-11'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ), aggs as ( 	select   		currency,   		count(1) as "Total Sales",   		sum(deposit_amount_usd) as "Gross Volume, EUR"   from final   group by 1 ) select 	* from aggs
b4650efa-bdc4-4517-b700-290dec66dd8f,GithubMonthlyDevs,WITH RAW AS (     select *     from   near.core.fact_developer_activity     where  endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ), -- Monthly active developers monthly_active_devs AS (     SELECT         DATE_TRUNC('MONTH', week_date) AS month_year,  -- Group by month-year         COUNT(DISTINCT login) AS total_active_devs  -- Unique developers active in the month     FROM numbered_data     WHERE row_num = 1 AND weekly_commits > 0  -- Assuming a developer is 'active' if they made at least 1 commit     GROUP BY month_year     ORDER BY month_year ) SELECT * FROM monthly_active_devs;
d40416d3-874b-44c4-b41e-647a7050788a,BTC Price Action,SELECT   date_trunc('day', hour) as _date,   avg(price) as price from bitcoin.price.ez_hourly_token_prices group by 1 order by 1
744193fe-594e-40d3-9959-9ade61eb0684,Lido Anchor bETH Minting [LDO1],WITH beth AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(amount) as beth_minted   FROM ethereum.udm_events   -- WHERE tx_id = '0x66620742a130a2f49cdeec23738a4e3b733ced4f5d7e0bed890118f304f6e24c'   WHERE from_address = '0x0000000000000000000000000000000000000000'     AND to_address = '0x513251fab2542532753972b8fe9a7b60621affad' -- bridge connector     AND contract_address = '0x707f9118e33a9b8998bea41dd0d46f38bb963fc8'   GROUP BY 1   ) SELECT   *,   sum(beth_minted) OVER (ORDER BY date) as cumulative,   avg(beth_minted) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM beth
3e17148c-c9ec-4725-89e5-4419dd606223,anchor collateral tcl vs tvl [T33],-- withdraw message did not change so this is still fine WITH withdraw AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:execute_msg LIKE '%withdraw_collateral%'     and msg_value:contract = 'terra1ptjp2vfjrwh0j0faj9r6katm640kgjxnwwq9kn' -- bLUNA    GROUP BY 1 ), -- lock collateral before col 5. ends 9/30 deposit as (   SELECT   	  date_trunc('day', block_timestamp) as date,   	  sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit 	FROM terra.msgs  	WHERE tx_status = 'SUCCEEDED'   	  AND msg_value:execute_msg:send:msg LIKE '%deposit_collateral%'       and block_timestamp < '2021-10-01T00:00:00Z'   	GROUP BY 1 ), -- post col-5. begins 10/1 lock_collateral_col_five as (   select     date_trunc('day', block_timestamp) as date,     sum(msg_value:execute_msg:send:amount / pow(10,6)) as amount   from terra.msgs   where tx_status = 'SUCCEEDED'     and msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' --bLUNA     and msg_value:execute_msg:send:msg = 'eyJkZXBvc2l0X2NvbGxhdGVyYWwiOnt9fQ=='     and block_timestamp > '2021-09-30T23:59:59Z'   group by 1 ), -- check if 9/30 is split like earn was. change did not happen perfectly at 00:00 utc    all_lock as (   select * from deposit   union   select * from lock_collateral_col_five ), prices as (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-03-01T00:00:00Z'   GROUP BY 1 ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10,6) as luna_liquidated,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ORDER BY 1   ),    collateral as (   select   	withdraw.date,   	withdraw.bluna_withdraw,   	all_lock.bluna_deposit   from withdraw   left join all_lock using (date) ), bluna_custody as (   select   	collateral.date,     collateral.bluna_withdraw,     collateral.bluna_deposit,     coalesce(liquidations.luna_liquidated,0) as luna_liquidated   from collateral   left join liquidations using (date) ),    aggregation as (   select 	*,     sum(bluna_deposit - bluna_withdraw - luna_liquidated) OVER (ORDER BY date) as tcl   from bluna_custody ), final as (   select     *,   	tcl * avg_price as tvl   from aggregation   left join prices using (date)   where date < CURRENT_DATE ) select * from final
ed681a0d-8d34-4049-8cc1-3f92bac8c40e,stETH-ETH locked pct before anchor [C2],WITH total_circulating AS (   SELECT     balance_date,     sum(balance) as steth_balance,     sum(amount_usd) as usd_balance   FROM ethereum.erc20_balances   WHERE contract_address = '0xae7ab96520de3a18e5e111b5eaab095312d7fe84' --stETH Token Address     AND balance_date > CURRENT_DATE - 90   GROUP BY 1 ), locked AS (   SELECT     balance_date,     symbol,     balance,     amount_usd   FROM ethereum.erc20_balances   WHERE user_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- etETH-ETH Pool Address     AND balance_date > CURRENT_DATE - 90   ) SELECT   locked.balance_date,   steth_balance,   balance as locked_steth,   usd_balance as usd_circulating,   amount_usd as usd_val_locked,   locked_steth / steth_balance as pct_locked FROM total_circulating JOIN locked   ON total_circulating.balance_date = locked.balance_date
60ebc8eb-da00-4f68-94d7-822f29f03c86,stETH-ETH Pool Balances [C2],WITH total_circulating AS (   SELECT     balance_date,     sum(balance) as steth_balance,     sum(amount_usd) as usd_balance   FROM ethereum.erc20_balances   WHERE contract_address = '0xae7ab96520de3a18e5e111b5eaab095312d7fe84' --stETH Token Address     AND balance_date > CURRENT_DATE - 30   GROUP BY 1 ), locked AS (   SELECT     balance_date,     symbol,     balance,     amount_usd   FROM ethereum.erc20_balances   WHERE user_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- etETH-ETH Pool Address     AND balance_date > CURRENT_DATE - 30   ) SELECT   locked.balance_date,   steth_balance,   balance as locked_steth,   usd_balance as usd_circulating,   amount_usd as usd_val_locked,   locked_steth / steth_balance as pct_locked FROM total_circulating JOIN locked   ON total_circulating.balance_date = locked.balance_date
36d27fc2-898e-4ddd-b008-d07a2149c9b0,stETH-ETH Liquidity Events - gross [C2],WITH adds AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(amount) as token_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events   WHERE to_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name = 'add_liquidity'   GROUP BY 1 ), removals AS (   SELECT     date_trunc('day', block_timestamp) as date,     -sum(amount) as r_token_amount,     -sum(amount_usd) as r_usd_amount   FROM ethereum.udm_events   WHERE from_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name IN ('remove_liquidity', 'remove_liquidity_one_coin', 'remove_liquidity_imbalance')   GROUP BY 1 ) SELECT * FROM adds JOIN removals   ON adds.date = removals.date
493bed72-2d83-4c81-93d6-12b21967220a,Beer is NEAR, Aggregations by Hour,WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE >= '2022-09-11' ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE >= '2022-09-11' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE >= '2022-09-11'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE >= '2022-09-11'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ), aggs as ( 	select   		date_trunc('hour', block_timestamp) as "Time",   		currency,   		count(1) as "Total Sales",   		sum(deposit_amount_usd) as "Gross Sales, EUR"   from final   group by 1,2 ) select 	*,   	sum("Total Sales") over (order by "Time") as "Cumulative Transaction Count",   	sum("Gross Sales, EUR") over (order by "Time") as "Cumulative Volume, EUR" from aggs order by 1
0dd9b9db-d00b-4261-8eaf-e86b7dd09981,Untitled Query,
daf64857-cbcc-4562-8e18-e66406d44248,Untitled Query,select * from ethereum_core.ez_dex_swaps where tx_hash = '0xa27b6af97ed3eadb4987c7e836bb9ac8664404d488e6fef9c3581ac840b4ab3d'
360e136e-af31-48d0-859b-d28100cdfaa7,MIR Swap,SELECT BLOCK_ID,   CHAIN_ID,   TX_ID,   EVENT_INDEX,   EVENT_TYPE,   EVENT_ATTRIBUTES FROM terra.msg_events WHERE TX_ID = '3A9EBD59D5D40D225335C2EB0EF861FCEEDFF4FDE880349A65A6548685E8ACA7'
2b215b16-6aba-4fc2-976f-725bbeb935b8,Count of liquidation transactions,SELECT   date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   count(*) FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%'   AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1
74ffd983-b38c-443c-89b2-5035db7fc5a2,luna and eth prices [T31],WITH eth AS (SELECT 	date_trunc('hour', hour) as date, 	avg(price) as eth_price,   	STDDEV(avg(price)) OVER (ORDER BY date) as stdv_eth FROM ethereum.token_prices_hourly WHERE symbol = 'ETH' 	AND hour > GETDATE() - interval '2 weeks' GROUP BY 1) SELECT   luna.date,   luna_price,   stdv_luna,   eth_price,   stdv_eth FROM (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(price_usd) as luna_price,     STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv_luna   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > GETDATE() - interval '2 weeks'   GROUP BY 1) luna JOIN eth ON eth.date = luna.date ORDER BY 1
51df2ca5-211b-4f73-aa6a-025850386a48,2023-11-07 11:10 AM,with first_tx_addr as (     SELECT       tx_signer AS wallet,       MIN(block_timestamp) AS first_tx     FROM       near.core.fact_transactions tr     GROUP BY       1 ) select count(distinct wallet) from first_tx_addr
bba00f94-1abc-4e98-ad6a-37a4ff3e6f4a,Atlas - NFT Detailed,with nft_data as (select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   owner_id as owner,   token_id from near.nft.fact_nft_mints union select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   args['receiver_id'] as owner,   args['token_id'] as token_id from near.core.fact_actions_events_function_call where method_name = 'nft_transfer') select   day,   receiver_id,   count(distinct token_id) as tokens,   count(case when method_name = 'nft_transfer' then tx_hash end) as all_transfers,   count(distinct owner) as owners,   count(*) as transactions,   count(case when method_name != 'nft_transfer' then tx_hash end) as mints from nft_data where day between '2023-11-05' and '2023-11-07' group by 1, 2 order by 1 desc, 3 desc
5f6fb133-2cef-4de0-8147-a1c3980e0429,Atlas - MAAs,SELECT   day,   COUNT(DISTINCT tx_signer) - COUNT(     DISTINCT CASE       WHEN first_tx >= day - INTERVAL '30 Days'       AND first_tx < day THEN wallet     END   ) AS Returning_MAAs,   COUNT(     DISTINCT CASE       WHEN first_tx >= day - INTERVAL '30 Days'       AND first_tx < day THEN wallet     END   ) AS New_MAAs,   COUNT(DISTINCT tx_signer) AS MAAs FROM   (     SELECT       DISTINCT block_timestamp :: date AS day     FROM       near.core.fact_transactions     WHERE       block_timestamp >= '2021-01-01'   ) a   LEFT OUTER JOIN (     SELECT       DISTINCT tx_signer,       block_timestamp :: date AS active_day     FROM       near.core.fact_transactions   ) b ON active_day >= day - INTERVAL '30 DAYS'   AND active_day < day   JOIN (     SELECT       tx_signer AS wallet,       MIN(block_timestamp) AS first_tx     FROM       near.core.fact_transactions tr     GROUP BY       1   ) c ON b.tx_signer = c.wallet GROUP BY   1 ORDER BY   1 DESC;
dbaa1c03-fc94-4930-a27e-bb46dbf82de6,Untitled Query,
7a810d27-45ba-4296-b658-23bbd3035e49,count of trades [T19],select       date_trunc('day', block_timestamp) as date,       l.address_name,   		count(*)       -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,       -- event_attributes:offer_asset as offer_asset,       -- sum(event_attributes:offer_amount::float) / pow(10,6) as gross_buy_volume          from terra.msg_events       LEFT JOIN terra.labels l         ON event_attributes:offer_asset = l.address     WHERE   		tx_status = 'SUCCEEDED'     	-- AND event_type = 'from_contract'       	AND block_timestamp > '2021-06-01T00:00:00Z'   		AND block_timestamp < '2021-07-22T00:00:00Z'       	AND event_attributes:"0_action" = 'swap' 		-- MIR token contract 		-- AND event_attributes:ask_asset = 'terra15gwkyepfc6xgca5t5zefzwy42uts8l2m4g40k6'       	-- AND event_attributes:offer_amount::float > 0   		AND event_attributes:ask_asset != ''   		AND l.address_name != '' group by 1, 2 order by 1
7a826c3f-a1a1-42f6-8235-b339100d67f5,ETH Bridged to Polygon - bad data [P1],SELECT   date_trunc('week', block_timestamp) as date,   sum(amount) FROM ethereum.udm_events -- WHERE to_address = '0x8484ef722627bf18ca5ae6bcf031c23e6e922b30' -- polygon eth bridge WHERE from_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_type = 'native_eth'   AND block_timestamp > CURRENT_DATE - interval '4 months' GROUP BY 1 ORDER BY 1
09ef38bc-0e4d-438c-b862-cabca70af9ba,Spot ETFs Issuers - Held Balance vs New Supply,-- forked from Spot ETFs Issuers - Percent of Supply Held @ https://flipsidecrypto.xyz/edit/queries/7ac1563b-6776-4d94-a0e4-d9e1ca63dad3 -- forked from Spot ETFs Issuers Over Time copy @ https://flipsidecrypto.xyz/edit/queries/7a330b7d-ca81-403a-b71a-4f6d2bfdbdd1 -- forked from alitaslimi / Spot ETFs Issuers Over Time @ https://flipsidecrypto.xyz/alitaslimi/q/PBn_N42H5-mk/spot-etfs-issuers-over-time with dates as (   select     date_day as date   from     crosschain.core.dim_dates   where     date_day between '2009-01-01' and current_date ), prices as (   select     date_trunc('hour', hour) as date,     avg(price) as avg_price   from bitcoin.price.ez_hourly_token_prices   group by 1 ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       value     from       bitcoin.core.fact_inputs inputs       where pubkey_script_address in (         select address from addresses       )     and date_trunc('day', block_timestamp) >= '2019-07-24'   ),   outputs as (     select       block_timestamp,       value     from       bitcoin.core.fact_outputs outputs       where pubkey_script_address in (         select address from addresses       )       and date_trunc('day', block_timestamp) >= '2019-07-24'   ), -------------------- Flows --------------------   inflows as (     select       date_trunc('day', outputs.block_timestamp) as date,       sum(outputs.value) as volume     from       outputs     group by       date   ),   outflows as (     select       date_trunc('day', inputs.block_timestamp) as date,       sum(inputs.value) as volume     from       inputs     group by       date   ), -------------------- Output -------------------- output as ( select   dates.date as date,   zeroifnull(inflows.volume) as inflow,   zeroifnull(outflows.volume) as outflow,   inflow - outflow as netflow,   sum(netflow) over (order by dates.date) as balance from   dates   left join inflows on inflows.date = dates.date   left join outflows on outflows.date = dates.date ) , -------------------- Supply -------------------- btc_daily as ( select      date_trunc('day', block_timestamp) as date,     sum(block_reward) as daily_minted_btc,     count(block_number) as blocks_produced from bitcoin.gov.ez_miner_rewards group by 1 ), supply as ( select     date,     sum(daily_minted_btc) over (order by date) as total_minted_btc from btc_daily ), final as ( select   supply.date,   btc_daily.daily_minted_btc,   btc_daily.blocks_produced,   supply.total_minted_btc,   output.netflow as daily_netflow,   zeroifnull(output.balance) as balance,   (zeroifnull(output.balance) / supply.total_minted_btc) * 100 as pct_held,   prices.avg_price as daily_avg_price from supply left join btc_daily on supply.date = btc_daily.date left join output on supply.date = output.date left join prices on supply.date = prices.date order by 1  ) select   date,   sum(daily_minted_btc) over (order by date) as btc_minted_since_etf,   sum(daily_netflow) over (order by date) as gross_btc_holdings from final where date >= '2024-01-10'
e607bf91-934c-4106-8e14-dcc2a81a1468,2023-10-26 11:20 AM,WITH RAW AS (     select *     from   near.core.fact_developer_activity     where    endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ) -- Counting unique repos SELECT      COUNT(DISTINCT CONCAT(repo_owner, '/', repo_name)) AS unique_repos_count FROM numbered_data;
f9838fb3-d595-40f8-b4bb-c3cf5b8777cd,Stablecoin Price in THORChain Pools by RUNE-ASSET Ratio,SELECT   date_trunc('day', block_timestamp) as date,   pool_name,   avg(asset_usd),   avg(price_asset_rune),   avg(price_rune_asset),   avg(rune_usd) FROM thorchain.prices WHERE block_timestamp > '2021-10-03T00:00:00Z'   AND (pool_name LIKE '%USDT%'      OR pool_name LIKE '%USDC%'      OR pool_name LIKE '%BUSD%') GROUP BY 1,2 ORDER BY 1
f9da89a9-2793-4b66-aa9e-4d02cfff1e25,CRV Token on Uniswap [C1],SELECT    date_trunc('day', block_timestamp) as day,   CASE     WHEN to_label = 'uniswap' THEN 'to'     WHEN from_label = 'uniswap' THEN 'from'   END as direction,   count(*) FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - INTERVAL '90 days'   AND (to_label = 'uniswap'   OR from_label = 'uniswap')      -- AND (   --   origin_function_name in ('addLiquidity', 'addLiquidityETH', 'deposit', 'exit', 'removeLiquidityETH', 'removeLiquidityETHWithPermit', 'tradeWithHintAndFee', 'harvest')   --   origin_function_name LIKE 'swap%'   -- )   -- AND origin_function_name = 'execute' GROUP BY 1,2 -- only CRV, none of the pool tokens ...
2e806de4-01c9-4740-b497-8ba07a60b080,Hunt TX2 - Approve AAVE,SELECT   block_id,   tx_id,   to_label_subtype,   to_label,   function_name FROM polygon.transactions WHERE tx_id = '0x69ea5dfaa79f6c8b78a4c7a30a535f8d80145058de4f63b3729a2199c1add5d2'
a00bb07d-f8c5-4c20-af97-d79abeb80310,NEAR Post Count - JSON Parsing,WITH main_posts as ( select block_timestamp,        tx_hash,        block_id as og_post_id,        block_id as current_post_id,        signer_id,       post_text from near.social.fact_posts where signer_id = 'nfcommunity.near' ) , reply_posts as ( select block_timestamp,        tx_hash,        try_parse_json(node_data:comment):item:blockHeight::INT as og_post_id,        block_id as current_post_id,        signer_id,        try_parse_json(node_data:comment):text::STRING as post_text from near.social.fact_decoded_actions where (node_data LIKE '%nfcommunity.near%'   or   signer_id = 'nfcommunity.near') and node = 'post' and og_post_id is not null ), all_posts as ( select * from main_posts UNION ALL select * from reply_posts ), likes as ( select *,          try_parse_json(node_data:like) as json_data,          json_data:key:blockHeight::INT as og_post_id,         split(json_data:key:path::string, '/')[0] as liked from near.social.fact_decoded_actions where (node_data LIKE '%nfcommunity.near%'   or   signer_id = 'nfcommunity.near') and   node_data LIKE '{"like"%' ) , like_counts as ( select og_post_id as liked_post_id,        count(tx_hash) as total_likes from likes  group by og_post_id ) select block_timestamp,        og_post_id,        current_post_id,        signer_id,        total_likes,        post_text from all_posts , like_counts where current_post_id = liked_post_id (+) -- OperationFailedError: Error parsing JSON: unknown keyword "ciocan", pos 7
2f1a42c9-77c0-416e-830f-8fb70c38b714,Untitled Query,select * from solana.transactions limit 10
02bb5c52-1fda-4f85-a034-adae4b56fe4a,block rewards [T65],-- SELECT --   date_trunc('hour', block_timestamp) as block_hour, --   event_attributes:validator::string as validator, --   sum(event_attributes:amount[0]:amount::float / pow(10,6)) as luna_amt -- FROM terra.transitions -- WHERE block_timestamp > CURRENT_DATE - 30 --   AND block_timestamp < CURRENT_DATE --   AND event = 'rewards' --   AND transition_type = 'end_block' -- GROUP BY 1, 2 -- ORDER BY 1 SELECT * FROM terra.transitions WHERE block_timestamp > CURRENT_DATE - 30   AND block_timestamp < CURRENT_DATE   AND event = 'rewards'   AND transition_type = 'end_block' LIMIT 100
e4c058b7-28ca-4782-a9a4-25d60f30d179,NFT-NB-Style copy,-- forked from y3k / NFT-NB-Style @ https://flipsidecrypto.xyz/y3k/q/6EdFwJpHjjON/nft-nb-style  SELECT      m.RECEIVER_ID,     COUNT(t.TX_HASH) AS total_transfers,     SUM(t.DEPOSIT) AS total_deposit,     SUM(t.GAS_USED) AS total_gas_used,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('HOUR', -24, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_24_hours,     COUNT(CASE WHEN t.BLOCK_TIMESTAMP >= DATEADD('DAY', -3, CURRENT_TIMESTAMP) THEN 1 ELSE NULL END) AS transfers_last_3_days,     COUNT(DISTINCT m.OWNER_ID) AS holders_count,     COUNT(DISTINCT m.TOKEN_ID) AS token_count FROM      near.core.fact_nft_mints m LEFT JOIN      near.core.fact_transfers t   ON      m.RECEIVER_ID = t.TX_SIGNER AND     t.STATUS = true   GROUP BY      m.RECEIVER_ID;
7b23f73b-25c9-4bb5-82c9-c076983ffc73,Untitled Query,select * from near.core.fact_prices where token is null
340c9ad4-9571-4bf7-8d5e-5b2125c03a08,2023-11-02 02:14 PM,select * from bitcoin.core.fact_transactions limit 5
34039b58-29b3-4508-bc37-8db669d40f12,Untitled Query,
4793c901-67e3-4723-ba1b-d7c514a1f607,Untitled Query,
67f1fbfe-a7cc-4060-89ee-80702ba9899d,Untitled Query,
8a046b66-50e4-4cfa-9e81-ea7ef4201722,UST Transfers,with ust_transfers as (      select *   from terra.transfers   where event_currency = 'UST'     and block_timestamp > '2021-01-01T00:00:00Z'     and block_timestamp < CURRENT_DATE    ), agg as (   select      	date_trunc('d', block_timestamp) as date,     sum(event_amount) as amount,   	avg(event_amount) as avg_amount,   	max(event_amount) as max_amount,   	min(event_amount) as min_amount,     median(event_amount) as median_amount,   	count(1) as tx_count      from ust_transfers   group by 1   order by 1    ), windows as (   select        *,     avg(amount) over (order by date rows between 6 preceding and current row) as gross_weekly_ma,     avg(avg_amount) over (order by date rows between 6 preceding and current row) as avg_weekly_ma,     avg(tx_count) over (order by date rows between 6 preceding and current row) as count_weekly_ma,     avg(median_amount) over (order by date rows between 6 preceding and current row) as median_weekly_ma         from agg    ) select * from windows
826711f0-75e8-446b-b6a6-374142fe8d0c,BROZO - Related Projects  copy,-- forked from telperion / BROZO - Related Projects  @ https://flipsidecrypto.xyz/telperion/q/drill-related-projects-Th4E2O  -- forked from DRILL - Related Projects @ https://flipsidecrypto.xyz/edit/queries/3239491d-ca9e-4f69-a3d3-92e96fbde8f8  -- forked from Related Projects - A @ https://flipsidecrypto.xyz/edit/queries/4e74cd99-3d59-489c-a570-db3cab1c5e30  SELECT    * FROM (SELECT    PROJECT_NAME,   COUNT(DISTINCT "Holder") as "Number of Shared Holders" FROM ((SELECT    "Holder" FROM( SELECT    NFT_TO_ADDRESS as "Holder",   SUM(CASE WHEN PROJECT_NAME = 'BROZO' THEN ROW_NUM ELSE 0 END) as "BROZO Holder" FROM (   SELECT      CONCAT(PROJECT_NAME, ':', TOKENID) as ID,     PROJECT_NAME,     TOKENID,     MAX(BLOCK_TIMESTAMP) TIMESTAMP,     NFT_TO_ADDRESS,     ROW_NUMBER() OVER (       PARTITION BY ID       ORDER BY MAX(BLOCK_TIMESTAMP) DESC     ) row_num   FROM polygon.core.ez_nft_transfers   WHERE (PROJECT_NAME = 'BROZO')          AND NFT_TO_ADDRESS <> '0x000000000000000000000000000000000000dead'   GROUP BY NFT_TO_ADDRESS, ID, TOKENID, PROJECT_NAME   ORDER BY CAST(TOKENID as INT), MAX(BLOCK_TIMESTAMP) ASC )  WHERE row_num = 1 GROUP BY NFT_TO_ADDRESS) WHERE "BROZO Holder" > 0 ORDER BY "BROZO Holder" DESC)) a JOIN (SELECT   NFT_TO_ADDRESS,   PROJECT_NAME FROM( SELECT      PROJECT_NAME,     LEFT(TOKENID, 18) as TRUNCATED_TOKENID,     CONCAT(PROJECT_NAME, ':', TRUNCATED_TOKENID) as ID,     MAX(BLOCK_TIMESTAMP) TIMESTAMP,     NFT_TO_ADDRESS,     ROW_NUMBER() OVER (       PARTITION BY ID       ORDER BY MAX(BLOCK_TIMESTAMP) DESC     ) row_num   FROM polygon.core.ez_nft_transfers   GROUP BY NFT_TO_ADDRESS, ID, TRUNCATED_TOKENID, PROJECT_NAME   ORDER BY CAST(TRUNCATED_TOKENID as INT), MAX(BLOCK_TIMESTAMP) ASC) WHERE row_num = 1   AND NFT_TO_ADDRESS <> '0x0000000000000000000000000000000000000000'   AND PROJECT_NAME NOT IN ('BROZO') ) b on a."Holder" = b.NFT_TO_ADDRESS GROUP BY PROJECT_NAME) ORDER BY "Number of Shared Holders" DESC LIMIT 10   --  select * from ethereum.core.dim_contract_abis
3c12fe98-3478-4c35-92da-9c47d8ae4d82,THORSwap Rewards [THOR1],SELECT   *,   block_rewards / avg_node_count as avg_reward_per_node FROM thorchain.block_rewards WHERE day > CURRENT_DATE - 90 ORDER BY day
ad4c22c0-7c18-4cab-b522-e010a784f2ab,Anchor Earn - Balances and Behavior - max deposit 2 of 2 [T123],-- updated w col-5 data  WITH    redemptions as (   select      date_trunc('d', block_timestamp) as date,     sum(event_attributes:redeem_amount::float) / pow(10,6) as redemption_amount,     avg(event_attributes:redeem_amount::float) / pow(10,6) as avg_redemption,     min(event_attributes:redeem_amount::float) / pow(10,6) as min_redemption,     max(event_attributes:redeem_amount::float) / pow(10,6) as max_redemption, 	count(1) as redemption_tx_count   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   group by 1  -- below returns aUST not UST      --  select  --    date_trunc('day', block_timestamp) as date,  --    sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount,  --    avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption,  --    min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption,  --    max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, 	-- count(1) as redemption_tx_count  --  from terra.msgs  --  where tx_status = 'SUCCEEDED'  --  	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract  --  	and   --  		-- col 4  --  		(msg_value:execute_msg:send:msg LIKE '%redeem_stable%'  --  		or  --  		-- col 5  --    		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract  --  			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=') --col 5 withdraw message  --  	)  --  group by 1 ), all_deposit as (   SELECT     date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount,   	avg(msg_value:coins[0]:amount::float) / pow(10,6) as avg_deposit,   	min(msg_value:coins[0]:amount::float) / pow(10,6) as min_deposit,   	max(msg_value:coins[0]:amount::float) / pow(10,6) as max_deposit,   	count(1) as deposit_tx_count   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1 ), combined_activity as (   select     *,     deposit_amount - redemption_amount as net_depositor_change   from all_deposit   left join redemptions using (date) ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     avg(event_attributes:"0_repay_amount"::float) / pow(10,6) as avg_repay,     min(event_attributes:"0_repay_amount"::float) / pow(10,6) as min_repay,     max(event_attributes:"0_repay_amount"::float) / pow(10,6) as max_repay,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1 ), anchor_earn as (   select   	combined_activity.date,   	combined_activity.deposit_amount,   	combined_activity.avg_deposit,   	combined_activity.min_deposit,   	combined_activity.max_deposit,   	combined_activity.deposit_tx_count,   	combined_activity.redemption_amount,   	combined_activity.avg_redemption,   	combined_activity.min_redemption,   	combined_activity.max_redemption,   	combined_activity.redemption_tx_count,   	combined_activity.net_depositor_change,     -- handle null values cause liqidations don't happen daily   	coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   	coalesce(liquidations.avg_repay,0) as avg_repay,   	coalesce(liquidations.min_repay,0) as min_repay,   	coalesce(liquidations.max_repay,0) as max_repay   from combined_activity   left join liquidations using (date) ),    aggregations as (   SELECT     *,     net_depositor_change as daily_change,     SUM(deposit_amount) OVER (ORDER BY date) as cumulative_deposits,     -SUM(redemption_amount) OVER (ORDER BY date) as cumulative_redemptions,     -SUM(loan_autorepay_amount) OVER (ORDER BY date) as cumulative_liquidations,     SUM(daily_change) OVER (ORDER BY date) as cumulative_anchor_earn,   	avg(avg_deposit) over (order by date rows between 6 preceding and current row) as deposit_ma,   	avg(avg_redemption) over (order by date rows between 6 preceding and current row) as redemption_ma,   	avg(avg_repay) over (order by date rows between 6 preceding and current row) as repay_ma,   	avg(deposit_tx_count) over (order by date rows between 6 preceding and current row) as deposit_tx_ma,   	avg(redemption_tx_count) over (order by date rows between 6 preceding and current row) as redemption_tx_ma,   	avg(max_deposit) over (order by date rows between 6 preceding and current row) as max_deposit_ma,   	avg(max_redemption) over (order by date rows between 6 preceding and current row) as max_redemption_ma   FROM anchor_earn   ORDER BY 1   ), yield_reserve as (   SELECT     date,     balance as yield_reserve   FROM terra.daily_balances   WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   	AND currency = 'UST' ), final as (   select * from aggregations   left join yield_reserve using (date) ) select * from final where date > '2021-08-18T00:00:00Z'
e308f9d6-166f-4a5d-ab64-55e3c406cf10,[terradash] Anchor Collateral TVL - wide format,WITH DEPOSIT AS ( SELECT   date(block_timestamp) as date,   CASE WHEN currency = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' THEN 'bLUNA'   WHEN currency = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' THEN 'bETH'    WHEN currency = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' THEN 'bATOM'    WHEN currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' THEN 'xAVAX'    else null end as collateral,   sum(amount) as collateral_deposit FROM anchor.collateral   WHERE event_type = 'provide' GROUP BY 1,2 ), WITHDRAW AS ( SELECT   date(block_timestamp) as date,   CASE WHEN currency = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' THEN 'bLUNA'   WHEN currency = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' THEN 'bETH'    WHEN currency = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' THEN 'bATOM'    WHEN currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' THEN 'xAVAX'    else null end as collateral,   sum(amount) as collateral_withdraw FROM anchor.collateral   WHERE event_type = 'withdraw' GROUP BY 1,2 ), LIQUIDATIONS AS (   SELECT   date(block_timestamp) as date,   CASE WHEN liquidated_currency = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' THEN 'bLUNA'   WHEN liquidated_currency = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' THEN 'bETH'    WHEN liquidated_currency = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' THEN 'bATOM'    WHEN liquidated_currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' THEN 'sAVAX'    else null end as collateral,   sum(LIQUIDATED_AMOUNT) as collateral_liquidated FROM anchor.liquidations GROUP BY 1,2 ), PRICES AS (  SELECT   DATE(block_timestamp) as date_prices,   avg(case when currency = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' then price_usd end) as bluna_price,   avg(case when currency = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' then price_usd end) as beth_price,   avg(case when currency = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' then price_usd end) as batom_price,   avg(case when currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' then price_usd end) as savax_price FROM terra.oracle_prices    WHERE block_timestamp > '2021-03-17'   GROUP BY 1 ), FINAL AS ( SELECT   a.date as dates,   a.collateral as collateral,   ifnull(collateral_deposit, 0) AS add,   ifnull(collateral_withdraw, 0)*-1 AS remove,   ifnull(collateral_liquidated, 0)*-1 AS liqudate,   add + remove + liqudate AS net_change,   sum(net_change) over (partition by a.collateral order by a.date) AS tvl_amt FROM DEPOSIT a   LEFT JOIN WITHDRAW b ON a.date = b.date AND a.collateral = b.collateral   LEFT JOIN LIQUIDATIONS c ON a.date = c.date AND a.collateral = c.collateral   ORDER BY 1,2 ), TVL AS ( SELECT   dates,   sum(case when collateral = 'bLUNA' then add end) as "bLUNA Deposited",   sum(case when collateral = 'bETH' then add end) as "bETH Deposited",   sum(case when collateral = 'sAVAX' then add end) as "sAVAX Deposited",   sum(case when collateral = 'bATOM' then add end) as "bATOM Deposited", --   sum(case when collateral = 'bLUNA' then remove end) as "bLUNA Removed",   sum(case when collateral = 'bETH' then remove end) as "bETH Removed",   sum(case when collateral = 'sAVAX' then remove end) as "sAVAX Removed",   sum(case when collateral = 'bATOM' then remove end) as "bATOM Removed", --   sum(case when collateral = 'bLUNA' then liqudate end) as "bLUNA Liquidated",   sum(case when collateral = 'bETH' then liqudate end) as "bETH Liquidated",   sum(case when collateral = 'sAVAX' then liqudate end) as "sAVAX Liquidated",   sum(case when collateral = 'bATOM' then liqudate end) as "bATOM Liquidated", --   sum(case when collateral = 'bLUNA' then net_change end) as "bLUNA Net",   sum(case when collateral = 'bETH' then net_change end) as "bETH Net",   sum(case when collateral = 'sAVAX' then net_change end) as "sAVAX Net",   sum(case when collateral = 'bATOM' then net_change end) as "bATOM Net",      sum(case when collateral = 'bLUNA' then tvl_amt end) as "bLUNA TVL",   sum(case when collateral = 'bETH' then tvl_amt end) as "bETH TVL",   sum(case when collateral = 'sAVAX' then tvl_amt end) as "sAVAX TVL",   sum(case when collateral = 'bATOM' then tvl_amt end) as "bATOM TVL" FROM FINAL  group by 1 ) SELECT   *,   "bLUNA TVL"*bluna_price as "bLUNA TVL USD Value",   "bETH TVL"*beth_price as "bETH TVL USD Value",   "sAVAX TVL"*savax_price as "sAVAX TVL USD Value",   "bATOM TVL"*batom_price as "bATOM TVL USD Value",   "bLUNA TVL USD Value" + "bETH TVL USD Value" + "sAVAX TVL USD Value" + "bATOM TVL USD Value" as "Anchor TVL" FROM TVL    LEFT JOIN prices ON dates = date_prices   order by 1
340b12ce-767c-42a8-8f5f-9cc78a1802cc,THOR TVL [THOR22],SELECT * FROM thorchain.daily_tvl
827fe355-2ee4-4b6c-b4d2-5314f846ac72,THOR Bridge - User Behavior by origin chain [THOR3],WITH unique_users AS (   SELECT     to_address,     CASE       WHEN burn_asset LIKE 'BNB%' THEN 'BNB'     	WHEN burn_asset LIKE 'ETH%' THEN 'ETH'     END AS origin_chain,     count(distinct from_address) as incoming_add_count   FROM thorchain.upgrades   GROUP BY 1,2   ) SELECT   origin_chain,   avg(incoming_add_count) as avg_wallets,   count(1) as wallet_count,   max(incoming_add_count) as max_wallets FROM unique_users GROUP BY 1
8a266b4a-5518-44d3-9e9f-c3b585e1ed35,Weekly Liquidity Rewards by Pool Top pools only [THOR7],-- liquidity fee by pool WITH liquidity_fee AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     sum(liq_fee_in_rune_e8) / pow(10,8) as liq_fee_rune   FROM thorchain.swap_events   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1, 2   ), -- rune rewards by pool total_pool_rewards AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     sum(rune_e8) / pow(10,8) as rewards_rune   FROM thorchain.rewards_event_entries   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1,2 ), total_liquidity_rewards AS (   SELECT     liquidity_fee.date as date,     liquidity_fee.pool_name as pool_name,     liq_fee_rune + rewards_rune as liquidity_reward -- note: in rune   FROM liquidity_fee   LEFT JOIN total_pool_rewards     ON (liquidity_fee.pool_name = total_pool_rewards.pool_name       AND liquidity_fee.date = total_pool_rewards.date)   ), pool_depth AS (   SELECT     date_trunc('day', block_timestamp) as date,     pool_name,     avg(rune_e8 / pow(10,8)) as rune_amount,     avg(asset_e8 / pow(10,8)) as asset_amount,     rune_amount * 2 as est_gross_rune   FROM thorchain.block_pool_depths   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1, 2 ), yield AS (   SELECT      pool_depth.date as date,     pool_depth.pool_name as pool_name,     est_gross_rune,     liquidity_reward,     liquidity_reward / est_gross_rune as daily_return,     (pow((liquidity_reward / est_gross_rune) + 1, 365) - 1) * 100 as annual_return        FROM pool_depth   JOIN total_liquidity_rewards     ON (pool_depth.date = total_liquidity_rewards.date       AND pool_depth.pool_name = total_liquidity_rewards.pool_name)   ORDER BY 1, 5 desc   ) -- final query SELECT   date,   pool_name,   est_gross_rune as pool_depth,   liquidity_reward,   annual_return,   avg(annual_return) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as annualized_yield_ma FROM yield WHERE pool_name IN ('BTC.BTC', 'ETH.ETH', 'BNB.BNB', 'ETH.XRUNE-0X69FA0FEE221AD11012BAB0FDB45D444D3D2CE71C', 'BNB.BUSD-BD1') ORDER BY 1, 3 desc
0710c801-5a68-4f1b-98da-72ba0c61335a,LOOP DEX LP Events [T93] - all loop pools,SELECT   block_timestamp,   -- CASE   --   WHEN event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' THEN 'LOOP-UST'   --   WHEN event_attributes:"0_contract_address" = 'terra154jt8ppucvvakvqa5fyfjdflsu6v83j4ckjfq3' THEN 'LOOP-LOOPR'   --   WHEN event_attributes:"0_contract_address" = 'terra1dw5j23l6nwge69z0enemutfmyc93c36aqnzjj5' THEN 'LOOPR-UST'   -- END as pool_address,   CASE     WHEN event_attributes:assets[0]:denom != 'uusd' THEN event_attributes:assets[0]:amount / pow(10,6)     ELSE event_attributes:assets[1]:amount / pow(10,6)   END as LOOP,     CASE     WHEN event_attributes:assets[0]:denom = 'uusd' THEN event_attributes:assets[0]:amount / pow(10,6)     ELSE event_attributes:assets[1]:amount / pow(10,6)   END as UST      -- event_attributes:assets[0]:denom as asset_a_token,   -- event_attributes:assets[0]:amount / pow(10,6) as asset_a_amt,   -- event_attributes:assets[1]:denom as asset_b_token,   -- event_attributes:assets[1]:amount / pow(10,6) as asset_b_amt FROM terra.msg_events WHERE event_type = 'from_contract'   AND event_attributes:"0_action" = 'provide_liquidity'   AND event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- LOOP-UST pair   -- AND (event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- LOOP-UST pair   -- OR event_attributes:"0_contract_address" = 'terra154jt8ppucvvakvqa5fyfjdflsu6v83j4ckjfq3' -- LOOP-LOOPR pair   -- OR event_attributes:"0_contract_address" = 'terra1dw5j23l6nwge69z0enemutfmyc93c36aqnzjj5') -- LOOPR-UST pair   AND block_timestamp > '2021-10-07T00:00:00Z'   AND block_timestamp < '2021-10-10T23:59:59Z'
4795a865-8ed7-4438-859c-36eaa3c39fc0,top delegators and delegations excl TFL [T44],WITH delegations AS ( SELECT   delegator_address,   validator_address_label,   action,   event_amount,     CASE       WHEN action = 'delegate' THEN event_amount       WHEN action = 'undelegate' THEN -event_amount   	  WHEN action = 'redelegate' THEN -event_amount   END AS net_amount FROM terra.staking ORDER BY 3 desc ), delegators AS ( SELECT   address,   balance -- total staked amount, only for pulling top 25 FROM terra.daily_balances WHERE balance_type = 'staked' 	AND date LIKE '2021-08-17%'   	AND address != 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' -- bluna hub     AND address != 'terra1dp0taj85ruc299rkdvzp4z5pfg6z6swaed74e6' -- tfl ORDER BY balance DESC LIMIT 25) SELECT * FROM delegators JOIN delegations ON delegations.delegator_address = delegators.address WHERE action = 'delegate' ORDER BY 1, 2 desc
aa3eb6c6-6cd6-42e4-b7d2-97c72aae3b0b,MDAO Workshop - Anchor Collateral Starter Query 1,select 	date_trunc('d',block_timestamp) as date,   	count(1) as tx_count    from anchor.collateral group by 1 order by 1
e7eeb83e-ee72-42ff-bebe-dfe389b6490e,2023-12-19 01:48 PM,select * from near.nft.dim_nft_contract_metadata
06d75e9d-efa5-4dd4-9256-5f5d28f31b9a,THORChain Top Swap Volume, past week - unique users via to address [THOR5],SELECT   date_trunc('day', block_timestamp) as day,   pool_name,   count(distinct to_address) as unique_users FROM thorchain.swaps WHERE block_timestamp > CURRENT_DATE - interval '7 days'   AND pool_name IN (     SELECT       pool_name   	FROM (       SELECT         pool_name,         count(distinct to_address)       FROM thorchain.swaps       WHERE block_timestamp < CURRENT_DATE - interval '24 hours'       GROUP BY 1       ORDER BY 2 DESC       LIMIT 5)   ) GROUP BY 1,2 ORDER BY day, unique_users desc
aa021b56-a8f0-44b2-b88a-41af9bf65f9f,Untitled Query,with list as (   select event_contract, count(*) as popularity from flow.core.fact_events   where block_timestamp::date >= '2022-05-09'   group by event_contract   order by popularity desc   limit 10 ) select event_contract, count(*) as popularity_per_day, date_trunc('day', block_timestamp::date) as date from flow.core.fact_events where block_timestamp::date >= '2022-05-09' and event_contract in (select event_contract from list) group by date, event_contract order by date, popularity_per_day desc
aa5a5683-c4da-47b1-8a61-e636a67852ff,Untitled Query,select distinct symbol from flow.core.fact_prices
2817d30a-d503-4386-9b26-b0963a945ceb,Untitled Query,select * from mdao_near.information_schema -- where txn_hash = 'Hgnrj1iqnQY7f8GCrXPwUHZ2xLgHNpZoUs5ZcxpE1kRx'
6c88db40-2456-459e-b6df-4742c7417fc8,Untitled Query,with unstake as (   select     date_trunc('h', block_timestamp) as date,     sum(msg_value:execute_msg:withdraw_voting_tokens:amount / pow(10,6)) as amount   from terra.msgs   where tx_status = 'SUCCEEDED'     and block_timestamp > '2021-12-24T00:00:00Z'     and msg_value:execute_msg like '%withdraw_voting_tokens%'     and msg_value:contract = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9'     group by 1 ), stake as (   select     date_trunc('h', block_timestamp) as date,     sum(msg_value:execute_msg:send:amount / pow(10,6)) as amount   from terra.msgs   where tx_status = 'SUCCEEDED'     and block_timestamp > '2021-12-24T00:00:00Z'     and msg_value:execute_msg:send:msg = 'eyJzdGFrZV92b3RpbmdfdG9rZW5zIjp7fX0='     and msg_value:execute_msg:send:contract = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9'     and msg_value:contract = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y'   group by 1 ), net_staking as (   select 	stake.date as date,     stake.amount as stake_amount,   	unstake.amount as unstake_amount,   	stake_amount - unstake_amount as net_hour_change   from stake   left join unstake using (date) ) select *,   sum(net_hour_change) over (order by date) as cumsum_net   from net_staking
030e990d-9d02-46aa-be6f-09d9aea67dee,3 day hourly price of LUNA,SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price_usd) as avg_price FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > CURRENT_DATE - INTERVAL '3 days' GROUP BY 1 ORDER BY 1
38b1dcad-bb52-42fc-bf2e-ccc5d073ae8a,2023-10-18 01:51 PM,SELECT count(1) FROM AURORA.CORE.FACT_BLOCKS  WHERE BLOCK_TIMESTAMP is null and block_number >= 37000000
861b5fba-8036-4c84-a960-06ea555be281,sweat_validator.poolv1.near Delegators,SELECT     DATA :result :block_height :: NUMBER AS block_height,     VALUE :account_id :: STRING AS account_id,     VALUE :can_withdraw :: BOOLEAN AS can_withdraw,     VALUE :staked_balance :: NUMBER / pow(         10,         24     ) AS staked_balance,     VALUE :unstaked_balance :: NUMBER / pow(         10,         24     ) AS unstaked_balance FROM     TABLE(         near.core.udtf_call_contract_function(             'sweat_validator.poolv1.near',             'get_accounts',             {                 'from_index': 0,                 'limit': 100             }         )     ),     LATERAL FLATTEN(decoded_result) ORDER BY   staked_balance DESC
7201e6a1-7997-4630-9b0e-ee17e62e6945,NFT Volume on Polygon via udm_events,SELECT * FROM polygon.udm_events -- WHERE contract_address = lower('0xF715bEb51EC8F63317d66f491E37e7BB048fCc2d') -- opensea -- WHERE tx_id = '0x002a085521c0caf904c1158891a00396a76cfc140ce92be5eeb81f81385d03fd'   -- AND to_address = '0xf715beb51ec8f63317d66f491e37e7bb048fcc2d' -- opensea marketplace address   WHERE origin_address = '0x9b814233894cd227f561b78cc65891aa55c62ad2' -- opensea marketplace address also?   AND event_type = 'erc20_transfer'   AND origin_address != from_address    -- there's a symbol, amount and amount_usd for the transfer. lot's of duplicate numbers as the tx has multiple events ORDER BY 1 desc, tx_id LIMIT 100
22334fe5-f1f3-405f-aa79-52703ba312fe,meaningful-olive,
bccf242a-eaca-4593-b894-873c67ca3b9e,UST supply over time [1] [T49],SELECT   date_trunc('day', date) as date,   sum(balance) as balance FROM terra.daily_balances WHERE currency = 'UST' GROUP BY 1 ORDER BY 1
aa5c357a-57d0-4075-9c08-ec67f4648ade,ust tvl on uniswap,SELECT date_trunc('hour', block_timestamp) as date, 	avg(token0_balance_adjusted) as locked_ust,   	avg(token1_balance_adjusted) as locked_usdt FROM uniswapv3.pool_stats WHERE pool_name LIKE 'UST-USDT%' 	AND block_timestamp > '2021-05-06T00:00:00Z' GROUP BY 1 ORDER BY 1
0780f3e1-2daa-4826-81a3-e20070fdb737,Untitled Query,select   date_trunc('d',block_timestamp) as date,   contract_label,   median(amount_usd) as avg_amount    from anchor.collateral where amount_usd < 50000000    group by 1,2 order by 1
a67177d5-2194-4a1a-87b9-01219adfa939,Monitoring - Tx Gaps,with txs as ( select      block_timestamp,     {{block_num_column}},     count(distinct {{tx_column}}) as t_count from {{blockchain}}.core.fact_transactions where block_timestamp > current_date - interval '{{date_interval}}' group by 1,2 ), blocks as ( select     t.block_timestamp,     t.{{block_num_column}},     b.tx_count,     t.t_count,     tx_count - t_count as diff from txs t left join {{blockchain}}.core.fact_blocks b using ({{block_num_column}}) ) select     date_trunc('d',block_timestamp) as _date,     sum(t_count) as actual_txs,     sum(tx_count) as ex_txs,     sum(diff) as gap,     sum(diff)/sum(tx_count) *100 as pct_missing from blocks group by 1
48cabda6-02ae-44a2-9173-53f5898b4979,scratchpad t65,SELECT       	date_trunc('hour',block_timestamp) as block_hour,       	event_attributes:validator::string as validator,       	SUM(event_attributes:amount[0]:amount::float/POW(10,6)) as amount_luna     FROM terra.transitions     WHERE     	block_timestamp BETWEEN CURRENT_DATE-30 AND CURRENT_DATE-1     	AND     	event='rewards'     	AND     	transition_type='end_block'     GROUP BY 1,2     ORDER BY 1
aabc5a56-513c-4623-95b9-9cbe9c953d9a,Self-Delegation by Current Top 5 [T30],-- table is constantly updating so lets isolate the latest one WITH mb AS (SELECT max(block_id) as max_id FROM terra.validator_voting_power) SELECT  	validator_name as validator,   	balance / voting_power * 100 as self_delegation_percentage FROM   (     SELECT   		block_timestamp,     	lab.label as validator_name,     	lab.delegator_address, -- daily_balances use the delegator address so we need to join on this       	voting_power     FROM     (         SELECT address, voting_power, block_timestamp       FROM terra.validator_voting_power       -- limit selection to latest block only       JOIN mb ON block_id = mb.max_id              ORDER BY 2 desc     ) top_val     -- join labels for friendly charting     JOIN terra.validator_labels lab     	ON top_val.address = lab.vp_address     -- we'll limit later, but to ensure speedy queries limit to 10mm luna and up     WHERE voting_power > 10000000   ) top_val JOIN (   SELECT address, balance   FROM terra.daily_balances   	WHERE balance_type = 'staked'   		AND date LIKE '2021-07-27%' -- i tried a lot of methods but couldn't quite get this to parse down without hard coding today's date ) db ON top_val.delegator_address = db.address ORDER BY voting_power desc LIMIT 5
50936448-72ff-400b-a3c1-e72bd81e20ab,MDAO Workshop - Anchor Collateral Starter Query 3,select   date_trunc('d',block_timestamp) as date,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1 order by 1
ea556136-f9f7-42e2-84e1-b4acf742a2b0,UST Redeemed Hourly,select  date_trunc(hour,block_timestamp) as hour, sum(amount) as redeem_amt, count(distinct tx_id) as redeem_txs, count(distinct sender) as redeem_wallets from anchor.redeem where block_timestamp >= '2022-05-07' --and amount > 1000000 group by hour order by redeem_amt desc
821cc56f-a970-4637-8ad2-c267822bfaf4,MIR-UST Liquidity msg,SELECT msg_value,   c.address_name as contract_label FROM terra.msgs LEFT OUTER JOIN terra.labels c   ON msg_value:contract::string = c.address WHERE tx_id = '9F178BA0413FA4D733929D08BD73E7D7A02AB151F312105A4277D91BD93F37EA'
9edcab05-d0d0-4552-aa39-7ceb722eba09,Atlas - MAAs (txns),with dates as  (select distinct block_timestamp::date as day from near.core.fact_transactions where block_timestamp >= '2022-12-01' ), txns as  ( select   block_timestamp::date as active_day,   tx_signer,   tx_hash from near.core.fact_transactions ), maus as (select   day,   tx_signer,   count(distinct tx_hash) as txns from dates d   left outer join txns t     on t.active_day < d.day and t.active_day >= d.day - interval '30 day' where day != current_date() and day >= '2023-01-01' group by 1, 2) select   day,   count(distinct case when txns = 1 then tx_signer end) as tx_1,   count(distinct case when txns = 2 then tx_signer end) as tx_2,   count(distinct case when txns > 2 and txns <= 5 then tx_signer end) as tx_3_5,   count(distinct case when txns > 5 then tx_signer end) as tx_5 from maus group by 1 order by 1 desc
3b397b60-2279-4375-ac9e-2c1fcba5d4cf,UFC ID Count Crosscheck,WITH  -- ufc_events AS ( --   SELECT --     distinct PARSE_JSON(event_data:ashMeta) [0] :value:value :: string AS NFT_ID --   FROM --     flow.core.fact_events --   WHERE --     EVENT_CONTRACT = 'A.e2a89587100c6096.AshesV2' --     AND EVENT_TYPE = 'AshMinted' --     AND EVENT_DATA:ashMeta IS NOT NULL --     -- AND BLOCK_TIMESTAMP >= '2023-01-01' -- ) -- select count(nft_id) from ufc_events -- 147838 total without date filter ufc_events as ( select distinct nft_id from flow.nft.ez_nft_sales where nft_collection = 'A.329feb3ab062d289.UFC_NFT') select   count(1) from   flow.nft.dim_ufc_strike_metadata where   NFT_ID::string in (     select       NFT_ID::string     from       ufc_events   )
5548aa55-2930-48ec-a02b-23b1d120a390,Untitled Query,
e35b11f1-431c-4db9-8d68-a10c5da57145,Atlas - MAAs (txns),with dates as  (select distinct block_timestamp::date as day from near.core.fact_transactions where block_timestamp >= '2022-12-01' ), txns as  ( select   block_timestamp::date as active_day,   tx_signer,   tx_hash from near.core.fact_transactions ), maus as (select   day,   tx_signer,   count(distinct tx_hash) as txns from dates d   left outer join txns t     on t.active_day < d.day and t.active_day >= d.day - interval '30 day' where day != current_date() and day >= '2023-01-01' group by 1, 2) select   day,   count(distinct case when txns = 1 then tx_signer end) as tx_1,   count(distinct case when txns = 2 then tx_signer end) as tx_2,   count(distinct case when txns > 2 and txns <= 5 then tx_signer end) as tx_3_5,   count(distinct case when txns > 5 then tx_signer end) as tx_5 from maus group by 1 order by 1 desc
fdfe5bd2-a79b-4dcd-95b6-50ccb6854194,Atlas - MAAs (txns),with dates as  (select distinct block_timestamp::date as day from near.core.fact_transactions where block_timestamp >= '2022-12-01' ), txns as  ( select   block_timestamp::date as active_day,   tx_signer,   tx_hash from near.core.fact_transactions ), maus as (select   day,   tx_signer,   count(distinct tx_hash) as txns from dates d   left outer join txns t     on t.active_day < d.day and t.active_day >= d.day - interval '30 day' where day != current_date() and day >= '2023-01-01' group by 1, 2) select   day,   count(distinct case when txns = 1 then tx_signer end) as tx_1,   count(distinct case when txns = 2 then tx_signer end) as tx_2,   count(distinct case when txns > 2 and txns <= 5 then tx_signer end) as tx_3_5,   count(distinct case when txns > 5 then tx_signer end) as tx_5 from maus group by 1 order by 1 desc
4e5355ac-09ed-4f95-b02a-0b54ffa51066,UFC Burn - Metadata Connect,WITH metadata_info AS (     SELECT         NFT_ID AS "ID",         SET_DESCRIPTION as "Title",         metadata:ATHLETE_NAME AS "Athlete",         SERIAL_NUMBER AS "Serial",         metadata:EDITION_SIZE AS "Edition Size",         metadata:TIER AS "Tier",         metadata:WEIGHT_CLASS as "Weight Class",         metadata:HIGHLIGHT_CATEGORY as "Highlight Category",         metadata:SERIES AS "Series",         metadata:SET AS "Set"     FROM         flow.nft.dim_ufc_strike_metadata ), ufc_events AS (     SELECT         tx_id,         block_timestamp as "Burned Timestamp",         PARSE_JSON(event_data:ashMeta) AS data,         data[0]:value:value::string AS "ufcID"     FROM         flow.core.fact_events     WHERE         EVENT_CONTRACT = 'A.e2a89587100c6096.AshesV2'         AND EVENT_TYPE = 'AshMinted'         AND EVENT_DATA:ashMeta IS NOT NULL         AND BLOCK_TIMESTAMP >= '2023-11-01'         ORDER BY block_timestamp DESC ) SELECT     "Burned Timestamp",     "ID",     "Title", --    "Athlete",     "Serial",     "Edition Size",     "Tier",     "Weight Class", --    "Highlight Category",     "Series",     "Set",     tx_id,     data FROM     metadata_info mi LEFT JOIN     ufc_events ue ON mi."ID" = ue."ufcID" WHERE     ue."ufcID" IS NOT NULL;
2294aafb-2567-48ec-ba93-059ca9564389,Unique Contributors, total,select     date_trunc('month', createdat::date) as "Month",     count(distinct author) as "Unique Authors",     count(distinct id) as "Activity by ID" from near.beta.github_activity     where author not ilike '%dependabot%' group by 1 order by 1;
04a4fb62-4981-40dd-8c62-856b64bb5d78,UST On Chain Swaps [2],with ust_ask as (   select    	block_timestamp,   	offer_amount,     offer_currency,     token_1_amount, -- token 1 is ask     (token_0_amount * price0_usd) / token_1_amount as ust_p,     token_0_amount, -- token 0 is offer     price0_usd,     price1_usd as ust_oracle   from terra.swaps   where ask_currency = 'UST'     and price0_usd is not null     and offer_currency = 'LUNA' ), ask_agg as (      select   	-- time_slice(block_timestamp, 10, 'minute') as _date,   	date_trunc('m', block_timestamp) as _date,   	avg(ust_p) as ust_ask_swap_price,     	avg(ust_oracle) as avg_ust_oracle   from ust_ask   where block_timestamp >= '2022-05-07'   group by 1 ), ust_offer as (   select    	block_timestamp,     ask_currency,     token_1_amount, -- token 1 is ask     (token_1_amount * price1_usd) / offer_amount as ust_p,     token_0_amount, -- token 0 is offer     price1_usd,     price0_usd as ust_oracle   from terra.swaps   where offer_currency = 'UST'     and price1_usd is not null     and ask_currency = 'LUNA'    ), offer_agg as (      select   	-- time_slice(block_timestamp, 10, 'minute') as _date,   	date_trunc('m', block_timestamp) as _date,   	avg(ust_p) as ust_offer_swap_price,     avg(ust_oracle) as avg_ust_oracle   from ust_offer   where block_timestamp >= '2022-05-07'   group by 1 ), combo as (   select   	a._date,   	a.ust_ask_swap_price,   	o.ust_offer_swap_price,   	a.avg_ust_oracle   from ask_agg a   left join offer_agg o    	using (_date)    ) select * from combo order by 1
df7dc5a5-8034-41d5-975e-276a8ff26c8e,largest transfers in past 30 [T66],WITH gassy AS (   SELECT     main.block_timestamp,     main.tx_id,     event_amount_usd,     gas_used,     gas_wanted,     gas_wanted - gas_used as operator_delta   FROM terra.transfers main   LEFT JOIN terra.transactions tx     ON main.tx_id = tx.tx_id   WHERE main.block_timestamp > CURRENT_DATE - 30     AND main.tx_status = 'SUCCEEDED'   ORDER BY event_amount_usd desc   LIMIT 100), agg AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_amount_usd) as gross_usd,     sum(gas_used) as gross_gas_used,     sum(gas_wanted) as gross_gas_wanted   FROM gassy   GROUP BY 1   ORDER BY 1) SELECT   *,   gross_gas_used / gross_gas_wanted as gas_pct FROM agg
abbcbb34-a11c-4daa-aeab-4d2015b71e08,Untitled Query,select   * FROM terra.transfers   where block_timestamp <= '2021-08-01'   and (event_from_address_label = 'chai' and event_to_address_label is null)   and tx_status = 'SUCCEEDED' order by block_timestamp asc
77463938-bc6a-4378-94a2-bedd77c3b5c8,LIDO on Terra,SELECT   block_id,   CASE     WHEN event_attributes:action IS NOT NULL THEN event_attributes:action     WHEN event_attributes:"0_action" IS NOT NULL THEN event_attributes:"0_action"   END as action,   CASE     WHEN event_attributes:"0_amount" IS NOT NULL then event_attributes:"0_amount" / pow(10,6)     WHEN event_attributes:borrow_amount IS NOT NULL THEN event_attributes:borrow_amount / pow(10,6)     WHEN event_attributes:amount IS NOT NULL THEN event_attributes:amount / pow(10,6)   END as amount,   tx_id FROM terra.msg_events WHERE (tx_id = 'BFB19C77F394266940FF2B2A475F8E6B37FF94B6A2C9F963C961533364801723' -- lock collateral   OR tx_id = '906E0D4DC6559B749718C9F94DA78966B55D207143B5D10AF62E65102553B62A') -- borrow against bETH   AND event_type = 'from_contract'
42a23231-fca6-4876-901f-3f5a26ec0985,Flow May 2 Top Event Contracts,-- forked from Flow May 2 Txs from New Payers @ https://flipsidecrypto.xyz/edit/queries/ac9e9bfa-8777-4e29-aa89-75f75563d14b with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       *     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'       and payer in (         select           payer         from           new_payers       )   ) select   event_contract,   count(distinct tx_id) as txs,   min(block_timestamp) as min_timestamp_ntz,   max(block_timestamp) as max_timestamp_ntz,   max(event_index) as most_events,   avg(event_index) as avg_events,   median(event_index) as median_events from   flow.core.fact_events where   tx_id in (     select distinct       tx_id     from       may_txs   ) group by   1 order by   2 desc
477c22b1-41fb-440e-b43d-e21e60ad3e25,Yield Reserve Balance 90d,SELECT   date, balance FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   AND currency = 'UST'   and date > CURRENT_DATE - 90 order by 1 desc
43336184-e617-4793-9fed-9f89d8ddc1bb,AVAX as Collateral, by day,with daily_agg as (   select     date_trunc('d', block_timestamp) as date,     event_type,     case     	when event_type = 'withdraw' then -sum(amount_usd)   	else sum(amount_usd)     end as sum_amount_usd   from anchor.collateral   where currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58'   group by 1,2 ), net_impact as (   select   	date,   	sum(sum_amount_usd) as net_change   from daily_agg   group by 1    ), cumsum as (   select   	date,   	sum(net_change) over (order by date) as cumulative_sum   from net_impact    ),    combo as (   select * from daily_agg   left join net_impact using (date)   left join cumsum using (date)   order by 1    ) select * from combo
6aa91cfb-6d3d-4a75-a7d8-0b6d2f58fcca,Untitled Query,select * from solana.fact_nft_sales where tx_id = '5b58njDMEAMVe7U8SWZWFrLpE6tLRRvPQD6mPT66nRycweEz9Vn5bcYk9SJMgGZDNTQCKtdCSM37TiF6zL2tsJtu' -- select * from solana.fact_transactions where tx_id = '5b58njDMEAMVe7U8SWZWFrLpE6tLRRvPQD6mPT66nRycweEz9Vn5bcYk9SJMgGZDNTQCKtdCSM37TiF6zL2tsJtu'
c38fa17c-6777-4620-b853-266c0ce99adc,Untitled Query,
4c875948-5110-4030-b057-4c92ed66c2a5,Untitled Query,select * from anchor.liquidations limit 100 liquidations as (   select     date_trunc('d', block_timestamp) as date,     sum(repay_amount) as gross_repay,   	count(unique borrower) as unique_borrower,   	count(1) as liquidation_tx_count   from anchor.liquidations )
4cf78a7b-2bd7-4126-8d66-ca27a7fee946,eth price and mean absolute deviation [T31],SET mean = (SELECT avg(price) FROM ethereum.token_prices_hourly WHERE symbol = 'ETH' AND hour > GETDATE() - interval '2 weeks') SELECT 	price, 	(price - $mean) as variance_from_mean FROM ethereum.token_prices_hourly WHERE symbol = 'ETH'   AND hour > GETDATE() - interval '2 weeks') -- SELECT -- 	date_trunc('day', hour) as date, -- 	avg(price) as price, --   	STDDEV(avg(price)) OVER (ORDER BY date) as stdv_eth -- FROM ethereum.token_prices_hourly -- WHERE symbol = 'ETH' -- 	AND hour > GETDATE() - interval '2 weeks' -- GROUP BY 1 -- ORDER BY 1
4d8923ca-3b44-4187-99d6-674647eb6533,Untitled Query,select * from ethereum.token_prices_hourly       where symbol = 'NEAR'         limit 10
c46ddd9d-1ba4-4711-b505-871797542c55,Untitled Query,select * from near.core.fact_receipts where tx_hash = '127jQvkL8BefzqdU6CpapMLuSuX37bhvFLHELEjmBjL9';
41b781e4-4087-4c75-8a9f-33743d544725,Untitled Query,select * from terra.msg_events where tx_id = '6AE33079C11C76A9C37B36FB33A220ABA9E96D5CE336EFDEC4DBB7D221C303B6'
8aa2741b-b5a5-4fc2-a854-d3ad74ad502b,Copy of AVAX as Collateral, by day,with daily_agg_dep as (   select     date_trunc('d', block_timestamp) as date, 	sum(amount_usd) as deposit_amount   from anchor.collateral   where currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58'   and event_type = 'provide'   group by 1 ), daily_agg_wit as (   select     date_trunc('d', block_timestamp) as date, 	-sum(amount_usd) as withdraw_amount   from anchor.collateral   where currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58'   and event_type = 'withdraw'   group by 1    ) select   d.date,   deposit_amount,   withdraw_amount,   deposit_amount + withdraw_amount as net_change,   sum(net_change) over (order by date) as cumulative from daily_agg_dep d left join daily_agg_wit using (date)
7e2b3ec0-2356-4dc3-b15a-ac0cc50e63b1,Nexus Hunt 1,SELECT * FROM terra.msg_events WHERE tx_id = '8CDF4C31A4566A7D8773BEBE155E25F32439E238F3DBC245399D6A1751303FE9'
63b8ae5a-a714-457b-97ca-53b05168f922,Atlas - NFT table,with nft_data as (select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   owner_id as owner,   token_id from near.nft.fact_nft_mints union select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   args['receiver_id'] as owner,   args['token_id'] as token_id from near.core.fact_actions_events_function_call where method_name = 'nft_transfer') select   receiver_id,   count(distinct token_id) as tokens,   count(case when method_name = 'nft_transfer' and day >= current_date() - interval '1 day'     then tx_hash end) as transfers_24h,   count(case when method_name = 'nft_transfer' and day >= current_date() - interval '3 day'     then tx_hash end) as transfers_3d,   count(case when method_name = 'nft_transfer' then tx_hash end) as all_transfers,   count(distinct owner) as owners,   count(*) as transactions,   count(case when method_name != 'nft_transfer' then tx_hash end) as mints from nft_data group by 1 order by 3 desc
e4b727d3-6671-4e5e-bc86-f0b540a1554e,Untitled Query,select * from flow.core.ez_nft_sales left join flow.silver.nft_allday_metadata using (nft_id) where nft_collection ilike '%allday%' limit 100;
4e2abf00-1b9e-4876-bd60-839b05b9987d,daily LUNA staked [T65],WITH luna AS (   SELECT     date,     sum(balance) as balance   FROM terra.daily_balances   WHERE balance_type = 'staked'     AND date > CURRENT_DATE - 30     AND date < CURRENT_DATE     AND currency = 'LUNA'     -- exclude bLUNA delegations     AND address != 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   GROUP BY 1), bluna AS (   SELECT     date as bdate,     sum(balance) as bbalance   FROM terra.daily_balances   WHERE balance_type = 'staked'     AND date > CURRENT_DATE - 30     AND date < CURRENT_DATE     AND currency = 'LUNA'     -- only bLUNA delegations     AND address = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   GROUP BY 1 ) SELECT * FROM luna JOIN bluna ON luna.date = bluna.bdate
004d15fa-3d5a-42ce-95fc-c05a89df1e65,Untitled Query,
8ae5afaf-35c6-492b-94ed-c5e0a20eee22,NEAR Lands - total setTiles volume,with tiles as (   select * from near.core.fact_actions_events_function_call     where method_name = 'setTiles' ), get_signer as (   select tx_hash, tx_signer from near.core.fact_transactions     where tx_hash in (select tx_hash from tiles) ), combo as (   select * from tiles     left join get_signer using (tx_hash) ) select  	date_trunc('d', block_timestamp) as _date, 	tx_signer, 	count(1) as tiles_set from combo group by 1,2 order by 1,3
00355c43-0bc2-4821-9d4d-5abcf7f2c769,Untitled Query,select * from terra.classic.fact_blocks limit 10;
616df730-139f-4d25-8b02-02e60ab33a5b,DASH: Full Token Supply Breakdown copy,-- forked from rmas / DASH: Full Token Supply Breakdown @ https://flipsidecrypto.xyz/rmas/q/2023-04-15-11-35-pm-YoUzS8  WITH lockup_receipts AS (     SELECT fr.tx_hash          , fr.block_timestamp          , fr.actions:predecessor_id::string AS predecessor_id          , fr.receiver_id          , fr.actions          , OBJECT_KEYS(fr.status_value)[0]::string AS status          , fr.logs          FROM near.core.fact_receipts AS fr     WHERE fr.receiver_id LIKE '%.lockup.near'       AND status != 'Failure' ), daily_lockup_locked_balances AS (     WITH     -- new lockup contract created     new_lockup_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'new'     ),               -- vesting is stopped by the Foundation     terminate_vesting_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(lr.logs[0], 'unvested balance is ')[1]::bigint / 1e24 AS unvested_balance         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'terminate_vesting'     ),               terminate_vesting_txs_with_vesting_schedule AS (         SELECT tv.*              , fc.args:vesting_schedule_with_salt:vesting_schedule AS vesting_schedule              FROM terminate_vesting_txs AS tv             LEFT JOIN near.core.fact_actions_events_function_call AS fc                 ON fc.tx_hash = tv.tx_hash                 AND fc.method_name = 'terminate_vesting'              QUALIFY row_number() OVER (partition by tv.tx_hash order by tv.block_timestamp) = 1  -- dedupe     ),               -- unvested tokens are withdrawn (effectively unlocked into circulating supply)     termination_withdraw_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(split(lr.logs[0], ' of terminated unvested balance')[0], 'Withdrawing ')[1]::bigint / 1e24 AS withdrawn_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'termination_withdraw'      -- Simplify logic -> get only first termination withdrawal         -- QUALIFY row_number() OVER (partition by lockup_account_id order by block_timestamp) = 1     ),               daily_termination_withdrawn_amount AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(withdrawn_amount) AS withdrawn_amount         FROM termination_withdraw_txs         GROUP BY 1,2     ),               -- lockup amounts     deposits AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:Transfer:deposit::bigint / 1e24 AS deposit_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE OBJECT_KEYS(value:Transfer)[0]::string = 'deposit'     ),               lockup_contracts AS (         SELECT lcr.tx_hash              , lcr.block_timestamp              , lcr.lockup_account_id              , fc1.args:lockup_duration::bigint AS input_lockup_duration_ns              , fc1.args:lockup_timestamp::bigint AS input_lockup_timestamp_epoch              , fc1.args:owner_account_id::string AS owner_account_id              , fc1.args:release_duration::bigint AS input_release_duration_ns              , coalesce(tv.vesting_schedule, fc1.args:vesting_schedule:VestingSchedule) AS vesting_schedule_              , vesting_schedule_:cliff_timestamp::bigint AS vesting_cliff_timestamp_epoch              , vesting_schedule_:start_timestamp::bigint AS vesting_start_timestamp_epoch              , vesting_schedule_:end_timestamp::bigint AS vesting_end_timestamp_epoch              , coalesce( fc1.args:transfers_information:TransfersEnabled:transfers_timestamp::bigint,                           1602614338293769340 ) AS transfers_enabled_timestamp_epoch              , d.deposit_amount                   , tv.block_timestamp AS terminate_vesting_timestamp              , tv.unvested_balance AS termination_unvested_amount                   , tw.block_timestamp AS termination_withdraw_timestamp              , tw.withdrawn_amount AS termination_withdrawn_amount                   , (CASE WHEN OBJECT_KEYS(fc1.args:vesting_schedule)[0]::string = 'VestingHash'                      THEN True ELSE False END) AS is_private_vesting              FROM new_lockup_txs AS lcr             LEFT JOIN near.core.fact_actions_events_function_call AS fc1                 ON fc1.tx_hash = lcr.tx_hash                 AND fc1.method_name = 'new'                  LEFT JOIN deposits AS d                 ON d.tx_hash = lcr.tx_hash                  LEFT JOIN terminate_vesting_txs_with_vesting_schedule AS tv                 ON tv.lockup_account_id = lcr.lockup_account_id                  LEFT JOIN termination_withdraw_txs AS tw                 ON tw.lockup_account_id = lcr.lockup_account_id              WHERE lcr.tx_hash IN (SELECT tx_hash FROM new_lockup_txs)           AND d.deposit_amount > 0     ),               lockup_contracts__parsed AS (         SELECT lockup_account_id             -- the number of times the same lockup account ID has been used (used as part of lockup unique identifier)              , row_number() OVER (partition by lockup_account_id order by block_timestamp) AS lockup_index              , owner_account_id              , deposit_amount AS lockup_amount                  -- timestamp when tokens were locked (lock start)              , block_timestamp AS deposit_timestamp                  -- timestamp when transfers were enabled in the blockchain (default reference when lockup_timestamp is null)              , to_timestamp(transfers_enabled_timestamp_epoch, 9) AS transfers_enabled_timestamp                  -- timestamp when tokens start unlocking (explicit parameter)              , to_timestamp(input_lockup_timestamp_epoch, 9) AS input_lockup_timestamp                  -- if lockup_timestamp is null, calculate unlock start from lockup duration              , timestampadd(nanoseconds, input_lockup_duration_ns, transfers_enabled_timestamp) AS calculated_lockup_timestamp                  -- lockup mechanism              , input_lockup_duration_ns              , input_release_duration_ns                  -- Max between input and calculated lockup timestamp              , (CASE WHEN input_lockup_timestamp IS NOT NULL                      THEN greatest(input_lockup_timestamp, calculated_lockup_timestamp)                      ELSE calculated_lockup_timestamp END) AS lockup_timestamp                  -- If release_duration is not provided, tokens are immediately unlocked              , (CASE WHEN input_release_duration_ns IS NOT NULL                      THEN timestampadd(nanosecond, input_release_duration_ns, lockup_timestamp)  -- linear release if release_duration is provided, else full unlock                      ELSE lockup_timestamp END) AS lockup_end_timestamp                  -- vesting mechanism              , is_private_vesting              , to_timestamp(vesting_start_timestamp_epoch, 9) AS vesting_start_timestamp              , to_timestamp(vesting_end_timestamp_epoch, 9) AS vesting_end_timestamp              , to_timestamp(vesting_cliff_timestamp_epoch, 9) AS vesting_cliff_timestamp                  -- vesting termination              , terminate_vesting_timestamp              , termination_unvested_amount              , termination_withdraw_timestamp              , termination_withdrawn_amount                   , tx_hash AS _tx_hash                   , (CASE WHEN lockup_timestamp IS NOT NULL AND vesting_start_timestamp IS NULL                      THEN least(deposit_timestamp, lockup_timestamp)                      WHEN lockup_timestamp IS NULL AND vesting_start_timestamp IS NOT NULL                      THEN least(deposit_timestamp, vesting_start_timestamp)                      ELSE least(deposit_timestamp, lockup_timestamp, vesting_start_timestamp) END)::date AS _lockup_start_date                   , (CASE WHEN lockup_end_timestamp IS NOT NULL AND vesting_end_timestamp IS NULL                      THEN lockup_end_timestamp                      WHEN lockup_end_timestamp IS NULL AND vesting_end_timestamp IS NOT NULL                      THEN vesting_end_timestamp                      ELSE greatest(lockup_end_timestamp, vesting_end_timestamp) END)::date AS _lockup_end_date              FROM lockup_contracts     ),               lockup_contracts_daily_balance__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-01-01' AND CURRENT_DATE )              SELECT lc.lockup_account_id              , lc.lockup_index              , lc.owner_account_id                   , d.utc_date              , d.utc_date + interval '1 day' - interval '1 nanosecond' AS block_timestamp  -- End of day block timestamp                   , lc.lockup_amount              , lc.deposit_timestamp                  -- Lockup logic              , lc.lockup_timestamp              , lc.lockup_end_timestamp              , greatest(0, timestampdiff(nanosecond, block_timestamp, lockup_end_timestamp)) AS lockup_time_left_ns              , (CASE WHEN block_timestamp >= lockup_timestamp                      THEN (CASE WHEN input_release_duration_ns > 0                                 THEN (CASE WHEN block_timestamp >= lockup_end_timestamp                                            THEN 0  -- everything is released                                            ELSE lockup_amount * lockup_time_left_ns / input_release_duration_ns                                            END)                                 ELSE 0 END)                      ELSE lockup_amount  -- The entire balance is still locked before the lockup timestamp                      END) AS unreleased_amount                  -- Vesting logic              , lc.vesting_start_timestamp              , lc.vesting_cliff_timestamp              , lc.vesting_end_timestamp              , lc.terminate_vesting_timestamp              , lc.termination_unvested_amount              , greatest(0, timestampdiff(nanosecond, block_timestamp, vesting_end_timestamp)) AS vesting_time_left_ns              , timestampdiff(nanosecond, vesting_start_timestamp, vesting_end_timestamp) AS vesting_total_time_ns              FROM lockup_contracts__parsed AS lc, dates AS d         WHERE d.utc_date BETWEEN lc._lockup_start_date                              AND lc._lockup_end_date     ),               lockup_contracts_daily_balance__prep_2 AS (         SELECT lc.*              , sum(coalesce(dtw.withdrawn_amount, 0))                     OVER (partition by lc.lockup_account_id, lc.lockup_index                               order by lc.utc_date                               rows between unbounded preceding                                        and current row) AS termination_withdrawn_amount                  FROM lockup_contracts_daily_balance__prep_1 AS lc             LEFT JOIN daily_termination_withdrawn_amount AS dtw                 ON dtw.lockup_account_id = lc.lockup_account_id                 AND dtw.utc_date = lc.utc_date          ),               lockup_contracts_daily_balance AS (         SELECT lc.*                  -- Vesting logic                  -- Not 100% accurate due to private vesting lockups (unknown/hidden vesting parameters)              , (CASE WHEN block_timestamp >= terminate_vesting_timestamp                      THEN termination_unvested_amount - termination_withdrawn_amount                      ELSE (CASE WHEN block_timestamp < vesting_cliff_timestamp                                 THEN lockup_amount  -- Before the cliff, nothing is vested                                 WHEN block_timestamp >= vesting_end_timestamp                                 THEN 0  -- After the end, everything is vested                                 ELSE lockup_amount * vesting_time_left_ns / vesting_total_time_ns                                 END)                      END) AS unvested_amount                  -- Combined logic              , greatest(unreleased_amount - termination_withdrawn_amount, coalesce(unvested_amount, 0)) AS locked_amount                   , locked_amount - coalesce(lag(locked_amount) OVER (partition by lc.lockup_account_id, lc.lockup_index order by lc.utc_date), 0) AS unlocked_amount_today              FROM lockup_contracts_daily_balance__prep_2 AS lc     )     SELECT * FROM lockup_contracts_daily_balance ), daily_lockup_staking_balances AS (     WITH     lockup_staking_logs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:FunctionCall:method_name::string AS method_name              , lr.receiver_id AS lockup_account_id              , (CASE method_name                     WHEN 'stake'                     THEN split(split(lr.logs[0], ' at the staking pool')[0], 'Staking ')[1]::bigint / 1e24                                          WHEN 'deposit_and_stake'                     THEN split(split(lr.logs[0], ' to the staking pool')[0], 'Depositing and staking ')[1]::bigint / 1e24                          WHEN 'unstake'                     THEN split(split(lr.logs[0], ' from the staking pool')[0], 'Unstaking ')[1]::bigint / 1e24                          END) AS amount                   , lr.logs              FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE method_name IN ('stake','deposit_and_stake',                               'unstake','unstake_all')     ),               daily_staking_stats AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(CASE WHEN method_name IN ('stake','deposit_and_stake') THEN amount ELSE 0 END) AS staked_amount_              , sum(CASE WHEN method_name IN ('unstake') THEN amount ELSE 0 END) AS unstaked_amount_              , (CASE WHEN count(CASE WHEN method_name = 'unstake_all' THEN tx_hash ELSE NULL END) > 0                      THEN True ELSE False END) AS unstaked_all         FROM lockup_staking_logs         GROUP BY 1,2     ),               lockup_stakers AS (         SELECT lockup_account_id              , min(block_timestamp)::date AS start_date         FROM lockup_staking_logs         GROUP BY 1     ),               lockup_stakers_daily_balances__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-09-01' AND CURRENT_DATE )              SELECT ls.lockup_account_id              , d.utc_date              FROM lockup_stakers AS ls, dates AS d         WHERE d.utc_date >= ls.start_date     ),               lockup_stakers_daily_balances__prep_2 AS (         SELECT d.lockup_account_id              , d.utc_date              , coalesce(dss.staked_amount_, 0) AS staked_amount              , coalesce(dss.unstaked_amount_, 0) AS unstaked_amount              , dss.unstaked_all              , sum(CASE WHEN dss.unstaked_all = True THEN 1 ELSE 0 END)                   OVER (partition by d.lockup_account_id                         order by d.utc_date                         rows between unbounded preceding                                  and current row) AS _unstake_counter              FROM lockup_stakers_daily_balances__prep_1 AS d             LEFT JOIN daily_staking_stats AS dss                 ON dss.lockup_account_id = d.lockup_account_id                 AND dss.utc_date = d.utc_date     ),               lockup_stakers_daily_balances__prep_3 AS (         SELECT *              , coalesce(lag(_unstake_counter)                    OVER (partition by lockup_account_id                             order by utc_date)                , 0) AS staking_period_index         FROM lockup_stakers_daily_balances__prep_2     ),               lockup_stakers_daily_balances__prep_4 AS (         SELECT *              , sum(staked_amount - unstaked_amount)                    OVER (partition by lockup_account_id, staking_period_index                             order by utc_date                             rows between unbounded preceding                                      and current row) AS _cumulative_staked_amount                   , (CASE WHEN unstaked_all = True THEN 0 ELSE _cumulative_staked_amount END) AS staked_balance         FROM lockup_stakers_daily_balances__prep_3     ),               lockup_stakers_daily_balances AS (         SELECT lockup_account_id              , utc_date              , staked_balance         FROM lockup_stakers_daily_balances__prep_4     )               SELECT * FROM lockup_stakers_daily_balances ), daily_lockup_locked_and_staking_balances AS (     SELECT l.lockup_account_id          , l.utc_date          , l.locked_amount          , coalesce(s.staked_balance, 0) AS staked_amount          , least(staked_amount, locked_amount) AS locked_and_staked_amount     FROM daily_lockup_locked_balances AS l         LEFT JOIN daily_lockup_staking_balances AS s             ON s.lockup_account_id = l.lockup_account_id             AND s.utc_date = l.utc_date ), daily_locked_and_staked_supply AS (     SELECT utc_date          , sum(locked_amount) AS total_locked_supply          , sum(locked_and_staked_amount) AS locked_and_staked_supply     FROM daily_lockup_locked_and_staking_balances     GROUP BY 1 ), daily_staked_supply AS (     WITH          dim_epochs AS (      	SELECT epoch_id       		 , min(block_id) AS min_block_id       		 , max(block_id) AS max_block_id       		 , count(*) AS blocks       		 , count(distinct block_author) AS block_producers       		 , min(block_timestamp) AS start_time       		 , max(block_timestamp) AS end_time       		 , max(total_supply) / 1e24 AS total_near_supply       		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num              	FROM near.core.fact_blocks AS b       	GROUP BY 1     ),               staking_actions AS (       	SELECT r.tx_hash           	 , r.block_timestamp           	 , r.receiver_id AS validator_address           	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num           	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance                    FROM near.core.fact_receipts AS r       	   , lateral flatten( input => r.logs ) AS l                WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )           AND r.tx_hash IN ( SELECT tx_hash            				     FROM near.core.fact_actions_events_function_call           				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )           AND left(l.value::string, 6) = 'Epoch '            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               proposals AS (       	SELECT b.block_id           	 , b.block_timestamp           	 , b.epoch_id           	 , vp.value['account_id'] AS validator_address           	 , vp.value['stake']::bigint / 1e24 AS staked_balance         FROM near.core.fact_blocks AS b            , lateral flatten( input => b.chunks ) AS c            , lateral flatten( input => c.value['validator_proposals']) AS vp       	-- WHERE b.block_timestamp >= '2021-09-01'         QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1     ),               proposals_per_epoch AS (       	SELECT p.block_timestamp       		 , p.epoch_id       		 , p.validator_address       		 , p.staked_balance       		 , e.epoch_num              	FROM proposals AS p       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = p.epoch_id            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               block_producers_per_epoch AS (       	SELECT b.epoch_id       		 , e.epoch_num       		 , b.block_author AS validator_address       		 , sa.staked_balance       		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced              	FROM near.core.fact_blocks AS b       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = b.epoch_id            		LEFT JOIN staking_actions AS sa       			ON sa.epoch_num = e.epoch_num       			AND sa.validator_address = b.block_author            	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1     ),               dim_validators AS (       	SELECT validator_address       		 , min(start_epoch) AS start_epoch       		 , min(start_time) AS start_time              	FROM (     		SELECT validator_address         		 , min(epoch_num) AS start_epoch         		 , min(block_timestamp) AS start_time         	FROM staking_actions AS sa         	GROUP BY 1                	UNION ALL                	SELECT block_author AS validator_address         		 , min(e.epoch_num) AS start_epoch         		 , min(b.block_timestamp) AS start_time         	FROM near.core.fact_blocks AS b         		LEFT JOIN dim_epochs AS e         			ON b.block_id BETWEEN e.min_block_id AND e.max_block_id         	GROUP BY 1         ) AS x              	GROUP BY 1     ),               dim_table AS (       	SELECT v.validator_address       		 , e.epoch_num       		 , e.start_time       		 , e.total_near_supply              	FROM dim_validators AS v, dim_epochs AS e       	WHERE v.start_epoch <= e.epoch_num     ),               validator_status_per_epoch AS (       	SELECT dt.epoch_num       		 , dt.start_time       		 , dt.validator_address       		 , coalesce(       				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS       					OVER (partition by dt.validator_address        					  	  order by dt.epoch_num       					  	  rows between unbounded preceding       								   and current row),       				0) AS staked_balance       		 , bp.blocks_produced       		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer              	FROM dim_table AS dt       		LEFT JOIN block_producers_per_epoch AS bp       			ON bp.epoch_num = dt.epoch_num       			AND bp.validator_address= dt.validator_address            		LEFT JOIN proposals_per_epoch AS p       			ON p.epoch_num = dt.epoch_num       			AND p.validator_address= dt.validator_address          ),               epoch_stats AS (       	SELECT epoch_num           	 , start_time       		 , sum(staked_balance) AS total_near_staked                    FROM validator_status_per_epoch         WHERE staked_balance > 0         GROUP BY 1,2     ),               epoch_stats_2 AS (       	SELECT es.*       		 , de.total_near_supply       		 , de.total_near_supply - es.total_near_staked AS other_near_supply       	 	 , 100.00 * total_near_staked / total_near_supply AS perc_staked_supply       	FROM epoch_stats AS es       		LEFT JOIN dim_epochs AS de       			ON de.epoch_num = es.epoch_num     )               SELECT start_time::date AS utc_date          , total_near_staked AS total_staked_supply          , total_near_supply AS total_supply     FROM epoch_stats_2     QUALIFY row_number() OVER (partition by utc_date order by start_time desc) = 1 ), daily_supply_stats AS (     SELECT s.utc_date          , s.total_supply          , s.total_staked_supply          , s.total_supply - s.total_staked_supply AS total_nonstaked_supply          , ls.total_locked_supply          , ls.locked_and_staked_supply          , greatest(0, total_staked_supply - locked_and_staked_supply) AS nonlocked_and_staked_supply          , greatest(0, total_locked_supply - locked_and_staked_supply) AS locked_and_nonstaked_supply          , total_supply             - locked_and_staked_supply             - locked_and_nonstaked_supply             - nonlocked_and_staked_supply AS nonlocked_and_nonstaked_supply          , total_supply - total_locked_supply AS circulating_supply          , total_locked_supply AS locked_supply     FROM daily_staked_supply AS s         LEFT JOIN daily_locked_and_staked_supply AS ls             ON ls.utc_date = s.utc_date ), output AS (     SELECT utc_date          , utc_date AS "Date"          , total_supply AS "Total Supply"          , total_staked_supply AS "Staked Supply"          , total_nonstaked_supply AS "Non-staked Supply"          , circulating_supply AS "Circulating Supply"          , total_locked_supply AS "Locked Supply"          , nonlocked_and_nonstaked_supply AS "Liquid Supply"          , total_supply - nonlocked_and_nonstaked_supply  AS "Non-liquid Supply"          , locked_and_staked_supply AS "Staked (Locked Supply)"          , locked_and_nonstaked_supply AS "Non-staked (Locked Supply)"          , nonlocked_and_staked_supply AS "Staked (Circulating Supply)"          , nonlocked_and_nonstaked_supply AS "Non-staked (Circulating Supply)"          , total_locked_supply / total_supply AS perc_locked_supply          , circulating_supply / total_supply AS perc_circulating_supply          , locked_and_staked_supply / total_locked_supply AS perc_staked__locked          , nonlocked_and_staked_supply / circulating_supply AS perc_staked__circulating          , total_supply / 1e6 AS total_supply__millions          , circulating_supply / 1e6 AS circulating_supply__millions          , total_locked_supply / 1e6 AS locked_supply__millions          , total_staked_supply / 1e6 AS staked_supply__millions          , nonlocked_and_nonstaked_supply / 1e6 AS liquid_supply__millions          , nonlocked_and_staked_supply / 1e6 AS staked_circulating__millions          , locked_and_staked_supply / 1e6 AS staked_locked__millions          , 1 AS dummy     FROM daily_supply_stats ) SELECT * FROM output WHERE utc_date >= '2020-10-13' ORDER BY utc_date DESC
261daff1-593b-47ed-8a64-46963dd3016f,Untitled Query,select max(moment_date) from flow.core.dim_allday_metadata limit 10; select * from flow.core.ez_nft_sales where nft_collection ilike '%allday%' order by block_timestamp desc limit 10
239a4e77-fa11-4ea0-8bf9-e7b1316f7670,TNS Swap Volume,-- Buying TOKEN with UST // UST -> TOKEN swap WITH buys AS (   SELECT     date_trunc('h', block_timestamp) as date,     sum(token) as quantity_bought,     sum(ust) as volume_bought   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra1hqnk9expq3k4la2ruzdnyapgndntec4fztdyln' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- token contract       and block_timestamp > '2021-12-23T12:00:00Z'     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('h', block_timestamp) as date,     sum(token) as quantity_sold,     sum(ust) as volume_sold   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra1hqnk9expq3k4la2ruzdnyapgndntec4fztdyln' -- swap contract       and block_timestamp > '2021-12-23T12:00:00Z'     )   GROUP BY 1   ORDER BY 1), final as (   SELECT     buys.date as date,     volume_bought,     volume_sold,     volume_bought + volume_sold as gross_volume_buy_sell     -- optional, if quantity is of note     -- quantity_bought,     -- -quantity_sold as sold_neg,     -- quantity_bought - quantity_sold as net_daily_token_volume   FROM buys   JOIN sells using (date)   ORDER BY 1   ) select * from final
4615405e-f9d1-47df-9a70-5bb75662ec34,Fees paid on Ethereum [P7],SELECT   date_trunc('day', block_timestamp) as date,   CASE     WHEN success = 'FALSE' THEN 'failed'     WHEN success = 'TRUE' THEN 'successful'   END AS status,   sum(tx_fee) as daily_fee,   sum(fee_usd) as daily_fee_usd FROM ethereum.transactions WHERE block_timestamp > '2021-06-01T00:00:00Z' GROUP BY 1, 2
63d37dfd-bdcc-4109-bbb1-0d1e72347497,50 billion dollar question,SELECT     event_type,     symbol,     contract_address,     from_address,     to_address,     origin_address,     amount,     block_timestamp FROM ethereum.udm_events WHERE     contract_address = '0xc93a59888e7e6f2849ba94acf767266299c4c415'     AND block_timestamp LIKE '2021-05-22%'; -- 50527565269.46543
63d693e1-6c80-4163-8210-d51085eb905f,Terra Wormhole - Outbound Gross Volume to BSC [T104],WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id, 	event_attributes:"transfer.token"[0] as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     AND destination_chain_id = 4   GROUP BY 1,2,3   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token[0]:denom = 'c756e61' -- luna   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token[0] is null -- ust ) SELECT   date,   -sum(amount) as volume_usd FROM combo GROUP BY 1
78238a65-c042-4d38-8751-d7119ce26213,NEAR Backfill - txs,select   block_timestamp::date as "Date",   iff(block_timestamp::date>='2021-09-01','existing','backfill') as status,   count(distinct tx_hash) as "Daily Transactions" from near.core.fact_transactions where block_timestamp::date < current_date group by 1 order by 1
e5a3d99b-2e90-46dd-83db-4111fcc96164,Untitled Query,
8aed3ed4-2d97-4fe7-83a8-86c939558931,Daily Active Authorizers Count,select   block_timestamp::date as _date,   count(distinct            COALESCE(           authorizers [1],           authorizers [0]       ) :: STRING   ) as unique_authorizers from flow.core.fact_transactions where block_timestamp::date >= '2023-01-01' and tx_succeeded group by 1 order by 1
09997ede-36e6-40c7-8d00-99628e2ab0d2,Anchor Top Redemption Volume [Anchor 1],with events as (   select     *   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'    ),    top_redemptions as (   select     event_attributes:"0_from" as sender,   	sum(event_attributes:redeem_amount::float) / pow(10,6) as gross_redemption   from events   group by 1   order by 2 desc   limit 25    ), redemptions as (   select     event_attributes:"0_from" as sender,     date_trunc('month', block_timestamp) as r_month,     sum(event_attributes:redeem_amount::float) / pow(10,6) as redemption_amount      from events   where sender in      (select sender from top_redemptions)   group by 1,2   order by 1,2    ) select * from redemptions
f56f12a6-2b67-4d71-ad11-0a02d2b0a393,Whales copy,-- forked from alitaslimi / Whales @ https://flipsidecrypto.xyz/alitaslimi/q/eROyYeJ0S5Jx/whales  with -------------------- Dates --------------------   dates as (     select       ft.value:"Date"::date as halving_date,       ft.value:"Year" as halving_year,       ft.value:"Number" as halving_number,       ft.value:"Label" as halving_label     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/06de93b3-e958-4243-8b0f-d3a741241ec0/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Transfers --------------------   inputs as (     select       block_timestamp,       pubkey_script_address as address,       value     from       bitcoin.core.fact_inputs   ),   outputs as (     select       block_timestamp,       pubkey_script_address as address,       value     from       bitcoin.core.fact_outputs   ), -------------------- 2012 --------------------   -- inflows_2012 as (   --   select   --     address,   --     sum(value) as volume   --   from   --     dates,   --     outputs   --   where   --     halving_year = 2012   --     and block_timestamp::date <= halving_date   --   group by   --     address   -- ),   -- outflows_2012 as (   --   select   --     address,   --     sum(value) as volume   --   from   --     dates,   --     inputs   --   where   --     halving_year = 2012   --     and block_timestamp::date <= halving_date   --   group by   --     address   -- ),   -- whales_2012 as (   --   select   --     inflows.address,   --     inflows.volume as inflow,   --     zeroifnull(outflows.volume) as outflow,   --     inflow - outflow as balance   --   from   --     inflows_2012 inflows   --     left join outflows_2012 outflows on inflows.address = outflows.address   --   having   --     balance > 1   -- ),   -- whales_inflows_2012 as (   --   select   --     block_timestamp::date as date,   --     sum(value) as volume   --   from   --     dates,   --     outputs   --   where   --     halving_year = 2012   --     and block_timestamp::date between (halving_date - 90) and (halving_date + 90)   --     and address in (select address from whales_2012)   --   group by   --     date   -- ),   -- whales_outflows_2012 as (   --   select   --     block_timestamp::date as date,   --     sum(value) as volume   --   from   --     dates,   --     inputs   --   where   --     halving_year = 2012   --     and block_timestamp::date between (halving_date - 90) and (halving_date + 90)   --     and address in (select address from whales_2012)   --   group by   --     date   -- ),   -- halving_2012 as (   --   select   --     inflows.date,   --     datediff('day', halving_date, inflows.date) as day_diff,   --     inflows.volume as inflow,   --     outflows.volume as outflow,   --     inflow - outflow as netflow   --   from   --     dates,   --     whales_inflows_2012 inflows   --     join whales_outflows_2012 outflows on inflows.date = outflows.date   --   where   --     halving_year = 2012   -- ), -------------------- 2016 --------------------   inflows_2016 as (     select       address,       sum(value) as volume     from       outputs     where       block_timestamp::date <= '2016-07-09'::date     group by       address   ),   outflows_2016 as (     select       address,       sum(value) as volume     from       inputs     where       block_timestamp::date <= '2016-07-09'::date     group by       address   ),   whales_2016 as (     select       inflows.address,       inflows.volume as inflow,       zeroifnull(outflows.volume) as outflow,       inflow - outflow as balance     from       inflows_2016 inflows       left join outflows_2016 outflows on inflows.address = outflows.address     having       balance > 1   ),   whales_inflows_2016 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       outputs     where       halving_year = 2016       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2016)     group by       date   ),   whales_outflows_2016 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       inputs     where       halving_year = 2016       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2016)     group by       date   ),   halving_2016 as (     select       inflows.date,       datediff('day', halving_date, inflows.date) as day_diff,       inflows.volume as inflow,       outflows.volume as outflow,       inflow - outflow as netflow     from       dates,       whales_inflows_2016 inflows       join whales_outflows_2016 outflows on inflows.date = outflows.date     where       halving_year = 2016   ), -------------------- 2020 --------------------   inflows_2020 as (     select       address,       sum(value) as volume     from       outputs     where       block_timestamp::date <= '2020-05-11'::date     group by       address   ),   outflows_2020 as (     select       address,       sum(value) as volume     from       inputs     where       block_timestamp::date <= '2020-05-11'::date     group by       address   ),   whales_2020 as (     select       inflows.address,       inflows.volume as inflow,       zeroifnull(outflows.volume) as outflow,       inflow - outflow as balance     from       inflows_2020 inflows       left join outflows_2020 outflows on inflows.address = outflows.address     having       balance > 1   ),   whales_inflows_2020 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       outputs     where       halving_year = 2020       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2020)     group by       date   ),   whales_outflows_2020 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       inputs     where       halving_year = 2020       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2020)     group by       date   ),   halving_2020 as (     select       inflows.date,       datediff('day', halving_date, inflows.date) as day_diff,       inflows.volume as inflow,       outflows.volume as outflow,       inflow - outflow as netflow     from       dates,       whales_inflows_2020 inflows       join whales_outflows_2020 outflows on inflows.date = outflows.date     where       halving_year = 2020   ), -------------------- 2024 --------------------   inflows_2024 as (     select       address,       sum(value) as volume     from       outputs     where       block_timestamp::date <= '2024-04-20'::date     group by       address   ),   outflows_2024 as (     select       address,       sum(value) as volume     from       inputs     where       block_timestamp::date <= '2024-04-20'::date     group by       address   ),   whales_2024 as (     select       inflows.address,       inflows.volume as inflow,       zeroifnull(outflows.volume) as outflow,       inflow - outflow as balance     from       inflows_2024 inflows       left join outflows_2024 outflows on inflows.address = outflows.address     having       balance > 1   ),   whales_inflows_2024 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       outputs     where       halving_year = 2024       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2024)     group by       date   ),   whales_outflows_2024 as (     select       block_timestamp::date as date,       sum(value) as volume     from       dates,       inputs     where       halving_year = 2024       and block_timestamp::date between (halving_date - 90) and (halving_date + 90)       and address in (select address from whales_2024)     group by       date   ),   halving_2024 as (     select       inflows.date,       datediff('day', halving_date, inflows.date) as day_diff,       inflows.volume as inflow,       outflows.volume as outflow,       inflow - outflow as netflow     from       dates,       whales_inflows_2024 inflows       join whales_outflows_2024 outflows on inflows.date = outflows.date     where       halving_year = 2024   ) -------------------- Result -------------------- select   halving_2016.day_diff as "Day",   halving_2016.inflow as "2016 Inflows",   halving_2020.inflow as "2020 Inflows",   halving_2024.inflow as "2024 Inflows",   halving_2016.outflow as "2016 Outflows",   halving_2020.outflow as "2020 Outflows",   halving_2024.outflow as "2024 Outflows",   halving_2016.netflow as "2016 Netflows",   halving_2020.netflow as "2020 Netflows",   halving_2024.netflow as "2024 Netflows" from   halving_2016   join halving_2020 on halving_2016.day_diff = halving_2020.day_diff   left join halving_2024 on halving_2016.day_diff = halving_2024.day_diff order by   "Day"
8e0f90a1-c334-4753-8768-b96b6609c5db,liquidity,SELECT    liquidity_provider,   action,   count(*) FROM uniswapv3.lp_actions WHERE block_timestamp > GETDATE() - interval '1 week'   AND action = 'INCREASE_LIQUIDITY' GROUP BY 1, 2 ORDER BY 3 desc, 1, 2;
0f7dd970-bbf4-40ab-8fb1-d5dd01d213c4,Terra Daily Active Wallets [Flash119],WITH daws AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct msg_value:sender) as unique_wallets   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL   GROUP BY 1   ), price AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ) SELECT   daws.date,   unique_wallets,   avg_price,   avg(unique_wallets) OVER (ORDER BY daws.date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM daws JOIN price   ON daws.date = price.date ORDER BY 1
5e54dfa3-defc-40d7-8185-29a2a6657f2b,Top Redemption Wallets Since 5/7,/* select * from anchor.collateral where event_type = 'withdraw' and block_timestamp > '2022-05-07' and amount_usd > 100000 order by amount_usd desc; */ select  distinct sender, sum(amount) as redeem_amt from anchor.redeem where block_timestamp >= '2022-05-07' and amount > 1000000 group by sender order by redeem_amt desc limit 10
0e12286c-cc9e-4391-ad40-fe8e1fb3b3a8,Fees Paid (USD) on Claims for 0 3Crv,WITH claims AS (   SELECT     block_timestamp,     amount,     tx_id   FROM ethereum.udm_events   WHERE contract_address = '0x6c3f90f043a72fa612cbac8115ee7e52bde6e490' -- 3crv address     AND from_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV pool     AND origin_function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z'   ), fees AS (   SELECT     tx_id,     tx_fee,     fee_usd,     to_address,     from_address   FROM ethereum.transactions   WHERE success = 'TRUE'     AND to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'     AND function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z' ), combo AS (   SELECT     block_timestamp,     amount,     tx_fee,     fee_usd,     claims.tx_id,     from_address   FROM claims   JOIN fees     ON claims.tx_id = fees.tx_id ) SELECT   from_address as user_address,   sum(fee_usd) as fees_paid_usd,   count(*) as count FROM combo WHERE amount = 0 GROUP BY 1 ORDER BY 2 desc
3d4bd451-ebcd-4174-bb01-e35f0daae838,Terra Hunt,SELECT   * FROM   terra.staking WHERE   delegator_address = 'terra1sdaprzv3sdzev466jh6ud3quyr3dv5ufr7q6yl'   and validator_address_label = 'flipside'
7ad178e8-f499-48da-a772-db9d15bc79e3,UST Supply in Top 25 Addresses [T49],WITH top AS ( SELECT   date,   sum(balance) as top_bal FROM terra.daily_balances WHERE currency = 'UST' 	AND date = CURRENT_DATE     AND balance > 9500000 GROUP BY 1), total AS ( SELECT   date,   sum(balance) as tot_bal FROM terra.daily_balances WHERE currency = 'UST'   AND date = CURRENT_DATE GROUP BY 1) SELECT   top_bal,   tot_bal,   top_bal/tot_bal as t25_pct FROM top JOIN total ON top.date = total.date
c935a5a6-d011-4bcc-9dea-f168c487e781,Untitled Query,select * from terra.core.fact_messages limit 10;
6b344dc1-e869-4ff1-b436-0ad89d8e1ea0,UST since 3/17 vs borrow - redux [4] [T49],WITH daily AS ( SELECT   date,   sum(balance) as ust_supply FROM terra.daily_balances WHERE currency = 'UST'   AND date > '2021-03-16T00:00:00Z' GROUP BY 1), borrow AS ( SELECT   block_timestamp,   CASE     WHEN event_attributes:action = 'borrow_stable' THEN event_attributes:borrow_amount::float / pow(10,6)     WHEN event_attributes:action = 'repay_stable' THEN -event_attributes:repay_amount::float / pow(10,6)     WHEN event_attributes:"0_action" = 'liquidate_collateral' THEN -event_attributes:"0_repay_amount"::float / pow(10,6)   END as amount FROM terra.msg_events WHERE event_type = 'from_contract'   AND tx_status = 'SUCCEEDED'   AND block_timestamp > '2021-03-16T23:59:59Z')   -- top level query SELECT   event_date,   SUM(supply_change) OVER (ORDER BY event_date) as cumulative_supply,   cumulative_borrow,   CASE      WHEN cumulative_supply IS NULL THEN NULL     ELSE (cumulative_borrow / cumulative_supply) * 100   END AS borrow_pct   -- subquery 1 FROM (    SELECT    daily.date as event_date,   ust_supply - LAG(ust_supply) OVER (ORDER BY daily.date) as supply_change,   cumulative_borrow FROM daily -- subquery for anchor borrow amount JOIN (   SELECT      date,     SUM(net_borrow) OVER (ORDER BY date) as cumulative_borrow   FROM (     SELECT       date_trunc('day', block_timestamp) as date,       SUM(amount) as net_borrow     FROM borrow     GROUP BY 1)     ORDER BY 1) anchor   ON anchor.date = daily.date)
1efdb7b9-5162-4d72-8eb2-e73611210182,KRT peg,select date_trunc('hour', block_timestamp) as date,   symbol,   avg(price_usd)   from terra.oracle_prices where date > GETDATE() - interval '6 months'   AND symbol = 'KRT' group by 1,2  order by 1, 2
4b784efc-cc6c-46b4-b967-85f77d44bf47,6 - ust peg,select date_trunc('hour', block_timestamp) as date,   symbol,   avg(price_usd)   from terra.oracle_prices where date > GETDATE() - interval '6 months'   AND symbol = 'UST' group by 1,2  order by 1, 2
767c0dd3-fab8-459a-9fd8-23f9c3ac166b,LOOP Swap Volume - all time [T93],-- this one is DAILY volume. Around airdrop is HOURLY volume -- Buying TOKEN with UST // UST -> TOKEN swap WITH buys AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(token) as quantity_bought,     sum(ust) as volume_bought   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(token) as quantity_sold,     sum(ust) as volume_sold   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract     )   GROUP BY 1   ORDER BY 1) SELECT   buys.date as date,   volume_bought,   volume_sold,   volume_bought + volume_sold as gross_volume_buy_sell,   SUM(quantity_bought) OVER (ORDER BY buys.date) AS cumulative_buy_quant,   SUM(quantity_sold) OVER (ORDER BY buys.date) AS cumulative_sell_quant,   SUM(quantity_bought - quantity_sold) OVER (ORDER BY buys.date) AS cumulative_gross_volume_quant      -- optional, if quantity is of note   -- quantity_bought,   -- -quantity_sold as sold_neg,   -- quantity_bought - quantity_sold as net_daily_token_volume, FROM buys JOIN sells ON sells.date = buys.date ORDER BY 1
7645b9b4-c96a-4d71-bad4-2deee2813d0b,Flipside on NEAR Social,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date >= '2023-01-01'     and tx_hash != '56MWdW7NPvfsy6bNctxe3fn6oVP3NfzLoQut9fCQkMm1' -- broken args ), primary_modules as ( select    block_timestamp,   method_name,   tx_hash,   args from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)     and block_timestamp::date >= '2023-01-01' ) select * from primary_modules  where args ilike '%flipside%'   or args ilike '%shroomdk%' limit 10
2d680e5d-607e-4e2b-befe-32b5511c4fba,2023-01-17 11:56 AM,select   block_timestamp,   platform_name,   aggregator_name,   tokenid,   price,   creator_fee,   creator_fee / price * 100 as cfee_pct from ethereum.core.ez_nft_sales where tx_hash = '0x77b9f175b3a331a576e627fdbffc345e5c52b27b0c6d99fde6a0428e8e330ff1'
25dc979d-e3dc-49e4-8924-6f1c742172fe,Untitled Query,
8abc9aba-bd34-4de9-a0cb-3cd12e071339,Flow May 2 activity plot,-- forked from Flow May 2 Top Event Contracts @ https://flipsidecrypto.xyz/edit/queries/42a23231-fca6-4876-901f-3f5a26ec0985 -- forked from Flow May 2 Txs from New Payers @ https://flipsidecrypto.xyz/edit/queries/ac9e9bfa-8777-4e29-aa89-75f75563d14b with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       payer in (         select           payer         from           new_payers       ) as _new_payer,       payer,       block_timestamp,       tx_id     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'   ) select   date_trunc('hour', block_timestamp) as _time,   _new_payer,   count(1) as txs from   may_txs group by   1,   2 order by   1
00073534-ea5e-45f9-8f3e-ce13088fcec4,Untitled Query,select 	date_trunc('d',block_timestamp),   	count(1)    from anchor.collateral group by 1
4facef4b-4fd6-48a7-9048-81cedc932751,Untitled Query,select * from terra.msgs where tx_id = 'F30DCD4D3626EF0E8AFF72811BA8506757B931049A21CC6D9E07ED23952B3A5C'
e769b4c3-96d8-41d0-88f3-a6e446fee642,Untitled Query,select * from flow.core.fact_blocks limit 10
4bb790d2-ec48-418a-aa9f-25081978ebab,Untitled Query,SELECT block_timestamp::date as dayte, count(distinct tx_id) as txs from osmosis.core.fact_transactions where block_timestamp::date >= '2022-01-01' group by 1 order by 1
3e130244-5cb9-4c72-8912-732239e65297,Beer is NEAR, Latest Transactions,WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE >= '2022-09-11' ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE >= '2022-09-11' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE >= '2022-09-11'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE >= '2022-09-11'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ) select   block_timestamp as "Time (UTC)",   currency,   deposit_amount as "Amount",   spender,   tx_hash_spender,   tx_hash_beertruck_transfer from final order by block_timestamp desc
3ef7c9a1-b712-41b3-8319-933ee81fbf37,2023-01-20 03:35 PM,SELECT *, SUM(smart_contracts) over (order by date) as cum_smart_contracts, 'Successful Creations' as status FROM ( SELECT 	date_trunc('month', call.block_timestamp) as date,     COUNT(DISTINCT tr.TX_RECEIVER) as smart_contracts  FROM near.core.fact_actions_events_function_call call INNER JOIN near.core.fact_transactions tr ON call.TX_HASH = tr.TX_HASH INNER JOIN near.core.fact_receipts as rc ON tr.TX_HASH=rc.TX_HASH 	WHERE ACTION_NAME = 'FunctionCall'   	AND split(split(rc.status_value,':')[0],'{')[1]  ilike '%Success%'     AND METHOD_NAME = 'new'   	AND date < CURRENT_DATE GROUP BY date ) UNION DISTINCT SELECT *, SUM(smart_contracts) over (order by date) as cum_smart_contracts, 'Failed Creations' as status FROM ( SELECT 	date_trunc('month', call.block_timestamp) as date,     COUNT(DISTINCT tr.TX_RECEIVER) as smart_contracts  FROM near.core.fact_actions_events_function_call call INNER JOIN near.core.fact_transactions tr ON call.TX_HASH = tr.TX_HASH INNER JOIN near.core.fact_receipts as rc ON tr.TX_HASH=rc.TX_HASH 	WHERE ACTION_NAME = 'FunctionCall'     AND split(split(rc.status_value,':')[0],'{')[1]  ilike '%Failure%'     AND METHOD_NAME = 'new'   	AND date < CURRENT_DATE GROUP BY date )
e7f59226-9d08-40be-a0ce-b40b50958e24,Untitled Query,
f028303b-fdfd-43b7-b2fc-8cb92be7cce5,2023-04-25 09:41 AM,select min (block_number) from ethereum.core.fact_traces
f090017b-1fde-4167-ba2f-1c99d5ca8efe,type of top address [2] [T49],WITH balances AS ( SELECT balance, CASE   WHEN address_label IS NULL THEN 'other'   WHEN address = 'terra169urmlm8wcltyjsrn7gedheh7dker69ujmerv2' THEN 'mirror'   WHEN address_label = 'TerraSwap' THEN 'terraswap'   WHEN address = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'terra'   ELSE address_label END AS label FROM terra.daily_balances WHERE currency = 'UST' 	AND date = CURRENT_DATE     AND balance > 9500000 ) SELECT   label,   sum(balance) FROM balances GROUP BY 1 ORDER BY 2 desc
f08e6937-dcca-4050-80c9-55c91a248ea3,DEX, Token Volume,with prices as ( select    date_trunc('hour', timestamp) as _hour,   token_contract,   avg(price_usd) as avg_hourly_price from near.core.fact_prices where timestamp::date >= '2023-01-01' group by 1,2 ), swaps as ( select    date_trunc('hour', block_timestamp) as _hour,   token_in_contract,   token_in_amount,   token_in,   p.avg_hourly_price as token_in_price,   token_out_contract,   token_out_amount,   token_out,   p2.avg_hourly_price as token_out_price from near.core.ez_dex_swaps s left join prices p on s.token_in_contract = p.token_contract left join prices p2 on s.token_out_contract = p2.token_contract where block_timestamp::date >= '2023-01-01' ), volume as ( select * from swaps where token_in_price is not null   and token_out_price is not null ) select * from volume limit 10
f0d11fdf-c9ad-4e78-873f-520797d4ce10,Untitled Query,with    sweat_receivers as ( select   tx_receiver,   min(block_timestamp) as first_reciept_date from near.core.fact_transactions   where tx_status = 'Success'   and block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_signer = 'sweat_welcome.near' group by 1 ),   new_signers as ( SELECT    tx_signer,   min(block_timestamp) as first_signing_date FROM near.core.fact_transactions WHERE tx_status = 'Success' 	AND block_timestamp::DATE >= '2022-09-01'   	AND block_timestamp::DATE <= '2022-12-31'     and tx_signer in (select tx_receiver from sweat_receivers) GROUP BY 1 ) select * from new_signers limit 10
437f657c-ddd1-42c0-9e83-8623097817e5,Untitled Query,select * from flow.core.fact_prices order by timestamp DESC limit 100;
f221bb74-c57c-4952-89f1-7112e4b75afc,NVG8,with nvg as ( select      block_timestamp,     tx_hash,     event_inputs:from::string as from_adr,     event_inputs:to::string as to_adr,     event_inputs:value::number / pow(10,18) as amount   from polygon.core.fact_event_logs   where contract_address = '0x3eae98a7984794a99acc550a197039abf4c6c9d5' 	and event_name = 'Transfer' ) select to_adr, sum(amount) from nvg group by 1 order by 2 desc
e8488b8d-4909-48ee-ac78-c40760c5a39e,MDAO Workshop - Anchor Collateral - Average Transaction Size,select   date_trunc('d',block_timestamp) as date,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1 order by 1
8b5856cc-3d2d-4e52-afdf-6e19ae85862c,ANC terraswap volume [T57],-- Buying token with UST // UST -> token swap WITH buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(token) as quantity_bought,   sum(ust) as volume_bought FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as token FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1gm5p3ner9x9xpwugn9sp6gvhd0lwrtkyrecdn3' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra14z56l0fp2lsf86zy3hty2z47ezkhnthtr9yq76' -- ANC token ) GROUP BY 1 ORDER BY 1), -- Selling token to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(token) as quantity_sold,   sum(ust) as volume_sold FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as token,   event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra14z56l0fp2lsf86zy3hty2z47ezkhnthtr9yq76' -- ANC token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1gm5p3ner9x9xpwugn9sp6gvhd0lwrtkyrecdn3' -- swap contract ) GROUP BY 1 ORDER BY 1) SELECT   buys.date,   -- quantity_bought,   volume_bought,   -- -quantity_sold as sold_neg,   volume_sold,   -- quantity_bought - quantity_sold as net_daily_token_volume,   volume_bought + volume_sold as gross_volume_buy_sell FROM buys JOIN sells ON sells.date = buys.date WHERE buys.date > GETDATE() - interval '2 weeks' ORDER BY 1
b9999add-1c2b-4657-8051-81fc48498717,Atlas - Cosmose Cohort,with cohort as ( 	select distinct tx_signer, min(date_trunc('month', block_timestamp))::date as created_month 	from near.core.fact_transactions 	where tx_receiver in ('wallet.kaiching', 'earn.kaiching')   group by 1 ), final as (   select     date_trunc('month', block_timestamp) as month_of,     created_month,     datediff(month, created_month, date_trunc('day', block_timestamp)) as months_since,     count(distinct t.tx_signer) as active_users,     count(tx_hash) as transactions   from near.core.fact_transactions t     left join cohort c       on t.tx_signer = c.tx_signer   where t.tx_receiver in ('wallet.kaiching', 'earn.kaiching')   and c.created_month >= '2022-09-01'::date   group by all ) select   f1.created_month::date as created_month,   f1.months_since,   f2.active_users as cohort_size,   f1.active_users,   f1.active_users / f2.active_users as retention_rate from final f1   left join final f2    on f1.created_month = f2.created_month and f2.months_since = 0   where f1.month_of < current_date() order by 1, 2
d75c2bea-43be-4eb1-953a-8893174f9674,UFC Event Examples,select   event_contract,   event_type,    count(distinct tx_id) as event_ct,   any_value(event_data) as event_data from flow.core.fact_events where    event_contract ilike '%e2a89587100c6096%'   or event_contract ilike '%7ea91850463865f4%'   or event_contract = 'A.329feb3ab062d289.UFC_NFT' group by 1, 2
699a353e-2538-4000-a054-2c941800f31b,Terra-BSC Bridge Inbound Volume by Asset [T104],with  -- terra_bsc as ( --   select      --     block_timestamp, --     event_from as sender, --     event_amount as amount, --     event_amount_usd as amount_usd, -- 	event_currency as currency, --     tx_id      --   from terra.transfers --   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' -- ), bsc_terra as (   select        block_timestamp,     event_to as recipient,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id   from terra.transfers   where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), labels as (   select * from terra.labels ), -- terra_bsc_agg as ( --   select --   	date_trunc('day', block_timestamp) as date, --   	currency, --   	sum(amount) as amount, --     sum(amount_usd) as amount_usd --   from terra_bsc --   group by 1,2 -- ), bsc_terra_agg as (   select   	date_trunc('day', block_timestamp) as date,     currency,     sum(amount) as amount,     sum(amount_usd) as amount_usd   from bsc_terra   group by 1,2 ), named as (   select * from bsc_terra_agg   left join labels on bsc_terra_agg.currency = labels.address ), final as (   select     date,     currency,     case when address_name is null then currency else address_name end as address_name,     amount,     amount_usd   from named   where date > '2021-01-24T00:00:00Z'   	and currency is not null   	and amount_usd > 100   ) select * from final
4e0f19db-38fe-4953-adde-261a2ae9b8b8,Atlas - Cohort - Param List,-- forked from Atlas - Cohort - Param @ https://flipsidecrypto.xyz/edit/queries/bf90ed06-ac46-4739-b438-652347bb233a -- forked from Atlas - Cosmose Cohort @ https://flipsidecrypto.xyz/edit/queries/b9999add-1c2b-4657-8051-81fc48498717  with cohort as ( 	select distinct tx_signer, min(date_trunc('month', block_timestamp))::date as created_month 	from near.core.fact_transactions 	where tx_receiver in ({{tx_receivers}})   group by 1 ), final as (   select     date_trunc('month', block_timestamp) as month_of,     created_month,     datediff(month, created_month, date_trunc('day', block_timestamp)) as months_since,     count(distinct t.tx_signer) as active_users,     count(tx_hash) as transactions   from near.core.fact_transactions t     left join cohort c       on t.tx_signer = c.tx_signer   where t.tx_receiver in ({{tx_receivers}})   and c.created_month >= '2022-09-01'::date   group by all ) select   f1.created_month::date as created_month,   f1.months_since,   f2.active_users as cohort_size,   f1.active_users,   f1.active_users / f2.active_users as retention_rate from final f1   left join final f2    on f1.created_month = f2.created_month and f2.months_since = 0   where f1.month_of < current_date() order by 1, 2
59947801-8298-4efe-82c9-d4c6f6c651df,2023-11-20 10:23 AM,select * from flow.core.dim_contract_labels where contract_name ilike '%ufc%'
9d9e6ba2-7025-49e4-9415-0ecf19f1351a,UFC Burn Event,SELECT * FROM   flow.core.fact_events WHERE   EVENT_CONTRACT = 'A.e2a89587100c6096.AshesV2'   AND EVENT_DATA:ashMeta IS NOT NULL   AND BLOCK_TIMESTAMP >= '2023-10-01' ORDER BY block_timestamp DESC;
0b3190a7-23a8-4e1c-a64a-15c452c5eea1,Untitled Query,select   date_trunc('d',block_timestamp) as date,   contract_label,   sum(amount_usd) as gross_volume       from anchor.collateral group by 1,2 order by 1
5739ceec-704b-4ba3-9c97-088f1936bc07,ticket-0366-solana-nft,select * from solana.fact_nft_mints where mint in (     'HHdxR6Wg3vWgYu3APs2AfFst7hWKiCsBhnfcbsb7kKrE',     'Ct4u2ibs8zbnJVP8ajsv3rW3aGRvQK7sx8vtK2x11U1a',     'CkEWZRWx9bZDsnxC68XUmFDus6tWLMHC6FN9nnyesm3h',     'BZD2r28ypsdTtpH1wtsLxcsiePNiQXak5LkawYnWTFaQ' )
f7c551ba-baeb-43e6-a3fe-5668af173a86,Sushiswap Volume Breakdown [c1],SELECT   date_trunc('day', block_timestamp) as date,   to_address_name,   sum(amount) FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - INTERVAL '90 days'   AND to_label = 'sushiswap' GROUP BY 1, 2
7a330b7d-ca81-403a-b71a-4f6d2bfdbdd1,Spot ETFs Issuers Over Time, Gross Balance,-- forked from alitaslimi / Spot ETFs Issuers Over Time @ https://flipsidecrypto.xyz/alitaslimi/q/PBn_N42H5-mk/spot-etfs-issuers-over-time with -------------------- BTC Price --------------------   prices as (     select       price     from       bitcoin.price.ez_hourly_token_prices     qualify       hour = last_value(hour) over (order by hour)   ), -------------------- Issuers --------------------   issuers as (     select       ft.value:TICKER as ticker,       ft.value:TYPE as type,       ft.value:ISSUER as issuer,       ft.value:FEE as fee     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/55326770-94da-422b-a25e-1c37943c536f/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Dates --------------------   dates as (     select       date_day as date,       issuer,       ticker     from       crosschain.core.dim_dates,       issuers     where       date_day between '2018-01-01' and current_date   ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_inputs inputs       join addresses on inputs.pubkey_script_address = addresses.address   ),   outputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_outputs outputs       join addresses on outputs.pubkey_script_address = addresses.address   ), -------------------- Flows --------------------   inflows as (     select       date_trunc('day', outputs.block_timestamp) as date,       issuers.ticker,       issuers.issuer,       sum(outputs.value) as volume     from       prices,       outputs       join issuers on outputs.ticker = issuers.ticker     where       issuers.type = 'Spot'     group by       date,       issuers.ticker,       issuers.issuer   ),   outflows as (     select       date_trunc('day', inputs.block_timestamp) as date,       issuers.ticker,       issuers.issuer,       sum(inputs.value) as volume     from       prices,       inputs       join issuers on inputs.ticker = issuers.ticker     where       issuers.type = 'Spot'     group by       date,       issuers.ticker,       issuers.issuer   ) -------------------- Output -------------------- , output AS ( select   dates.date as "Date",   dates.issuer as "Issuer",   dates.ticker as "Ticker",   zeroifnull(inflows.volume) as "Inflow",   zeroifnull(outflows.volume) as "Outflow",   "Inflow" - "Outflow" as "Netflow",   sum("Netflow") over (partition by "Ticker" order by "Date") as "Balance",   round("Balance" * prices.price) as "AUM" from   prices,   dates   left join inflows on dates.date = inflows.date     and dates.ticker = inflows.ticker   left join outflows on dates.date = outflows.date     and dates.ticker = outflows.ticker having   "Date" >= '2018-01-01' qualify   "Balance" > 0 order by   "Date" desc,   "Balance" desc  )
41f219ce-a2c6-4609-9b10-6502949f6b3b,CRV Token on DEX Swaps $ Volume [C1],WITH prices AS (   SELECT      hour,     price   FROM ethereum.token_prices_hourly   WHERE symbol = 'CRV'     AND hour > CURRENT_DATE - INTERVAL '90 days'   ), swaps AS (   SELECT      date_trunc('hour', block_timestamp) as trade_date,     sum(amount) as crv_volume   FROM ethereum.udm_events a   WHERE symbol LIKE 'CRV%'     AND block_timestamp > CURRENT_DATE - INTERVAL '90 days'     AND (to_label LIKE 'uni%'     OR from_label LIKE 'uni%'     OR to_label LIKE 'sushi%'     OR from_label LIKE 'sushi%')   GROUP BY 1   ), refactor AS (   SELECT     date_trunc('day', trade_date) as trade_date,     sum(usd_volume) as usd_volume   FROM (     SELECT       trade_date, -- hourly        crv_volume,       crv_volume * price as usd_volume     FROM swaps     JOIN prices       ON prices.hour = swaps.trade_date     )   GROUP BY 1   ) SELECT   trade_date,   usd_volume,   avg(usd_volume) OVER (ORDER BY trade_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM refactor
5485fc00-82d3-4220-aadf-c69ae9c930d9,Untitled Query,select count(distinct nft_id) from flow.core.dim_topshot_metadata;
4659f8db-34bd-4a8d-b762-f2fac3f3a35e,CRV Stable Swaps [CRV7],with stable_swaps as (   select   	*   from ethereum.dex_swaps        where platform = 'curve'     and pool_address in (     	'0x52ea46506b9cc5ef470c5bf89f17dc28bb35d85c', -- usdt     	'0x79a8c46dea5ada233abaffd40f3a0a2b1e5a4f27', -- busd     	'0xa5407eae9ba41422680e2e00537571bcc53efbfd', -- susd     	'0x5a6a4d54456819380173272a5e8e9b9904bdf41b', -- mim     	'0x890f4e345b1daed0367a877a1612f86a1f86985f', -- ust     	'0x55a8a39bc9694714e2874c1ce77aa1e599461e18', -- mim-ust     	'0x4f062658eaaf2c1ccf8c8e36d6824cdf41167956', -- gusd     	'0x06cb22615ba53e60d67bf6c341a0fd5e718e1655', -- fei     	'0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7' -- 3pool     )     and block_timestamp > CURRENT_DATE - interval '90 days' ), labels as (   select '0x52ea46506b9cc5ef470c5bf89f17dc28bb35d85c' as address, 'usdt' as token   union   select     	'0x79a8c46dea5ada233abaffd40f3a0a2b1e5a4f27' as address, 'busd' as token   union   select     	'0xa5407eae9ba41422680e2e00537571bcc53efbfd' as address, 'susd' as token   union   select     	'0x5a6a4d54456819380173272a5e8e9b9904bdf41b' as address, 'mim' as token   union   select     	'0x890f4e345b1daed0367a877a1612f86a1f86985f' as address, 'ust' as token   union   select     	'0x55a8a39bc9694714e2874c1ce77aa1e599461e18' as address, 'mim-ust' as token   union   select     	'0x4f062658eaaf2c1ccf8c8e36d6824cdf41167956' as address, 'gusd' as token     union   select     	'0x06cb22615ba53e60d67bf6c341a0fd5e718e1655' as address, 'fei' as token   union   select     	'0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7' as address, '3pool' as token ), volume_in as (   select     date_trunc('w', block_timestamp) as week,     pool_address as address, 	direction, 	sum(amount_usd) as amount   from stable_swaps   -- where direction = 'IN'   group by 1,2,3   order by 1    ), final as (   select * from volume_in   left join labels using (address) ) select * from final
24e26644-f873-4a56-b6c5-c1869fb2af51,Untitled Query,select count(distinct nft_id) from flow.core.dim_topshot_metadata
55cd47fb-75ea-416b-ad7f-77e32bfc63d5,Terra-BSC Bridge users by action [T104],with tb_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_attributes:recipient = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     AND block_timestamp > '2021-01-24T00:00:00Z'   ), tb_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_attributes:sender = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     and block_timestamp > '2021-01-24T00:00:00Z'   ), tb_wallets AS (   SELECT *, 'outbound' as direction FROM tb_outbound   UNION   SELECT *, 'inbound' as direction FROM tb_inbound   ), tb_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     direction,     count(distinct address) as unique_wallets   FROM tb_wallets   GROUP BY 1,2   ) select 	* from tb_unique
1a53294f-f0e9-40cd-8362-72c0a8ca00ce,Untitled Query,select      CASE WHEN NFT_COLLECTION = 'A.e4cf4bdc1751c65d.PackNFT' OR NFT_COLLECTION = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation   		WHEN NFT_COLLECTION = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation   		WHEN NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzMarketplace' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzDrops' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation   		WHEN NFT_COLLECTION = 'A.bae9e93397796df2.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation   		WHEN NFT_COLLECTION IN ('A.12450e4bb3b7666e.Genies', 'A.f018642f0ebeca21.Genies', 'A.f018642f0ebeca21.GeniesShardedCollection', 'A.12450e4bb3b7666e.GeniesShardedCollection', 'A.9c2234b992667d22.GeniesShardedCollection') THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation   		WHEN NFT_COLLECTION = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation   		WHEN NFT_COLLECTION IN ('A.9969d64233d69723.Blockletes_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT_V2', 'A.329feb3ab062d289.BlockleteGames_NFT') THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation   		WHEN NFT_COLLECTION IN ('A.329feb3ab062d289.AtlantaHawks_NFT', 'A.14c2f30a9e2e923f.AtlantaHawks_NFT', 'A.329feb3ab062d289.AtlantaNft_NFT') THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation 		WHEN NFT_COLLECTION IN ('A.921ea449dffec68a.Flovatar', 'A.921ea449dffec68a.FlovatarMarketplace', 'A.921ea449dffec68a.FlovatarComponentTemplate', 'A.921ea449dffec68a.FlovatarComponent', 'A.921ea449dffec68a.Flobot', 'A.921ea449dffec68a.FlovatarPack') THEN 'A.921ea449dffec68a.Flovatar' -- Flovatar Aggregation   		WHEN NFT_COLLECTION IN ('A.8529aaf64c168952.MonoCat', 'A.8529aaf64c168952.MonoPaymentMinter', 'A.8529aaf64c168952.MonoGold', 'A.8529aaf64c168952.MonoCatMysteryBox', 'A.8529aaf64c168952.MonoSilver') THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation   		WHEN NFT_COLLECTION = 'A.01ab36aaf654a13e.RaribleNFT' AND NFT_ID IN (14813,15023,14797,14881,15004,15026,14998,15013,14946,14808,14899,14792,15016,14961,14816,14796,14992,14977,14815,14863,14817,14814,14875,14960,14985,14850,14849,14966,14826,14972,14795,15021,14950,14847,14970,14833,14786,15010,14953,14799,14883,14947,14844,14801,14886,15015,15027,15029,14802,14810,14948,14955,14957,14988,15007,15009,14837,15024,14803,14973,14969,15002,15017,14894,15025,14791,14979,14789,14993,14873,14939,15005,15006,14869,14889,15008,14990,14898,14819,14840,14974,15019,14856,14838,14787,14876,14996,14798,14855,14824,14843,14959,15020,14862,14822,14897,14830,14790,14867,14878,14991,14835,14818,14892,14800,15000,14857,14986,14805,14812,14962) THEN 'A.ce4c02539d1fabe8.FlowverseSocks' -- Sock aggregation    		ELSE NFT_COLLECTION END AS NFT_COLLECTION   ,	CASE WHEN CURRENCY IN ('A.ead892083b3e2c6c.DapperUtilityCoin', 'A.4eded0de73020ca5.FazeUtilityCoin', 'A.3c5959b568896393.FUSD', 'A.b19436aae4d94622.FiatToken', 'A.011b6f1425389550.NWayUtilityCoin', 'A.e2e1689b53e92a82.AniqueCredit') THEN 'USD'    		WHEN CURRENCY IN ('A.1654653399040a61.FlowToken', 'A.ead892083b3e2c6c.FlowUtilityToken') THEN 'FLOW'   		WHEN CURRENCY IN ('A.d01e482eb680ec9f.REVV') THEN 'REVV'   		ELSE CURRENCY END AS CURRENCY   , SUM(PRICE) AS volume_alltime   ,	COUNT(PRICE) AS sales_alltime   ,	volume_alltime / sales_alltime AS avg_price_alltime   , COUNT( DISTINCT BUYER) AS unique_buyers_alltime   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -60, GETDATE()) AND DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End) AS volume_30_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End ) AS volume_30   , (volume_30/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -60, GETDATE()) AND DATEADD(day, -30, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_30 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) Then 1 Else 0 End ) AS sales_30   ,	CASE WHEN sales_30 > 0 THEN volume_30 / sales_30 ELSE 0 End AS avg_price_30   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_30   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -14, GETDATE()) AND DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End) AS volume_7_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End ) AS volume_7   , (volume_7/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -14, GETDATE()) AND DATEADD(day, -7, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_7 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) Then 1 Else 0 End ) AS sales_7   ,	CASE WHEN sales_7 > 0 THEN volume_7 / sales_7 ELSE 0 End AS avg_price_7   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_7   , SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -2, GETDATE()) AND DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End) AS volume_1_prev   , SUM(CASE When BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End ) AS volume_1   , (volume_1/NULLIF(SUM(CASE When BLOCK_TIMESTAMP BETWEEN DATEADD(day, -2, GETDATE()) AND DATEADD(day, -1, GETDATE()) Then PRICE Else 0 End),0)) -1 AS growth_1 -- want to return "-" instead of 0   ,	sum(CASE When BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) Then 1 Else 0 End ) AS sales_1   ,	CASE WHEN sales_1 > 0 THEN volume_1 / sales_1 ELSE 0 End AS avg_price_1   , count(DISTINCT (case when BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) > 0 then BUYER ELSE NULL End)) AS unique_buyers_1 from FLOW.CORE.EZ_NFT_SALES where TX_SUCCEEDED = TRUE GROUP BY  CASE WHEN NFT_COLLECTION = 'A.e4cf4bdc1751c65d.PackNFT' OR NFT_COLLECTION = 'A.329feb3ab062d289.NFL_NFT' THEN 'A.e4cf4bdc1751c65d.AllDay' -- NFL All Day Aggregation   		WHEN NFT_COLLECTION = 'A.427ceada271aa0b1.SturdyTokens' THEN 'A.427ceada271aa0b1.SturdyItems' -- Sturdy Exchange Aggregation   		WHEN NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzMarketplace' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzDrops' OR NFT_COLLECTION = 'A.62b3063fbe672fc8.ZeedzINO' THEN 'A.62b3063fbe672fc8.ZeedzINO' -- Zeedz Aggregation   		WHEN NFT_COLLECTION = 'A.bae9e93397796df2.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeNFT' OR NFT_COLLECTION = 'A.5a8fb12692f5a446.CheezeVouchers' THEN 'A.5a8fb12692f5a446.CheezeVouchers' -- Cheeze Aggregation   		WHEN NFT_COLLECTION IN ('A.12450e4bb3b7666e.Genies', 'A.f018642f0ebeca21.Genies', 'A.f018642f0ebeca21.GeniesShardedCollection', 'A.12450e4bb3b7666e.GeniesShardedCollection', 'A.9c2234b992667d22.GeniesShardedCollection') THEN 'A.12450e4bb3b7666e.Genies' -- Genies Aggregation   		WHEN NFT_COLLECTION = 'A.f2af175e411dfff8.MetaPanda' THEN 'A.f2af175e411dfff8.MetaPandaAirdropNFT' -- Meta Panda Club Aggregation   		WHEN NFT_COLLECTION IN ('A.9969d64233d69723.Blockletes_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT', 'A.9969d64233d69723.BlockleteMarket_NFT_V2', 'A.329feb3ab062d289.BlockleteGames_NFT') THEN 'A.329feb3ab062d289.BlockleteGames_NFT' -- Blocklete Aggregation   		WHEN NFT_COLLECTION IN ('A.329feb3ab062d289.AtlantaHawks_NFT', 'A.14c2f30a9e2e923f.AtlantaHawks_NFT', 'A.329feb3ab062d289.AtlantaNft_NFT') THEN 'A.329feb3ab062d289.AtlantaNft_NFT' -- Atlanta Hawks Aggregation 		WHEN NFT_COLLECTION IN ('A.921ea449dffec68a.Flovatar', 'A.921ea449dffec68a.FlovatarMarketplace', 'A.921ea449dffec68a.FlovatarComponentTemplate', 'A.921ea449dffec68a.FlovatarComponent', 'A.921ea449dffec68a.Flobot', 'A.921ea449dffec68a.FlovatarPack') THEN 'A.921ea449dffec68a.Flovatar' -- Flovatar Aggregation   		WHEN NFT_COLLECTION IN ('A.8529aaf64c168952.MonoCat', 'A.8529aaf64c168952.MonoPaymentMinter', 'A.8529aaf64c168952.MonoGold', 'A.8529aaf64c168952.MonoCatMysteryBox', 'A.8529aaf64c168952.MonoSilver') THEN 'A.8529aaf64c168952.MonoCatMysteryBox' -- MonoCat Aggregation   		WHEN NFT_COLLECTION = 'A.01ab36aaf654a13e.RaribleNFT' AND NFT_ID IN (14813,15023,14797,14881,15004,15026,14998,15013,14946,14808,14899,14792,15016,14961,14816,14796,14992,14977,14815,14863,14817,14814,14875,14960,14985,14850,14849,14966,14826,14972,14795,15021,14950,14847,14970,14833,14786,15010,14953,14799,14883,14947,14844,14801,14886,15015,15027,15029,14802,14810,14948,14955,14957,14988,15007,15009,14837,15024,14803,14973,14969,15002,15017,14894,15025,14791,14979,14789,14993,14873,14939,15005,15006,14869,14889,15008,14990,14898,14819,14840,14974,15019,14856,14838,14787,14876,14996,14798,14855,14824,14843,14959,15020,14862,14822,14897,14830,14790,14867,14878,14991,14835,14818,14892,14800,15000,14857,14986,14805,14812,14962) THEN 'A.ce4c02539d1fabe8.FlowverseSocks' -- Sock aggregation    		ELSE NFT_COLLECTION END,      		CASE WHEN CURRENCY IN ('A.ead892083b3e2c6c.DapperUtilityCoin', 'A.4eded0de73020ca5.FazeUtilityCoin', 'A.3c5959b568896393.FUSD', 'A.b19436aae4d94622.FiatToken', 'A.011b6f1425389550.NWayUtilityCoin', 'A.e2e1689b53e92a82.AniqueCredit') THEN 'USD'    		WHEN CURRENCY IN ('A.1654653399040a61.FlowToken', 'A.ead892083b3e2c6c.FlowUtilityToken') THEN 'FLOW'   		WHEN CURRENCY IN ('A.d01e482eb680ec9f.REVV') THEN 'REVV'   		ELSE CURRENCY END    UNION ALL      SELECT    'PrimarySalesOnly.A.20187093790b9aef.Pickem' AS NFT_COLLECTION , 'USD' AS CURRENCY  , SUM(VOLUME) AS volume_alltime , SUM(SALES) AS sales_alltime , 50 AS AVG_PRICE_ALLTIME , COUNT(DISTINCT ADDRESS) AS unique_buyers_alltime , 0 AS volume_30_prev , SUM(CASE WHEN time_period IN ('TIME_1', 'TIME_7', 'TIME_30') THEN VOLUME else 0 END) AS volume_30 , NULL AS growth_30 , SUM(CASE WHEN time_period IN ('TIME_1','TIME_7', 'TIME_30') THEN SALES else 0 END) AS sales_30 , 50 AS AVG_PRICE_30 , COUNT(DISTINCT(CASE WHEN time_period IN ('TIME_1','TIME_7', 'TIME_30') THEN ADDRESS ELSE NULL END))  AS unique_buyers_30 , 0 AS volume_7_prev , SUM(CASE WHEN time_period IN ('TIME_1','TIME_7') then VOLUME else 0 END) AS volume_7 , NULL AS growth_7 , SUM(CASE WHEN time_period IN ('TIME_1','TIME_7') then SALES else 0 END) AS sales_7 , 50 AS AVG_PRICE_7 , COUNT(DISTINCT(CASE WHEN time_period IN ('TIME_1', 'TIME_7') THEN ADDRESS ELSE NULL END))  AS unique_buyers_7 , 0 as volume_1_prev , SUM(CASE WHEN time_period = 'TIME_1' then VOLUME else 0 END) AS volume_1 , NULL as growth_1 , SUM(CASE WHEN time_period = 'TIME_1' then SALES else 0 END) AS sales_1 , 50 AS AVG_PRICE_1 , COUNT(DISTINCT(CASE WHEN time_period = 'TIME_1' THEN ADDRESS ELSE NULL END))  AS unique_buyers_1 FROM  (   SELECT      DISTINCT event_data['to'] AS address     , CASE WHEN BLOCK_TIMESTAMP > DATEADD(day, -1, GETDATE()) Then 'TIME_1'   	 WHEN BLOCK_TIMESTAMP > DATEADD(day, -7, GETDATE()) Then 'TIME_7'   	 WHEN BLOCK_TIMESTAMP > DATEADD(day, -30, GETDATE()) Then 'TIME_30'     	   ELSE 'TIME_ALL' END AS time_period     , count(*) * 50 AS volume     , count(*) AS sales   FROM FLOW.CORE.fact_events    WHERE event_contract = 'A.20187093790b9aef.Pickem' and event_type = 'Deposit' and ADDRESS <> '0x20187093790b9aef'   and TX_ID in (SELECT TX_ID FROM FLOW.CORE.fact_events  WHERE event_contract = 'A.20187093790b9aef.Pickem' and event_type = 'Withdraw' AND event_data['from'] = '0x20187093790b9aef')   GROUP BY address, time_period )
596f0037-c9bf-4480-8e0d-c17c56ceab39,Untitled Query,
145cd91d-3bab-4732-91c5-bffd5f32a601,bLUNA costs,SELECT 	date_trunc('hour', block_timestamp) as hourly,   	avg(msg_value:execute_msg:send:msg:swap:belief_price::float) as swap_price,   	avg(msg_value:execute_msg:send:msg:swap:max_spread::float) as spread FROM terra.msgs WHERE (block_timestamp LIKE '2021-06-22%' OR block_timestamp LIKE '2021-06-23%') 	AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   	AND msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p'  	AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1 asc
6e05ec8a-791e-459b-849d-25a3ba6943eb,NFT Volume on Polygon via events_emitted,SELECT * FROM polygon.events_emitted -- WHERE contract_address = lower('0xF715bEb51EC8F63317d66f491E37e7BB048fCc2d') -- opensea WHERE tx_id = '0xf5c19ddef7bd2310eb98f10686af9b64979bf7c30c2288e1ca346dc72e9ed0cf'   -- AND to_address = '0xf715beb51ec8f63317d66f491e37e7bb048fcc2d' -- opensea marketplace address   -- there's a symbol, amount and amount_usd for the transfer. lot's of duplicate numbers as the tx has multiple events LIMIT 100
6ddc89a3-92c2-4eb0-a1f5-9db3177ef6fa,16 ETH Shuttle to Terra,SELECT date_trunc('day', block_timestamp) as date,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' 	AND block_timestamp > GETDATE() - interval '6 months'   	AND tx_status = 'SUCCEEDED' GROUP BY 1,2 ORDER BY 1
fb03e6db-9af2-41cd-803a-5f798f782e06,yfi swap for matic [P HUNT],SELECT   block_timestamp,   tx_id,   to_label_subtype,   to_address_name FROM polygon.transactions WHERE tx_id = '0xc9f6299d3af6c971947b4efacb1c3fa33fb83160d5b024153d94fd4ac24b9339'
8870d186-17ff-49c2-8174-931370eab0da,Untitled Query,WITH borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1 ), repay as (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ORDER BY 1   ), earn as (   select    	*,     daily_borrow_amount - daily_repay_amount as net_daily_borrow   from borrow   left join repay using (date) ), final as (   select     date,     daily_borrow_amount,     daily_repay_amount,   	net_daily_borrow,   	coalesce(loan_autorepay_amount,0) as loan_autorepay,   	net_daily_borrow - loan_autorepay as final_net_daily_borrow   from earn   left join liquidations using (date) )    SELECT   *,   SUM(net_daily_borrow) OVER (ORDER BY date) as cumulative_borrow_no_liquidations,   SUM(final_net_daily_borrow) OVER (ORDER BY date) as cumulative_borrow_w_liquidations FROM final
5cfba375-bd58-4ebe-a3f2-598b78dec57b,Untitled Query,select   date_trunc('d',block_timestamp) as date,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1 order by 1
c4ff54c6-f086-44c6-8822-56f242e1f3fa,anchor liquidations [T33],-- select * from terra.msgs a where msg_value:execute_msg LIKE '%liquidate_collateral%' -- select * from terra.msg_events where tx_id = 'A1A5A3F930DBF3182A126844DA670D001EAC2973F24AECE6D930430CCB3033DD' -- PULL LIQUIDATION TX IDS AND THEIR MESSAGES -- WITH liquid as ( --   SELECT distinct tx_id --   FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%' --   AND tx_status = 'SUCCEEDED' --   AND block_timestamp > '2021-07-01T00:00:00Z') -- SELECT * -- FROM terra.msg_events a -- RIGHT JOIN liquid ON liquid.tx_id = a.tx_id -- WHERE block_timestamp > '2021-07-01T00:00:00Z' -- ORDER BY 2, 5 -- AGGREGATE LIQUIDATIONS -- SELECT -- 	date_trunc('day', block_timestamp), --   	sum(event_attributes:"0_amount"::float) / pow(10,6) as bLUNA_liquidated -- FROM terra.msg_events -- WHERE event_attributes:"0_action" LIKE '%liquidate_collateral%' -- GROUP BY 1 -- ORDER BY 1 -- COUNT OF EVENT TYPE WITH liquid as (   SELECT distinct tx_id   FROM terra.msgs WHERE msg_value:execute_msg LIKE '%liquidate_collateral%'   AND tx_status = 'SUCCEEDED'   -- AND block_timestamp > '2021-06-01T00:00:00Z' ) SELECT 	date_trunc('day', block_timestamp) as date, 	event_type, 	count(*) FROM terra.msg_events a RIGHT JOIN liquid ON liquid.tx_id = a.tx_id -- WHERE block_timestamp > '2021-06-01T00:00:00Z' GROUP BY 1, 2 ORDER BY 1, 3 desc
65c7ea08-eb13-4c32-a96c-1a5262471d10,Copy of AVAX as Collateral, by day,with daily_agg as (   select     date_trunc('d', block_timestamp) as date,     event_type,     case     	when event_type = 'withdraw' then -sum(amount)   		else sum(amount)     end as sum_amount,     case     	when event_type = 'withdraw' then -sum(amount_usd)   		else sum(amount_usd)     end as sum_amount_usd   from anchor.collateral   where currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58'   group by 1,2 ), net_impact as (   select   	date,   	sum(sum_amount) as net_change,   	sum(sum_amount_usd) as net_change_usd   from daily_agg   group by 1    ), cumsum as (   select   	date,   	sum(net_change) over (order by date) as cumulative_sum,   	sum(net_change_usd) over (order by date) as cumulative_sum_usd   from net_impact    ),    combo as (   select * from net_impact   left join cumsum using (date)   order by 1    ) select * from combo
6400df0c-59f3-4c00-bd7a-79212e0ddb41,Swap for MIR // Mirror Hunt,SELECT block_id::string as block_id,   msg_type,   c.address_name as contract_label,   msg_value:coins[0]:amount / pow(10,6) as ust_amount,   msg_value:execute_msg:swap:belief_price as mir_price,   ust_amount / mir_price as mir FROM terra.msgs LEFT OUTER JOIN terra.labels c   ON msg_value:contract::string = c.address WHERE tx_id = 'ABD0EDC0DF81DD11792C78E7194B1336E61CECC950FD97023B4DA33B292C6BEA'
645ff4bd-c681-4ed0-89dc-c79d5550fee0,Untitled Query,select   date_trunc('d',block_timestamp) as date,   contract_label,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1,2 order by 1
29da7546-ded6-453b-a9fb-f1293d32d244,Daily Staked NEAR Balance,with   all_staking_pools as (     select distinct       address     from       near.core.fact_staking_pool_balances   ),   dates as (     select       date_day as date     from       crosschain.core.dim_dates     where       date_day between '2020-08-25' and CURRENT_DATE   ),   boilerplate as (     select       ap.address,sni       d.date     from       all_staking_pools ap       cross join dates d   ),   daily_balance as (     SELECT       block_timestamp::date as date,       address,       balance     from       near.core.fact_staking_pool_balances     qualify       row_number() over (         partition by           address,           block_timestamp::date         order by           block_id desc       ) = 1   ),   imputed_balance as (     select       b.date,       b.address,       daily.balance,       lag(balance) ignore nulls over (         partition by           address         order by           date       ) as imputed_bal_lag,       coalesce(balance, imputed_bal_lag) as daily_balance     from       boilerplate b       left join daily_balance daily using (date, address)   ) select   date,   sum(daily_balance) as gross_staked_balance from   imputed_balance group by   1 order by   1;
d5b7ebea-5e9d-4dc7-b645-2bf91c0108a8,NEAR Lands - setTiles volume by user,with tiles as (   select * from near.core.fact_actions_events_function_call     where method_name = 'setTiles' ), get_signer as (   select tx_hash, tx_signer from near.core.fact_transactions     where tx_hash in (select tx_hash from tiles) ), combo as (   select * from tiles     left join get_signer using (tx_hash) ) select  	tx_signer, 	count(1) as tiles_set from combo group by 1 order by 2 desc
d685ff4f-b558-4072-a5a9-0b1e1de9c7d7,Sushiswap router Volume Breakdown [c1],SELECT   -- date_trunc('day', block_timestamp) as date,   -- to_address_name,   -- sum(amount)   * FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - INTERVAL '90 days'   AND to_label = 'sushiswap'   AND to_address_name = 'router' -- GROUP BY 1, 2 limit 100
77c15978-717f-4d30-93fe-a4295ebc2da6,Untitled Query,select  date_trunc('d', block_timestamp),   avg(price_usd)         from terra.oracle_prices       where currency = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun'  group by 1 order by 1
10a0c337-e973-4b84-8273-9d7ae9ff0152,pudgy penguin sales by quartile,SELECT
4695396b-3772-4e81-8ad3-cd381acccfc3,BSC-Terra Bridge Net Volume [T104],with terra_bsc as (   select          block_timestamp,     event_from as sender,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id        from terra.transfers   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), bsc_terra as (   select        block_timestamp,     event_to as recipient,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id   from terra.transfers   where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), labels as (   select * from terra.labels ), terra_bsc_agg as (   select   	date_trunc('day', block_timestamp) as date,     -sum(amount_usd) as amount_usd,   	'outbound' as direction   from terra_bsc   group by 1 ), bsc_terra_agg as (   select   	date_trunc('day', block_timestamp) as date,     sum(amount_usd) as amount_usd,   	'inbound' as direction   from bsc_terra   group by 1 ), final as (   select * from terra_bsc_agg   union   select * from bsc_terra_agg ) select   date,   sum(amount_usd) as net from final where date > '2021-01-24T00:00:00Z' group by 1
330d14b0-12e1-4110-bee9-103fada305d5,Swaps by Hour, by Pool (UTC) [THOR8],SELECT   extract(hour from block_timestamp) as hour,   pool_name,   sum(from_amount_usd) as volume FROM thorchain.swaps WHERE block_timestamp > '2021-10-03T00:00:00Z' GROUP BY 1, 2  ORDER BY 1, 3 desc
8b5afd47-801b-42fd-a55f-89d9bf89ce96,RUNE Upgrade Events - By Size [THOR2],SELECT * FROM thorchain.upgrades WHERE block_timestamp > '2021-10-25T00:00:00Z'   AND burn_asset LIKE 'BNB%' ORDER BY rune_amount desc LIMIT 5
dea0b90d-2f5d-4dc3-b76b-4bd48fda4aa4,Untitled Query,select * from flow.core.fact_transactions limit 10
f5cf765e-e710-4800-9123-70a5b0c742e7,Bitcoin Spot ETF Issuers Over Time,-- forked from Bitcoin Spot ETF Issuers copy @ https://flipsidecrypto.xyz/edit/queries/4a05daf2-40aa-4de8-a532-b17628b8b5a4 -- forked from alitaslimi / Bitcoin Spot ETF Issuers @ https://flipsidecrypto.xyz/alitaslimi/q/lXOTSqd9xY4h/bitcoin-spot-etf-issuers with -------------------- BTC Price --------------------   prices as (     select       price     from       bitcoin.price.ez_hourly_token_prices     qualify       hour = last_value(hour) over (order by hour)   ), -------------------- Issuers --------------------   issuers as (     select       ft.value:TICKER as ticker,       ft.value:TYPE as type,       ft.value:ISSUER as issuer,       ft.value:CUSTODIAN as custodian,       ft.value:FEE as fee     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/55326770-94da-422b-a25e-1c37943c536f/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_inputs inputs       join addresses on inputs.pubkey_script_address = addresses.address   ),   outputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_outputs outputs       join addresses on outputs.pubkey_script_address = addresses.address   ), -------------------- Flows --------------------   inflows as (     select       date_trunc('week', block_timestamp) as _interval,       ticker,       sum(value) as volume     from       outputs     group by       1,       2   ),   outflows as (     select       date_trunc('week', block_timestamp) as _interval,       ticker,       sum(value) as volume     from       inputs     group by       1,       2   ) -------------------- Output -------------------- select   inflows._interval as "Week",   issuers.issuer as "Issuer",   inflows.volume - zeroifnull(outflows.volume) as "Balance",   round("Balance" * prices.price) as "AUM" from   prices,   issuers   join inflows on issuers.ticker = inflows.ticker   left join outflows on issuers.ticker = outflows.ticker AND inflows._interval = outflows._interval where   type = 'Spot' order by    1
2892df25-501a-42ad-b481-4d31ebcd8f12,2024-02-15 11:57 AM,-- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT   livequery.live.udf_api(     'GET',     'https://science.flipsidecrypto.xyz/googlesheets/readsheet',     { 'Content-Type': 'application/json' },      {        'sheets_id' : '13g-8F0HcKH2RH4CbPPP6NvIG0rmM_KK6BgcBM3VgkaM',        'tab_name' : 'Addresses'     }   ) as result ), arkham as ( select    VALUE:ADDRESS::STRING as address,   VALUE:TICKER::STRING as ticker,   VALUE:ISSUER::STRING as issuer,   VALUE:INCLUDE::BOOLEAN as include from res, lateral flatten(result:data::ARRAY) ), clusters as ( select * from bitcoin.core.dim_entity_clusters where address in (select distinct address from arkham) ) select * from clusters -- select count(distinct address) from bitcoin.core.dim_entity_clusters -- where address_group in ( --   select distinct address_group from clusters -- )
2c38fd83-c28a-447d-9ddd-1bd3ae27b14a,Top swap pairs based on volume copy,-- forked from 0ea85d87-b756-455a-88f0-9dbaefa75365   with   price as (     select       date(block_timestamp) as p_date,       token_in,       (sum(AMOUNT_OUT) / sum(AMOUNT_IN)) as price     from       near.core.ez_dex_swaps     where       TOKEN_OUT in ('USDC.e', 'USDT.e', 'DAI.e')       and p_date >= CURRENT_DATE - 14       and AMOUNT_OUT > 0       and AMOUNT_IN > 0     group by       1,       2   ),   final as (     select       token_in,       avg(price) as price     from       price     where       token_in is not null     group by       1   ),   swap as (     select       date(block_timestamp) as date,       tx_hash,       trader,       pool_id,       platform,       a.token_in,       amount_in,       b.price,       amount_in * b.price as volume_in,       token_out,       c.price,       amount_out,       amount_out * c.price as volume_out     from       near.core.ez_dex_swaps a       join final b on a.token_in = b.token_in       join final c on a.token_out = c.token_in     where       a.token_in is not null       and token_out is not null       and date >= CURRENT_DATE - 14   ) select   concat(token_in, '->', token_out) as pairs,   sum(volume_in) as usd_volume,   rank() over (     order by       usd_volume desc   ) as rank from   swap group by   1 qualify   rank <= 15
f17fb807-cddf-4f09-980d-721dce3000a1,Untitled Query,
0b8da2e9-10ce-4a86-bdae-4ae8aad932f7,Untitled Query,select * from near.core.dim_address_labels limit 10;
db0fceb3-2fde-4eb5-9c5d-df832c4e3a44,Untitled Query,select * from flow.core.fact_transactions limit 100
18846f05-501b-4509-8d2b-7801ea1d8dab,THORChain Top Swap Volume, past 24h [THOR5],SELECT   pool_name,   sum(to_amount_usd) as gross_volume,   count(1) as num_swaps,   gross_volume / num_swaps as avg_swap_size FROM thorchain.swaps WHERE block_timestamp < CURRENT_DATE - interval '24 hours' GROUP BY 1 ORDER BY 3 desc LIMIT 10
2fdaf022-1e00-44a4-86d7-59848e778061,Untitled Query,select 	d.sender, 	avg(d.deposit_amount) as dep from anchor.deposits d left join anchor.redeem r using (sender) where r.block_timestamp > CURRENT_DATE - 7 group by 1 limit 100
df339edc-9d33-4faa-baa4-4151e723b3d3,Bond LUNA,SELECT   BLOCK_ID::string as block_id,   msg_value:coins[0]:amount::float / 1000000 as amount,   msg_value:coins[0]:denom::string as token,   msg_value:contract::string as contract_address,   c.address_name as contract_label,   tx_status,   block_timestamp FROM terra.msgs LEFT OUTER JOIN terra.labels c ON msg_value:contract::string = c.address WHERE TX_ID = '8FBE3AAA2FFFE4016789F6C8C301691AA99E0858D3BBF3D8D39256A294E7EFD5' ;
31c615f0-2979-4031-a360-cb9488e2be04,LOTA volume august 1 - 3,-- Buying LOTA with UST // UST -> LOTA swap WITH buys AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(lota) as quantity_bought,   sum(ust) as volume_bought FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as ust,    event_attributes:return_amount / pow(10,6) as lota FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'swap'   AND event_attributes:"0_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract   AND event_attributes:"1_action" = 'transfer'   AND event_attributes:"1_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token ) GROUP BY 1 ORDER BY 1), -- Selling LOTA to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(lota) as quantity_sold,   sum(ust) as volume_sold FROM ( SELECT   *,   event_attributes:offer_amount / pow(10,6) as lota,   event_attributes:return_amount / pow(10,6) as ust FROM terra.msg_events WHERE tx_status = 'SUCCEEDED'   AND event_type = 'from_contract'   AND event_attributes:"0_action" = 'send'   AND event_attributes:"0_contract_address" = 'terra1ez46kxtulsdv07538fh5ra5xj8l68mu8eg24vr' -- LOTA token   AND event_attributes:"1_action" = 'swap'   AND event_attributes:"1_contract_address" = 'terra1pn20mcwnmeyxf68vpt3cyel3n57qm9mp289jta' -- swap contract ) GROUP BY 1 ORDER BY 1) SELECT   buys.date,   quantity_bought,   -- volume_bought,   -quantity_sold as sold_neg,   -- -volume_sold as vol_sold_neg,   quantity_bought - quantity_sold as net_daily_token_volume   -- volume_bought - volume_sold as net_daily_volume FROM buys JOIN sells ON sells.date = buys.date ORDER BY 1
3a61bba0-0b24-4f12-8e08-f1b171337072,Untitled Query,select 	date_trunc('d',block_timestamp) as date,   	contract_label,   	sum(amount_usd) as gross_volume    from anchor.collateral group by 1,2 order by 1,2
287706f3-f65d-447d-b00d-99cb1f20d5de,WETH LP,-- SELECT  --   block_timestamp, --   pool_name, --   amount0_adjusted, --   amount1_adjusted, --   amount0_usd, --   amount1_usd, --   liquidity_adjusted, --   (amount0_usd + amount1_usd) -- FROM uniswapv3.lp_actions -- WHERE block_timestamp > GETDATE() - interval '5 days' --   	AND action = 'INCREASE_LIQUIDITY' --   	AND (pool_name LIKE '%WETH%' AND pool_name LIKE '%USDT%') -- order by 1 desc; SELECT    pool_name,   avg(liquidity_adjusted),   avg(amount0_usd + amount1_usd) FROM uniswapv3.lp_actions WHERE block_timestamp > GETDATE() - interval '5 days'   	AND action = 'INCREASE_LIQUIDITY'   	AND (pool_name LIKE '%WETH%' AND pool_name LIKE '%USDT%') group by 1 order by 2 desc;
d173d967-d3b0-400e-b7c7-5a7fe0c37f90,stablecoins,SELECT 	DATE, 	CURRENCY, 	SUM(BALANCE) as native_balance, 	SUM(BALANCE_USD) as usd_balance FROM terra.daily_balances WHERE CURRENCY != 'LUNA' AND CURRENCY != 'ANC' AND CURRENCY != 'MIR' 	AND DATE > GETDATE() - interval '6 months' GROUP BY 1,2 ORDER BY 1,4 desc
f8011dd1-1ac7-4a5d-a9b3-e99e40d7a4b2,SNX - TracesBased copy,-- forked from 744a976d-8556-4ccf-a005-07c41da10b3e   /* ## High Level Concept Using burnShare and mintShare traces  https://etherscan.io/address/0x89fcb32f29e509cc42d0c8b6f058c993013a843f#writeContract Steps: 1. Look for traces of mintShare/burnShare 2. Because mintShare/burnShare function executes balanceOf, we look for the most     recent balanceOf call (to SNX, SDS and Escrow)    and use that output to determine the state of the EVM. */ with snx_issers as ( select '0x5810fc0e79f4323b2dd3c638914083fd23a941c0' as issuer_address union all  select '0x2eb6860fadc59910bf187965da8714d91f20f4db' as issuer_address ) , raw_mints as ( select  '0x' || substr(input,3+8+24,40) as minted_account, ethereum.public.udf_hex_to_int(substr(input,3+8+24+64,64))::integer / pow(10,18) as minted_amount, 'Mint' as event_type, row_number() over (PARTITION BY tx_hash order by gas desc) as raw_trace_index, * from ethereum.core.fact_traces where to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and substr(input,0,10) = '0xc2f04b0a' -- function mintShare and block_timestamp > '2023-01-01' and tx_status = 'SUCCESS' ) , raw_burns as ( select '0x' || substr(input,3+8+24,40) as minted_account, ethereum.public.udf_hex_to_int(substr(input,3+8+24+64,64))::integer / pow(10,18) * -1 as minted_amount, 'Burn' as event_type, row_number() over (PARTITION BY tx_hash order by gas desc) as raw_trace_index, * from ethereum.core.fact_traces where to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and substr(input,0,10) = '0x1a378f0d' -- function burnShare and block_timestamp > '2023-01-01' and tx_status = 'SUCCESS' ) , raw_traces as ( select  '0x' || substr(input, 3+8+24, 40) as wallet_address, to_address, output, row_number() over (PARTITION BY tx_hash order by gas desc) as trace_index, input, from_address, gas, data, tx_hash from ethereum.core.fact_traces where 1=1 and substr(input,0,10) = '0x70a08231' -- function balanceOf and block_timestamp > '2023-01-01' and tx_status = 'SUCCESS' ) ,final_mints_sds as ( select m.block_number, m.block_timestamp, m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_mints_snx as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_mints_escrow as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- reward escrow -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) , final_mints as ( select  sds.block_number, sds.block_timestamp, sds.MINTED_ACCOUNT, sds.MINTED_AMOUNT, sds.EVENT_TYPE, sds.debug_tx_hash as tx_hash, sds.raw_trace_index as event_index, ethereum.public.udf_hex_to_int(sds.output)::integer / pow(10,18) + sds.minted_amount as sds_balance, ethereum.public.udf_hex_to_int(escrow.output)::integer / pow(10,18) as escrow_balance, ethereum.public.udf_hex_to_int(snx.output)::integer / pow(10,18) as snx_balance from final_mints_sds sds left join final_mints_escrow escrow on sds.tx_hash = escrow.tx_hash and sds.raw_trace_index = escrow.raw_trace_index left join final_mints_snx snx on sds.tx_hash = snx.tx_hash and sds.raw_trace_index = snx.raw_trace_index ) ,final_burns_sds as ( select  m.block_number, m.block_timestamp, m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ),final_burns_snx as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_burns_escrow as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- reward escrow -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) , final_burns as ( select  sds.block_number, sds.block_timestamp, sds.MINTED_ACCOUNT, sds.MINTED_AMOUNT, sds.EVENT_TYPE, sds.debug_tx_hash as tx_hash, sds.raw_trace_index as event_index, ethereum.public.udf_hex_to_int(sds.output)::integer / pow(10,18) + sds.minted_amount as sds_balance, ethereum.public.udf_hex_to_int(escrow.output)::integer / pow(10,18) as escrow_balance, ethereum.public.udf_hex_to_int(snx.output)::integer / pow(10,18) as snx_balance from final_burns_sds sds left join final_burns_escrow escrow on sds.tx_hash = escrow.tx_hash and sds.raw_trace_index = escrow.raw_trace_index left join final_burns_snx snx on sds.tx_hash = snx.tx_hash and sds.raw_trace_index = snx.raw_trace_index ) select * from final_mints union all  select * from final_burns /* select *  from ethereum.core.fact_traces where 1=1 and tx_hash = '0x67260f6993d7c5d48c5bcf0c4b6d29e65fc73b3394446a1b424d1b3524e89334' and( substr(input,0,10) = '0x70a08231' -- function balanceOf or substr(input,0,10) = '0xc2f04b0a' -- function mintShare or substr(input,0,10) = '0x1a378f0d' -- function burnShare ) and block_timestamp > '2023-02-01' and block_timestamp < '2023-03-01' and tx_status = 'SUCCESS' */
f8c65ace-104d-4f5a-8b98-9481aa9676e0,Chainlink Ez SNX,select * from ethereum.chainlink.ez_oracle_feeds -- where feed_name = 'SNX / USD' where feed_address = '0xdc3ea94cd0ac27d9a86c180091e7f78c683d3699' order by block_timestamp desc limit 100; select last_query_id();
f51421e6-a767-47b9-ac2d-7fef7e5f0bbe,2023-04-21 10:36 AM,select * from bi_analytics.core.fact_data_latency limit 5
0da6f8d1-1881-4a45-bf37-bd6895462286,FullTimeDevs,WITH RAW AS (     SELECT *     FROM near.core.fact_developer_activity     WHERE endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         -- Assuming 'week.value:c::INT' holds the commit data, if not, replace with the appropriate field         week.value:c::INT as commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ), monthly_contributions AS (     SELECT          repo_owner,         repo_name,         login as contributor,         DATE_TRUNC('MONTH', week_date) as contribution_month,         COUNT(DISTINCT week_date) as days_contributed  -- Count unique contribution days within the month     FROM numbered_data     WHERE row_num = 1     GROUP BY repo_owner, repo_name, contributor, contribution_month ), full_time_contributors AS (     SELECT          repo_owner,         repo_name,         contributor,          contribution_month,         days_contributed     FROM monthly_contributions     WHERE days_contributed >= 10  -- Criteria for full-time contributors ) -- Final selection SELECT      contribution_month,     COUNT(contributor) as full_time_contributor_count  -- Count of full-time contributors FROM full_time_contributors GROUP BY contribution_month ORDER BY contribution_month;
dc2a21d3-0e22-4d0a-879c-d7f658de8b65,Terra Wormhole - Outbound LUNA Traffic,WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), outbound_luna AS (   SELECT     date_trunc('day', block_timestamp) as date,     chain_ids.name as name,     token,     sum(amount) as amount   FROM outbound   JOIN chain_ids ON outbound.destination_chain_id = chain_ids.id   WHERE token = 'LUNA'   GROUP BY 1,2,3     ) SELECT   *,   sum(amount) OVER (PARTITION BY name ORDER BY date) as cum_sum FROM outbound_luna
8bdb907b-7325-409d-8aeb-f5e5cba71c79,OneTimeDevs,WITH RAW AS (     SELECT *     FROM near.core.fact_developer_activity     WHERE endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ), contributions AS (     SELECT          repo_owner,         repo_name,         login as contributor,         DATE_TRUNC('MONTH', week_date) as contribution_month,  -- Truncating the date to the month         COUNT(DISTINCT week_date) as days_contributed  -- Counting unique contribution days     FROM numbered_data     WHERE row_num = 1     GROUP BY repo_owner, repo_name, contributor, contribution_month ), -- Calculate the rolling contributions without window function due to SQL dialect limitations rolling_contributions AS (     SELECT          c1.contributor,         c1.contribution_month,         SUM(c2.days_contributed) as rolling_contributions     FROM contributions c1     JOIN contributions c2         ON c1.contributor = c2.contributor          AND c2.contribution_month BETWEEN DATEADD('month', -2, c1.contribution_month) AND c1.contribution_month -- 3 months including current     GROUP BY c1.contributor, c1.contribution_month ) SELECT      contributor,      contribution_month,     rolling_contributions FROM rolling_contributions WHERE rolling_contributions = 1 -- filters for contributors who only contributed once in a rolling 3-month period ORDER BY contribution_month;
2f7f9cf9-299c-4a3a-a706-82b283123882,Inbound Wormhole Volume [T101],-- native asset transfer  WITH inbound_native AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:denom as denom,     event_attributes:amount / pow(10,6) as amount,     event_attributes:recipient as recipient   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:action = 'complete_transfer_terra_native'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'    ),    prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'    GROUP BY 1 ), inbound_native_usd AS (   SELECT     inbound_native.date as date,     denom,     CASE       WHEN denom = 'uluna' THEN amount * avg_price       ELSE amount     END AS usd_volume   FROM inbound_native   LEFT JOIN prices ON inbound_native.date = prices.date ) SELECT   date,   CASE     WHEN denom = 'uusd' THEN 'UST'     ELSE 'LUNA'   END AS denom,   sum(usd_volume) as amount FROM inbound_native_usd GROUP BY 1,2 ORDER BY 1
f53b9438-8729-4560-9b57-67020afe74f1,2023-09-05 08:34 AM,select * from near.core.dim_address_labels where project_name ilike '%sweat%' select   label_type,     creator,   count(1) from near.core.dim_address_labels where label_type in ('dapp', 'dapps') group by 1,2 order by 1,2
6c23523f-79e6-45be-a165-56ba82c1806d,Untitled Query,with transactionn_gas_used as (     select block_timestamp, gas_price, gas_used, gas_price * gas_used as gas_amount, tx_hash     from ethereum.core.fact_transactions ) select date_trunc('day', block_timestamp) as block_date,     count(*) as transaction_count,     avg(gas_price) / 1e9 as average_gas_price,     sum(gas_used) / 1e9 as sum_gas_used,     avg(gas_used) as average_gas_used,     sum(gas_amount) / 1e18 as sum_gas_amount,     avg(gas_amount) / 1e18 as average_gas_amount from transactionn_gas_used group by block_date
f6b90fb4-41bb-4c45-95a7-a7b1167cf0ba,Untitled Query,
80f98e7a-95e3-4241-8a5e-c5f266e6354c,CRV Token Price [c1],SELECT    hour,   price FROM ethereum.token_prices_hourly WHERE symbol = 'CRV'   AND hour > '2021-01-01T00:00:00Z'
479cef69-96fc-439b-9bca-6735a97aab86,MIR past 24h [T19],SELECT *   FROM (SELECT *,   RANK() OVER (PARTITION BY date ORDER BY total_trading_volume desc) as rank FROM   (SELECT    	sell.date,     	sell.asset,     	-- gross_buy_volume,     	-- sell.gross_sell_volume,     	sum(gross_buy_volume) + sum(sell.gross_sell_volume) as total_trading_volume   FROM      (select       date_trunc('day', block_timestamp) as date,       l.address_name as asset,       -- event_attributes:ask_asset,       -- sum(event_attributes:amount::float) / pow(10,6) as ask_amount,       -- event_attributes:offer_asset as offer_asset,       sum(event_attributes:offer_amount::float) / pow(10,6) as gross_buy_volume          from terra.msg_events     LEFT JOIN terra.labels l       ON event_attributes:ask_asset = l.address     WHERE tx_status = 'SUCCEEDED'     	AND event_type = 'from_contract'       	AND event_attributes:ask_asset != ''       	AND block_timestamp > GETDATE() - interval '24 hours'       	-- buy transactions are marked as 'swap' under the main action of the from_contract message       	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)       	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract       	AND event_attributes:"0_action" = 'swap'       	-- exclude non-mirror tokens       	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')       	AND event_attributes:offer_amount::float > 0               group by 1, 2) buy        LEFT JOIN          (select         date_trunc('day', block_timestamp) as date,         l.address_name as asset,         sum(event_attributes:return_amount::float) / pow(10,6) as gross_sell_volume              from terra.msg_events       LEFT JOIN terra.labels l         ON event_attributes:offer_asset = l.address       WHERE tx_status = 'SUCCEEDED'       	AND event_type = 'from_contract'         	AND event_attributes:ask_asset != ''         	AND block_timestamp > GETDATE() - interval '24 hours'         	-- buy transactions are marked as 'swap' under the main action of the from_contract message         	-- contract address is the mASSET-UST pair and we can easily pull offer asset (ust) and ask asset (a contract address so need to list massets or check labels)         	-- then we can do the same the other way, sell orders call 'send' in the 0_action and the to address is the mASSET-UST pair contract         	AND event_attributes:"0_action" = 'send'         	-- exclude non-mirror tokens         	AND l.address_name not in ('bLUNA', 'LOTA', 'ANC', 'aUST')              group by 1, 2) sell          ON (buy.asset = sell.asset AND buy.date = sell.date)        GROUP BY 1, 2)) WHERE rank < 6 ORDER BY 1, 3 desc
786b6356-bdb6-423b-b2fd-2a99ee91cb15,sum_anchor_deposite revised,with an_dep AS (   select      an.block_timestamp as dt_time,      an.deposit_amount   from anchor.deposits as an ), redemptions as ( 	select   		block_timestamp as r_time,   		amount as r_amount   from anchor.redeem ),   dep_agg as ( SELECT 	sum(deposit_amount) as all_time_amount,   	sum(iff(dt_time>=CURRENT_DATE-30,deposit_amount,0)) as past_30_amount,   	sum(iff(dt_time>=CURRENT_DATE-7,deposit_amount,0)) as past_7_amount   from an_dep order by 1   ), red_agg as ( SELECT 	sum(r_amount) as all_time_amount,   	sum(iff(r_time>=CURRENT_DATE-30,r_amount,0)) as past_30_amount,   	sum(iff(r_time>=CURRENT_DATE-7,r_amount,0)) as past_7_amount   from redemptions order by 1 ), combo as (   select * from dep_agg   union   select * from red_agg ) select * from combo
0ef1f9a4-522a-420b-9a91-1f79ff1a369a,RUNE price vs swap volume - pre-exploit [THOR9],WITH trading_volume AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp < '2021-07-07T23:59:59Z'   GROUP BY 1   ), price AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(rune_usd) as price   FROM thorchain.prices   WHERE block_timestamp < '2021-07-07T23:59:59Z'   GROUP BY 1   ), combined AS (   SELECT     price.date as date,     volume,     price   FROM price   JOIN trading_volume   	ON price.date = trading_volume.date ) SELECT   date,   volume,   avg(volume) OVER (ORDER BY date ROWS BETWEEN 23 PRECEDING AND CURRENT ROW) as volume_ma, -- yes i know 24h mov avg makes no sense...   price FROM combined ORDER BY 1
d8956b3b-050c-4cc9-921b-579b682771bb,Atlas - New Aurora MAAs,with dates as  (select distinct block_timestamp::date as day from near.core.fact_transactions ), txns as  ( select   block_timestamp::date as active_day,   from_address from aurora.core.fact_transactions ) select   day,   'Aurora' as chain,   count(distinct from_address) as maa from dates d   left join txns t     on t.active_day < d.day and t.active_day >= d.day - interval '30 day' where day != current_date() group by 1 order by 1 desc
8ba343d0-c394-478e-9ad8-033e4198b8af,Untitled Query,select     date,     balance as yield_reserve   from terra.daily_balances   where address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   	and currency = 'UST' 	and date > current_date - 21      order by 1 desc
a220522d-2061-4561-b203-8eb52abd5c7e,2023-12-11 01:44 PM,select * from    near.core.fact_transactions -- order by block_number desc limit 5
a9df18a3-c09a-479b-8ef9-d03b7ef3c905,2023-11-30 11:12 AM,
f99ced6f-2512-4b41-89f2-85a22984362b,Untitled Query,
df0cc5f9-551e-4b39-9049-f63e5df4a2ac,daily deposits 3 day moving avg [T32],WITH withdraw AS (SELECT  	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount - redemption_amount as daily_change,   SUM(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date) as cumulative_deposits,   AVG(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as three_day_moving_average,   AVG(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_moving_average FROM   (SELECT     	date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1
7e202832-39f7-412f-afb0-d53fa382c1f4,3Crv claim size vs fee paid (excl outliers) [YC2],WITH claims AS (   SELECT     block_timestamp,     amount,     tx_id   FROM ethereum.udm_events   WHERE contract_address = '0x6c3f90f043a72fa612cbac8115ee7e52bde6e490' -- 3crv address     AND from_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV pool     AND origin_function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z'   ), fees AS (   SELECT     tx_id,     tx_fee,     fee_usd,     to_address,     from_address   FROM ethereum.transactions   WHERE success = 'TRUE'     AND to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'     AND function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z' ), combo AS (   SELECT     date_trunc('hour', block_timestamp) as block_time,     amount,     tx_fee,     fee_usd,     claims.tx_id as tx_id,     from_address   FROM claims   JOIN fees     ON claims.tx_id = fees.tx_id ), prices AS (   SELECT     hour,     price   FROM ethereum.token_prices_hourly WHERE symbol = 'CRV'   AND hour > '2021-02-04T23:59:00Z' )  SELECT   block_time,   amount,   price,   amount * price as amount_usd,   tx_fee,   fee_usd,   (fee_usd / amount_usd) * 100 as fee_pct,   tx_id FROM combo c JOIN prices   ON prices.hour = c.block_time WHERE amount_usd > 10   AND fee_usd IS NOT NULL
64da8fe8-2f1f-4ed4-b1d8-88e85d442734,yvBOOST origin address [YC1],SELECT   date_trunc('month', block_timestamp) as month,   from_address,   sum(amount) as crv_deposited FROM ethereum.udm_events WHERE contract_address = lower('0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a')   AND origin_function_name = 'deposit'   AND event_name = 'transfer'   AND block_timestamp > '2021-04-29T23:59:00Z' -- vault launched on april 30th GROUP BY 1,2 ORDER BY 1
fa17e769-b854-432e-8492-8f37ad87c587,Untitled Query,select tx:
85921a71-080b-4c74-9025-e720442281b1,Yearn - yvBOOST zapOuts gross [YC3],-- all zapouts with out_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapOut'     AND contract_address = '0xd6b88257e91e4e4d4e990b3a858c849ef2dfde8c' -- yVault ZapOut contract   ), -- originating from the yvboost pool boost_out AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN out_txs ON e.tx_id = out_txs.tx_id   WHERE to_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a'   ) -- now we get the withdraws SELECT   symbol,   sum(amount) as native_amount,   sum(amount_usd) as usd_amount FROM ethereum.udm_events e RIGHT JOIN boost_out ON e.tx_id = boost_out.tx_id WHERE block_timestamp > '2021-04-29T23:59:59Z'   AND origin_address = to_address GROUP BY 1 ORDER BY 3 desc
86e5d8b3-76ac-4f86-b4b2-b8f87db7c2cb,Bridge, Volume In / Out,with   bridge_in as (     select       block_timestamp::date as _date,       token_contract,       sum(amount) as gross_volume     from       flow.core.ez_bridge_transactions     where       direction = 'inbound'       and block_timestamp::date >= '2023-01-01'     group by       1,       2   ),   bridge_out as (     select       block_timestamp::date as _date,       token_contract,       sum(amount) as gross_volume     from       flow.core.ez_bridge_transactions     where       direction = 'outbound'       and block_timestamp::date >= '2023-01-01'     group by       1,       2   ) select   coalesce(i._date, o._date) as _date,   coalesce(i.token_contract, o.token_contract) as token_contract,   coalesce(i.gross_volume, 0) as volume_in,   coalesce(o.gross_volume, 0) as volume_out,   volume_in - volume_out as net_flow from   bridge_in i   full outer join bridge_out o using (_date, token_contract) order by   1,   5 desc
e939f932-5fdf-4bd1-be59-bae3347fbabd,UST Peg from Swaps,with ust_swaps as ( select   block_id,   case     when token_0_currency = 'UST' then price0_usd     else price1_usd   end as ust_price    from terra.swaps    where ask_currency = 'UST' or offer_currency = 'UST'   and block_timestamp >= '2022-05-07'   and price0_usd is not null    and price1_usd is not null   ), peg as ( select     block_id, 	avg(ust_price) as avg_peg from ust_swaps where block_id > 7536784 -- first on 5/7 UTC group by 1 ) select 	p.block_id, 	avg_peg, 	avg(avg_peg) over (order by block_id rows between 999 preceding and current row) as k_ma,   	b.block_timestamp from peg p left join terra.blocks b using (block_id)   order by 1
e9c4b078-b8a3-4cb9-8995-c6c758c8e82a,Invasive Species - Non Native Stablecoins [T101],WITH inbound_non_native AS (   SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_assets AS (   SELECT    'terra103c6z8jq8s2yszvxj9mpah0jlvky2pek54f2yg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra127ww0al7uj9vyg7cv2gtcqenhrjzlnq5vaq6dh' as token_contract_address,   'whUST' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra132zppkzw88j35hpwxkrpzymujekky3wcuru65n' as token_contract_address,   'whATOM' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur' as token_contract_address,   'whwstETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r' as token_contract_address,   'whWETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk' as token_contract_address,   'whSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19phjr9363x44yukx6dl6d4zvn2wqc8gpkk0tm7' as token_contract_address,   'whETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19t8cxscre0jss7nejqy29c97fkg7els3v8zujg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55' as token_contract_address,   'whWBTC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva' as token_contract_address,   'whUSDT' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8' as token_contract_address,   'whWBNB' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq' as token_contract_address,   'weMATIC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8' as token_contract_address,   'whWMATIC' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dx9f62gmeyjerskc3uf5pyuwq3vhwuf6a8wpn4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl' as token_contract_address,   'whMIR' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1fme0uqgjucph3kelyejm6yuj60e4te8647gx6v' as token_contract_address,   'whLUNA' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gdapfuda0dxtjc98raemhszntcxty7chyr0wpd' as token_contract_address,   'whORION' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gtjr689cyaau20k8ezdxy8eup34tntun5xr9l2' as token_contract_address,   'whDOGE' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1jlh9xlyahg2d2qwat8jl4evqzuua452dafzqs5' as token_contract_address,   'whWETH' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1jpkhwg9skkgml95v8y8hhp8n2wlktzqx6w2gzc' as token_contract_address,   'whRIN' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1k7tstwhf25wm45x329ny84xe4n2z2nnq9ekuv2' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x' as token_contract_address,   'whUSDC' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03' as token_contract_address,   'ORION' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1mzm7nflz93qm7qhftykquv3yklyepwn4x2ujuw' as token_contract_address,   'whBETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06' as token_contract_address,   'whUSDC' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1pkfkxzxqawdze8wa6enwh0hfw8yhlkswnqn328' as token_contract_address,   'whaUST' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd' as token_contract_address,   'whBUSD' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap' as token_contract_address,   'whstSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1tnndhfm0khgm3h766edku6833rz392p8cr82y8' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '5' as decimals   UNION   SELECT    'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx' as token_contract_address,   'whMIR' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1v584dmdvtlh7rpa22cslnzwkennm39ud5ngdld' as token_contract_address,   'whONT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd' as token_contract_address,   'whUSDT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1xu3nyee55dfe5vxqtg9m4rkex8u2t6n2etl08h' as token_contract_address,   'whUSDT' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu' as token_contract_address,   'whUSDC' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95' as token_contract_address,   'whDAI' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ukmck39pkrhljc0my0hw7yu0quarncajcqyfz8' as token_contract_address,   'whCake-LP' as name,   '4' as asset_chain,   '8' as decimals ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), named_assets AS (   SELECT     block_timestamp,     name,     asset_chain,     amount,     decimals   FROM inbound_non_native   JOIN wh_assets ON inbound_non_native.token_contract_address = wh_assets.token_contract_address   ), adjusted AS (   SELECT     block_timestamp,     named_assets.name as asset,     chain_ids.name as origin_chain,     amount,     amount / pow(10, decimals) as adjusted_amount   FROM named_assets   JOIN chain_ids ON named_assets.asset_chain = chain_ids.id   ) SELECT   date_trunc('day', block_timestamp) as date,   origin_chain,   sum(adjusted_amount) as token_count FROM adjusted WHERE asset IN ('whUST', 'whUSDT', 'whaUST', 'whBUSD', 'whUSDC', 'whDAI') GROUP BY 1,2 ORDER BY 1
72d2daea-15b0-42fe-b521-b22113a63291,anchor withdraw collateral [T33],SELECT   date_trunc('hour', block_timestamp) as date,   sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%withdraw_collateral%' GROUP BY 1 ORDER BY 1
46f75e7c-521f-4816-94ee-5638b605f0ce,USDC Approval Volume on Polygon [P1],SELECT    date_trunc('day', block_timestamp) as date,   TX_TO_LABEL,   count(*) FROM polygon.events_emitted WHERE contract_address = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174' -- usdc   AND event_name = 'Approval'   AND block_timestamp > CURRENT_DATE - INTERVAL '4 months' group by 1, 2 order by 1, 3 desc
48082a57-dcd1-41d4-84e5-87f0ff6da2a1,Inbound Non-Native Tokens from BSC [T104],WITH inbound_non_native AS (   SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_assets AS (   SELECT    'terra103c6z8jq8s2yszvxj9mpah0jlvky2pek54f2yg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra127ww0al7uj9vyg7cv2gtcqenhrjzlnq5vaq6dh' as token_contract_address,   'whUST' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra132zppkzw88j35hpwxkrpzymujekky3wcuru65n' as token_contract_address,   'whATOM' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur' as token_contract_address,   'whwstETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r' as token_contract_address,   'whWETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk' as token_contract_address,   'whSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19phjr9363x44yukx6dl6d4zvn2wqc8gpkk0tm7' as token_contract_address,   'whETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19t8cxscre0jss7nejqy29c97fkg7els3v8zujg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55' as token_contract_address,   'whWBTC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva' as token_contract_address,   'whUSDT' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8' as token_contract_address,   'whWBNB' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq' as token_contract_address,   'weMATIC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8' as token_contract_address,   'whWMATIC' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dx9f62gmeyjerskc3uf5pyuwq3vhwuf6a8wpn4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl' as token_contract_address,   'whMIR' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1fme0uqgjucph3kelyejm6yuj60e4te8647gx6v' as token_contract_address,   'whLUNA' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gdapfuda0dxtjc98raemhszntcxty7chyr0wpd' as token_contract_address,   'whORION' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gtjr689cyaau20k8ezdxy8eup34tntun5xr9l2' as token_contract_address,   'whDOGE' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1jlh9xlyahg2d2qwat8jl4evqzuua452dafzqs5' as token_contract_address,   'whWETH' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1jpkhwg9skkgml95v8y8hhp8n2wlktzqx6w2gzc' as token_contract_address,   'whRIN' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1k7tstwhf25wm45x329ny84xe4n2z2nnq9ekuv2' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x' as token_contract_address,   'whUSDC' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03' as token_contract_address,   'ORION' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1mzm7nflz93qm7qhftykquv3yklyepwn4x2ujuw' as token_contract_address,   'whBETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06' as token_contract_address,   'whUSDC' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1pkfkxzxqawdze8wa6enwh0hfw8yhlkswnqn328' as token_contract_address,   'whaUST' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd' as token_contract_address,   'whBUSD' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap' as token_contract_address,   'whstSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1tnndhfm0khgm3h766edku6833rz392p8cr82y8' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '5' as decimals   UNION   SELECT    'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx' as token_contract_address,   'whMIR' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1v584dmdvtlh7rpa22cslnzwkennm39ud5ngdld' as token_contract_address,   'whONT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd' as token_contract_address,   'whUSDT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1xu3nyee55dfe5vxqtg9m4rkex8u2t6n2etl08h' as token_contract_address,   'whUSDT' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu' as token_contract_address,   'whUSDC' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95' as token_contract_address,   'whDAI' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ukmck39pkrhljc0my0hw7yu0quarncajcqyfz8' as token_contract_address,   'whCake-LP' as name,   '4' as asset_chain,   '8' as decimals ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), named_assets AS (   SELECT     block_timestamp,     name,     asset_chain,     amount,     decimals   FROM inbound_non_native   JOIN wh_assets ON inbound_non_native.token_contract_address = wh_assets.token_contract_address   ), adjusted AS (   SELECT     block_timestamp,     named_assets.name as asset,     chain_ids.name as origin_chain,     amount,     amount / pow(10, decimals) as adjusted_amount   FROM named_assets   JOIN chain_ids ON named_assets.asset_chain = chain_ids.id   ) SELECT   origin_chain,   asset,   sum(adjusted_amount) as token_count FROM adjusted WHERE origin_chain = 'BSC' GROUP BY 1,2
8b8cbc4d-93ca-40c9-b6ee-664f28888784,16 ETH from ethereum table,SELECT   	date_trunc('day', block_timestamp) as date, 	CASE   		WHEN contract_address = '0xa47c8bf37f92abed4a126bda807a7b7498661acd' THEN 'UST'   		WHEN contract_address = '0xd2877702675e6ceb975b4a1dff9fb7baf4c91ea9' THEN 'LUNA'   	END AS token,   sum(amount) FROM ethereum.udm_events WHERE contract_address in ('0xd2877702675e6ceb975b4a1dff9fb7baf4c91ea9','0xa47c8bf37f92abed4a126bda807a7b7498661acd') 	AND to_address = '0x0000000000000000000000000000000000000000'   	AND block_timestamp > GETDATE() - interval '9 months' GROUP BY 1, 2 ORDER BY 1
a28b3afa-d16f-411d-b219-2218db30e104,Untitled Query,
6aada617-510e-489f-a119-e8ed33d09c24,bond luna,SELECT * FROM terra.transfers WHERE TX_ID = '8FBE3AAA2FFFE4016789F6C8C301691AA99E0858D3BBF3D8D39256A294E7EFD5'
30021bb6-669a-4d6c-a49f-2ef2ed050e2d,Untitled Query,select * from near.core.fact_transactions   where tx_hash = '8HC4gq9vQ6EoEXLzfFxzJpF5PozhLxskD9ak4ogvp7Gc'
73be0aef-e30b-4ec0-853f-e72abf75b3fe,Top Pools over past 30 days [THOR4],SELECT   day,   pool_name,   swap_volume_rune,   swap_volume_rune_usd, -- this is the info of note for the bounty   to_asset_swap_volume,   to_rune_swap_volume,   rune_price_usd FROM thorchain.daily_pool_stats WHERE day > CURRENT_DATE - 30   AND swap_volume_rune > 0   -- grab today's top 10   AND pool_name IN (     SELECT       pool_name     FROM thorchain.daily_pool_stats     WHERE day LIKE '2021-10-27%'       AND swap_volume_rune > 0     ORDER BY swap_volume_rune_usd desc     LIMIT 5   ) ORDER BY day, swap_volume_rune_usd desc
fc654414-c36e-4b14-992d-b7c42189d4d8,SNX Price Feed,-- forked from d600adb1-d81b-4de5-b60c-d5755db73472   select  block_number, block_timestamp, tx_hash, origin_from_address, origin_to_address, contract_address, event_name, decoded_log:current::number as raw_value, decoded_log:roundId::number as round_id, decoded_log:updatedAt::timestamp as updated_at, raw_value / pow(10,8) as adj_value, topics, decoded_log from ethereum.core.ez_decoded_event_logs e where lower(contract_address) = lower('0x06ce8Be8729B6bA18dD3416E3C223a5d4DB5e755')   and event_name = 'AnswerUpdated' -- and topics[0] = '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f' order by block_timestamp desc        limit 199 -- 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699
fcbf7083-f6e7-4792-aa77-91ecbd3ca14c,Untitled Query,
ec23830c-91de-4920-ae40-fcff7ebff2cb,Untitled Query,SELECT     balance_date,     symbol,     balance,     amount_usd   FROM ethereum.erc20_balances   WHERE user_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- etETH-ETH Pool Address     AND balance_date > CURRENT_DATE - 30
94f6983f-e9de-4747-9721-22051eb74f10,stETH-ETH Liquidity Events - just ETH [C2],WITH adds AS (   SELECT     date_trunc('day', block_timestamp) as date,     symbol,     sum(amount) as token_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events   WHERE to_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name = 'add_liquidity'   GROUP BY 1,2 ), removals AS (   SELECT     date_trunc('day', block_timestamp) as date,     symbol,     -sum(amount) as r_token_amount,     -sum(amount_usd) as r_usd_amount   FROM ethereum.udm_events   WHERE from_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name IN ('remove_liquidity', 'remove_liquidity_one_coin', 'remove_liquidity_imbalance')   GROUP BY 1,2 ) SELECT * FROM adds JOIN removals   ON (     adds.date = removals.date     AND     adds.symbol = removals.symbol   ) WHERE adds.symbol = 'ETH'
f8a353f8-a16b-482f-bf82-577df501263d,stETH-ETH Liquidity Events - just stETH [C2],WITH adds AS (   SELECT     date_trunc('day', block_timestamp) as date,     symbol,     sum(amount) as token_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events   WHERE to_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name = 'add_liquidity'   GROUP BY 1,2 ), removals AS (   SELECT     date_trunc('day', block_timestamp) as date,     symbol,     -sum(amount) as r_token_amount,     -sum(amount_usd) as r_usd_amount   FROM ethereum.udm_events   WHERE from_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Pool     AND block_timestamp > CURRENT_DATE - 30     AND origin_function_name IN ('remove_liquidity', 'remove_liquidity_one_coin', 'remove_liquidity_imbalance')   GROUP BY 1,2 ) SELECT * FROM adds JOIN removals   ON (     adds.date = removals.date     AND     adds.symbol = removals.symbol   ) WHERE adds.symbol = 'stETH'
3c3fdff0-75b0-42d6-8186-9484e132a987,Eth Latency - Blocks copy,-- forked from Flow Latency - Blocks @ https://flipsidecrypto.xyz/edit/queries/60398576-c5ba-4ad3-a799-7542a00632e7 with blocks as (     select         block_timestamp,         block_number,         lag(block_number) over (order by block_timestamp) as prev_block_height,         block_number - lag(block_number) over (order by block_timestamp) as block_height_diff     from ethereum.core.fact_blocks     where block_timestamp >= sysdate() - interval '6 hours' ), blocks_metrics as (     -- gross metric over the 6 hour period     select         time_slice(block_timestamp, 15, 'MINUTE') as block_timestamp_15_min,         min(block_timestamp) as min_block_timestamp,         max(block_timestamp) as max_block_timestamp,         min(block_number) as min_block_height,         max(block_number) as max_block_height,         max(block_number) - min(block_number) as blocks_count,         sum(iff(block_height_diff > 1, block_height_diff - 1, 0)) as missed_blocks_count,         missed_blocks_count / (max_block_height - min_block_height) as missed_blocks_ratio     from blocks     group by 1 ) select    concat((row_number() over (order by block_timestamp_15_min desc) - 1) * 15, ' minutes behind chainhead') as label,   * from blocks_metrics order by 2 desc
ff125f11-0ae4-4c7e-896b-19875dae2c8a,Untitled Query,
c3ee9e22-d8c2-43c5-8d7b-b33a4a435305,AshMinted TX_IDs,with ashminted as ( select             tx_id,         PARSE_JSON(event_data:ashMeta) AS data,         data[0]:value:value::string AS nft_id     FROM         flow.core.fact_events     WHERE         EVENT_CONTRACT = 'A.e2a89587100c6096.AshesV2'         AND EVENT_TYPE = 'AshMinted'         AND EVENT_DATA:ashMeta IS NOT NULL         -- AND BLOCK_TIMESTAMP >= '2023-10-01' ) select * from ashminted sample (25 rows) where nft_id not in (select nft_id::string from flow.nft.dim_ufc_strike_metadata)
7e0d901e-f7a0-4659-b9ca-1ec1b0127671,2023-11-30 11:35 AM,select * from flow.core.dim_contract_labels where contract_name ilike '%ufc%'; select distinct nft_collection, count(1) from flow.nft.ez_nft_sales where nft_collection ilike '%ufc%' GROUP by 1
b749b077-0635-4c5d-b73c-06ca93218c0c,2023-12-08 04:27 PM,select * from near.core.fact_transactions  where tx_hash in ( 'F8aLtLN3MQ87kcWfsW9GWzowj1cGUondMT8xyZhY1kPr', '5xec7bgSw45zUzQws3rufYYu3bpNB6gxVtyNy8teew7i' )
21886e40-de66-410c-afb4-24c37446c7f6,most gas used in past 30 [T66],WITH top_gas AS (   SELECT *   FROM terra.transactions   WHERE block_timestamp > CURRENT_DATE - 14   ORDER BY gas_used desc   LIMIT 500   ) SELECT   date_trunc('day', block_timestamp),   sum(gas_used),   sum(gas_wanted) FROM top_gas GROUP BY 1 ORDER BY 1
e51213b4-b4ab-455a-9ff8-6efa9833e2ec,Number of transactions by day [T66],SELECT   date_trunc('day', block_timestamp) as date,   count(*) FROM terra.transactions WHERE block_timestamp > CURRENT_DATE - 30   AND block_timestamp < CURRENT_DATE   AND tx_status = 'SUCCEEDED' GROUP BY 1
a8a89b17-bca3-405b-8f0d-56209364ede9,transactions per block [T65] or [T66] or [T67],WITH success AS (   SELECT     block_id,     block_timestamp,     count(*) as succeeded   FROM terra.transactions   WHERE block_timestamp > CURRENT_DATE - 90     AND tx_status = 'SUCCEEDED'   GROUP BY 1, 2   ), failure AS (   SELECT     block_id,     count(*) as failed   FROM terra.transactions   WHERE block_timestamp > CURRENT_DATE - 90     AND tx_status = 'FAILED'   GROUP BY 1 ) SELECT   success.block_id,   success.block_timestamp,   succeeded,   failed FROM success JOIN failure ON success.block_id = failure.block_id
8c339deb-595a-4fc1-afc8-eab3863242ae,Untitled Query,select * from near.core.fact_receipts limit 100; select * from near.core.fact_actions_events where tx_hash = '2NJ4krtw7G1j87CG1QRZTt8vM94aHN8Q4UvjHgE3LS4B'
cc0abd27-7ab6-4984-82a5-d8b8feb3e40d,Stacks - Txs LQ Example (contract calls agg),-- forked from Stacks - Txs LQ Example (contract calls) @ https://flipsidecrypto.xyz/edit/queries/77a2528b-de9e-4743-b457-1a2842ecaed5 -- forked from Stacks - Txs LQ Example @ https://flipsidecrypto.xyz/edit/queries/84e5fc10-4ab0-46f1-815d-50f57ab5d206 -- forked from Stacks - Blocks LQ Example @ https://flipsidecrypto.xyz/edit/queries/5d2d348d-5942-4c59-a42f-f668ee14a0ce with call as (   -- /extended/v1/tx   -- returns latest transactions and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/tx?limit=50',       { },       { }     ) as res ), transform as (   SELECT     VALUE:block_height :: INT as block_height,     VALUE:parent_burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:tx_id :: STRING as tx_id,     VALUE:tx_index :: INT as tx_index,     VALUE:sender_address::STRING as sender_address,     VALUE:event_count :: INT as event_count,     VALUE:events :: ARRAY as events,     VALUE:fee_rate :: INT as fee_rate,     VALUE:tx_status :: STRING = 'success' as tx_succeeded,     VALUE:tx_type :: STRING as tx_type,     VALUE[tx_type] ::VARIANT as tx_type_event_value,     VALUE as tx_metadata   from     call,     lateral flatten(input => res:data:results :: array) ), final as ( select   concat_ws('-', block_height, tx_index) as tx_height,   block_height,   block_timestamp,   tx_id,   tx_index,   sender_address,   event_count,   events,   fee_rate,   tx_succeeded,   tx_type,   tx_type_event_value,   tx_type_event_value:function_name::STRING as function_name,   tx_type_event_value:contract_id::STRING as contract_id,   tx_metadata from   transform where tx_type = 'contract_call' order by   1 desc  ) select    contract_id,   function_name,   count(distinct sender_address) as unique_tx_senders,   sum(fee_rate) as gross_fee_burnt from final group by 1,2 order by 3 desc
5d2d348d-5942-4c59-a42f-f668ee14a0ce,Stacks - Blocks LQ Example,with call as (   -- /extended/v1/block   -- returns 30 latest blocks and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/block?limit=30',       { },       { }     ) as res ), transform as (   SELECT     VALUE:burn_block_height :: INT as block_height,     VALUE:burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:canonical :: BOOLEAN as canonical,     VALUE:hash :: STRING as block_hash,     VALUE:parent_block_hash :: STRING as parent_block_hash,     VALUE:miner_txid :: STRING as miner_tx_id,     ARRAY_SIZE(VALUE:txs :: ARRAY) as tx_count,     VALUE as block_header   from     call,     lateral flatten(input => res:data:results :: array) ) select   block_height,   block_timestamp,   canonical,   block_hash,   parent_block_hash,   miner_tx_id,   tx_count,   avg(tx_count) over (     order by       block_height ROWS BETWEEN 4 PRECEDING       AND CURRENT ROW   ) as tx_ct_ma,   block_header from   transform order by   1 desc
f43e0ba9-8873-49a3-ad06-e86c25be605a,2023-10-31 11:40 PM,
999ebe16-2374-43a5-b6c8-734c9f9629ef,Anchor deposits - the uptick [T32],WITH withdraw AS (SELECT  	date_trunc('day', block_timestamp) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount - redemption_amount as daily_change,   SUM(deposit_amount - redemption_amount) OVER (ORDER BY withdraw.date) as cumulative_deposits FROM   (SELECT     	date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date WHERE withdraw.date > '2021-06-23T00:00:00Z' ORDER BY 1
067c68b0-f2d2-4b85-84d5-4c88370ea0e3,Stacks - Txs LQ Example (xfers),-- forked from Stacks - Txs LQ Example @ https://flipsidecrypto.xyz/edit/queries/84e5fc10-4ab0-46f1-815d-50f57ab5d206 -- forked from Stacks - Blocks LQ Example @ https://flipsidecrypto.xyz/edit/queries/5d2d348d-5942-4c59-a42f-f668ee14a0ce with call as (   -- /extended/v1/tx   -- returns latest transactions and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/tx?limit=50',       { },       { }     ) as res ), transform as (   SELECT     VALUE:block_height :: INT as block_height,     VALUE:parent_burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:tx_id :: STRING as tx_id,     VALUE:tx_index :: INT as tx_index,     VALUE:sender_address::STRING as sender_address,     VALUE:event_count :: INT as event_count,     VALUE:events :: ARRAY as events,     VALUE:fee_rate :: INT as fee_rate,     VALUE:tx_status :: STRING = 'success' as tx_succeeded,     VALUE:tx_type :: STRING as tx_type,     VALUE[tx_type] ::VARIANT as tx_type_event_value,     VALUE as tx_metadata   from     call,     lateral flatten(input => res:data:results :: array) ), final as (   select     concat_ws('-', block_height, tx_index) as tx_height,     block_height,     block_timestamp,     tx_id,     tx_index,     sender_address,     event_count,     events,     tx_type_event_value,     fee_rate,     tx_succeeded,     tx_type,     tx_metadata   from     transform   order by     1 desc ) select   block_timestamp,   count(distinct tx_id) as transfers,   count(distinct sender_address) as unique_senders,   count(distinct tx_type_event_value:recipient_address::STRING) as unique_recipients,   avg(tx_type_event_value:amount::int) as avg_transfer_size,   min(tx_type_event_value:amount::int) as min_transfer_size,   max(tx_type_event_value:amount::int) as max_transfer_size from   final where tx_type = 'token_transfer' group by 1
8c842114-bb12-4af2-9a4c-840c3da08490,Copy of THORChain Liquidity Actions by Hour [THOR8],SELECT   EXTRACT(hour from block_timestamp) as hour,   lp_action,   sum(rune_amount_usd + asset_amount_usd) as liquidty FROM thorchain.liquidity_actions WHERE block_timestamp > '2021-10-03T00:00:00Z'   AND block_timestamp < '2021-11-03T14:00:00Z' GROUP BY 1, 2 ORDER BY 1
77a2528b-de9e-4743-b457-1a2842ecaed5,Stacks - Txs LQ Example (contract calls),-- forked from Stacks - Txs LQ Example @ https://flipsidecrypto.xyz/edit/queries/84e5fc10-4ab0-46f1-815d-50f57ab5d206 -- forked from Stacks - Blocks LQ Example @ https://flipsidecrypto.xyz/edit/queries/5d2d348d-5942-4c59-a42f-f668ee14a0ce with call as (   -- /extended/v1/tx   -- returns latest transactions and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/tx?limit=50',       { },       { }     ) as res ), transform as (   SELECT     VALUE:block_height :: INT as block_height,     VALUE:parent_burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:tx_id :: STRING as tx_id,     VALUE:tx_index :: INT as tx_index,     VALUE:sender_address::STRING as sender_address,     VALUE:event_count :: INT as event_count,     VALUE:events :: ARRAY as events,     VALUE:fee_rate :: INT as fee_rate,     VALUE:tx_status :: STRING = 'success' as tx_succeeded,     VALUE:tx_type :: STRING as tx_type,     VALUE[tx_type] ::VARIANT as tx_type_event_value,     VALUE as tx_metadata   from     call,     lateral flatten(input => res:data:results :: array) ) select   concat_ws('-', block_height, tx_index) as tx_height,   block_height,   block_timestamp,   tx_id,   tx_index,   sender_address,   event_count,   events,   fee_rate,   tx_succeeded,   tx_type,   tx_type_event_value,   tx_type_event_value:function_name::STRING as function_name,   tx_type_event_value:contract_id::STRING as contract_id,   tx_metadata from   transform where tx_type = 'contract_call' order by   1 desc
84e5fc10-4ab0-46f1-815d-50f57ab5d206,Stacks - Txs LQ Example,-- forked from Stacks - Blocks LQ Example @ https://flipsidecrypto.xyz/edit/queries/5d2d348d-5942-4c59-a42f-f668ee14a0ce with call as (   -- /extended/v1/tx   -- returns latest transactions and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/tx?limit=50',       { },       { }     ) as res ), transform as (   SELECT     VALUE:block_height :: INT as block_height,     VALUE:parent_burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:tx_id :: STRING as tx_id,     VALUE:tx_index :: INT as tx_index,     VALUE:sender_address::STRING as sender_address,     VALUE:event_count :: INT as event_count,     VALUE:events :: ARRAY as events,     VALUE:fee_rate :: INT as fee_rate,     VALUE:tx_status :: STRING = 'success' as tx_succeeded,     VALUE:tx_type :: STRING as tx_type,     VALUE[tx_type] ::VARIANT as tx_type_event_value,     VALUE as tx_metadata   from     call,     lateral flatten(input => res:data:results :: array) ) select   concat_ws('-', block_height, tx_index) as tx_height,   block_height,   block_timestamp,   tx_id,   tx_index,   sender_address,   event_count,   events,   fee_rate,   tx_succeeded,   tx_type,   tx_metadata,   avg(fee_rate) over (partition by block_height) as avg_fee_per_block,   avg(event_count) over (partition by tx_type) as avg_event_per_type from   transform order by   1 desc
25ce8b5c-74f4-40a8-a705-372498089adc,Avax Delay,with   avax as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_blocks' as table_name     from       avalanche.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_transactions' as table_name     from       avalanche.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_event_logs' as table_name     from       avalanche.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_traces' as table_name     from       avalanche.core.fact_traces   ) select   * from   avax
81e54cd3-796e-40e3-92d7-1c5270331cee,poised-rose,
ea872942-dc36-4e3e-9a33-80db64829895,2024-01-26 02:33 PM,select * FROM near.defi.fact_dex_swaps where block_timestamp > current_date - 1 limit 5
df4b9818-50bc-49c8-b29c-0d33552692b7,2024-01-19 09:32 AM,select * from flow.beta.dim_nflad_playoff_rosters
0d9edd0d-008c-4c89-8cde-eef4591f16b8,yveCRV Vault Activity by type [YC1],SELECT   date_trunc('week', block_timestamp) as week,   CASE     WHEN origin_function_name LIKE 'deposit%' THEN 'deposit'     WHEN origin_function_name LIKE 'remove%' THEN 'withdraw'     WHEN origin_function_name = 'withdraw' THEN 'withdraw'   END as function_type,   count(*) as count,   sum(amount) as crv_volume FROM ethereum.udm_events WHERE contract_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'   AND block_timestamp > '2021-04-01T00:00:00Z'    AND function_type IS NOT NULL GROUP BY 1,2 ORDER BY 1, 3 desc
7220c7fc-c128-4093-a61c-0fda8119b12c,2023-12-05 08:37 PM,
e3835f7f-cfae-41a6-be11-132f0a3b5ea2,2023-10-11 03:17 PM,SELECT * FROM terra.core.fact_msg_attributes_standard WHERE block_timestamp::DATE = '2023-07-31' and tx_id = '61D08A9B0FE47A41BB838CB08255B24646B91511212189BA62607C264F1F5EF7' and msg_type = 'tx' and attribute_key = 'fee'
cd792561-5833-4b6b-933a-a2955c825640,2023-10-13 01:14 PM,near.core.fact_developer_activity
02c6b8ac-25d3-4d8c-9ebd-d42cddd788e6,Flow, Top NFT Collections (7d),select   nft_collection,   count(distinct tx_id) as sale_txs,   sum(price) as volume from flow.nft.ez_nft_sales where block_timestamp::date >= sysdate() - interval '7 days'   and currency = 'A.ead892083b3e2c6c.DapperUtilityCoin' group by 1 order by 3 desc
aab38593-0b54-479b-9cb3-99eda7609528,weth owed test,select * from uniswapv3.positions where pool_name like 'WETH-USDT%';
336b120e-15e2-4edd-a5e3-e46f61e572a4,minted bLUNA,SELECT * FROM terra.msg_events WHERE tx_id = 'FC5F68022E5202C5F6058BC6A32F933B3F50212589C4C4CF40771B1108221D29'
6bf767e2-4809-436b-b78f-276abdaea9ee,Untitled Query,
68187c06-2786-4bf9-89eb-9c8dd6f77e51,AllDay Metadata Check,select   -- count(1), count(distinct player), count(distinct team)   * from flow.nft.dim_allday_metadata where classification = 'PLAYER_GAME'   and moment_date >= '2023-07-01' -- current season only    and moment_stats_full:metadata:playerPosition::string in (     'QB',     'WR',     'RB',     'TE',     'K'   ) limit 5
daac3761-5057-4a36-b7a9-fd45b0f401d2,google-sheets-demo copy copy,-- forked from theericstone / google-sheets-demo copy @ https://flipsidecrypto.xyz/theericstone/q/AJSGCkMc7Gtv/google-sheets-demo-copy -- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT   livequery.live.udf_api(     'GET',     'https://science.flipsidecrypto.xyz/googlesheets/readsheet',     { 'Content-Type': 'application/json' },      {        'sheets_id' : '1isXwTpJlxMClz1Kg0tkSNMwhd8Z944IgprPULx_aqWg',        'tab_name' : 'Sheet1'     }   ) as result from DUAL ), data AS ( select result:data as json_result_must_pivot from res ) SELECT   d.value:"ID"::VARCHAR as ID,    TO_NUMBER(d.value:"Value") as Value,    d.value:"Class"::VARCHAR as Class      FROM         data,         LATERAL FLATTEN(input => data.json_result_must_pivot::VARIANT) d
dc2f4e31-ce0e-4fbf-bffd-97766c818863,Near tx density,select   round(block_id, -4) as _group,   count(distinct tx_hash) from near.core.fact_transactions where block_id between   -- 106700000   -- 106797625   107100000 and   -- 107100000     108311964 group by 1 order by 1
6cc82089-abdd-4315-8b2b-c801cf9f2235,terraswap contracts by name and address [T57],SELECT   address,   address_name FROM terra.labels WHERE label = 'terraswap'   AND label_type = 'dex'
58198055-7ee3-43dc-9f8d-3c26a7c85966,Near Daily Txs,select   block_timestamp::date,   count(distinct tx_hash) from near.core.fact_transactions where block_timestamp::date >= sysdate() - interval '7 days' group by 1 order by 1
c47ca878-d24f-4838-93de-630cdff4242f,2023-12-18 03:14 PM,select count(distinct block_number) from aurora.core.fact_transactions
3223850a-bbe1-4ed3-97bf-11a4bab7a82c,AD - Total Supply (Atlas),WITH lockup_receipts AS (     SELECT fr.tx_hash          , fr.block_timestamp          , fr.actions:predecessor_id::string AS predecessor_id          , fr.receiver_id          , fr.actions          , OBJECT_KEYS(fr.status_value)[0]::string AS status          , fr.logs          FROM near.core.fact_receipts AS fr     WHERE fr.receiver_id LIKE '%.lockup.near'       AND status != 'Failure' ), daily_lockup_locked_balances AS (     WITH     -- new lockup contract created     new_lockup_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'new'     ),               -- vesting is stopped by the Foundation     terminate_vesting_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(lr.logs[0], 'unvested balance is ')[1]::bigint / 1e24 AS unvested_balance         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'terminate_vesting'     ),               terminate_vesting_txs_with_vesting_schedule AS (         SELECT tv.*              , fc.args:vesting_schedule_with_salt:vesting_schedule AS vesting_schedule              FROM terminate_vesting_txs AS tv             LEFT JOIN near.core.fact_actions_events_function_call AS fc                 ON fc.tx_hash = tv.tx_hash                 AND fc.method_name = 'terminate_vesting'              QUALIFY row_number() OVER (partition by tv.tx_hash order by tv.block_timestamp) = 1  -- dedupe     ),               -- unvested tokens are withdrawn (effectively unlocked into circulating supply)     termination_withdraw_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(split(lr.logs[0], ' of terminated unvested balance')[0], 'Withdrawing ')[1]::bigint / 1e24 AS withdrawn_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'termination_withdraw'      -- Simplify logic -> get only first termination withdrawal         -- QUALIFY row_number() OVER (partition by lockup_account_id order by block_timestamp) = 1     ),               daily_termination_withdrawn_amount AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(withdrawn_amount) AS withdrawn_amount         FROM termination_withdraw_txs         GROUP BY 1,2     ),               -- lockup amounts     deposits AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:Transfer:deposit::bigint / 1e24 AS deposit_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE OBJECT_KEYS(value:Transfer)[0]::string = 'deposit'     ),               lockup_contracts AS (         SELECT lcr.tx_hash              , lcr.block_timestamp              , lcr.lockup_account_id              , fc1.args:lockup_duration::bigint AS input_lockup_duration_ns              , fc1.args:lockup_timestamp::bigint AS input_lockup_timestamp_epoch              , fc1.args:owner_account_id::string AS owner_account_id              , fc1.args:release_duration::bigint AS input_release_duration_ns              , coalesce(tv.vesting_schedule, fc1.args:vesting_schedule:VestingSchedule) AS vesting_schedule_              , vesting_schedule_:cliff_timestamp::bigint AS vesting_cliff_timestamp_epoch              , vesting_schedule_:start_timestamp::bigint AS vesting_start_timestamp_epoch              , vesting_schedule_:end_timestamp::bigint AS vesting_end_timestamp_epoch              , coalesce( fc1.args:transfers_information:TransfersEnabled:transfers_timestamp::bigint,                           1602614338293769340 ) AS transfers_enabled_timestamp_epoch              , d.deposit_amount                   , tv.block_timestamp AS terminate_vesting_timestamp              , tv.unvested_balance AS termination_unvested_amount                   , tw.block_timestamp AS termination_withdraw_timestamp              , tw.withdrawn_amount AS termination_withdrawn_amount                   , (CASE WHEN OBJECT_KEYS(fc1.args:vesting_schedule)[0]::string = 'VestingHash'                      THEN True ELSE False END) AS is_private_vesting              FROM new_lockup_txs AS lcr             LEFT JOIN near.core.fact_actions_events_function_call AS fc1                 ON fc1.tx_hash = lcr.tx_hash                 AND fc1.method_name = 'new'                  LEFT JOIN deposits AS d                 ON d.tx_hash = lcr.tx_hash                  LEFT JOIN terminate_vesting_txs_with_vesting_schedule AS tv                 ON tv.lockup_account_id = lcr.lockup_account_id                  LEFT JOIN termination_withdraw_txs AS tw                 ON tw.lockup_account_id = lcr.lockup_account_id              WHERE lcr.tx_hash IN (SELECT tx_hash FROM new_lockup_txs)           AND d.deposit_amount > 0     ),               lockup_contracts__parsed AS (         SELECT lockup_account_id             -- the number of times the same lockup account ID has been used (used as part of lockup unique identifier)              , row_number() OVER (partition by lockup_account_id order by block_timestamp) AS lockup_index              , owner_account_id              , deposit_amount AS lockup_amount                  -- timestamp when tokens were locked (lock start)              , block_timestamp AS deposit_timestamp                  -- timestamp when transfers were enabled in the blockchain (default reference when lockup_timestamp is null)              , to_timestamp(transfers_enabled_timestamp_epoch, 9) AS transfers_enabled_timestamp                  -- timestamp when tokens start unlocking (explicit parameter)              , to_timestamp(input_lockup_timestamp_epoch, 9) AS input_lockup_timestamp                  -- if lockup_timestamp is null, calculate unlock start from lockup duration              , timestampadd(nanoseconds, input_lockup_duration_ns, transfers_enabled_timestamp) AS calculated_lockup_timestamp                  -- lockup mechanism              , input_lockup_duration_ns              , input_release_duration_ns                  -- Max between input and calculated lockup timestamp              , (CASE WHEN input_lockup_timestamp IS NOT NULL                      THEN greatest(input_lockup_timestamp, calculated_lockup_timestamp)                      ELSE calculated_lockup_timestamp END) AS lockup_timestamp                  -- If release_duration is not provided, tokens are immediately unlocked              , (CASE WHEN input_release_duration_ns IS NOT NULL                      THEN timestampadd(nanosecond, input_release_duration_ns, lockup_timestamp)  -- linear release if release_duration is provided, else full unlock                      ELSE lockup_timestamp END) AS lockup_end_timestamp                  -- vesting mechanism              , is_private_vesting              , to_timestamp(vesting_start_timestamp_epoch, 9) AS vesting_start_timestamp              , to_timestamp(vesting_end_timestamp_epoch, 9) AS vesting_end_timestamp              , to_timestamp(vesting_cliff_timestamp_epoch, 9) AS vesting_cliff_timestamp                  -- vesting termination              , terminate_vesting_timestamp              , termination_unvested_amount              , termination_withdraw_timestamp              , termination_withdrawn_amount                   , tx_hash AS _tx_hash                   , (CASE WHEN lockup_timestamp IS NOT NULL AND vesting_start_timestamp IS NULL                      THEN least(deposit_timestamp, lockup_timestamp)                      WHEN lockup_timestamp IS NULL AND vesting_start_timestamp IS NOT NULL                      THEN least(deposit_timestamp, vesting_start_timestamp)                      ELSE least(deposit_timestamp, lockup_timestamp, vesting_start_timestamp) END)::date AS _lockup_start_date                   , (CASE WHEN lockup_end_timestamp IS NOT NULL AND vesting_end_timestamp IS NULL                      THEN lockup_end_timestamp                      WHEN lockup_end_timestamp IS NULL AND vesting_end_timestamp IS NOT NULL                      THEN vesting_end_timestamp                      ELSE greatest(lockup_end_timestamp, vesting_end_timestamp) END)::date AS _lockup_end_date              FROM lockup_contracts     ),               lockup_contracts_daily_balance__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-01-01' AND CURRENT_DATE )              SELECT lc.lockup_account_id              , lc.lockup_index              , lc.owner_account_id                   , d.utc_date              , d.utc_date + interval '1 day' - interval '1 nanosecond' AS block_timestamp  -- End of day block timestamp                   , lc.lockup_amount              , lc.deposit_timestamp                  -- Lockup logic              , lc.lockup_timestamp              , lc.lockup_end_timestamp              , greatest(0, timestampdiff(nanosecond, block_timestamp, lockup_end_timestamp)) AS lockup_time_left_ns              , (CASE WHEN block_timestamp >= lockup_timestamp                      THEN (CASE WHEN input_release_duration_ns > 0                                 THEN (CASE WHEN block_timestamp >= lockup_end_timestamp                                            THEN 0  -- everything is released                                            ELSE lockup_amount * lockup_time_left_ns / input_release_duration_ns                                            END)                                 ELSE 0 END)                      ELSE lockup_amount  -- The entire balance is still locked before the lockup timestamp                      END) AS unreleased_amount                  -- Vesting logic              , lc.vesting_start_timestamp              , lc.vesting_cliff_timestamp              , lc.vesting_end_timestamp              , lc.terminate_vesting_timestamp              , lc.termination_unvested_amount              , greatest(0, timestampdiff(nanosecond, block_timestamp, vesting_end_timestamp)) AS vesting_time_left_ns              , timestampdiff(nanosecond, vesting_start_timestamp, vesting_end_timestamp) AS vesting_total_time_ns              FROM lockup_contracts__parsed AS lc, dates AS d         WHERE d.utc_date BETWEEN lc._lockup_start_date                              AND lc._lockup_end_date     ),               lockup_contracts_daily_balance__prep_2 AS (         SELECT lc.*              , sum(coalesce(dtw.withdrawn_amount, 0))                     OVER (partition by lc.lockup_account_id, lc.lockup_index                               order by lc.utc_date                               rows between unbounded preceding                                        and current row) AS termination_withdrawn_amount                  FROM lockup_contracts_daily_balance__prep_1 AS lc             LEFT JOIN daily_termination_withdrawn_amount AS dtw                 ON dtw.lockup_account_id = lc.lockup_account_id                 AND dtw.utc_date = lc.utc_date          ),               lockup_contracts_daily_balance AS (         SELECT lc.*                  -- Vesting logic                  -- Not 100% accurate due to private vesting lockups (unknown/hidden vesting parameters)              , (CASE WHEN block_timestamp >= terminate_vesting_timestamp                      THEN termination_unvested_amount - termination_withdrawn_amount                      ELSE (CASE WHEN block_timestamp < vesting_cliff_timestamp                                 THEN lockup_amount  -- Before the cliff, nothing is vested                                 WHEN block_timestamp >= vesting_end_timestamp                                 THEN 0  -- After the end, everything is vested                                 ELSE lockup_amount * vesting_time_left_ns / vesting_total_time_ns                                 END)                      END) AS unvested_amount                  -- Combined logic              , greatest(unreleased_amount - termination_withdrawn_amount, coalesce(unvested_amount, 0)) AS locked_amount                   , locked_amount - coalesce(lag(locked_amount) OVER (partition by lc.lockup_account_id, lc.lockup_index order by lc.utc_date), 0) AS unlocked_amount_today              FROM lockup_contracts_daily_balance__prep_2 AS lc     )     SELECT * FROM lockup_contracts_daily_balance ), daily_lockup_staking_balances AS (     WITH     lockup_staking_logs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:FunctionCall:method_name::string AS method_name              , lr.receiver_id AS lockup_account_id              , (CASE method_name                     WHEN 'stake'                     THEN split(split(lr.logs[0], ' at the staking pool')[0], 'Staking ')[1]::bigint / 1e24                                          WHEN 'deposit_and_stake'                     THEN split(split(lr.logs[0], ' to the staking pool')[0], 'Depositing and staking ')[1]::bigint / 1e24                          WHEN 'unstake'                     THEN split(split(lr.logs[0], ' from the staking pool')[0], 'Unstaking ')[1]::bigint / 1e24                          END) AS amount                   , lr.logs              FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE method_name IN ('stake','deposit_and_stake',                               'unstake','unstake_all')     ),               daily_staking_stats AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(CASE WHEN method_name IN ('stake','deposit_and_stake') THEN amount ELSE 0 END) AS staked_amount_              , sum(CASE WHEN method_name IN ('unstake') THEN amount ELSE 0 END) AS unstaked_amount_              , (CASE WHEN count(CASE WHEN method_name = 'unstake_all' THEN tx_hash ELSE NULL END) > 0                      THEN True ELSE False END) AS unstaked_all         FROM lockup_staking_logs         GROUP BY 1,2     ),               lockup_stakers AS (         SELECT lockup_account_id              , min(block_timestamp)::date AS start_date         FROM lockup_staking_logs         GROUP BY 1     ),               lockup_stakers_daily_balances__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-09-01' AND CURRENT_DATE )              SELECT ls.lockup_account_id              , d.utc_date              FROM lockup_stakers AS ls, dates AS d         WHERE d.utc_date >= ls.start_date     ),               lockup_stakers_daily_balances__prep_2 AS (         SELECT d.lockup_account_id              , d.utc_date              , coalesce(dss.staked_amount_, 0) AS staked_amount              , coalesce(dss.unstaked_amount_, 0) AS unstaked_amount              , dss.unstaked_all              , sum(CASE WHEN dss.unstaked_all = True THEN 1 ELSE 0 END)                   OVER (partition by d.lockup_account_id                         order by d.utc_date                         rows between unbounded preceding                                  and current row) AS _unstake_counter              FROM lockup_stakers_daily_balances__prep_1 AS d             LEFT JOIN daily_staking_stats AS dss                 ON dss.lockup_account_id = d.lockup_account_id                 AND dss.utc_date = d.utc_date     ),               lockup_stakers_daily_balances__prep_3 AS (         SELECT *              , coalesce(lag(_unstake_counter)                    OVER (partition by lockup_account_id                             order by utc_date)                , 0) AS staking_period_index         FROM lockup_stakers_daily_balances__prep_2     ),               lockup_stakers_daily_balances__prep_4 AS (         SELECT *              , sum(staked_amount - unstaked_amount)                    OVER (partition by lockup_account_id, staking_period_index                             order by utc_date                             rows between unbounded preceding                                      and current row) AS _cumulative_staked_amount                   , (CASE WHEN unstaked_all = True THEN 0 ELSE _cumulative_staked_amount END) AS staked_balance         FROM lockup_stakers_daily_balances__prep_3     ),               lockup_stakers_daily_balances AS (         SELECT lockup_account_id              , utc_date              , staked_balance         FROM lockup_stakers_daily_balances__prep_4     )               SELECT * FROM lockup_stakers_daily_balances ), daily_lockup_locked_and_staking_balances AS (     SELECT l.lockup_account_id          , l.utc_date          , l.locked_amount          , coalesce(s.staked_balance, 0) AS staked_amount          , least(staked_amount, locked_amount) AS locked_and_staked_amount     FROM daily_lockup_locked_balances AS l         LEFT JOIN daily_lockup_staking_balances AS s             ON s.lockup_account_id = l.lockup_account_id             AND s.utc_date = l.utc_date ), daily_locked_and_staked_supply AS (     SELECT utc_date          , sum(locked_amount) AS total_locked_supply          , sum(locked_and_staked_amount) AS locked_and_staked_supply     FROM daily_lockup_locked_and_staking_balances     GROUP BY 1 ), daily_staked_supply AS (     WITH          dim_epochs AS (      	SELECT epoch_id       		 , min(block_id) AS min_block_id       		 , max(block_id) AS max_block_id       		 , count(*) AS blocks       		 , count(distinct block_author) AS block_producers       		 , min(block_timestamp) AS start_time       		 , max(block_timestamp) AS end_time       		 , max(total_supply) / 1e24 AS total_near_supply       		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num              	FROM near.core.fact_blocks AS b       	GROUP BY 1     ),               staking_actions AS (       	SELECT r.tx_hash           	 , r.block_timestamp           	 , r.receiver_id AS validator_address           	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num           	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance                    FROM near.core.fact_receipts AS r       	   , lateral flatten( input => r.logs ) AS l                WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )           AND r.tx_hash IN ( SELECT tx_hash            				     FROM near.core.fact_actions_events_function_call           				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )           AND left(l.value::string, 6) = 'Epoch '            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               proposals AS (       	SELECT b.block_id           	 , b.block_timestamp           	 , b.epoch_id           	 , vp.value['account_id'] AS validator_address           	 , vp.value['stake']::bigint / 1e24 AS staked_balance         FROM near.core.fact_blocks AS b            , lateral flatten( input => b.chunks ) AS c            , lateral flatten( input => c.value['validator_proposals']) AS vp       	-- WHERE b.block_timestamp >= '2021-09-01'         QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1     ),               proposals_per_epoch AS (       	SELECT p.block_timestamp       		 , p.epoch_id       		 , p.validator_address       		 , p.staked_balance       		 , e.epoch_num              	FROM proposals AS p       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = p.epoch_id            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               block_producers_per_epoch AS (       	SELECT b.epoch_id       		 , e.epoch_num       		 , b.block_author AS validator_address       		 , sa.staked_balance       		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced              	FROM near.core.fact_blocks AS b       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = b.epoch_id            		LEFT JOIN staking_actions AS sa       			ON sa.epoch_num = e.epoch_num       			AND sa.validator_address = b.block_author            	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1     ),               dim_validators AS (       	SELECT validator_address       		 , min(start_epoch) AS start_epoch       		 , min(start_time) AS start_time              	FROM (     		SELECT validator_address         		 , min(epoch_num) AS start_epoch         		 , min(block_timestamp) AS start_time         	FROM staking_actions AS sa         	GROUP BY 1                	UNION ALL                	SELECT block_author AS validator_address         		 , min(e.epoch_num) AS start_epoch         		 , min(b.block_timestamp) AS start_time         	FROM near.core.fact_blocks AS b         		LEFT JOIN dim_epochs AS e         			ON b.block_id BETWEEN e.min_block_id AND e.max_block_id         	GROUP BY 1         ) AS x              	GROUP BY 1     ),               dim_table AS (       	SELECT v.validator_address       		 , e.epoch_num       		 , e.start_time       		 , e.total_near_supply              	FROM dim_validators AS v, dim_epochs AS e       	WHERE v.start_epoch <= e.epoch_num     ),               validator_status_per_epoch AS (       	SELECT dt.epoch_num       		 , dt.start_time       		 , dt.validator_address       		 , coalesce(       				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS       					OVER (partition by dt.validator_address        					  	  order by dt.epoch_num       					  	  rows between unbounded preceding       								   and current row),       				0) AS staked_balance       		 , bp.blocks_produced       		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer              	FROM dim_table AS dt       		LEFT JOIN block_producers_per_epoch AS bp       			ON bp.epoch_num = dt.epoch_num       			AND bp.validator_address= dt.validator_address            		LEFT JOIN proposals_per_epoch AS p       			ON p.epoch_num = dt.epoch_num       			AND p.validator_address= dt.validator_address          ),               epoch_stats AS (       	SELECT epoch_num           	 , start_time       		 , sum(staked_balance) AS total_near_staked                    FROM validator_status_per_epoch         WHERE staked_balance > 0         GROUP BY 1,2     ),               epoch_stats_2 AS (       	SELECT es.*       		 , de.total_near_supply       		 , de.total_near_supply - es.total_near_staked AS other_near_supply       	 	 , 100.00 * total_near_staked / total_near_supply AS perc_staked_supply       	FROM epoch_stats AS es       		LEFT JOIN dim_epochs AS de       			ON de.epoch_num = es.epoch_num     )               SELECT start_time::date AS utc_date          , total_near_staked AS total_staked_supply          , total_near_supply AS total_supply     FROM epoch_stats_2     QUALIFY row_number() OVER (partition by utc_date order by start_time desc) = 1 ), daily_supply_stats AS (     SELECT s.utc_date          , s.total_supply          , s.total_staked_supply          , s.total_supply - s.total_staked_supply AS total_nonstaked_supply          , ls.total_locked_supply          , ls.locked_and_staked_supply          , greatest(0, total_staked_supply - locked_and_staked_supply) AS nonlocked_and_staked_supply          , greatest(0, total_locked_supply - locked_and_staked_supply) AS locked_and_nonstaked_supply          , total_supply             - locked_and_staked_supply             - locked_and_nonstaked_supply             - nonlocked_and_staked_supply AS nonlocked_and_nonstaked_supply          , total_supply - total_locked_supply AS circulating_supply          , total_locked_supply AS locked_supply     FROM daily_staked_supply AS s         LEFT JOIN daily_locked_and_staked_supply AS ls             ON ls.utc_date = s.utc_date ), output AS (     SELECT utc_date          , utc_date AS "Date"          , total_supply AS "Total Supply - Actual"          , total_staked_supply AS "Staked Supply"          , total_nonstaked_supply AS "Non-staked Supply"          , circulating_supply AS "Circulating Supply"          , total_supply - circulating_supply as "Total Supply"          , total_locked_supply AS "Locked Supply"          , nonlocked_and_nonstaked_supply AS "Liquid Supply"          , total_supply - nonlocked_and_nonstaked_supply  AS "Non-liquid Supply"          , locked_and_staked_supply AS "Staked (Locked Supply)"          , locked_and_nonstaked_supply AS "Non-staked (Locked Supply)"          , nonlocked_and_staked_supply AS "Staked (Circulating Supply)"          , nonlocked_and_nonstaked_supply AS "Non-staked (Circulating Supply)"          , total_locked_supply / total_supply AS perc_locked_supply          , circulating_supply / total_supply AS perc_circulating_supply          , locked_and_staked_supply / total_locked_supply AS perc_staked__locked          , nonlocked_and_staked_supply / circulating_supply AS perc_staked__circulating          , 1 AS dummy     FROM daily_supply_stats ) SELECT * FROM output WHERE utc_date >= '2023-01-01' ORDER BY utc_date DESC
9c36cb41-22e6-40c3-a0b9-8d6e1f631410,Untitled Query,with transactions as (select * from flow.core.fact_nft_sales where marketplace IN ('A.c1e4f4f4c4257510.TopShotMarketV3', 'A.c1e4f4f4c4257510.Market') and TX_SUCCEEDED = 'TRUE' ),    volume as ( select date_trunc('w',block_timestamp) as _week, nft_id, sum(price::numeric) as total_volume from transactions  group by 1,2), joined as ( select a._week, a.nft_id as id, a.total_volume as total_volume, b.* from volume as a   left join (select * from flow.core.dim_topshot_metadata) as b  on a.nft_id = b.nft_id), final as (select _week, player, sum(total_volume) as total_volume from joined  -- where substring(player,1,9) LIKE ('Shaquille') group by 1,2 order by total_volume desc) select _week, player, total_volume from final  order by 1, 2 desc
333c9bdc-c60c-4697-8008-0e6140f0f5e1,[terradash] Anchor Borrow Users,with msgs as (   select     *   from terra.msgs   where block_timestamp > '2021-03-16'    and msg_value:contract::string in (       select address from terra.labels where label = 'anchor'     )     and msg_value:sender::string NOT IN (SELECT address FROM terra.labels WHERE label IS NOT NULL) ), borrow_side as (   select     tx_id,     block_timestamp,     msg_value:sender::string as sender   from msgs   where msg_value:contract in (     'terra10cxuzggyvvv44magvrh3thpdnk9cmlgk93gmx2', -- bETH custody     'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9', -- bETH rewards     'terra1ptjp2vfjrwh0j0faj9r6katm640kgjxnwwq9kn', -- bLUNA custody     'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts', -- bLUNA Hub     'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8' -- Overseer   ) ), -- exclude things like swaps filtered_collateral as (   select     tx_id,     block_timestamp,     msg_value:sender::string as sender   from msgs   where msg_value:contract in (     'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun', -- bETH     'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' -- bLUNA     )     and (       -- col4       msg_value:execute_msg:send:msg like '%deposit_collateral%'       -- col5       or msg_value:execute_msg:send:msg like '%eyJkZXBvc2l0X2NvbGxhdGVyYWwiOnt9fQ=='     ) ), borrow_combo as (   select * from borrow_side   union   select * from filtered_collateral ) select 	date_trunc('d', block_timestamp) as date, 	count(distinct sender) as unique_wallets from borrow_combo group by 1 order by 1
b8ff3531-06fe-4f11-8e1b-773a4cd9a4ea,[terradash] Total Collateral Value - long format,WITH DEPOSIT AS ( SELECT   date(block_timestamp) as date,   currency,   sum(amount) as collateral_deposit FROM anchor.collateral   WHERE event_type = 'provide' GROUP BY 1,2 ), WITHDRAW AS ( SELECT   date(block_timestamp) as date,   currency,   sum(amount) as collateral_withdraw FROM anchor.collateral   WHERE event_type = 'withdraw' GROUP BY 1,2 ), LIQUIDATIONS AS (   SELECT   date(block_timestamp) as date,   liquidated_currency as currency,   sum(LIQUIDATED_AMOUNT) as collateral_liquidated FROM anchor.liquidations GROUP BY 1,2 ), PRICES AS (  SELECT   DATE(block_timestamp) as date_prices,   currency as token,   avg(price_usd) as avg_price_usd FROM terra.oracle_prices    WHERE block_timestamp > '2021-03-17'    AND currency IN ('terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun', 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp',   'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a', 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58') GROUP BY 1,2 ), FINAL AS ( SELECT   a.date as dates,   a.currency as collateral,   ifnull(collateral_deposit, 0) AS add,   ifnull(collateral_withdraw, 0)*-1 AS remove,   ifnull(collateral_liquidated, 0)*-1 AS liqudate,   add + remove + liqudate AS net_change,   sum(net_change) over (partition by a.currency order by a.date) AS tvl_amt FROM DEPOSIT a   LEFT JOIN WITHDRAW b ON a.date = b.date AND a.currency = b.currency   LEFT JOIN LIQUIDATIONS c ON a.date = c.date AND a.currency = c.currency   ORDER BY 1,2 ), TVL AS ( SELECT   dates,   collateral,   sum(add) as deposits,   sum(remove) as withdrawals,   sum(liqudate) as liquidations,   sum(net_change) as collateral_change,   sum(tvl_amt) as tvl_amount FROM FINAL  group by 1,2  ) SELECT   dates,   collateral,   case when collateral = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' then 'bETH'    when collateral = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' then 'bLUNA'   when collateral = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' then 'bATOM'   when collateral = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' then 'sAVAX' else null end as collateral_name,   deposits, withdrawals, liquidations, collateral_change, tvl_amount,   tvl_amount*avg_price_usd as tvl_usd FROM TVL    LEFT JOIN prices ON dates = date_prices AND collateral = token   LEFT JOIN terra.labels ON address = collateral    ORDER BY 1
fb67732d-b21f-4ccd-8aa2-fb1f1b259778,[terradash] Anchor Net Earn Over Time (sum anchor deposite revised),with deposits as (   select   	date_trunc('d', block_timestamp) as day,   	sum(deposit_amount) as deposit_amount   from anchor.deposits   group by 1    ), redemptions as (   select   	date_trunc('d', block_timestamp) as day,   	sum(amount) as redeem_amount   from anchor.redeem   group by 1    ), combo as (   select * from deposits   left join redemptions using (day) ), net_daily as (   select   	*,   	deposit_amount - redeem_amount as net_daily_amount   from combo    ), total_deps as (   select   	*,   	sum(net_daily_amount) over (order by day) as z_cumulative_sum   from net_daily   order by 1    ) select     sum(iff(day>=CURRENT_DATE-30,net_daily_amount,0)) as past_30_amount,     sum(iff(day>=CURRENT_DATE-7,net_daily_amount,0)) as past_7_amount from total_deps
9a90a577-932e-4001-b8db-f4eae1e53633,MATIC Faucet [P HUNT],SELECT    block_timestamp,   tx_id,   from_address,   to_address,   gas_used,   fee FROM polygon.transactions WHERE tx_id = '0x036e1c1933a7675ae5cb7fb20700823c6a705b8f35fffd62a6a88e0840a0abf7'
22eaafce-7041-4617-aef2-55f100f62819,ESPN LQ - LV-LAC Player Connection (Offense),WITH athlete_data AS (   SELECT     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/16800/statistics/0?lang=en&region=us', {})) as stats_16800,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3916433/statistics/0?lang=en&region=us', {})) as stats_3916433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4429086/statistics/0?lang=en&region=us', {})) as stats_4429086,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3043275/statistics/0?lang=en&region=us', {})) as stats_3043275,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3135321/statistics/0?lang=en&region=us', {})) as stats_3135321,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3068267/statistics/0?lang=en&region=us', {})) as stats_3068267,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4242433/statistics/0?lang=en&region=us', {})) as stats_4242433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3918639/statistics/0?lang=en&region=us', {})) as stats_3918639,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4429025/statistics/0?lang=en&region=us', {})) as stats_4429025,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/16800', {})) as names_16800,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3916433', {})) as names_3916433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4429086', {})) as names_4429086,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3043275', {})) as names_3043275,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3135321', {})) as names_3135321,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3068267', {})) as names_3068267,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4242433', {})) as names_4242433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3918639', {})) as names_3918639,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4429025', {})) as names_4429025,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/13?lang=en&region=us', {})) as team_13,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/24?lang=en&region=us', {})) as team_24,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593?lang=en&region=us', {})) as event ) SELECT   event:data:name as "Match-Up",   names_16800:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_16800:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_16800:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_16800:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_16800:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_3916433:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_3916433:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_3916433:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_3916433:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_3916433:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_4429086:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_4429086:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_4429086:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_4429086:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_4429086:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_3043275:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_3043275:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_3043275:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_3043275:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_3043275:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_3135321:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_3135321:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_3135321:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_3135321:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_3135321:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_3068267:data:fullName as "Name",   team_24:data:displayName as "Team",   stats_3068267:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_3068267:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_3068267:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_3068267:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_4242433:data:fullName as "Name",   team_24:data:displayName as "Team",   stats_4242433:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_4242433:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_4242433:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_4242433:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_3918639:data:fullName as "Name",   team_24:data:displayName as "Team",   stats_3918639:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_3918639:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_3918639:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_3918639:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data UNION ALL SELECT   event:data:name as "Match-Up",   names_4429025:data:fullName as "Name",   team_24:data:displayName as "Team",   stats_4429025:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_4429025:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_4429025:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_4429025:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data ORDER BY 4 DESC LIMIT 10;
be366088-a5fa-4222-aa3d-bfb6a9183f5c,stETH-ETH exchange volume utilization [C2],WITH volume AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(amount_usd) as swap_amount   FROM ethereum.dex_swaps   WHERE pool_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- stETH-ETH Curve Pool     AND block_timestamp > CURRENT_DATE - 30     AND token_address = '0xae7ab96520de3a18e5e111b5eaab095312d7fe84' -- stETH token   GROUP BY 1   ), locked AS (   SELECT     balance_date,     symbol,     balance,     amount_usd   FROM ethereum.erc20_balances   WHERE user_address = '0xdc24316b9ae028f1497c275eb9192a3ea0f67022' -- etETH-ETH Pool Address     AND balance_date > CURRENT_DATE - 30   ) SELECT   date,   swap_amount as amount,   avg(swap_amount) OVER (ORDER BY date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as swap_ma,   amount_usd as locked_amount,   avg(amount_usd) OVER (ORDER BY date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as locked_ma,   swap_ma / locked_ma as utilization FROM volume JOIN locked ON volume.date = locked.balance_date
7d4ff711-2bd8-409e-aaab-b92b35cb21e5,2024-01-03 02:13 PM,
686af26f-2438-41d6-beb0-8cb75e5e11f7,2024-01-03 02:14 PM,
1eda48bd-0ec4-41f5-8381-d1d2e6ed4f95,Terra - WAW/MAW [Flash119],WITH users AS (   SELECT     date_trunc('day', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'     AND block_timestamp > CURRENT_DATE - 90   )
2150b25e-cc42-40ec-8009-48d9da796d9a,ESPN LQ - LV-LAC Player Connection (Offense),WITH athlete_data AS (   SELECT     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/16800/statistics/0?lang=en&region=us', {})) as stats_16800,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3916433/statistics/0?lang=en&region=us', {})) as stats_3916433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4429086/statistics/0?lang=en&region=us', {})) as stats_4429086,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3043275/statistics/0?lang=en&region=us', {})) as stats_3043275,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3135321/statistics/0?lang=en&region=us', {})) as stats_3135321,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3068267/statistics/0?lang=en&region=us', {})) as stats_3068267,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4242433/statistics/0?lang=en&region=us', {})) as stats_4242433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/3918639/statistics/0?lang=en&region=us', {})) as stats_3918639,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593/competitions/401547593/competitors/13/roster/4429025/statistics/0?lang=en&region=us', {})) as stats_4429025,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/16800', {})) as names_16800,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3916433', {})) as names_3916433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4429086', {})) as names_4429086,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3043275', {})) as names_3043275,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3135321', {})) as names_3135321,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3068267', {})) as names_3068267,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4242433', {})) as names_4242433,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/3918639', {})) as names_3918639,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/athletes/4429025', {})) as names_4429025,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/13?lang=en&region=us', {})) as team_13,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/24?lang=en&region=us', {})) as team_24,     parse_json(espn.get(       'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/events/401547593?lang=en&region=us', {})) as event ) SELECT   event:data:name as "Match-Up",   names_16800:data:fullName as "Name",   team_13:data:displayName as "Team",   stats_16800,   stats_16800:data:splits:categories[3]:stats[12]:value as "Receiving Yards",   stats_16800:data:splits:categories[3]:stats[16]:value as "Receptions",   stats_16800:data:splits:categories[3]:stats[10]:value as "Receiving Targets",   stats_16800:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_3916433:data:fullName as "Name", --   team_13:data:displayName as "Team", --   stats_3916433:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_3916433:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_3916433:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_3916433:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_4429086:data:fullName as "Name", --   team_13:data:displayName as "Team", --   stats_4429086:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_4429086:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_4429086:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_4429086:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_3043275:data:fullName as "Name", --   team_13:data:displayName as "Team", --   stats_3043275:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_3043275:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_3043275:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_3043275:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_3135321:data:fullName as "Name", --   team_13:data:displayName as "Team", --   stats_3135321:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_3135321:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_3135321:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_3135321:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_3068267:data:fullName as "Name", --   team_24:data:displayName as "Team", --   stats_3068267:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_3068267:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_3068267:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_3068267:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_4242433:data:fullName as "Name", --   team_24:data:displayName as "Team", --   stats_4242433:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_4242433:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_4242433:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_4242433:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_3918639:data:fullName as "Name", --   team_24:data:displayName as "Team", --   stats_3918639:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_3918639:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_3918639:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_3918639:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- UNION ALL -- SELECT --   event:data:name as "Match-Up", --   names_4429025:data:fullName as "Name", --   team_24:data:displayName as "Team", --   stats_4429025:data:splits:categories[3]:stats[12]:value as "Receiving Yards", --   stats_4429025:data:splits:categories[3]:stats[16]:value as "Receptions", --   stats_4429025:data:splits:categories[3]:stats[10]:value as "Receiving Targets", --   stats_4429025:data:splits:categories[3]:stats[11]:value as "Receiving Touchdowns" -- FROM athlete_data -- ORDER BY 4 DESC -- LIMIT 10;
b8983667-298c-493d-9b23-4952f24cee44,near token transfers copy,-- forked from theericstone / near token transfers @ https://flipsidecrypto.xyz/theericstone/q/Sn_lUsLFV7mj/near-token-transfers -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- -- how to get to near token transfers via logs -- note $NEAR transfers appear in near.core.ez_transfers -- 🍴❤️🤝🍴❤️🤝🍴❤️🤝🍴❤️🤝🍴❤️🤝🍴❤️🤝🍴❤️🤝🍴❤️🤝 -- forking / borrowing from community member @rmas -- https://flipsidecrypto.xyz/rmas/q/mbvXqhEWmE1r/holders -- 1 identify all known token contracts -- 2 identify all mints, burns, and transfers, respectively -- 3 combine all results -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -- with token_labels as (   select     symbol,     token AS token_name,     token_contract,     decimals   from     near.core.dim_token_labels QUALIFY row_number() OVER (       partition by token_contract       order by         symbol,         token_name     ) = 1 -- get rid of a couple dupes ), -- have to treat near bridging tokens differently than others rainbow_bridge_token_events AS (   WITH mints AS (     SELECT       fc.tx_hash,       fc.block_timestamp,       fc.method_name,       'system' AS sender_id,       fc.args ['account_id'] :: string AS receiver_id,       try_cast(fc.args ['amount'] :: string as bigint) / power(10, tl.decimals) AS amount,       fc.receiver_id AS token_contract,       tl.symbol     FROM       token_labels AS tl       INNER JOIN near.core.fact_actions_events_function_call AS fc ON fc.receiver_id = tl.token_contract     WHERE       fc.method_name = 'mint' -- Exclude failed TXs       AND fc.tx_hash NOT IN (         SELECT           tx_hash         FROM           near.core.fact_transactions         WHERE           tx_status = 'Fail'       ) -- Rainbow bridge tokens onlly       AND right(fc.receiver_id, 20) = '.factory.bridge.near'   ),   burns AS (     SELECT       fc.tx_hash,       fc.block_timestamp,       fc.method_name,       r.actions:predecessor_id :: string AS sender_id,       'system' AS receiver_id,       try_cast(fc.args ['amount'] :: string as bigint) / power(10, tl.decimals) AS amount,       fc.receiver_id AS token_contract,       tl.symbol     FROM       token_labels AS tl       INNER JOIN near.core.fact_actions_events_function_call AS fc ON fc.receiver_id = tl.token_contract       INNER JOIN near.core.fact_receipts AS r ON r.tx_hash = fc.tx_hash       AND r.actions:receipt:Action:actions [0] :FunctionCall:method_name :: string = 'withdraw'     WHERE       fc.method_name = 'withdraw' -- Exclude failed TXs       AND fc.tx_hash NOT IN (         SELECT           tx_hash         FROM           near.core.fact_transactions         WHERE           tx_status = 'Fail'       ) -- Rainbow bridge tokens onlly       AND right(fc.receiver_id, 20) = '.factory.bridge.near'   ),   transfers_prep AS (     SELECT       r.tx_hash,       r.block_timestamp,       r.receipt_object_id,       a.value:FunctionCall:method_name :: string AS method_name,       r.receiver_id AS token_contract,       r.logs     FROM       near.core.fact_receipts AS r,       LATERAL FLATTEN(r.actions:receipt:Action:actions) AS a     WHERE       -- Relevant events only       method_name IN (         'ft_transfer',         'ft_transfer_call',         'ft_resolve_transfer'       ) -- Exclude failed TXs       AND object_keys(r.status_value) [0] :: string != 'Failure' -- Rainbow bridge tokens onlly       AND right(r.receiver_id, 20) = '.factory.bridge.near' -- Deduplicate logs       QUALIFY row_number() OVER (         partition by tx_hash,         receipt_object_id         order by           True       ) = 1   ),   transfers AS (     SELECT       tr.tx_hash,       tr.block_timestamp,       tr.method_name,       split(l.value :: string, ' ') [3] :: string AS sender_id,       split(l.value :: string, ' ') [5] :: string AS receiver_id,       try_cast(split(l.value :: string, ' ') [1] :: string AS bigint) / power(10, tl.decimals) AS amount,       tr.token_contract,       tl.symbol     FROM       transfers_prep AS tr,       LATERAL FLATTEN(tr.logs) AS l,       (         SELECT           symbol,           decimals         FROM           token_labels       ) AS tl     WHERE       split(l.value, ' ') [0] :: string IN ('Transfer', 'Refund')   ),   combined_events AS (     SELECT       tx_hash,       block_timestamp,       (         CASE           method_name           WHEN 'mint' THEN 'MINT'           WHEN 'withdraw' THEN 'BURN'           WHEN 'ft_transfer' THEN 'TRANSFER'           WHEN 'ft_transfer_call' THEN 'TRANSFER'           WHEN 'ft_resolve_transfer' THEN 'TRANSFER'         END       ) AS event_type,       sender_id,       receiver_id,       token_contract,       symbol,       amount     FROM       (         SELECT           *         FROM           mints         UNION         ALL         SELECT           *         FROM           burns         UNION         ALL         SELECT           *         FROM           transfers       )   )   SELECT     tx_hash,     block_timestamp,     event_type,     sender_id,     receiver_id,     token_contract,     symbol,     amount   FROM     combined_events ), nep141_token_events AS (   WITH mints AS (     SELECT       r.tx_hash,       r.block_timestamp,       try_parse_json(replace(r.logs [0] :: string, 'EVENT_JSON:', '')) AS event_json,       event_json ['event'] :: string AS method_name,       'system' AS sender_id,       event_json ['data'] [0] ['owner_id'] :: string AS receiver_id,       event_json ['data'] [0] ['amount'] :: bigint / power(10, tl.decimals) AS amount,       r.receiver_id AS token_contract,       tl.symbol     FROM       token_labels AS tl       INNER JOIN near.core.fact_receipts AS r ON r.receiver_id = tl.token_contract     WHERE       -- Exclude failed TXs       object_keys(r.status_value) [0] :: string != 'Failure' -- Transfer events only       AND method_name = 'ft_mint' -- Exclude rainbow bridge tokens       AND right(r.receiver_id, 20) != '.factory.bridge.near'   ),   burns AS (     SELECT       r.tx_hash,       r.block_timestamp,       try_parse_json(replace(r.logs [0] :: string, 'EVENT_JSON:', '')) AS event_json,       event_json ['event'] :: string AS method_name,       event_json ['data'] [0] ['owner_id'] :: string AS sender_id,       'system' AS receiver_id,       event_json ['data'] [0] ['amount'] :: bigint / power(10, tl.decimals) AS amount,       r.receiver_id AS token_contract,       tl.symbol     FROM       near.core.fact_receipts AS r       LEFT JOIN token_labels AS tl ON tl.token_contract = r.receiver_id     WHERE       -- Exclude failed TXs       object_keys(r.status_value) [0] :: string != 'Failure' -- Transfer events only       AND method_name = 'ft_burn' -- Exclude rainbow bridge tokens       AND right(r.receiver_id, 20) != '.factory.bridge.near'   ),   transfers_prep AS (     SELECT       r.tx_hash,       r.block_timestamp,       try_parse_json(replace(r.logs [0] :: string, 'EVENT_JSON:', '')) AS event_json,       event_json ['event'] :: string AS method_name,       r.receiver_id AS token_contract     FROM       near.core.fact_receipts AS r     WHERE       -- Exclude failed TXs       object_keys(r.status_value) [0] :: string != 'Failure' -- Transfer events only       AND method_name = 'ft_transfer' -- Exclude rainbow bridge tokens       AND right(r.receiver_id, 20) != '.factory.bridge.near'   ),   transfers AS (     SELECT       tr.tx_hash,       tr.block_timestamp,       tr.event_json,       tr.method_name,       d.value ['old_owner_id'] :: string AS sender_id,       d.value ['new_owner_id'] :: string AS receiver_id,       try_cast(d.value ['amount'] :: string AS bigint) / power(10, tl.decimals) AS amount,       tr.token_contract,       tl.symbol     FROM       transfers_prep AS tr,       LATERAL FLATTEN(tr.event_json ['data']) AS d,       (         SELECT           symbol,           decimals         FROM           token_labels       ) AS tl   ),   combined_events AS (     SELECT       tx_hash,       block_timestamp,       (         CASE           method_name           WHEN 'ft_mint' THEN 'MINT'           WHEN 'ft_burn' THEN 'BURN'           WHEN 'ft_transfer' THEN 'TRANSFER'         END       ) AS event_type,       sender_id,       receiver_id,       token_contract,       symbol,       amount     FROM       (         SELECT           *         FROM           mints         UNION         ALL         SELECT           *         FROM           burns         UNION         ALL         SELECT           *         FROM           transfers       )   )   SELECT     tx_hash,     block_timestamp,     event_type,     sender_id,     receiver_id,     token_contract,     symbol,     amount   FROM     combined_events ), combined_token_events AS (   SELECT     *   FROM     rainbow_bridge_token_events   UNION   ALL   SELECT     *   FROM     nep141_token_events ) select   * from   combined_token_events;
d7cdb109-7db7-4e34-ab50-c9c09a8387b9,NFL AllDay <> ESPN ID Link,with espn as (   select     case       -- slight name mismatches       when a.full_name = 'Patrick Mahomes' then 'Patrick Mahomes II'       when a.full_name = 'Joshua Palmer' then 'Josh Palmer'       else a.full_name     end as player,     t.display_name as team,     a.id as espn_player_id,     split(       split(         try_parse_json(a.team) :"$ref",         'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/'       ) [1],       '?'     ) [0] :: int as espn_team_id   from     flow.beta.dim_nfl_athletes a     left join flow.beta.dim_nfl_teams t on espn_team_id = t.id   where     split(       split(         try_parse_json(position) :parent:"$ref",         'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/positions/'       ) [1],       '?'     ) [0] :: int = 70 -- offense only ), allday as (   select     nft_id,     nflallday_id,     serial_number,     moment_tier,     case       -- Some moments use DJ others D.J.       when player = 'D.J. Moore' then 'DJ Moore'       else player     end as player,     team,     play_type,     moment_stats_full:metadata:playerPosition :: string as position   from     flow.nft.dim_allday_metadata ad   where     classification = 'PLAYER_GAME'     and season >= 2018     and position in (       'QB',       'WR',       'RB',       'TE'     ) ), final as (   select     nft_id,     nflallday_id,     serial_number,     moment_tier,     ad.player,     ad.team,     play_type,     position,     espn_player_id,     espn_team_id   from     allday ad     left join espn on lower(ad.player) = lower(espn.player) ) select   * from   final
0e0e634f-1eb1-4292-9c65-adf6b909a810,2024-02-01 11:15 AM,select * from near.defi.fact_bridge_activity sample (10 rows)
c352bed3-ea9f-4cd3-a300-970842ab3c5c,Bitcoin Latency - Historical Avg copy,-- forked from flipsidecrypto / Bitcoin Latency - Historical Avg @ https://flipsidecrypto.xyz/flipsidecrypto/q/YUvTmGzfoOH5/bitcoin-latency---historical-avg  -- forked from Aurora Latency - Historical Avg @ https://flipsidecrypto.xyz/edit/queries/50b4ac17-4e9f-4f25-b3c9-0cd4a49d645d  -- forked from Near Latency - Historical Avg @ https://flipsidecrypto.xyz/edit/queries/8cc6cc1f-cdd3-41ac-85e3-20fc309b3c47  -- forked from Flow Latency - Historical Avg  @ https://flipsidecrypto.xyz/edit/queries/6c7c2641-92ab-40ee-9f15-13a90eb531bf  -- forked from Ethereum Latency - Historical Avg @ https://flipsidecrypto.xyz/edit/queries/34d1c0f5-32c0-4526-b857-47c6dd7924bd  -- forked from BSC Latency - Historical Avg+ @ https://flipsidecrypto.xyz/edit/queries/7856c112-a52c-4870-97c1-d484d5c7b9cf  -- forked from Avalanche Latency - Historical Avg @ https://flipsidecrypto.xyz/edit/queries/88bc0fe2-de85-4e7b-bd57-0cd695de597b  -- forked from Arbitrum Latency - Historical Avg @ https://flipsidecrypto.xyz/edit/queries/169619c9-09b8-4074-8ad8-d9ca8b2581fb  select   lower(table_name) as table_name,   avg(seconds_behind / 60) as mins_behind from bi_analytics.core.fact_data_latency where recorded_timestamp::DATE >= current_date - 3   and chain = 'bitcoin' group by 1 order by 1
72132cc7-4f42-488e-97f3-72bd0974e05e,Users, Contract Auth,select   block_timestamp::date as _date,   count(distinct signer_id) as unique_signers from   near.social.fact_addkey_events where   block_timestamp::date >= '2022-10-01' group by   1 order by   1
1c3de46a-a065-4e8d-a3a8-891ccae3fe16,NFL AllDay <> ESPN ID Link,with espn as ( select    a.full_name as player,   t.display_name as team,   a.id as espn_player_id,   split(split(try_parse_json(a.team):"$ref", 'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/')[1], '?')[0]::int as espn_team_id from flow.beta.dim_nfl_athletes a left join flow.beta.dim_nfl_teams t on   espn_team_id  = t.id where true   and try_parse_json(status):type::string = 'active' -- active players only   and split(split(try_parse_json(position):parent:"$ref", 'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/positions/')[1], '?')[0]::int = 70 -- offense only ) select   nft_id,   nflallday_id,   serial_number,   moment_tier,   player,   team,   play_type,   moment_stats_full:metadata:playerPosition::string as position,   espn_player_id,   espn_team_id from flow.nft.dim_allday_metadata ad left join espn using (player)  where classification = 'PLAYER_GAME'   and moment_date >= '2023-07-01' -- current season only    and MOMENT_TIER = 'UNCOMMON'   and PLAYER = 'Josh Allen'   and POSITION = 'QB' order by 3 -- TODO - exclude defensive player based on either play_type or position -- TODO check failed joins where espn id is null. May be edge cases like DJ vs D.J. or something
5e4ab54e-8633-491e-8682-70a63056d299,Anchor Collateral - exploring data,select 	date_trunc('d',block_timestamp),   	event_type,   	count(1)    from anchor.collateral group by 1,2 order by 1
c62ae60f-d274-47c8-9ae9-81d8718aa416,Ref Top Meme Stakers Staked All 4 Tokens copy,-- forked from MoDeFi / Ref Top Meme Stakers Staked All 4 Tokens @ https://flipsidecrypto.xyz/MoDeFi/q/IIQj9ilKYgdy/ref-top-meme-stakers-staked-all-4-tokens with succeeded_txs as (     select tx_hash as tx     from near.core.fact_transactions     where tx_succeeded=true ), prices as (     select * from (select  'LONK' as symbol, value[1] as price         from (             select live.udf_api('https://www.coingecko.com/price_charts/34029/usd/24_hours.json') AS response         ),          LATERAL FLATTEN (input => response:data:stats)         order by TO_TIMESTAMP(value[0]::string) desc          limit 1)     union      select * from (select  'SHITZU' as symbol, value[1] as price         from (             select live.udf_api('https://www.coingecko.com/price_charts/24857/usd/24_hours.json') AS response         ),          LATERAL FLATTEN (input => response:data:stats)         order by TO_TIMESTAMP(value[0]::string) desc          limit 1)     union      select * from (select  'NEKO' as symbol, value[1] as price         from (             select live.udf_api('https://www.coingecko.com/price_charts/28801/usd/24_hours.json') AS response         ),          LATERAL FLATTEN (input => response:data:stats)         order by TO_TIMESTAMP(value[0]::string) desc          limit 1)     union      select * from (select  'BLACKDRAGON' as symbol, value[1] as price         from (             select live.udf_api('https://www.coingecko.com/price_charts/35502/usd/24_hours.json') AS response         ),          LATERAL FLATTEN (input => response:data:stats)         order by TO_TIMESTAMP(value[0]::string) desc          limit 1)), seed_withdraw as      (select try_parse_json(CLEAN_LOG):data[0]:farmer_id as farmer_id,     symbol,     try_parse_json(CLEAN_LOG):data[0]:withdraw_amount as withdraw_amount_raw,     withdraw_amount_raw/pow(10,DECIMALS) as withdraw_amount,      BLOCK_TIMESTAMP, TX_HASH     from near.core.fact_logs      left join near.core.dim_ft_contract_metadata     on try_parse_json(CLEAN_LOG):data[0]:seed_id=CONTRACT_ADDRESS     join succeeded_txs     on tx_hash=tx     where RECEIVER_ID='meme-farming_011.ref-labs.near'     and try_parse_json(CLEAN_LOG):event='seed_withdraw'     and try_parse_json(CLEAN_LOG):data[0]:success='true'     and try_parse_json(CLEAN_LOG):standard='ref-farming'), seed_deposit as (     select try_parse_json(CLEAN_LOG):data[0]:farmer_id as farmer_id,     symbol,     try_parse_json(CLEAN_LOG):data[0]:deposit_amount as deposit_amount_raw,     deposit_amount_raw/pow(10,DECIMALS) as deposit_amount,     BLOCK_TIMESTAMP, TX_HASH     from near.core.fact_logs      left join near.core.dim_ft_contract_metadata     on try_parse_json(CLEAN_LOG):data[0]:seed_id=CONTRACT_ADDRESS     join succeeded_txs     on tx_hash=tx     where RECEIVER_ID='meme-farming_011.ref-labs.near'     and try_parse_json(CLEAN_LOG):event='seed_deposit'     and try_parse_json(CLEAN_LOG):standard='ref-farming'), reward_withdraw as (     select try_parse_json(CLEAN_LOG):data[0]:farmer_id as farmer_id,     symbol,     try_parse_json(CLEAN_LOG):data[0]:withdraw_amount as withdraw_amountt_raw,     withdraw_amountt_raw/pow(10,DECIMALS) as withdraw_amount,     BLOCK_TIMESTAMP, TX_HASH     from near.core.fact_logs a      left join near.core.dim_ft_contract_metadata     on try_parse_json(CLEAN_LOG):data[0]:token_id=CONTRACT_ADDRESS     join succeeded_txs     on tx_hash=tx     where RECEIVER_ID='meme-farming_011.ref-labs.near'     and try_parse_json(CLEAN_LOG):event='reward_withdraw'     and try_parse_json(CLEAN_LOG):data[0]:success='true'     and try_parse_json(CLEAN_LOG):standard='ref-farming'),  farmers_balance as (     select * from      (select farmer_id, a.symbol, sum(amount) as balance, ifnull(balance*price,0) as balance_usd     from         (select farmer_id, symbol, sum(deposit_amount) as amount         from seed_deposit         group by 1,2         union all          select farmer_id, symbol, sum(-withdraw_amount) as amount         from seed_withdraw         group by 1,2) a      left join prices b      on a.symbol=b.symbol     group by 1,2, price)     where balance>0), farmers_rewards as (     select farmer_id, symbol, sum(withdraw_amount) as amount     from reward_withdraw     group by 1,2) select b.farmer_id as "Wallet", b.balance as "$LONK", c.balance as "$NEKO", d.balance as "$BLACKDRAGON", e.balance as "$SHITZU",  b.balance_usd+c.balance_usd+d.balance_usd+e.balance_usd as "Total Balance ($)", y.amount as "$wNEAR Rewards", x.amount as "$REF Rewards" from farmers_balance b join farmers_balance c on "Wallet"=c.farmer_id and c.symbol='NEKO' join farmers_balance d on "Wallet"=d.farmer_id and d.symbol='BLACKDRAGON' join farmers_balance e on "Wallet"=e.farmer_id and e.symbol='SHITZU' join farmers_rewards x on "Wallet"=x.farmer_id and x.symbol='REF' join farmers_rewards y on "Wallet"=y.farmer_id and y.symbol='wNEAR' where  b.symbol='LONK' order by "Total Balance ($)" desc limit 1000
0aa6f74f-43be-45c7-b58f-510dd90aa089,allen 2,select   nft_id,   nflallday_id,   serial_number,   moment_tier,   player,   team,   play_type,   moment_stats_full:metadata:playerPosition::string as position from flow.nft.dim_allday_metadata ad where classification = 'PLAYER_GAME'   and moment_date >= '2023-07-01' -- current season only    and MOMENT_TIER = 'UNCOMMON'   and PLAYER = 'Josh Allen'   and POSITION = 'QB' order by 3 -- TODO - exclude defensive player based on either play_type or position -- TODO check failed joins where espn id is null. May be edge cases like DJ vs D.J. or something
90ec33c8-870c-4b8b-9845-8b57e3a45dc8,Josh Allen,with allen as ( select   -- nft_id,   -- nflallday_id,   -- serial_number,   -- moment_tier,   -- player,   -- team,   -- play_type,   moment_stats_full:metadata:playerPosition::string as position,   * from flow.nft.dim_allday_metadata ad where classification = 'PLAYER_GAME'   and moment_date >= '2023-07-01' -- current season only    and MOMENT_TIER = 'UNCOMMON'   and PLAYER = 'Josh Allen'   -- and POSITION = 'QB' order by 3 ) select  -- min(nft_id), max(nft_id), max(nft_id) - min(nft_id) *  from allen order by nft_id
09651200-e39b-43e0-bc40-6fa2afb18291,[terradash] Anchor Collateral Gross TVL,WITH DEPOSIT AS ( SELECT   date(block_timestamp) as date,   currency,   sum(amount) as collateral_deposit FROM anchor.collateral   WHERE event_type = 'provide' GROUP BY 1,2 ), WITHDRAW AS ( SELECT   date(block_timestamp) as date,   currency,   sum(amount) as collateral_withdraw FROM anchor.collateral   WHERE event_type = 'withdraw' GROUP BY 1,2 ), LIQUIDATIONS AS (   SELECT   date(block_timestamp) as date,   liquidated_currency as currency,   sum(LIQUIDATED_AMOUNT) as collateral_liquidated FROM anchor.liquidations GROUP BY 1,2 ), PRICES AS (  SELECT   DATE(block_timestamp) as date_prices,   currency as token,   avg(price_usd) as avg_price_usd FROM terra.oracle_prices    WHERE block_timestamp > '2021-03-17'    AND currency IN ('terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun', 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp',   'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a', 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58') GROUP BY 1,2 ), FINAL AS ( SELECT   a.date as dates,   a.currency as collateral,   ifnull(collateral_deposit, 0) AS add,   ifnull(collateral_withdraw, 0)*-1 AS remove,   ifnull(collateral_liquidated, 0)*-1 AS liqudate,   add + remove + liqudate AS net_change,   sum(net_change) over (partition by a.currency order by a.date) AS tvl_amt FROM DEPOSIT a   LEFT JOIN WITHDRAW b ON a.date = b.date AND a.currency = b.currency   LEFT JOIN LIQUIDATIONS c ON a.date = c.date AND a.currency = c.currency   ORDER BY 1,2 ), TVL AS ( SELECT   dates,   collateral,   sum(add) as deposits,   sum(remove) as withdrawals,   sum(liqudate) as liquidations,   sum(net_change) as collateral_change,   sum(tvl_amt) as tvl_amount FROM FINAL  group by 1,2  ), FINAL_FINAL as ( SELECT   dates,   collateral,   case when collateral = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' then 'bETH'    when collateral = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' then 'bLUNA'   when collateral = 'terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a' then 'bATOM'   when collateral = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' then 'sAVAX' else null end as collateral_name,   deposits, withdrawals, liquidations, collateral_change, tvl_amount,   tvl_amount*avg_price_usd as tvl_usd FROM TVL    LEFT JOIN prices ON dates = date_prices AND collateral = token   LEFT JOIN terra.labels ON address = collateral  ) select 	dates, 	sum(tvl_usd) as gross_tvl_usd from FINAL_FINAL group by 1 order by 1
1c382388-e803-4277-bb7a-4e0e534862ee,Metadata Needed,
6b58196f-016a-4706-b22d-ee2cc3a20878,ESPN,-- select  --   full_name, --   count(1) as ct -- from flow.beta.dim_nfl_athletes -- WHERE --   try_parse_json(status):type::string = 'active' -- active players only --   and split(split(try_parse_json(position):parent:"$ref", 'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/positions/')[1], '?')[0]::int = 70 -- offense only -- group by 1 -- having ct > 1; -- 46 non-unique names total -- NONE that are both active and play offense select    a.full_name as player_name,   t.display_name as team_name,   a.id as espn_player_id,   split(split(try_parse_json(a.team):"$ref", 'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2023/teams/')[1], '?')[0]::int as espn_team_id from flow.beta.dim_nfl_athletes a left join flow.beta.dim_nfl_teams t on   espn_team_id  = t.id where true   and try_parse_json(status):type::string = 'active' -- active players only   and split(split(try_parse_json(position):parent:"$ref", 'http://sports.core.api.espn.com/v2/sports/football/leagues/nfl/positions/')[1], '?')[0]::int = 70 -- offense only limit 25
71993baa-cf85-48f2-be2b-723268d2ae6b,Untitled Query,SELECT * FROM terra.msg_events WHERE
4a05daf2-40aa-4de8-a532-b17628b8b5a4,Bitcoin Spot ETF Issuers copy,-- forked from alitaslimi / Bitcoin Spot ETF Issuers @ https://flipsidecrypto.xyz/alitaslimi/q/lXOTSqd9xY4h/bitcoin-spot-etf-issuers with -------------------- BTC Price --------------------   prices as (     select       price     from       bitcoin.price.ez_hourly_token_prices     qualify       hour = last_value(hour) over (order by hour)   ), -------------------- Issuers --------------------   issuers as (     select       ft.value:TICKER as ticker,       ft.value:TYPE as type,       ft.value:ISSUER as issuer,       ft.value:CUSTODIAN as custodian,       ft.value:FEE as fee     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/55326770-94da-422b-a25e-1c37943c536f/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_inputs inputs       join addresses on inputs.pubkey_script_address = addresses.address   ),   outputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_outputs outputs       join addresses on outputs.pubkey_script_address = addresses.address   ), -------------------- Flows --------------------   inflows as (     select       ticker,       sum(value) as volume     from       outputs     group by       ticker   ),   outflows as (     select       ticker,       sum(value) as volume     from       inputs     group by       ticker   ) -------------------- Output -------------------- select   issuers.issuer as "Issuer",   issuers.ticker as "Ticker",   issuers.custodian as "Custodian",   issuers.fee as "Fee",   inflows.volume - zeroifnull(outflows.volume) as "Balance",   round("Balance" * prices.price) as "AUM" from   prices,   issuers   join inflows on issuers.ticker = inflows.ticker   left join outflows on issuers.ticker = outflows.ticker where   type = 'Spot' order by   "AUM" desc
040031df-1000-4e53-ab25-fb935370f4e0,Spot ETFs Overview copy,-- forked from alitaslimi / Spot ETFs Overview @ https://flipsidecrypto.xyz/alitaslimi/q/yT1ow0Z45j0I/spot-etfs-overview with -------------------- BTC Price --------------------   prices as (     select       price     from       bitcoin.price.ez_hourly_token_prices     qualify       hour = last_value(hour) over (order by hour)   ), -------------------- Issuers --------------------   issuers as (     select       ft.value:TICKER as ticker,       ft.value:TYPE as type,       ft.value:ISSUER as issuer,       ft.value:CUSTODIAN as custodian,       ft.value:FEE as fee     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/55326770-94da-422b-a25e-1c37943c536f/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_inputs inputs       join addresses on inputs.pubkey_script_address = addresses.address   ),   outputs as (     select       block_timestamp,       ticker,       value     from       bitcoin.core.fact_outputs outputs       join addresses on outputs.pubkey_script_address = addresses.address   ), -------------------- Flows --------------------   inflows as (     select       ticker,       sum(value) as volume     from       outputs     group by       ticker   ),   outflows as (     select       ticker,       sum(value) as volume     from       inputs     group by       ticker   ) -------------------- Output -------------------- select   sum(inflows.volume) as "Inflow",   sum(outflows.volume) as "Outflow",   round("Inflow" - "Outflow") as "Balance",   round("Balance" * avg(prices.price)) as "AUM" from   prices,   issuers   join inflows on issuers.ticker = inflows.ticker   left join outflows on issuers.ticker = outflows.ticker -- where --   type = 'Spot' order by   "AUM" desc
0fa91a71-f4db-4832-beec-16c5e49d2560,2024-01-18 10:37 AM,SELECT   date_trunc('day', block_timestamp) as _time,   count(distinct tx_hash) as ct from near.core.fact_transactions where block_timestamp >= current_date - interval '7 days' group by 1 order by 1
ff94315f-7b14-479d-8f4c-ba212859b84f,2024-02-15 11:48 AM,SELECT address, issuer, etf_ticker as ticker FROM (VALUES         ('39gWRwxQYazBHLDH8q6mnPTnEs8hPF6jCQ', 'Fidelity', 'Fidelity FBTC ETF 4', 'FBTC')     , ('3BkDTVn14dipQAvAeoxPPbMAidEztgwvJ2', 'Fidelity', 'Fidelity FBTC ETF 5', 'FBTC')     , ('35RG62aAWBd5zaXFmxaVubMkyZA8FzjmB7', 'Fidelity', 'Fidelity FBTC ETF 6', 'FBTC')     , ('36ifxtBxBUaDBHCW7gybk5dhH2hKTBTo7W', 'Fidelity', 'Fidelity FBTC ETF 7', 'FBTC')     , ('3HLBMUYYeFN2krrM2QbTKXmKbuiYnNBCaY', 'Fidelity', 'Fidelity FBTC ETF 8', 'FBTC')     , ('3BsTfPr9HCrzKCUDXAzYmFPj32o1stBZSn', 'Fidelity', 'Fidelity FBTC ETF 9', 'FBTC')     , ('3Qp1edXBSzvM6ZLw784pvyueJvgtYZr1eM', 'Fidelity', 'Fidelity FBTC ETF 10', 'FBTC')     , ('36ojT2CsdfRvkH9bxA1g1Y3JUJdsn6KG7S', 'Fidelity', 'Fidelity FBTC ETF 11', 'FBTC')     , ('39zWu83MtEmApj7zqp6isxc9NjZvkhDHrK', 'Fidelity', 'Fidelity FBTC ETF 12', 'FBTC')     , ('3Nozjm7Pse9XsGatSigTTgV1JsJSnkH3LX', 'Fidelity', 'Fidelity FBTC ETF 13', 'FBTC')     , ('3GxdEbnqByNiG8ahbSGqA1uDkVtYPuY2hW', 'Fidelity', 'Fidelity FBTC ETF 14', 'FBTC')     , ('3NXLbVxjoh9RCxv86W2gPs6gQCLQU2CjBR', 'Fidelity', 'Fidelity FBTC ETF 15', 'FBTC')     , ('32ipwpr55Swuecyc4vFqfsqd3VXjzsZiyk', 'Fidelity', 'Fidelity FBTC ETF 16', 'FBTC')     , ('3HQZpaWkAKcqrj28UMtDQvBvJSqLNWEPQp', 'Fidelity', 'Fidelity FBTC ETF 17', 'FBTC')     , ('3Bpj4Re3fBdwfsqesYERMjEWvjmphjCBo3', 'Fidelity', 'Fidelity FBTC ETF 18', 'FBTC')     , ('3Dgd4yN9gaZBPCJx8fW9FkzBPGje21Q87H', 'Fidelity', 'Fidelity FBTC ETF 19', 'FBTC')     , ('3DziU1ePDPgBQ2Tmr7PV1D7bBnWcAD8FuU', 'Fidelity', 'Fidelity FBTC ETF 20', 'FBTC')     , ('35bAV3NUUj48VBuUDiBy6J1e37tYfziJit', 'Fidelity', 'Fidelity FBTC ETF 21', 'FBTC')     , ('33XgTnLBthiu1qQmwW1D6t6xE6hFFZPEk6', 'Fidelity', 'Fidelity FBTC ETF 22', 'FBTC')     , ('3LKAKDYpksvvKu6AEXwu9g6qHJAJ1tBPqk', 'Fidelity', 'Fidelity FBTC ETF 23', 'FBTC')     , ('33vQNWxhuhjSCrAQ7pzUKWdC1Ve2hGr7ne', 'Fidelity', 'Fidelity FBTC ETF 24', 'FBTC')     , ('3EYh1YghrpkkHWNPEmpy861tPEcnDxb16W', 'Fidelity', 'Fidelity FBTC ETF 25', 'FBTC')     , ('3PK1e2TeDLwRYhs8umBaHdzrJfxVgEh3R5', 'Fidelity', 'Fidelity FBTC ETF 26', 'FBTC')     , ('3QhruS3H6Ui8Mb8ZfwGVEDmgKaaVhasfCv', 'Fidelity', 'Fidelity FBTC ETF 27', 'FBTC')     , ('3CZn2zQg2k7y5jTkwV4HbLvrhTUN19aYBs', 'Fidelity', 'Fidelity FBTC ETF 28', 'FBTC')          , ('3MXqiELYKZwEyycK9dWon6rd1NZE2fAts2', 'Fidelity', 'Fidelity FBTC ETF 29', 'FBTC')     , ('399aKXyZNkqqjuwMKTRLMeahnNbL9YjYCA', 'Fidelity', 'Fidelity FBTC ETF 30', 'FBTC')     , ('39NNzCbaWwJhKWg92VBzgpFPKvS22FkEVt', 'Fidelity', 'Fidelity FBTC ETF 31', 'FBTC')     , ('33HvZ1fKEKWB4D6PihMMVHzkSVZJT1ygrt', 'Fidelity', 'Fidelity FBTC ETF 32', 'FBTC')          , ('37XV7yFVWWYJ5HWsctKEmEd4S7gULJgtTV', 'Fidelity', 'Fidelity FBTC ETF 29', 'FBTC')     , ('3F3rjTJbQWc7EmgWzLnWZC7pDoiWweaRkR', 'Fidelity', 'Fidelity FBTC ETF 30', 'FBTC')     , ('3Njrd5ooGzsxfiRwsoMRdnzy4QcExBXUDU', 'Fidelity', 'Fidelity FBTC ETF 31', 'FBTC')     , ('3BsrvEJTrruxPuofj3KrCTGHiSdTvnmivx', 'Fidelity', 'Fidelity FBTC ETF 32', 'FBTC')     , ('36YjBaRAvmtd9EH4Lma494QMNLahsfv5SX', 'Fidelity', 'Fidelity FBTC ETF 33', 'FBTC')     , ('35SK7H7QcGABXwtgLoNdXaznTQPqLC3PtF', 'Fidelity', 'Fidelity FBTC ETF 34', 'FBTC')     , ('3FLG6DuZtuSwxbG425aetSbRH89RhGA9Dj', 'Fidelity', 'Fidelity FBTC ETF 35', 'FBTC')     , ('3KY6L2bQ9yZcvP4FN8Le36Q5DSvhjpHKXk', 'Fidelity', 'Fidelity FBTC ETF 36', 'FBTC')     , ('39rLUVGfZwQMYg2i3Ly1WwXH16JTLNNugH', 'Fidelity', 'Fidelity FBTC ETF 37', 'FBTC')     , ('32gdE1YDG9xKmnpwReo5WhhMKPJyo2fLqz', 'Fidelity', 'Fidelity FBTC ETF 38', 'FBTC')     , ('3BuUbJk4rVXNbTdn4pZMDzzL44NNmiaxHi', 'Fidelity', 'Fidelity FBTC ETF 39', 'FBTC')     , ('3PCCf9pG5D828DXHftQDnNUtnM5kRMB9pa', 'Fidelity', 'Fidelity FBTC ETF 40', 'FBTC')          , ('16ZEv6MmHqKDThXpEqqVdWiWy4zbQFPdS8', 'BlackRock', 'BlackRock IBIT ETF 85', 'IBIT')     , ('1C6JA2adcU9R7HJ4c9CZVzT2HJZwGLCLqV', 'BlackRock', 'BlackRock IBIT ETF 86', 'IBIT')     , ('1MW64EotjxWXmnkK8YJygVjfcQDBn58LcH', 'BlackRock', 'BlackRock IBIT ETF 87', 'IBIT')     , ('1N4NQggreZkeiuBzAzqJGTYg1B8JJS7noQ', 'BlackRock', 'BlackRock IBIT ETF 88', 'IBIT')     ) AS temp_table (address, issuer, distinct_name, etf_ticker)
9b7afdd8-071c-4859-a685-b417c4980e58,Liquidity Rewards by Pool - full protocol [THOR7],-- liquidity fee by pool WITH liquidity_fee AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(liq_fee_in_rune_e8) / pow(10,8) as liq_fee_rune   FROM thorchain.swap_events   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1   ), -- rune rewards by pool total_pool_rewards AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(rune_e8) / pow(10,8) as rewards_rune   FROM thorchain.rewards_event_entries   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1 ), total_liquidity_rewards AS (   SELECT     liquidity_fee.date as date,     liq_fee_rune + rewards_rune as liquidity_reward -- note: in rune   FROM liquidity_fee   LEFT JOIN total_pool_rewards     ON liquidity_fee.date = total_pool_rewards.date   ), pool_depth AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(rune_e8 / pow(10,8)) as rune_amount,     avg(asset_e8 / pow(10,8)) as asset_amount,     rune_amount * 2 as est_gross_rune   FROM thorchain.block_pool_depths   WHERE block_timestamp > '2021-10-21T00:00:00Z'   GROUP BY 1 ), yield AS (   SELECT      pool_depth.date as date,     est_gross_rune,     liquidity_reward,     liquidity_reward / est_gross_rune as daily_return        FROM pool_depth   JOIN total_liquidity_rewards     ON pool_depth.date = total_liquidity_rewards.date   ) -- final query SELECT   date,   est_gross_rune as pools_depth,   liquidity_reward,   daily_return,   (pow((daily_return) + 1, 365) - 1) * 100 as annual_return FROM yield ORDER BY 1, 2 desc
0b33b840-b7a4-44d3-b598-59ecf094b80c,2024-01-17 10:31 AM,select * from bitcoin.core.dim_entity_clusters where lower(address) = lower('6c99d85f765d193ed2912f2e08c670a69c53ba2be79a8b78991a53ebfa13dd4a') ;
9bdca519-d189-4358-a4f0-6487803c8c35,Anchor Mariner Hunt 1,SELECT * FROM terra.msg_events WHERE (tx_id = 'FC5F68022E5202C5F6058BC6A32F933B3F50212589C4C4CF40771B1108221D29'   OR tx_id = '4D207787F345C58B36DFF064988E9E4B292FD31C46D0EC2B3B17F3800E25FD17')   AND event_type = 'execute_contract'
eaac5117-dfb2-4946-b481-50e5339aa961,Entering the Rainbow: daily bridges  copy,-- forked from Mojtaba-Banaei / Entering the Rainbow: daily bridges  @ https://flipsidecrypto.xyz/Mojtaba-Banaei/q/WKp53VFWOqZN/entering-the-rainbow-daily-bridges -- forked from 94865ea8-03a5-44bd-8cc7-a384ae549528   with   rainbow_input as (     select       *     from       near.core.fact_transactions tx     where       1 = 1       and tx.block_timestamp >= '{{start_time}}'::date        and tx.block_timestamp < add_months('{{start_time}}'::timestamp_ntz, {{duration_in_months}})       and tx.tx_signer = 'event-relayer.near'       and tx.tx_receiver = 'factory.bridge.near'       and tx.tx_status = 'Success'       -- limit       -- 30   ),   mint_info as (     select       rc.tx_hash,       rc.block_timestamp,       args:account_id as receiver,       args:amount as raw_amount,       rc.action_id     from       near.core.fact_actions_events_function_call rc       inner join rainbow_input using (tx_hash)     where       1 = 1       and method_name = 'mint'   ) , bridge_in_info as ( select   distinct  'Ethereum' as blockchain,     'Bridge-In' as action,   rc.tx_hash,   rc.block_timestamp,   -- rc.receiver_id as token,   lb.symbol,   raw_amount,   raw_amount/power(10,lb.decimals) as bridge_amount,   receiver   -- * from   near.core.fact_receipts rc   inner join mint_info mi on (rc.tx_hash = mi.tx_hash and rc.outcome:id = split(mi.action_id,'-')[0])   inner join near.core.dim_token_labels lb on  rc.receiver_id=lb.token_contract where    1=1   and not endswith(lb.symbol,'.e')    ), burn_info as (     select       rc.tx_hash,       rc.block_timestamp,       args:recipient as receiver,       args:amount as raw_amount,       rc.action_id     from       near.core.fact_actions_events_function_call rc       -- inner join rainbow_input using (tx_hash)     where       1 = 1       and method_name = 'withdraw'       and block_timestamp >= '{{start_time}}'::date        and block_timestamp < add_months('{{start_time}}'::timestamp_ntz, {{duration_in_months}})       -- and tx_hash = '4pVMeLmj32QruDHeGaSUG7EGzMmGGUttunuaxaGK8M2z'          ) , bridge_out_info as (   select          'Ethereum' as blockchain,     'Bridge-Out' as action,     rc.tx_hash,     rc.block_timestamp,     raw_amount,     receiver,     raw_amount/power(10,lb.decimals) as bridge_amount,     lb.symbol     from        near.core.fact_receipts rc       inner join burn_info mi on (rc.tx_hash = mi.tx_hash and rc.outcome:id = split(mi.action_id,'-')[0])       inner join near.core.dim_token_labels lb on  rc.receiver_id=lb.token_contract     where       1 = 1       -- and tx.tx_status = 'Success'       and endswith(receiver_id,'.factory.bridge.near')       and rc.block_timestamp >= '{{start_time}}'::date        and rc.block_timestamp < add_months('{{start_time}}'::timestamp_ntz, {{duration_in_months}})       and not endswith(lb.symbol,'.e')        )  select    blockchain   , action   , date_trunc('week',block_timestamp) as week   , count(tx_hash) as "Total Actions"   , count(distinct receiver) as "Total Users"   , count(distinct symbol) as "Total Users" from    bridge_out_info GROUP by 1,2,3 union  select    blockchain   , action   , date_trunc('week',block_timestamp) as week   , count(tx_hash) as "Total Actions"   , count(distinct receiver) as "Total Users"   , count(distinct symbol) as "Total Users" from    bridge_in_info GROUP by 1,2,3
bed10c4d-d422-4454-83bc-8dbb1be23350,Issuers,select   ticker,   type,   issuer,   fee,   custodian from (   values     ('ARKB', 'Spot', 'Ark/21 Shares', 0.21, 'Coinbase'),     ('BITB', 'Spot', 'Bitwise', 0.2, 'Coinbase'),     ('BRRR', 'Spot', 'Valkyrie', 0.25, 'Coinbase'),     ('BTCO', 'Spot', 'Invesco/Galaxy', 0.39, 'Coinbase'),     ('BTCW', 'Spot', 'WisdomTree', 0.3, 'Coinbase'),     ('EZBC', 'Spot', 'Franklin Templeton', 0.19, 'Coinbase'),     ('FBTC', 'Spot', 'Fidelity', 0.25, 'Fidelity'),     ('GBTC', 'Spot', 'Grayscale', 0.25, 'Grayscale'),     ('HODL', 'Spot', 'VanEck', 0.25, 'Gemini'),     ('IBIT', 'Spot', 'BlackRock', 0.25, 'Coinbase')     -- ('XBTF', 'VanEck', 'Futures', NULL),     -- ('BITO', 'ProShares', 'Futures', NULL) ) t(ticker, type, issuer, fee, custodian)
b6c71856-1d81-4bd6-87ee-7b31f3d5f339,AD - Total Supply (Atlas),WITH lockup_receipts AS (     SELECT fr.tx_hash          , fr.block_timestamp          , fr.actions:predecessor_id::string AS predecessor_id          , fr.receiver_id          , fr.actions          , OBJECT_KEYS(fr.status_value)[0]::string AS status          , fr.logs          FROM near.core.fact_receipts AS fr     WHERE fr.receiver_id LIKE '%.lockup.near'       AND status != 'Failure' ), daily_lockup_locked_balances AS (     WITH     -- new lockup contract created     new_lockup_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'new'     ),               -- vesting is stopped by the Foundation     terminate_vesting_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(lr.logs[0], 'unvested balance is ')[1]::bigint / 1e24 AS unvested_balance         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'terminate_vesting'     ),               terminate_vesting_txs_with_vesting_schedule AS (         SELECT tv.*              , fc.args:vesting_schedule_with_salt:vesting_schedule AS vesting_schedule              FROM terminate_vesting_txs AS tv             LEFT JOIN near.core.fact_actions_events_function_call AS fc                 ON fc.tx_hash = tv.tx_hash                 AND fc.method_name = 'terminate_vesting'              QUALIFY row_number() OVER (partition by tv.tx_hash order by tv.block_timestamp) = 1  -- dedupe     ),               -- unvested tokens are withdrawn (effectively unlocked into circulating supply)     termination_withdraw_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(split(lr.logs[0], ' of terminated unvested balance')[0], 'Withdrawing ')[1]::bigint / 1e24 AS withdrawn_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'termination_withdraw'      -- Simplify logic -> get only first termination withdrawal         -- QUALIFY row_number() OVER (partition by lockup_account_id order by block_timestamp) = 1     ),               daily_termination_withdrawn_amount AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(withdrawn_amount) AS withdrawn_amount         FROM termination_withdraw_txs         GROUP BY 1,2     ),               -- lockup amounts     deposits AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:Transfer:deposit::bigint / 1e24 AS deposit_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE OBJECT_KEYS(value:Transfer)[0]::string = 'deposit'     ),               lockup_contracts AS (         SELECT lcr.tx_hash              , lcr.block_timestamp              , lcr.lockup_account_id              , fc1.args:lockup_duration::bigint AS input_lockup_duration_ns              , fc1.args:lockup_timestamp::bigint AS input_lockup_timestamp_epoch              , fc1.args:owner_account_id::string AS owner_account_id              , fc1.args:release_duration::bigint AS input_release_duration_ns              , coalesce(tv.vesting_schedule, fc1.args:vesting_schedule:VestingSchedule) AS vesting_schedule_              , vesting_schedule_:cliff_timestamp::bigint AS vesting_cliff_timestamp_epoch              , vesting_schedule_:start_timestamp::bigint AS vesting_start_timestamp_epoch              , vesting_schedule_:end_timestamp::bigint AS vesting_end_timestamp_epoch              , coalesce( fc1.args:transfers_information:TransfersEnabled:transfers_timestamp::bigint,                           1602614338293769340 ) AS transfers_enabled_timestamp_epoch              , d.deposit_amount                   , tv.block_timestamp AS terminate_vesting_timestamp              , tv.unvested_balance AS termination_unvested_amount                   , tw.block_timestamp AS termination_withdraw_timestamp              , tw.withdrawn_amount AS termination_withdrawn_amount                   , (CASE WHEN OBJECT_KEYS(fc1.args:vesting_schedule)[0]::string = 'VestingHash'                      THEN True ELSE False END) AS is_private_vesting              FROM new_lockup_txs AS lcr             LEFT JOIN near.core.fact_actions_events_function_call AS fc1                 ON fc1.tx_hash = lcr.tx_hash                 AND fc1.method_name = 'new'                  LEFT JOIN deposits AS d                 ON d.tx_hash = lcr.tx_hash                  LEFT JOIN terminate_vesting_txs_with_vesting_schedule AS tv                 ON tv.lockup_account_id = lcr.lockup_account_id                  LEFT JOIN termination_withdraw_txs AS tw                 ON tw.lockup_account_id = lcr.lockup_account_id              WHERE lcr.tx_hash IN (SELECT tx_hash FROM new_lockup_txs)           AND d.deposit_amount > 0     ),               lockup_contracts__parsed AS (         SELECT lockup_account_id             -- the number of times the same lockup account ID has been used (used as part of lockup unique identifier)              , row_number() OVER (partition by lockup_account_id order by block_timestamp) AS lockup_index              , owner_account_id              , deposit_amount AS lockup_amount                  -- timestamp when tokens were locked (lock start)              , block_timestamp AS deposit_timestamp                  -- timestamp when transfers were enabled in the blockchain (default reference when lockup_timestamp is null)              , to_timestamp(transfers_enabled_timestamp_epoch, 9) AS transfers_enabled_timestamp                  -- timestamp when tokens start unlocking (explicit parameter)              , to_timestamp(input_lockup_timestamp_epoch, 9) AS input_lockup_timestamp                  -- if lockup_timestamp is null, calculate unlock start from lockup duration              , timestampadd(nanoseconds, input_lockup_duration_ns, transfers_enabled_timestamp) AS calculated_lockup_timestamp                  -- lockup mechanism              , input_lockup_duration_ns              , input_release_duration_ns                  -- Max between input and calculated lockup timestamp              , (CASE WHEN input_lockup_timestamp IS NOT NULL                      THEN greatest(input_lockup_timestamp, calculated_lockup_timestamp)                      ELSE calculated_lockup_timestamp END) AS lockup_timestamp                  -- If release_duration is not provided, tokens are immediately unlocked              , (CASE WHEN input_release_duration_ns IS NOT NULL                      THEN timestampadd(nanosecond, input_release_duration_ns, lockup_timestamp)  -- linear release if release_duration is provided, else full unlock                      ELSE lockup_timestamp END) AS lockup_end_timestamp                  -- vesting mechanism              , is_private_vesting              , to_timestamp(vesting_start_timestamp_epoch, 9) AS vesting_start_timestamp              , to_timestamp(vesting_end_timestamp_epoch, 9) AS vesting_end_timestamp              , to_timestamp(vesting_cliff_timestamp_epoch, 9) AS vesting_cliff_timestamp                  -- vesting termination              , terminate_vesting_timestamp              , termination_unvested_amount              , termination_withdraw_timestamp              , termination_withdrawn_amount                   , tx_hash AS _tx_hash                   , (CASE WHEN lockup_timestamp IS NOT NULL AND vesting_start_timestamp IS NULL                      THEN least(deposit_timestamp, lockup_timestamp)                      WHEN lockup_timestamp IS NULL AND vesting_start_timestamp IS NOT NULL                      THEN least(deposit_timestamp, vesting_start_timestamp)                      ELSE least(deposit_timestamp, lockup_timestamp, vesting_start_timestamp) END)::date AS _lockup_start_date                   , (CASE WHEN lockup_end_timestamp IS NOT NULL AND vesting_end_timestamp IS NULL                      THEN lockup_end_timestamp                      WHEN lockup_end_timestamp IS NULL AND vesting_end_timestamp IS NOT NULL                      THEN vesting_end_timestamp                      ELSE greatest(lockup_end_timestamp, vesting_end_timestamp) END)::date AS _lockup_end_date              FROM lockup_contracts     ),               lockup_contracts_daily_balance__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-01-01' AND CURRENT_DATE )              SELECT lc.lockup_account_id              , lc.lockup_index              , lc.owner_account_id                   , d.utc_date              , d.utc_date + interval '1 day' - interval '1 nanosecond' AS block_timestamp  -- End of day block timestamp                   , lc.lockup_amount              , lc.deposit_timestamp                  -- Lockup logic              , lc.lockup_timestamp              , lc.lockup_end_timestamp              , greatest(0, timestampdiff(nanosecond, block_timestamp, lockup_end_timestamp)) AS lockup_time_left_ns              , (CASE WHEN block_timestamp >= lockup_timestamp                      THEN (CASE WHEN input_release_duration_ns > 0                                 THEN (CASE WHEN block_timestamp >= lockup_end_timestamp                                            THEN 0  -- everything is released                                            ELSE lockup_amount * lockup_time_left_ns / input_release_duration_ns                                            END)                                 ELSE 0 END)                      ELSE lockup_amount  -- The entire balance is still locked before the lockup timestamp                      END) AS unreleased_amount                  -- Vesting logic              , lc.vesting_start_timestamp              , lc.vesting_cliff_timestamp              , lc.vesting_end_timestamp              , lc.terminate_vesting_timestamp              , lc.termination_unvested_amount              , greatest(0, timestampdiff(nanosecond, block_timestamp, vesting_end_timestamp)) AS vesting_time_left_ns              , timestampdiff(nanosecond, vesting_start_timestamp, vesting_end_timestamp) AS vesting_total_time_ns              FROM lockup_contracts__parsed AS lc, dates AS d         WHERE d.utc_date BETWEEN lc._lockup_start_date                              AND lc._lockup_end_date     ),               lockup_contracts_daily_balance__prep_2 AS (         SELECT lc.*              , sum(coalesce(dtw.withdrawn_amount, 0))                     OVER (partition by lc.lockup_account_id, lc.lockup_index                               order by lc.utc_date                               rows between unbounded preceding                                        and current row) AS termination_withdrawn_amount                  FROM lockup_contracts_daily_balance__prep_1 AS lc             LEFT JOIN daily_termination_withdrawn_amount AS dtw                 ON dtw.lockup_account_id = lc.lockup_account_id                 AND dtw.utc_date = lc.utc_date          ),               lockup_contracts_daily_balance AS (         SELECT lc.*                  -- Vesting logic                  -- Not 100% accurate due to private vesting lockups (unknown/hidden vesting parameters)              , (CASE WHEN block_timestamp >= terminate_vesting_timestamp                      THEN termination_unvested_amount - termination_withdrawn_amount                      ELSE (CASE WHEN block_timestamp < vesting_cliff_timestamp                                 THEN lockup_amount  -- Before the cliff, nothing is vested                                 WHEN block_timestamp >= vesting_end_timestamp                                 THEN 0  -- After the end, everything is vested                                 ELSE lockup_amount * vesting_time_left_ns / vesting_total_time_ns                                 END)                      END) AS unvested_amount                  -- Combined logic              , greatest(unreleased_amount - termination_withdrawn_amount, coalesce(unvested_amount, 0)) AS locked_amount                   , locked_amount - coalesce(lag(locked_amount) OVER (partition by lc.lockup_account_id, lc.lockup_index order by lc.utc_date), 0) AS unlocked_amount_today              FROM lockup_contracts_daily_balance__prep_2 AS lc     )     SELECT * FROM lockup_contracts_daily_balance ), daily_lockup_staking_balances AS (     WITH     lockup_staking_logs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:FunctionCall:method_name::string AS method_name              , lr.receiver_id AS lockup_account_id              , (CASE method_name                     WHEN 'stake'                     THEN split(split(lr.logs[0], ' at the staking pool')[0], 'Staking ')[1]::bigint / 1e24                                          WHEN 'deposit_and_stake'                     THEN split(split(lr.logs[0], ' to the staking pool')[0], 'Depositing and staking ')[1]::bigint / 1e24                          WHEN 'unstake'                     THEN split(split(lr.logs[0], ' from the staking pool')[0], 'Unstaking ')[1]::bigint / 1e24                          END) AS amount                   , lr.logs              FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE method_name IN ('stake','deposit_and_stake',                               'unstake','unstake_all')     ),               daily_staking_stats AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(CASE WHEN method_name IN ('stake','deposit_and_stake') THEN amount ELSE 0 END) AS staked_amount_              , sum(CASE WHEN method_name IN ('unstake') THEN amount ELSE 0 END) AS unstaked_amount_              , (CASE WHEN count(CASE WHEN method_name = 'unstake_all' THEN tx_hash ELSE NULL END) > 0                      THEN True ELSE False END) AS unstaked_all         FROM lockup_staking_logs         GROUP BY 1,2     ),               lockup_stakers AS (         SELECT lockup_account_id              , min(block_timestamp)::date AS start_date         FROM lockup_staking_logs         GROUP BY 1     ),               lockup_stakers_daily_balances__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-09-01' AND CURRENT_DATE )              SELECT ls.lockup_account_id              , d.utc_date              FROM lockup_stakers AS ls, dates AS d         WHERE d.utc_date >= ls.start_date     ),               lockup_stakers_daily_balances__prep_2 AS (         SELECT d.lockup_account_id              , d.utc_date              , coalesce(dss.staked_amount_, 0) AS staked_amount              , coalesce(dss.unstaked_amount_, 0) AS unstaked_amount              , dss.unstaked_all              , sum(CASE WHEN dss.unstaked_all = True THEN 1 ELSE 0 END)                   OVER (partition by d.lockup_account_id                         order by d.utc_date                         rows between unbounded preceding                                  and current row) AS _unstake_counter              FROM lockup_stakers_daily_balances__prep_1 AS d             LEFT JOIN daily_staking_stats AS dss                 ON dss.lockup_account_id = d.lockup_account_id                 AND dss.utc_date = d.utc_date     ),               lockup_stakers_daily_balances__prep_3 AS (         SELECT *              , coalesce(lag(_unstake_counter)                    OVER (partition by lockup_account_id                             order by utc_date)                , 0) AS staking_period_index         FROM lockup_stakers_daily_balances__prep_2     ),               lockup_stakers_daily_balances__prep_4 AS (         SELECT *              , sum(staked_amount - unstaked_amount)                    OVER (partition by lockup_account_id, staking_period_index                             order by utc_date                             rows between unbounded preceding                                      and current row) AS _cumulative_staked_amount                   , (CASE WHEN unstaked_all = True THEN 0 ELSE _cumulative_staked_amount END) AS staked_balance         FROM lockup_stakers_daily_balances__prep_3     ),               lockup_stakers_daily_balances AS (         SELECT lockup_account_id              , utc_date              , staked_balance         FROM lockup_stakers_daily_balances__prep_4     )               SELECT * FROM lockup_stakers_daily_balances ), daily_lockup_locked_and_staking_balances AS (     SELECT l.lockup_account_id          , l.utc_date          , l.locked_amount          , coalesce(s.staked_balance, 0) AS staked_amount          , least(staked_amount, locked_amount) AS locked_and_staked_amount     FROM daily_lockup_locked_balances AS l         LEFT JOIN daily_lockup_staking_balances AS s             ON s.lockup_account_id = l.lockup_account_id             AND s.utc_date = l.utc_date ), daily_locked_and_staked_supply AS (     SELECT utc_date          , sum(locked_amount) AS total_locked_supply          , sum(locked_and_staked_amount) AS locked_and_staked_supply     FROM daily_lockup_locked_and_staking_balances     GROUP BY 1 ), daily_staked_supply AS (     WITH          dim_epochs AS (      	SELECT epoch_id       		 , min(block_id) AS min_block_id       		 , max(block_id) AS max_block_id       		 , count(*) AS blocks       		 , count(distinct block_author) AS block_producers       		 , min(block_timestamp) AS start_time       		 , max(block_timestamp) AS end_time       		 , max(total_supply) / 1e24 AS total_near_supply       		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num              	FROM near.core.fact_blocks AS b       	GROUP BY 1     ),               staking_actions AS (       	SELECT r.tx_hash           	 , r.block_timestamp           	 , r.receiver_id AS validator_address           	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num           	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance                    FROM near.core.fact_receipts AS r       	   , lateral flatten( input => r.logs ) AS l                WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )           AND r.tx_hash IN ( SELECT tx_hash            				     FROM near.core.fact_actions_events_function_call           				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )           AND left(l.value::string, 6) = 'Epoch '            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               proposals AS (       	SELECT b.block_id           	 , b.block_timestamp           	 , b.epoch_id           	 , vp.value['account_id'] AS validator_address           	 , vp.value['stake']::bigint / 1e24 AS staked_balance         FROM near.core.fact_blocks AS b            , lateral flatten( input => b.chunks ) AS c            , lateral flatten( input => c.value['validator_proposals']) AS vp       	-- WHERE b.block_timestamp >= '2021-09-01'         QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1     ),               proposals_per_epoch AS (       	SELECT p.block_timestamp       		 , p.epoch_id       		 , p.validator_address       		 , p.staked_balance       		 , e.epoch_num              	FROM proposals AS p       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = p.epoch_id            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               block_producers_per_epoch AS (       	SELECT b.epoch_id       		 , e.epoch_num       		 , b.block_author AS validator_address       		 , sa.staked_balance       		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced              	FROM near.core.fact_blocks AS b       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = b.epoch_id            		LEFT JOIN staking_actions AS sa       			ON sa.epoch_num = e.epoch_num       			AND sa.validator_address = b.block_author            	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1     ),               dim_validators AS (       	SELECT validator_address       		 , min(start_epoch) AS start_epoch       		 , min(start_time) AS start_time              	FROM (     		SELECT validator_address         		 , min(epoch_num) AS start_epoch         		 , min(block_timestamp) AS start_time         	FROM staking_actions AS sa         	GROUP BY 1                	UNION ALL                	SELECT block_author AS validator_address         		 , min(e.epoch_num) AS start_epoch         		 , min(b.block_timestamp) AS start_time         	FROM near.core.fact_blocks AS b         		LEFT JOIN dim_epochs AS e         			ON b.block_id BETWEEN e.min_block_id AND e.max_block_id         	GROUP BY 1         ) AS x              	GROUP BY 1     ),               dim_table AS (       	SELECT v.validator_address       		 , e.epoch_num       		 , e.start_time       		 , e.total_near_supply              	FROM dim_validators AS v, dim_epochs AS e       	WHERE v.start_epoch <= e.epoch_num     ),               validator_status_per_epoch AS (       	SELECT dt.epoch_num       		 , dt.start_time       		 , dt.validator_address       		 , coalesce(       				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS       					OVER (partition by dt.validator_address        					  	  order by dt.epoch_num       					  	  rows between unbounded preceding       								   and current row),       				0) AS staked_balance       		 , bp.blocks_produced       		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer              	FROM dim_table AS dt       		LEFT JOIN block_producers_per_epoch AS bp       			ON bp.epoch_num = dt.epoch_num       			AND bp.validator_address= dt.validator_address            		LEFT JOIN proposals_per_epoch AS p       			ON p.epoch_num = dt.epoch_num       			AND p.validator_address= dt.validator_address          ),               epoch_stats AS (       	SELECT epoch_num           	 , start_time       		 , sum(staked_balance) AS total_near_staked                    FROM validator_status_per_epoch         WHERE staked_balance > 0         GROUP BY 1,2     ),               epoch_stats_2 AS (       	SELECT es.*       		 , de.total_near_supply       		 , de.total_near_supply - es.total_near_staked AS other_near_supply       	 	 , 100.00 * total_near_staked / total_near_supply AS perc_staked_supply       	FROM epoch_stats AS es       		LEFT JOIN dim_epochs AS de       			ON de.epoch_num = es.epoch_num     )               SELECT start_time::date AS utc_date          , total_near_staked AS total_staked_supply          , total_near_supply AS total_supply     FROM epoch_stats_2     QUALIFY row_number() OVER (partition by utc_date order by start_time desc) = 1 ), daily_supply_stats AS (     SELECT s.utc_date          , s.total_supply          , s.total_staked_supply          , s.total_supply - s.total_staked_supply AS total_nonstaked_supply          , ls.total_locked_supply          , ls.locked_and_staked_supply          , greatest(0, total_staked_supply - locked_and_staked_supply) AS nonlocked_and_staked_supply          , greatest(0, total_locked_supply - locked_and_staked_supply) AS locked_and_nonstaked_supply          , total_supply             - locked_and_staked_supply             - locked_and_nonstaked_supply             - nonlocked_and_staked_supply AS nonlocked_and_nonstaked_supply          , total_supply - total_locked_supply AS circulating_supply          , total_locked_supply AS locked_supply     FROM daily_staked_supply AS s         LEFT JOIN daily_locked_and_staked_supply AS ls             ON ls.utc_date = s.utc_date ), output AS (     SELECT utc_date          , utc_date AS "Date"          , total_supply AS "Total Supply - Actual"          , total_staked_supply AS "Staked Supply"          , total_nonstaked_supply AS "Non-staked Supply"          , circulating_supply AS "Circulating Supply"          , total_supply - circulating_supply as "Total Supply"          , total_locked_supply AS "Locked Supply"          , nonlocked_and_nonstaked_supply AS "Liquid Supply"          , total_supply - nonlocked_and_nonstaked_supply  AS "Non-liquid Supply"          , locked_and_staked_supply AS "Staked (Locked Supply)"          , locked_and_nonstaked_supply AS "Non-staked (Locked Supply)"          , nonlocked_and_staked_supply AS "Staked (Circulating Supply)"          , nonlocked_and_nonstaked_supply AS "Non-staked (Circulating Supply)"          , total_locked_supply / total_supply AS perc_locked_supply          , circulating_supply / total_supply AS perc_circulating_supply          , locked_and_staked_supply / total_locked_supply AS perc_staked__locked          , nonlocked_and_staked_supply / circulating_supply AS perc_staked__circulating          , 1 AS dummy     FROM daily_supply_stats ) SELECT * FROM output WHERE utc_date >= '2023-01-01' ORDER BY utc_date DESC
ed685d05-5308-4570-9731-553a5ec4e2bc,Corn Fees,SELECT   date_trunc('day', block_timestamp) as _date,   sum(fee) as daily_fees,   avg(fee) as avg_fees,   median(fee) as median_fees from   bitcoin.core.fact_transactions where   _date >= '2023-01-01' group by   1 order by   1
3aa4eda0-23e5-49f8-a995-d2105d26c812,Yearn - yvBOOST zapIns [YC3],with in_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapIn'     AND contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' -- yVault ZapIn contract   ),   -- originating from the yvboost pool boost_in AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN in_txs ON e.tx_id = in_txs.tx_id   WHERE from_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvboost   ),    -- not all have amount_usd info so we need to join w prices hourly zapins AS (   SELECT     date_trunc('hour', block_timestamp) as date,     symbol,     sum(amount) as native_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events e   RIGHT JOIN boost_in ON e.tx_id = boost_in.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = from_address   GROUP BY 1, 2   ORDER BY 1, 4 desc   ), final AS (   SELECT     date,     z.symbol,     native_amount,     price,     CASE       WHEN usd_amount IS NOT NULL THEN usd_amount       ELSE native_amount * price     END as usd_amount   FROM zapins z   JOIN ethereum.token_prices_hourly p     ON (date = p.hour AND z.symbol = p.symbol)   ) SELECT   date_trunc('week', date) as date,   symbol,   sum(usd_amount) as total FROM final GROUP BY 1, 2
569ae7fc-9863-4b6b-aaca-824281832cc4,Overview of Users copy,-- forked from Masi / Overview of Users @ https://flipsidecrypto.xyz/Masi/q/ZxN6tlk8pU5g/overview-of-users with tb1 as ( select DISTINCT tx_hash from near.core.fact_actions_events_function_call where receiver_id = 'meme-farming_011.ref-labs.near') , tb2 as (select DISTINCT tx_hash from near.core.fact_actions_events_function_call where tx_hash in (select tx_hash from tb1) and receiver_id in ('token.0xshitzu.near', -- 24 'token.lonkingnearbackto2024.near', --8 'ftv2.nekotoken.near',--24 'blackdragon.tkn.near')) --24 , tb3 as (select block_timestamp , tx_hash,  signer_id,  case when receiver_id = 'token.0xshitzu.near' then ARGS:"amount"/pow(10,18)  when receiver_id = 'token.lonkingnearbackto2024.near' then ARGS:"amount"/pow(10,8)  when receiver_id = 'ftv2.nekotoken.near' then ARGS:"amount"/pow(10,24)  when receiver_id = 'blackdragon.tkn.near' then ARGS:"amount"/pow(10,24) end as amount,  case when receiver_id = 'token.0xshitzu.near' then 'SHITZU'  when receiver_id = 'token.lonkingnearbackto2024.near' then 'LONK' when receiver_id = 'ftv2.nekotoken.near' then 'NEKO' when receiver_id = 'blackdragon.tkn.near' then 'BLACKDRAGON' end as token_name from near.core.fact_actions_events_function_call where tx_hash in (select tx_hash from tb2) and method_name = 'ft_resolve_transfer' ) ,  tb4 as ( select trunc(block_timestamp,'day') as day,  symbol_out ,  (sum(AMOUNT_IN)/sum(AMOUNT_OUT)) as price from near.defi.ez_dex_swaps where symbol_in in ('wNEAR') and AMOUNT_OUT > 0 and AMOUNT_IN > 0 and symbol_out = 'LONK' group by 1,2 UNION select trunc(block_timestamp,'day') as day,  symbol_out ,  (sum(AMOUNT_IN)/sum(AMOUNT_OUT)) as price from near.defi.ez_dex_swaps where symbol_in in ('wNEAR') and AMOUNT_OUT > 0 and AMOUNT_IN > 0 and symbol_out = 'SHITZU' group by 1,2 UNION select trunc(block_timestamp,'day') as day,  symbol_out ,  (sum(AMOUNT_IN)/sum(AMOUNT_OUT)) as price from near.defi.ez_dex_swaps where symbol_in in ('wNEAR') and AMOUNT_OUT > 0 and AMOUNT_IN > 0 and symbol_out = 'NEKO' group by 1,2 UNION select trunc(block_timestamp,'day') as day,  symbol_out ,  (sum(AMOUNT_IN)/sum(AMOUNT_OUT)) as price from near.defi.ez_dex_swaps where symbol_in in ('wNEAR') and AMOUNT_OUT > 0 and AMOUNT_IN > 0 and symbol_out = 'BLACKDRAGON' group by 1,2) , tb5 as ( select trunc(timestamp,'day') as day, 'NEAR' as symbol,  avg(price_usd) as near_price  from near.price.fact_prices where token = 'LiNEAR' group by 1,2) , tb6 as (select a.day,  symbol_out as token_name, case when symbol_out = 'NEKO' then price*near_price when symbol_out = 'LONK' then price*near_price when symbol_out = 'BLACKDRAGON' then price*near_price when symbol_out = 'SHITZU' then price*near_price end as avg_price from tb4 a left outer join tb5 b on a.day = b.day where a.day >= '2024-01-01') , feed as (select trunc(block_timestamp,'day') as date,  a.token_name, signer_id, tx_hash, amount,  amount*avg_price as amount_usd, avg_price from tb3 a left outer join tb6 b on a.block_timestamp::date = b.day and a.token_name = b.token_name ) , feeded as ( select token_name,  sum(amount) as feeded_amount from feed  group by 1) , tb7 as ( select DISTINCT tx_hash  from near.core.fact_actions_events_function_call where RECEIVER_ID = 'meme-farming_011.ref-labs.near' and METHOD_NAME = 'withdraw_seed' ) , unstake as (select block_timestamp , tx_hash,  signer_id,  case when receiver_id = 'token.0xshitzu.near' then ARGS:"amount"/pow(10,18)  when receiver_id = 'token.lonkingnearbackto2024.near' then ARGS:"amount"/pow(10,8)  when receiver_id = 'ftv2.nekotoken.near' then ARGS:"amount"/pow(10,24)  when receiver_id = 'blackdragon.tkn.near' then ARGS:"amount"/pow(10,24) end as amount,  case when receiver_id = 'token.0xshitzu.near' then 'SHITZU'  when receiver_id = 'token.lonkingnearbackto2024.near' then 'LONK' when receiver_id = 'ftv2.nekotoken.near' then 'NEKO' when receiver_id = 'blackdragon.tkn.near' then 'BLACKDRAGON' end as token_name from near.core.fact_actions_events_function_call where tx_hash in (select tx_hash from tb7) and METHOD_NAME = 'ft_transfer' ) , unstaked as (select trunc(block_timestamp,'day') as date,  a.token_name, signer_id, tx_hash, amount,  amount*avg_price as amount_usd, avg_price from unstake a left outer join tb6 b on a.block_timestamp::date = b.day and a.token_name = b.token_name ) , tb8 as ( select signer_id, count(DISTINCT token_name) as "UnStaked Tokens", count(DISTINCT tx_hash) as "Unstake Tx", count(DISTINCT signer_id) as "Unstakers", sum(amount) as "UnStaked Amount", sum(amount_usd) as "Unstaked Amount USD", avg(amount_usd) as "Avg Unstake Amount USD" from unstaked group by 1) , tb9 as (select  signer_id, count(DISTINCT token_name) as "Staked Tokens", count(DISTINCT tx_hash) as "Stake Tx", count(DISTINCT signer_id) as "Stakers", sum(amount) as "Staked Amount", sum(amount_usd) as "Staked Amount USD", avg(amount_usd) as "Avg Stake Amount USD" from feed group by 1) select a.signer_id, "Staked Tokens", "Stake Tx", "Unstake Tx", "Staked Amount USD", "Unstaked Amount USD", "Avg Stake Amount USD", "Avg Unstake Amount USD" from tb8 a join tb9 b on a.signer_id = b.signer_id order by 6 desc
45d394ea-73ee-4682-98d8-9bd05cbedcd1,Yearn - yvBOOST zapOuts [YC3],with out_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapOut'     AND contract_address = '0xd6b88257e91e4e4d4e990b3a858c849ef2dfde8c' -- yVault ZapOut contract   ), boost_out AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN out_txs ON e.tx_id = out_txs.tx_id   WHERE to_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a'   ) SELECT   date_trunc('week', block_timestamp) as date,   symbol,   sum(amount) as native_amount,   sum(amount_usd) as usd_amount FROM ethereum.udm_events e RIGHT JOIN boost_out ON e.tx_id = boost_out.tx_id WHERE block_timestamp > '2021-04-29T23:59:59Z'   -- AND to_label = 'genesis'   -- AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvBOOST    AND origin_address = to_address GROUP BY 1, 2 ORDER BY 1, 4 desc
ffc90a78-772f-4685-909d-51accfa41f54,2024-02-15 01:22 PM,
9c54b954-6ef0-471f-b0e5-fec17b79e1e5,Anchor Deposits - msgs vs msg_events,with deposit_msg as (   SELECT     date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   	-- avg(msg_value:coins[0]:amount::float) / pow(10,6) as avg_deposit,   	-- min(msg_value:coins[0]:amount::float) / pow(10,6) as min_deposit,   	-- max(msg_value:coins[0]:amount::float) / pow(10,6) as max_deposit,   	-- count(1) as deposit_tx_count   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1 ), deposit_event as (   select     date_trunc('day', block_timestamp) as date,   	sum(event_attributes:deposit_amount::float) / pow(10,6) as deposit_amount_two   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:"0_action" = 'deposit_stable'     and event_attributes:"0_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"1_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   group by 1 ),    final as (   select * from deposit_msg   join deposit_event using (date) ) select *, 	sum(deposit_amount) over (order by date) as cumulative_msgs, 	sum(deposit_amount_two) over (order by date) as cumulative_events,   	deposit_amount_two - deposit_amount as diff from final
6a490158-8d71-4497-ba41-cd5e0166ecb5,bLUNA burn - terraswap,SELECT    date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount FROM terra.msgs WHERE block_timestamp > GETDATE() - interval '1 month' 	AND msg_module = 'wasm'   AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   AND msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p'  AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1 asc --  only terra1dta79r3l5dc54npnnyaqjf5kqjumh5nyhyvfyd has coins listed in these swaps over past month. any other bluna swaps further back?
0566e39d-b296-4c5d-ba33-879990067530,Untitled Query,
9cd2e429-1820-4482-99c2-a26033962bf8,Distinct wh contracts,WITH all_txs as (   SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ) select distinct token_contract_address from all_txs
5df541a9-f03a-4ec4-8657-520032f523e7,2024-02-26 06:13 PM,select * from bitcoin.core.fact_transactions limit 5
9d3598ad-98e9-4e64-be9b-f6d53f982561,2023-05-12 12:28 PM,-- select event_data:id::string as "ID", * from flow.core.fact_events -- where tx_id = 'e94a9aab50c2113cbcd71a03d24c716d2bd13b59e438e14a27df168fb1691d82' -- and event_type = 'MomentNFTBurned' -- order by 1; -- 4513275 -- select * from flow.core.dim_allday_metadata  -- where nft_id = '3159063' select * from flow.core.dim_moment_metadata where nft_collection = 'A.e4cf4bdc1751c65d.AllDay' and nft_id = 1679427
76d124fb-44ec-4a43-bc74-b5b64bf2fc8c,anchor collateral tcl vs tvl and borrows [T33],WITH withdraw AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%withdraw_collateral%' GROUP BY 1), borrows AS (WITH borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1) SELECT   borrow.date,   daily_borrow_amount,   daily_repay_amount,   daily_borrow_amount - daily_repay_amount as net_borrow,   SUM(daily_borrow_amount - daily_repay_amount) OVER (ORDER BY borrow.date) as cum_net_borrow FROM (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ) repay JOIN borrow ON borrow.date = repay.date ORDER BY 1)    SELECT   *,   cumulative_provided_bluna_collateral * avg_price FROM (   SELECT   deposit.date,   -- bluna_deposit,   -- bluna_withdraw,   -- bluna_deposit - bluna_withdraw as net_bluna_deposit,   sum(bluna_deposit - bluna_withdraw) OVER (ORDER BY deposit.date) as cumulative_provided_bluna_collateral FROM 	(SELECT   	  date_trunc('day', block_timestamp) as date,   	  sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit 	FROM terra.msgs  	WHERE tx_status = 'SUCCEEDED'   	  AND msg_value:execute_msg:send:msg LIKE '%deposit_collateral%'   	GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1 ) alpha JOIN (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-03-01T00:00:00Z'   GROUP BY 1   ORDER BY 1 ) oracle   ON alpha.date = oracle.date
944611e1-62b7-4d8a-a866-60a64bdc1b12,Sushiswap cvxCRV Volume Breakdown [c1],WITH sushi AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(amount) as crv_volume   FROM ethereum.udm_events   WHERE symbol LIKE 'CRV%'     AND block_timestamp > '2021-05-01T00:00:00Z'     AND to_label = 'sushiswap'     AND to_address_name LIKE 'cvx%'   GROUP BY 1   ) SELECT   date,   crv_volume,   avg(crv_volume) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM sushi
bdb6143b-dc2e-4d5d-a750-68d010fd2070,Atlas - Cosmose Cohort,with cohort as ( 	select distinct tx_signer, min(date_trunc('month', block_timestamp))::date as created_month 	from near.core.fact_transactions 	where tx_receiver in ('wallet.kaiching', 'earn.kaiching')   group by 1 ), final as (   select     date_trunc('month', block_timestamp) as month_of,     created_month,     datediff(month, created_month, date_trunc('day', block_timestamp)) as months_since,     count(distinct t.tx_signer) as active_users,     count(tx_hash) as transactions   from near.core.fact_transactions t     left join cohort c       on t.tx_signer = c.tx_signer   where t.tx_receiver in ('wallet.kaiching', 'earn.kaiching')   and c.created_month >= '2022-09-01'::date   group by all ) select   f1.created_month::date as created_month,   f1.months_since,   f2.active_users as cohort_size,   f1.active_users,   f1.active_users / f2.active_users as retention_rate from final f1   left join final f2    on f1.created_month = f2.created_month and f2.months_since = 0   where f1.month_of < current_date() order by 1, 2
75a6a14b-4153-4518-a4b8-efea35cd8e7a,2024-02-26 03:08 PM,select    * from near.core.fact_logs where tx_hash = '8nfczw3VKG1N3hheSWgqHYDojXkyJb3AvkAFwqSBhsqG' and block_id between 103859965 and 103859975
274db57c-8805-49bd-b118-5a39d5f8f43b,MDAO Workshop - Anchor Collateral Starter Query 2,select 	date_trunc('d',block_timestamp) as date,   	sum(amount_usd) as gross_volume    from anchor.collateral group by 1 order by 1
8f45692d-fc2f-447a-bd54-f13f2532933e,Untitled,SELECT * FROM terra.labels WHERE label = 'cw20Token'
9de8e2b0-e1ce-4c65-8de9-23bb2ff233db,Flow Txs per Authorizers,-- select --   array_size(authorizers) as auth_ct, --   count(distinct tx_id) as txs -- from flow.core.fact_transactions -- group by 1 -- order by 1; with sample_txs as ( select * from flow.core.fact_transactions where block_timestamp::date > current_date - 30   and array_size(authorizers) > 1 limit 100 ) select   tx_id,   value as authorizer from sample_txs, lateral flatten(input => authorizers) order by tx_id
1eea8911-3a4a-4f11-9af5-613c4d3c08d6,Untitled Query,select * from terra.transactions limit 100
7ac1563b-6776-4d94-a0e4-d9e1ca63dad3,Spot ETFs Issuers - Percent of Supply Held,-- forked from Spot ETFs Issuers Over Time copy @ https://flipsidecrypto.xyz/edit/queries/7a330b7d-ca81-403a-b71a-4f6d2bfdbdd1 -- forked from alitaslimi / Spot ETFs Issuers Over Time @ https://flipsidecrypto.xyz/alitaslimi/q/PBn_N42H5-mk/spot-etfs-issuers-over-time with dates as (   select     date_day as date   from     crosschain.core.dim_dates   where     date_day between '2009-01-01' and current_date ), prices as (   select     date_trunc('hour', hour) as date,     avg(price) as avg_price   from bitcoin.price.ez_hourly_token_prices   group by 1 ), -------------------- Addresses --------------------   addresses as (     select       ft.value:TICKER as ticker,       ft.value:ADDRESS as address     from (       select         livequery.live.udf_api (           'https://flipsidecrypto.xyz/api/v1/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34/data/latest'         ):data as data     ) lq,     table(flatten(input => lq.data)) ft   ), -------------------- Raw Transfers --------------------   inputs as (     select       block_timestamp,       value     from       bitcoin.core.fact_inputs inputs       where pubkey_script_address in (         select address from addresses       )     and date_trunc('day', block_timestamp) >= '2019-07-24'   ),   outputs as (     select       block_timestamp,       value     from       bitcoin.core.fact_outputs outputs       where pubkey_script_address in (         select address from addresses       )       and date_trunc('day', block_timestamp) >= '2019-07-24'   ), -------------------- Flows --------------------   inflows as (     select       date_trunc('day', outputs.block_timestamp) as date,       sum(outputs.value) as volume     from       outputs     group by       date   ),   outflows as (     select       date_trunc('day', inputs.block_timestamp) as date,       sum(inputs.value) as volume     from       inputs     group by       date   ), -------------------- Output -------------------- output as ( select   dates.date as date,   zeroifnull(inflows.volume) as inflow,   zeroifnull(outflows.volume) as outflow,   inflow - outflow as netflow,   sum(netflow) over (order by dates.date) as balance from   dates   left join inflows on inflows.date = dates.date   left join outflows on outflows.date = dates.date ) , -------------------- Supply -------------------- btc_daily as ( select      date_trunc('day', block_timestamp) as date,     sum(block_reward) as daily_minted_btc from bitcoin.gov.ez_miner_rewards group by 1 ), supply as ( select     date,     sum(daily_minted_btc) over (order by date) as total_minted_btc from btc_daily ) select   supply.date,   supply.total_minted_btc,   zeroifnull(output.balance) as balance,   (zeroifnull(output.balance) / supply.total_minted_btc) * 100 as pct_held,   prices.avg_price as daily_avg_price from supply left join output on supply.date = output.date left join prices on supply.date = prices.date where supply.date >= '2019-07-24' order by 1
8398ce52-d636-45d1-9549-9d927bad7fb8,BTC US Gov Addresses,WITH USGOVT_CTE AS (     SELECT 'U.S. Government' as fund_name, 'bc1qf2yvj48mzkj7uf8lc2a9sa7w983qe256l5c8fs' as address, 'Silk Road DOJ Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qa5wkgaew2dkv56kfvj49j0av5nml45x9ek9hz6' as address, 'Silk Road Individual X FBI Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qazcm763858nkj2dj986etajv6wquslv8uxwczt' as address, 'Bitfinex Hack Recovery (FBI)' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1DNUjpHPNKMoKYBHxJz2Sh1uQQdJkGsXj5' as address, 'Bitfinex Hacker Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qc64984nk68czaazw5fvz6hm0la2ss25qpkk0aw' as address, 'Gary Harmon Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1q77n0v3rsx5vp3quax6p2j6va42qspf0ydl7gup' as address, 'DOJ Confiscated Silk Road Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qmxjefnuy06v345v6vhwpwt05dztztmx4g3y7wp' as address, 'Silk Road DOJ Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qpg8e6fqt53lga68qnyxfnfh6gzc0d88d6mjmu7' as address, 'DOJ Confiscated Silk Road Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qe7nk2nlnjewghgw4sgm0r89zkjzsurda7z4rdg' as address, 'Silk Road DOJ Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qsprde7y44yn63gzxx03zkesvv38kh2mugawe5c' as address, 'James Zhong Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qa7rc5skutrhrq4vktuswhu6rr4fpjje8rh9axc' as address, 'James Zhong Seizure' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qzd8c8h8dcgwuy5zdafdzdce2ap0nayf8v3xrez' as address, 'James Zhong Seizure' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qhmzkldzztdkk50t7k0cy2tzd6fn8xp5jjpvf3j' as address, 'DOJ Confiscated Silk Road Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qeqkuvnmk4cnaptss0xk6lf00jp67cf6mum8qwv' as address, 'Sae-Heng Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1K77wa3QtBa3qb7dSuKWLjfEMsZ9KboF9j' as address, 'Sae-Heng Confiscated Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1q3neh8n6e0e2hqp5v50498je5kjp5nv0s52j6sy' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qlrs6cw5wadhvwzfvlaaxuqpcapwh7x3q4eams0' as address, 'Gaurang S. Sharma Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qq2euq8pw950klpjcawuy4uj39ym43hs6cfsegq' as address, 'Darkside Ransomware Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qqcd2nv7s4eu74t6tux52frxyl35nw4wt7cl2uf' as address, 'Gery Shalon Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1PXcjT3KRQ4FAAcjzbcZ9edz9S9pSyy2Bx' as address, 'Gery Shanlon Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '33oxyJj3rUyY9h9A2LMev8hGp9LfTPRFPT' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3L4boz6qH6tNP5J19B9k7DeSJ3FQMhm2Yo' as address, 'Potapenko/Turogin Funds Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3Fog8wHgSqKVoR4LcktqPGvLnZvcgita7S' as address, 'Potapenko/Turogin Funds Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '38zkvJL6ZSM8tS7DFw4V37gBxqj8VVBFS9' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '349c6HJjYnX7Wb3A6oeWU2qbgwX6QdsS27' as address, 'Potapenko/Turogin Funds Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qtt6xpen2u8rant90kfu74krkfqv0fc9z5a5gu5' as address, 'Potapenko/Turogin Funds Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qq7t39xw5zmquvrxqpcw4xmrmj968geueufjwh9' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3M19ou5uw5CYzw34tgZnbSWMk3gsSwhNL3' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '17cjbgGQMi8c1hkPZBwfWgwGQUDfxDyRNx' as address, 'Bitfinex Hacker Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qvjh9cq6qlj4f4q5vxnkgt25mc6qld04vv20fhe' as address, 'Darkside Ransomware Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '14EGUfpkDaqe3b6dSkdfUxF3vondVS8kDQ' as address, 'Bitfinex Hacker Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '17Zcvze37nSVh7nuLMqGt45QzFYeZUruXF' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3FqfJVn14kSS9aN1paqGJ4JWSP1uGEh5dh' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3B2jEBZi8fJWGEDrh6Pe7hDMaJ6iGfFtaU' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '3FMKrRC4AGBSHBaVR1DVTnxC4toEhdaguF' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qu7w3m03juknja5ecc8fr9zn2umcfc3rkmypwk5' as address, 'Potapenko/Turogin Funds Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '36UnG2aCUvuRbHE4WsWpFjodBfq71rmo4K' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, 'bc1qxszvhw5mv5qtcs9kuymtk6xq6k654wd02flpva' as address, 'Ryan Farace Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1BBTk41STWuffTfvRrsovX7X8puhDpFofk' as address, 'Alexandre Cazes Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1HDA1VJCTinigFLmxypfr2Mdjrf1bfvoM3' as address, 'Edward Cantor Seized Funds' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '18yWFVddqNrGE966zwXTpyJgYJgr82SvMs' as address, 'Alexandre Cazes Seized Address' as label_name UNION ALL     SELECT 'U.S. Government' as fund_name, '1NXoCQLQqgaQU2cpBGtXTZ8NVm1cGnYD6p' as address, 'Alexandre Cazes Seized Address' as label_name ) select * from USGOVT_CTE
abd77452-4981-4d9e-af2d-910380915ad0,primary-yellow,select    platform,   bridge_address,   count(distinct tx_hash),   sum(amount_usd) from bsc.defi.ez_bridge_activity where destination_chain = 'solana'   and block_timestamp >= current_date - 30 group by 1,2 order by 4 desc
1b50e5ec-ac38-48ec-98f4-66b3d3aca3bc,AD - Total Supply (Atlas),WITH lockup_receipts AS (     SELECT fr.tx_hash          , fr.block_timestamp          , fr.actions:predecessor_id::string AS predecessor_id          , fr.receiver_id          , fr.actions          , OBJECT_KEYS(fr.status_value)[0]::string AS status          , fr.logs          FROM near.core.fact_receipts AS fr     WHERE fr.receiver_id LIKE '%.lockup.near'       AND status != 'Failure' ), daily_lockup_locked_balances AS (     WITH     -- new lockup contract created     new_lockup_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'new'     ),               -- vesting is stopped by the Foundation     terminate_vesting_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(lr.logs[0], 'unvested balance is ')[1]::bigint / 1e24 AS unvested_balance         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'terminate_vesting'     ),               terminate_vesting_txs_with_vesting_schedule AS (         SELECT tv.*              , fc.args:vesting_schedule_with_salt:vesting_schedule AS vesting_schedule              FROM terminate_vesting_txs AS tv             LEFT JOIN near.core.fact_actions_events_function_call AS fc                 ON fc.tx_hash = tv.tx_hash                 AND fc.method_name = 'terminate_vesting'              QUALIFY row_number() OVER (partition by tv.tx_hash order by tv.block_timestamp) = 1  -- dedupe     ),               -- unvested tokens are withdrawn (effectively unlocked into circulating supply)     termination_withdraw_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(split(lr.logs[0], ' of terminated unvested balance')[0], 'Withdrawing ')[1]::bigint / 1e24 AS withdrawn_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'termination_withdraw'      -- Simplify logic -> get only first termination withdrawal         -- QUALIFY row_number() OVER (partition by lockup_account_id order by block_timestamp) = 1     ),               daily_termination_withdrawn_amount AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(withdrawn_amount) AS withdrawn_amount         FROM termination_withdraw_txs         GROUP BY 1,2     ),               -- lockup amounts     deposits AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:Transfer:deposit::bigint / 1e24 AS deposit_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE OBJECT_KEYS(value:Transfer)[0]::string = 'deposit'     ),               lockup_contracts AS (         SELECT lcr.tx_hash              , lcr.block_timestamp              , lcr.lockup_account_id              , fc1.args:lockup_duration::bigint AS input_lockup_duration_ns              , fc1.args:lockup_timestamp::bigint AS input_lockup_timestamp_epoch              , fc1.args:owner_account_id::string AS owner_account_id              , fc1.args:release_duration::bigint AS input_release_duration_ns              , coalesce(tv.vesting_schedule, fc1.args:vesting_schedule:VestingSchedule) AS vesting_schedule_              , vesting_schedule_:cliff_timestamp::bigint AS vesting_cliff_timestamp_epoch              , vesting_schedule_:start_timestamp::bigint AS vesting_start_timestamp_epoch              , vesting_schedule_:end_timestamp::bigint AS vesting_end_timestamp_epoch              , coalesce( fc1.args:transfers_information:TransfersEnabled:transfers_timestamp::bigint,                           1602614338293769340 ) AS transfers_enabled_timestamp_epoch              , d.deposit_amount                   , tv.block_timestamp AS terminate_vesting_timestamp              , tv.unvested_balance AS termination_unvested_amount                   , tw.block_timestamp AS termination_withdraw_timestamp              , tw.withdrawn_amount AS termination_withdrawn_amount                   , (CASE WHEN OBJECT_KEYS(fc1.args:vesting_schedule)[0]::string = 'VestingHash'                      THEN True ELSE False END) AS is_private_vesting              FROM new_lockup_txs AS lcr             LEFT JOIN near.core.fact_actions_events_function_call AS fc1                 ON fc1.tx_hash = lcr.tx_hash                 AND fc1.method_name = 'new'                  LEFT JOIN deposits AS d                 ON d.tx_hash = lcr.tx_hash                  LEFT JOIN terminate_vesting_txs_with_vesting_schedule AS tv                 ON tv.lockup_account_id = lcr.lockup_account_id                  LEFT JOIN termination_withdraw_txs AS tw                 ON tw.lockup_account_id = lcr.lockup_account_id              WHERE lcr.tx_hash IN (SELECT tx_hash FROM new_lockup_txs)           AND d.deposit_amount > 0     ),               lockup_contracts__parsed AS (         SELECT lockup_account_id             -- the number of times the same lockup account ID has been used (used as part of lockup unique identifier)              , row_number() OVER (partition by lockup_account_id order by block_timestamp) AS lockup_index              , owner_account_id              , deposit_amount AS lockup_amount                  -- timestamp when tokens were locked (lock start)              , block_timestamp AS deposit_timestamp                  -- timestamp when transfers were enabled in the blockchain (default reference when lockup_timestamp is null)              , to_timestamp(transfers_enabled_timestamp_epoch, 9) AS transfers_enabled_timestamp                  -- timestamp when tokens start unlocking (explicit parameter)              , to_timestamp(input_lockup_timestamp_epoch, 9) AS input_lockup_timestamp                  -- if lockup_timestamp is null, calculate unlock start from lockup duration              , timestampadd(nanoseconds, input_lockup_duration_ns, transfers_enabled_timestamp) AS calculated_lockup_timestamp                  -- lockup mechanism              , input_lockup_duration_ns              , input_release_duration_ns                  -- Max between input and calculated lockup timestamp              , (CASE WHEN input_lockup_timestamp IS NOT NULL                      THEN greatest(input_lockup_timestamp, calculated_lockup_timestamp)                      ELSE calculated_lockup_timestamp END) AS lockup_timestamp                  -- If release_duration is not provided, tokens are immediately unlocked              , (CASE WHEN input_release_duration_ns IS NOT NULL                      THEN timestampadd(nanosecond, input_release_duration_ns, lockup_timestamp)  -- linear release if release_duration is provided, else full unlock                      ELSE lockup_timestamp END) AS lockup_end_timestamp                  -- vesting mechanism              , is_private_vesting              , to_timestamp(vesting_start_timestamp_epoch, 9) AS vesting_start_timestamp              , to_timestamp(vesting_end_timestamp_epoch, 9) AS vesting_end_timestamp              , to_timestamp(vesting_cliff_timestamp_epoch, 9) AS vesting_cliff_timestamp                  -- vesting termination              , terminate_vesting_timestamp              , termination_unvested_amount              , termination_withdraw_timestamp              , termination_withdrawn_amount                   , tx_hash AS _tx_hash                   , (CASE WHEN lockup_timestamp IS NOT NULL AND vesting_start_timestamp IS NULL                      THEN least(deposit_timestamp, lockup_timestamp)                      WHEN lockup_timestamp IS NULL AND vesting_start_timestamp IS NOT NULL                      THEN least(deposit_timestamp, vesting_start_timestamp)                      ELSE least(deposit_timestamp, lockup_timestamp, vesting_start_timestamp) END)::date AS _lockup_start_date                   , (CASE WHEN lockup_end_timestamp IS NOT NULL AND vesting_end_timestamp IS NULL                      THEN lockup_end_timestamp                      WHEN lockup_end_timestamp IS NULL AND vesting_end_timestamp IS NOT NULL                      THEN vesting_end_timestamp                      ELSE greatest(lockup_end_timestamp, vesting_end_timestamp) END)::date AS _lockup_end_date              FROM lockup_contracts     ),               lockup_contracts_daily_balance__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-01-01' AND CURRENT_DATE )              SELECT lc.lockup_account_id              , lc.lockup_index              , lc.owner_account_id                   , d.utc_date              , d.utc_date + interval '1 day' - interval '1 nanosecond' AS block_timestamp  -- End of day block timestamp                   , lc.lockup_amount              , lc.deposit_timestamp                  -- Lockup logic              , lc.lockup_timestamp              , lc.lockup_end_timestamp              , greatest(0, timestampdiff(nanosecond, block_timestamp, lockup_end_timestamp)) AS lockup_time_left_ns              , (CASE WHEN block_timestamp >= lockup_timestamp                      THEN (CASE WHEN input_release_duration_ns > 0                                 THEN (CASE WHEN block_timestamp >= lockup_end_timestamp                                            THEN 0  -- everything is released                                            ELSE lockup_amount * lockup_time_left_ns / input_release_duration_ns                                            END)                                 ELSE 0 END)                      ELSE lockup_amount  -- The entire balance is still locked before the lockup timestamp                      END) AS unreleased_amount                  -- Vesting logic              , lc.vesting_start_timestamp              , lc.vesting_cliff_timestamp              , lc.vesting_end_timestamp              , lc.terminate_vesting_timestamp              , lc.termination_unvested_amount              , greatest(0, timestampdiff(nanosecond, block_timestamp, vesting_end_timestamp)) AS vesting_time_left_ns              , timestampdiff(nanosecond, vesting_start_timestamp, vesting_end_timestamp) AS vesting_total_time_ns              FROM lockup_contracts__parsed AS lc, dates AS d         WHERE d.utc_date BETWEEN lc._lockup_start_date                              AND lc._lockup_end_date     ),               lockup_contracts_daily_balance__prep_2 AS (         SELECT lc.*              , sum(coalesce(dtw.withdrawn_amount, 0))                     OVER (partition by lc.lockup_account_id, lc.lockup_index                               order by lc.utc_date                               rows between unbounded preceding                                        and current row) AS termination_withdrawn_amount                  FROM lockup_contracts_daily_balance__prep_1 AS lc             LEFT JOIN daily_termination_withdrawn_amount AS dtw                 ON dtw.lockup_account_id = lc.lockup_account_id                 AND dtw.utc_date = lc.utc_date          ),               lockup_contracts_daily_balance AS (         SELECT lc.*                  -- Vesting logic                  -- Not 100% accurate due to private vesting lockups (unknown/hidden vesting parameters)              , (CASE WHEN block_timestamp >= terminate_vesting_timestamp                      THEN termination_unvested_amount - termination_withdrawn_amount                      ELSE (CASE WHEN block_timestamp < vesting_cliff_timestamp                                 THEN lockup_amount  -- Before the cliff, nothing is vested                                 WHEN block_timestamp >= vesting_end_timestamp                                 THEN 0  -- After the end, everything is vested                                 ELSE lockup_amount * vesting_time_left_ns / vesting_total_time_ns                                 END)                      END) AS unvested_amount                  -- Combined logic              , greatest(unreleased_amount - termination_withdrawn_amount, coalesce(unvested_amount, 0)) AS locked_amount                   , locked_amount - coalesce(lag(locked_amount) OVER (partition by lc.lockup_account_id, lc.lockup_index order by lc.utc_date), 0) AS unlocked_amount_today              FROM lockup_contracts_daily_balance__prep_2 AS lc     )     SELECT * FROM lockup_contracts_daily_balance ), daily_lockup_staking_balances AS (     WITH     lockup_staking_logs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:FunctionCall:method_name::string AS method_name              , lr.receiver_id AS lockup_account_id              , (CASE method_name                     WHEN 'stake'                     THEN split(split(lr.logs[0], ' at the staking pool')[0], 'Staking ')[1]::bigint / 1e24                                          WHEN 'deposit_and_stake'                     THEN split(split(lr.logs[0], ' to the staking pool')[0], 'Depositing and staking ')[1]::bigint / 1e24                          WHEN 'unstake'                     THEN split(split(lr.logs[0], ' from the staking pool')[0], 'Unstaking ')[1]::bigint / 1e24                          END) AS amount                   , lr.logs              FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE method_name IN ('stake','deposit_and_stake',                               'unstake','unstake_all')     ),               daily_staking_stats AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(CASE WHEN method_name IN ('stake','deposit_and_stake') THEN amount ELSE 0 END) AS staked_amount_              , sum(CASE WHEN method_name IN ('unstake') THEN amount ELSE 0 END) AS unstaked_amount_              , (CASE WHEN count(CASE WHEN method_name = 'unstake_all' THEN tx_hash ELSE NULL END) > 0                      THEN True ELSE False END) AS unstaked_all         FROM lockup_staking_logs         GROUP BY 1,2     ),               lockup_stakers AS (         SELECT lockup_account_id              , min(block_timestamp)::date AS start_date         FROM lockup_staking_logs         GROUP BY 1     ),               lockup_stakers_daily_balances__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-09-01' AND CURRENT_DATE )              SELECT ls.lockup_account_id              , d.utc_date              FROM lockup_stakers AS ls, dates AS d         WHERE d.utc_date >= ls.start_date     ),               lockup_stakers_daily_balances__prep_2 AS (         SELECT d.lockup_account_id              , d.utc_date              , coalesce(dss.staked_amount_, 0) AS staked_amount              , coalesce(dss.unstaked_amount_, 0) AS unstaked_amount              , dss.unstaked_all              , sum(CASE WHEN dss.unstaked_all = True THEN 1 ELSE 0 END)                   OVER (partition by d.lockup_account_id                         order by d.utc_date                         rows between unbounded preceding                                  and current row) AS _unstake_counter              FROM lockup_stakers_daily_balances__prep_1 AS d             LEFT JOIN daily_staking_stats AS dss                 ON dss.lockup_account_id = d.lockup_account_id                 AND dss.utc_date = d.utc_date     ),               lockup_stakers_daily_balances__prep_3 AS (         SELECT *              , coalesce(lag(_unstake_counter)                    OVER (partition by lockup_account_id                             order by utc_date)                , 0) AS staking_period_index         FROM lockup_stakers_daily_balances__prep_2     ),               lockup_stakers_daily_balances__prep_4 AS (         SELECT *              , sum(staked_amount - unstaked_amount)                    OVER (partition by lockup_account_id, staking_period_index                             order by utc_date                             rows between unbounded preceding                                      and current row) AS _cumulative_staked_amount                   , (CASE WHEN unstaked_all = True THEN 0 ELSE _cumulative_staked_amount END) AS staked_balance         FROM lockup_stakers_daily_balances__prep_3     ),               lockup_stakers_daily_balances AS (         SELECT lockup_account_id              , utc_date              , staked_balance         FROM lockup_stakers_daily_balances__prep_4     )               SELECT * FROM lockup_stakers_daily_balances ), daily_lockup_locked_and_staking_balances AS (     SELECT l.lockup_account_id          , l.utc_date          , l.locked_amount          , coalesce(s.staked_balance, 0) AS staked_amount          , least(staked_amount, locked_amount) AS locked_and_staked_amount     FROM daily_lockup_locked_balances AS l         LEFT JOIN daily_lockup_staking_balances AS s             ON s.lockup_account_id = l.lockup_account_id             AND s.utc_date = l.utc_date ), daily_locked_and_staked_supply AS (     SELECT utc_date          , sum(locked_amount) AS total_locked_supply          , sum(locked_and_staked_amount) AS locked_and_staked_supply     FROM daily_lockup_locked_and_staking_balances     GROUP BY 1 ), daily_staked_supply AS (     WITH          dim_epochs AS (      	SELECT epoch_id       		 , min(block_id) AS min_block_id       		 , max(block_id) AS max_block_id       		 , count(*) AS blocks       		 , count(distinct block_author) AS block_producers       		 , min(block_timestamp) AS start_time       		 , max(block_timestamp) AS end_time       		 , max(total_supply) / 1e24 AS total_near_supply       		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num              	FROM near.core.fact_blocks AS b       	GROUP BY 1     ),               staking_actions AS (       	SELECT r.tx_hash           	 , r.block_timestamp           	 , r.receiver_id AS validator_address           	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num           	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance                    FROM near.core.fact_receipts AS r       	   , lateral flatten( input => r.logs ) AS l                WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )           AND r.tx_hash IN ( SELECT tx_hash            				     FROM near.core.fact_actions_events_function_call           				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )           AND left(l.value::string, 6) = 'Epoch '            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               proposals AS (       	SELECT b.block_id           	 , b.block_timestamp           	 , b.epoch_id           	 , vp.value['account_id'] AS validator_address           	 , vp.value['stake']::bigint / 1e24 AS staked_balance         FROM near.core.fact_blocks AS b            , lateral flatten( input => b.chunks ) AS c            , lateral flatten( input => c.value['validator_proposals']) AS vp       	-- WHERE b.block_timestamp >= '2021-09-01'         QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1     ),               proposals_per_epoch AS (       	SELECT p.block_timestamp       		 , p.epoch_id       		 , p.validator_address       		 , p.staked_balance       		 , e.epoch_num              	FROM proposals AS p       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = p.epoch_id            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               block_producers_per_epoch AS (       	SELECT b.epoch_id       		 , e.epoch_num       		 , b.block_author AS validator_address       		 , sa.staked_balance       		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced              	FROM near.core.fact_blocks AS b       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = b.epoch_id            		LEFT JOIN staking_actions AS sa       			ON sa.epoch_num = e.epoch_num       			AND sa.validator_address = b.block_author            	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1     ),               dim_validators AS (       	SELECT validator_address       		 , min(start_epoch) AS start_epoch       		 , min(start_time) AS start_time              	FROM (     		SELECT validator_address         		 , min(epoch_num) AS start_epoch         		 , min(block_timestamp) AS start_time         	FROM staking_actions AS sa         	GROUP BY 1                	UNION ALL                	SELECT block_author AS validator_address         		 , min(e.epoch_num) AS start_epoch         		 , min(b.block_timestamp) AS start_time         	FROM near.core.fact_blocks AS b         		LEFT JOIN dim_epochs AS e         			ON b.block_id BETWEEN e.min_block_id AND e.max_block_id         	GROUP BY 1         ) AS x              	GROUP BY 1     ),               dim_table AS (       	SELECT v.validator_address       		 , e.epoch_num       		 , e.start_time       		 , e.total_near_supply              	FROM dim_validators AS v, dim_epochs AS e       	WHERE v.start_epoch <= e.epoch_num     ),               validator_status_per_epoch AS (       	SELECT dt.epoch_num       		 , dt.start_time       		 , dt.validator_address       		 , coalesce(       				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS       					OVER (partition by dt.validator_address        					  	  order by dt.epoch_num       					  	  rows between unbounded preceding       								   and current row),       				0) AS staked_balance       		 , bp.blocks_produced       		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer              	FROM dim_table AS dt       		LEFT JOIN block_producers_per_epoch AS bp       			ON bp.epoch_num = dt.epoch_num       			AND bp.validator_address= dt.validator_address            		LEFT JOIN proposals_per_epoch AS p       			ON p.epoch_num = dt.epoch_num       			AND p.validator_address= dt.validator_address          ),               epoch_stats AS (       	SELECT epoch_num           	 , start_time       		 , sum(staked_balance) AS total_near_staked                    FROM validator_status_per_epoch         WHERE staked_balance > 0         GROUP BY 1,2     ),               epoch_stats_2 AS (       	SELECT es.*       		 , de.total_near_supply       		 , de.total_near_supply - es.total_near_staked AS other_near_supply       	 	 , 100.00 * total_near_staked / total_near_supply AS perc_staked_supply       	FROM epoch_stats AS es       		LEFT JOIN dim_epochs AS de       			ON de.epoch_num = es.epoch_num     )               SELECT start_time::date AS utc_date          , total_near_staked AS total_staked_supply          , total_near_supply AS total_supply     FROM epoch_stats_2     QUALIFY row_number() OVER (partition by utc_date order by start_time desc) = 1 ), daily_supply_stats AS (     SELECT s.utc_date          , s.total_supply          , s.total_staked_supply          , s.total_supply - s.total_staked_supply AS total_nonstaked_supply          , ls.total_locked_supply          , ls.locked_and_staked_supply          , greatest(0, total_staked_supply - locked_and_staked_supply) AS nonlocked_and_staked_supply          , greatest(0, total_locked_supply - locked_and_staked_supply) AS locked_and_nonstaked_supply          , total_supply             - locked_and_staked_supply             - locked_and_nonstaked_supply             - nonlocked_and_staked_supply AS nonlocked_and_nonstaked_supply          , total_supply - total_locked_supply AS circulating_supply          , total_locked_supply AS locked_supply     FROM daily_staked_supply AS s         LEFT JOIN daily_locked_and_staked_supply AS ls             ON ls.utc_date = s.utc_date ), output AS (     SELECT utc_date          , utc_date AS "Date"          , total_supply AS "Total Supply - Actual"          , total_staked_supply AS "Staked Supply"          , total_nonstaked_supply AS "Non-staked Supply"          , circulating_supply AS "Circulating Supply"          , total_supply - circulating_supply as "Total Supply"          , total_locked_supply AS "Locked Supply"          , nonlocked_and_nonstaked_supply AS "Liquid Supply"          , total_supply - nonlocked_and_nonstaked_supply  AS "Non-liquid Supply"          , locked_and_staked_supply AS "Staked (Locked Supply)"          , locked_and_nonstaked_supply AS "Non-staked (Locked Supply)"          , nonlocked_and_staked_supply AS "Staked (Circulating Supply)"          , nonlocked_and_nonstaked_supply AS "Non-staked (Circulating Supply)"          , total_locked_supply / total_supply AS perc_locked_supply          , circulating_supply / total_supply AS perc_circulating_supply          , locked_and_staked_supply / total_locked_supply AS perc_staked__locked          , nonlocked_and_staked_supply / circulating_supply AS perc_staked__circulating          , 1 AS dummy     FROM daily_supply_stats ) SELECT * FROM output WHERE utc_date >= '2023-01-01' ORDER BY utc_date DESC
e4a9ac6e-18ec-496a-ae73-7d41cbfc49d2,GithubMonthlyCommits,WITH RAW AS (     select *     from   near.core.fact_developer_activity     where  endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ), -- Monthly commits monthly_commits AS (     SELECT         DATE_TRUNC('MONTH', week_date) AS month_year,  -- Group by month-year         SUM(weekly_commits) AS total_monthly_commits  -- Total commits in the month     FROM numbered_data     WHERE row_num = 1     GROUP BY month_year     ORDER BY month_year ) -- This will output the data from monthly_commits CTE SELECT * FROM monthly_commits;
8075ca2a-a524-4380-a327-1f67617980d1,Stader Unique Users [S1],SELECT *,   value FROM terra.msgs, lateral flatten( input => msg_value) WHERE tx_id = '12864D84E7073D5430CA3330AC05AFED7CE3746A11CCABC66379686CD9FB56B5'
9e6bcc64-a483-4c66-8c98-78072bec9b06,Untitled Query,with txs as (   	select * from near.core.fact_transactions    	where block_timestamp::date >= '2022-09-12' ), go_pay_txs as ( 	select * from txs     where tx_receiver = tx_signer   		and tx:actions ilike '%deleteaccount%gopaywith.near%' ), beer_truck as (     select * from txs     where tx_signer in (select tx_signer from go_pay_txs)     	and tx_receiver  = 'beertruck.near' ), spender as (     select * from txs      where tx_receiver in (select tx_receiver from go_pay_txs)     	and tx_receiver != tx_signer ), final as (   	select   		b.block_timestamp,   		b.tx_receiver as receiver,   		s.tx_signer as spender,   		b.tx:actions[0]:Transfer:deposit::float / pow(10,24) as deposit_amount,   		s.tx:actions[0]:Transfer:deposit::float / pow(10,24) as withdraw_amount,         withdraw_amount - deposit_amount as fee,   		b.block_id as depost_block,   		s.block_id as withdraw_block   	from beer_truck b   		left join spender s    		on b.tx_signer = s.tx_receiver ), aggs as ( 	select 		spender,   		count(1) as num_sales,   		sum(deposit_amount) as gross_amount   from final   group by 1 ) select * from aggs
9e719edc-615f-4c48-ae4c-e4a7ddfe9247,THOR LP Volume by Pool [THOR6],SELECT   -- date_trunc('day', block_timestamp) as date,   pool_name,   lp_action,   sum(rune_amount) as gross_rune_amount,   sum(rune_amount_usd) as gross_rune_amount_usd,   sum(asset_amount) as gross_asset_amount,   sum(asset_amount_usd) as gross_asset_amount_usd,   sum(rune_amount_usd + asset_amount_usd) as gross_amount_total FROM thorchain.liquidity_actions WHERE block_timestamp > CURRENT_DATE - interval '24 hours' GROUP BY 1, 2 ORDER BY 3 desc
3cc6b54c-98c5-467f-848b-345dbb2dffa9,[19] active liquidity,
42c3d322-8ea0-4f29-96c1-61f14a65e1c7,Borrow and Deposit - revised,with an_dep AS (   select      date_trunc('day', an.block_timestamp ) as day,      sum(an.deposit_amount) as daily_dep   from anchor.deposits as an   group by day ),    anc_redeems as (   select     date_trunc('day', anc.block_timestamp ) as day,   	sum(anc.amount) as daily_redeem   FROM anchor.redeem as anc   group by day )    select   an_dep.day,   daily_dep as  "Daily Deposits",    daily_redeem as "Daily Redemptions" ,    "Daily Deposits" - "Daily Redemptions" as "Net Activity" from an_dep  LEFT join anc_redeems on an_dep.day = anc_redeems.day order by 1
83328b69-71e7-4adb-a8bc-18ec27e9d6a9,outstanding-red,select   utc_date,   total_supply,   total_locked_supply,   circulating_supply from   near.atlas.ez_supply order by 1
7d43795d-a812-44b4-99ff-bfa29b1d3b69,Untitled Query,SELECT * from mdao_harmony.tokenprice_one limit 100
8d89738d-2cd2-4845-99a3-2892126986b1,2023-05-26 01:35 PM,
9f773761-3cfe-481b-b7f6-8e4898d09ce7,FLOW Hunt Boilerplate,with account_creation as ( select * from flow.core.fact_events   where block_timestamp > '2022-06-01'  	and event_type = 'AccountCreated' 	and event_data:address::string = '0xb167c41f14a30c76' -- user enters their Dapper Wallet here ) select * from flow.core.fact_transactions   where tx_id in (select tx_id from account_creation)   	-- and proposer = '0x18eb4ee6b3c026d2' -- dapper labs address, do not exclude. Query will return 0 rows if account was created using another wallet, like Blocto    select * from flow.core.fact_transactions where tx_id = 'ca403066ff1db2103f3798cacf7fc0390423b76bc0a966139c083573170815c9';
9f3845de-f2c2-48de-a905-f4698212c514,Terra - IBC Volume,SELECT   date_trunc('day', block_timestamp) as date,   msg_value:token:denom as denom,   sum(msg_value:token:amount::float) / pow(10,6) as amount FROM terra.msgs WHERE msg_value:sender IS NOT NULL   AND msg_module = 'applications' GROUP BY 1,2 ORDER BY 1
02b16ed8-4728-4994-a00f-478ad807c473,Untitled Query,select * from near.core.ez_dex_swaps limit 10
3d7c6530-348f-4349-808c-c44d7640db96,Untitled Query,select * from mdao_near.blocks limit 100
7f5768ca-5167-41ed-bd5c-09d55d1713d4,Untitled Query,
9acc8040-4d62-451b-8029-d3e381ee3ac8,[terradash] Current Balance of Yield Reserve,SELECT   balance FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   AND currency = 'UST'   AND date = (select max(date) from terra.daily_balances)
1c0fa33e-4576-4f1a-94f1-9619ee48c526,latest polygon block,select max(block_id) from polygon.transactions
80f4f894-4c04-425b-bb33-6e4fbaee6571,Untitled Query,select * from near.core.fact_transfers limit 10;
7cad8d6b-06e2-439c-8201-356185379655,2024-03-12 11:44 AM,SELECT     DATA :result :block_height :: NUMBER AS block_height,     VALUE :account_id :: STRING AS account_id,     VALUE :can_withdraw :: BOOLEAN AS can_withdraw,     VALUE :staked_balance :: NUMBER / pow(         10,         24     ) AS staked_balance,     VALUE :unstaked_balance :: NUMBER / pow(         10,         24     ) AS unstaked_balance FROM     TABLE(         near.streamline.udtf_call_contract_function(             'staked.poolv1.near',             'get_accounts',             {                 'from_index': 0,                 'limit': 100             }         )     ),     LATERAL FLATTEN(decoded_result)
e6aee380-e902-4037-b6ed-f01935def1ce,2024-02-27 08:17 AM,select   event_index,   event_contract,   event_type,   event_data from   flow.core.fact_events where   block_height = 55334605   and tx_id = '66674ffdcd7f8c511f704113e59bb16cd10cfaa3eef52f2a85bc2a4c244b26bd' order by   1
129cfcfb-1d97-4454-a7b8-d8111f8173f2,[terradash] Daily Unique Wallets,select count(distinct address) as "total number of user" from terra.daily_balances where date = (select max(date) from terra.daily_balances)
409be3ee-bfe6-40ee-b8ee-67c3cdf6e6eb,Untitled Query,
f7ab7a5d-f98d-4906-b302-d47b65385a64,Flow Latency - Txs,with blocks as (     select         block_timestamp,         block_height,         tx_count     from flow.core.fact_blocks     where block_timestamp >= sysdate() - interval '12 hours' ), txs_expected as (     select         time_slice(block_timestamp, 15, 'MINUTE') as block_timestamp_15_min,         count(distinct block_height) as blocks,         sum(tx_count) as tx_count     from blocks     where tx_count > 0 -- excl empty blocks to avoid overstating missed block pct     group by 1 ), txs_actual as (     select         time_slice(block_timestamp, 15, 'MINUTE') as block_timestamp_15_min,         count(distinct block_height) as blocks,         count(distinct tx_id) as tx_count     from flow.core.fact_transactions ft     where block_timestamp >= sysdate() - interval '12 hours'     group by 1 ), final as (     select         txs_actual.block_timestamp_15_min,         txs_actual.blocks as actual_blocks,         txs_actual.tx_count as actual_tx_count, -- note, if we do not have all blocks in for this period, this number will not be accurate         txs_expected.blocks as expected_blocks,         txs_expected.tx_count as expected_tx_count,         txs_expected.blocks - txs_actual.blocks as missed_blocks_count,         txs_expected.tx_count - txs_actual.tx_count as missed_txs_count,         (txs_expected.blocks - txs_actual.blocks) / txs_expected.blocks as missed_blocks_ratio,         (txs_expected.tx_count - txs_actual.tx_count) / txs_expected.tx_count as missed_txs_ratio     from txs_actual     join txs_expected         on txs_actual.block_timestamp_15_min = txs_expected.block_timestamp_15_min ) select    concat((row_number() over (order by block_timestamp_15_min desc) - 1) * 15, ' minutes behind chainhead') as label,   *  from final order by 2 desc
73a9ea3f-fe49-4d85-91c0-61b02d7a358c,L1_Staking_Table_V2 copy,-- forked from synthquest / L1_Staking_Table_V2 @ https://flipsidecrypto.xyz/synthquest/q/l-1-staking-table-v-1-hzOFMP  -- forked from 1c3f8530-f34a-44b8-84a9-a2c294a48770   -- forked from 744a976d-8556-4ccf-a005-07c41da10b3e   /* ## High Level Concept Using burnShare and mintShare traces  https://etherscan.io/address/0x89fcb32f29e509cc42d0c8b6f058c993013a843f#writeContract Steps: 1. Look for traces of mintShare/burnShare 2. Because mintShare/burnShare function executes balanceOf, we look for the most     recent balanceOf call (to SNX, SDS and Escrow)    and use that output to determine the state of the EVM. */ with snx_issers as ( select '0x5810fc0e79f4323b2dd3c638914083fd23a941c0' as issuer_address union all select '0x2eb6860fadc59910bf187965da8714d91f20f4db' as issuer_address ) -- , snx_tokens as ( -- select '0x883a0e7b329df75476d9378462522cf2f78fab3d' as token_address -- union all select '0x97607b048aea97a821c3edc881af7743f8868950' as token_address -- union all select '0xe95a536cf5c7384ff1ef54819dc54e03d0ff1979' as token_address -- union all select '0x08f30ecf2c15a783083ab9d5b9211c22388d0564' as token_address -- union all select '0x7f30336e0e01bee8dd1c641bd793400f82d080cf' as token_address -- union all select '0x931933807c4c808657b6016f9e539486e7b5d374' as token_address -- union all select '0x6b10e5ce50e3a062731d83cd3cad1964e5f93da6' as token_address -- union all select '0x639032d3900875a4cf4960ad6b9ee441657aa93c' as token_address -- -- union all select '0xd0da9cbea9c3852c5d63a95f9abcc4f6ea0f9032' as token_address --)  /* No need for the snx_tokens CTE above,  the SNX TokenState address(i.e. 0x5b1b5fea1b99d83ad479df0c222f0492385381dd) should be used instead  as I observed its balanceOf function always returns the SNX balance of a wallet address  regardless of the SNX token address currently being used. */ , raw_mints as ( select  '0x' || substr(input,3+8+24,40) as minted_account, ethereum.public.udf_hex_to_int(substr(input,3+8+24+64,64))::integer / pow(10,18) as minted_amount, 'Mint' as event_type, row_number() over (PARTITION BY tx_hash order by gas desc) as raw_trace_index, * from ethereum.core.fact_traces where to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and substr(input,0,10) = '0xc2f04b0a' -- function mintShare  and block_timestamp > '2020-01-01' -- and block_timestamp < '2023-01-01' and tx_status = 'SUCCESS' ) , raw_burns as ( select '0x' || substr(input,3+8+24,40) as minted_account, ethereum.public.udf_hex_to_int(substr(input,3+8+24+64,64))::integer / pow(10,18) * -1 as minted_amount, 'Burn' as event_type, row_number() over (PARTITION BY tx_hash order by gas desc) as raw_trace_index, * from ethereum.core.fact_traces where to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and substr(input,0,10) = '0x1a378f0d' -- function burnShare  and block_timestamp > '2020-01-01' -- and block_timestamp < '2023-01-01' and tx_status = 'SUCCESS' ) , raw_traces as ( select  '0x' || substr(input, 3+8+24, 40) as wallet_address, to_address, output, row_number() over (PARTITION BY tx_hash order by gas desc) as trace_index, input, from_address, gas, data, tx_hash from ethereum.core.fact_traces where 1=1 and substr(input,0,10) = '0x70a08231' -- function balanceOf and block_timestamp > '2020-01-01' -- and block_timestamp < '2023-01-01' and tx_status = 'SUCCESS' ) ,final_mints_sds as ( select  m.block_number, m.block_timestamp, m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_mints_snx as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x5b1b5fea1b99d83ad479df0c222f0492385381dd' -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_mints_escrow as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_mints m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and ( t.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- reward escrow -- or t.to_address = '0x971e78e0c92392a4e39099835cf7e6ab535b2227' or t.to_address = '0xda4ef8520b1a57d7d63f1e249606d1a459698876' ) -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) , final_mints as ( select  sds.block_number, sds.block_timestamp, sds.MINTED_ACCOUNT, sds.MINTED_AMOUNT, sds.EVENT_TYPE, sds.debug_tx_hash as tx_hash, sds.raw_trace_index as event_index, ethereum.public.udf_hex_to_int(sds.output)::integer / pow(10,18) + sds.minted_amount as sds_balance, ethereum.public.udf_hex_to_int(escrow.output)::integer / pow(10,18) as escrow_balance, ethereum.public.udf_hex_to_int(snx.output)::integer / pow(10,18) as snx_balance from final_mints_sds sds left join final_mints_escrow escrow on sds.tx_hash = escrow.tx_hash and sds.raw_trace_index = escrow.raw_trace_index left join final_mints_snx snx on sds.tx_hash = snx.tx_hash and sds.raw_trace_index = snx.raw_trace_index ) ,final_burns_sds as ( select  m.block_number, m.block_timestamp, m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_burns_snx as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and t.to_address = '0x5b1b5fea1b99d83ad479df0c222f0492385381dd' -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) ,final_burns_escrow as ( select  m.MINTED_ACCOUNT, m.MINTED_AMOUNT, m.EVENT_TYPE, m.gas as debug_gas, m.tx_hash as debug_tx_hash, m.raw_trace_index, row_number() over (PARTITION BY m.tx_hash, m.raw_trace_index order by t.trace_index desc) as _qualifier, t.* from raw_burns m left join raw_traces t on m.tx_hash = t.tx_hash and m.minted_account = t.wallet_address and t.gas > m.gas -- this is to make sure that the balances are before and ( t.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- reward escrow -- or t.to_address = '0x971e78e0c92392a4e39099835cf7e6ab535b2227' or t.to_address = '0xda4ef8520b1a57d7d63f1e249606d1a459698876' ) -- issuers are the contracts that check the balance -- and (t.from_address in (select issuer_address from snx_issers)) qualify _qualifier = 1 ) , final_burns as ( select  sds.block_number, sds.block_timestamp, sds.MINTED_ACCOUNT, sds.MINTED_AMOUNT, sds.EVENT_TYPE, sds.debug_tx_hash as tx_hash, sds.raw_trace_index as event_index, ethereum.public.udf_hex_to_int(sds.output)::integer / pow(10,18) + sds.minted_amount as sds_balance, ethereum.public.udf_hex_to_int(escrow.output)::integer / pow(10,18) as escrow_balance, ethereum.public.udf_hex_to_int(snx.output)::integer / pow(10,18) as snx_balance from final_burns_sds sds left join final_burns_escrow escrow on sds.tx_hash = escrow.tx_hash and sds.raw_trace_index = escrow.raw_trace_index left join final_burns_snx snx on sds.tx_hash = snx.tx_hash and sds.raw_trace_index = snx.raw_trace_index ), L1_staking_table as ( select * from final_mints union all  select * from final_burns --limit 100 ), -- SDS price SDS_price_feed as ( select  block_number, block_timestamp, tx_hash, origin_from_address, origin_to_address, contract_address, event_name, decoded_log:current as raw_value, decoded_log:roundId as round_id, decoded_log:updatedAt::timestamp as updated_at, coalesce(lead(decoded_log:updatedAt::timestamp) over (order by block_number), current_timestamp())  as updated_at_end, raw_value / pow(10,27) as sds_price from ethereum.core.ez_decoded_event_logs where contract_address = '0xc7bb32a4951600fbac701589c73e219b26ca2dfc' and topics[0] = '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f' order by block_timestamp desc        ), -- SNX Price -- forked from fc654414-c36e-4b14-992d-b7c42189d4d8   -- forked from d600adb1-d81b-4de5-b60c-d5755db73472   SNX_price_feed as ( select  block_number, block_timestamp, tx_hash, origin_from_address, origin_to_address, contract_address, event_name, decoded_log:current::number as raw_value, decoded_log:roundId::number as round_id, decoded_log:updatedAt::timestamp as updated_at, coalesce(lead(decoded_log:updatedAt::timestamp) over (order by block_number), current_timestamp()) as updated_at_end, raw_value / pow(10,8) as snx_price, topics, decoded_log from ethereum.core.ez_decoded_event_logs e where lower(contract_address) = lower('0x06ce8Be8729B6bA18dD3416E3C223a5d4DB5e755') and event_name = 'AnswerUpdated' -- and topics[0] = '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f' order by block_timestamp desc        -- 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699        ), current_prices as (   select snx_price, sds_price from SNX_price_feed, SDS_price_feed   order by SNX_price_feed.block_number DESC, SDS_price_feed.block_number  DESC   limit 1 ) select * from ( select * , sum(sds_balance) over (partition by null) as sds_check ,  -- account level cratio case when state = 'staked' then (escrow_balance + snx_balance) * last_snx_price /  (sds_balance * last_sds_price) * 100 else null end  as cratio_account , -- protocol level cratio (sum(case when state = 'staked' then escrow_balance else 0 end) over (partition by helper_index) + sum(case when state = 'staked' then snx_balance else 0 end) over (partition by helper_index)) * last_snx_price /  (sum(sds_balance) over (partition by helper_index) * last_sds_price) * 100 as l1_cratio FROM (   select t1.block_number   , t1.block_timestamp   , t1.minted_account   , t1.minted_amount   , t1.event_type   , t1.tx_hash   , t1.event_index   , coalesce(t1.sds_balance, 0) as sds_balance   , coalesce(t1.escrow_balance, 0) as escrow_balance   , coalesce(t1.snx_balance, 0) as snx_balance   , t2.sds_price, t3.snx_price, t4.snx_price as last_snx_price, t4.sds_price as last_sds_price,   row_number() over (partition by t1.minted_account order by t1.block_timestamp DESC) as helper_index    , case when t1.sds_balance > 0 then 'staked' else 'unstaked' end as state   from L1_staking_table t1   left join SDS_price_feed t2 on t1.block_timestamp >= t2.updated_at and t1.block_timestamp < t2.updated_at_end    left join SNX_price_feed t3 on t1.block_timestamp >= t3.updated_at and t1.block_timestamp < t3.updated_at_end    left join current_prices t4 on 1=1 ) --where coalesce(sds_balance,0) * sds_price > (coalesce(snx_balance,0) + coalesce(escrow_balance,0)) * snx_price where helper_index = 1 ) where cratio_account is not null and cratio_account < 160
185ef91e-7187-4fa9-889f-c0c35288787a,Untitled Query,
2cd68e62-fbba-4304-976a-f49fea3448e3,2024-04-29 09:54 AM,
73d65360-ac49-4614-856d-e346c2314f1c,Anchor Mariner Hunt 3,SELECT * FROM terra.msg_events WHERE tx_id = '7C1BC2529DE134387FBDF8F95683902EFA6C8ECBFC607405575DE8E2C204EB1F'   AND event_type = 'execute_contract'
bbef43f6-75a2-4f38-b3e1-d72e8cfd19dd,2024-03-02 10:13 AM,
86e8a3b9-ad30-4fa4-8bb9-685d3e54e229,Untitled Query,
b027a490-7e5f-4330-953e-8b239b3cea19,ez_prices_hourly incorrect prices copy,-- forked from flyingfish / ez_prices_hourly incorrect prices @ https://flipsidecrypto.xyz/flyingfish/q/mZpWZOFs3s-1/ez_prices_hourly-incorrect-prices with cte as (   select     symbol     , hour     , token_address     , price   --from crosschain.price.ez_prices_hourly   from solana.price.ez_prices_hourly   where 1 = 1     and hour::date between '2024-03-01' and '2024-05-10'     --and hour > current_date - 2     and blockchain = 'solana'     and token_address in (         'So11111111111111111111111111111111111111112' -- SOL       , '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs' -- ETH       , '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh' -- BTC     ) ) select   hour   , max(case when symbol = 'SOL' then price end) as sol_price   , max(case when symbol = 'ETH' then price end) as eth_price   , max(case when symbol = 'WBTC' then price end) as btc_price from cte group by 1 order by hour
b1ef418a-1b88-4599-8921-7751993cb0a2,Untitled Query,select 'prod' as stage, * from polygon.sushi.ez_borrowing limit 1
e2a6314c-9448-4b19-b366-6623efc2ae20,Untitled Query,
87fed184-ae25-44d1-9bcc-b6d40d424c0f,Daily Swap Volume by Pair,-- In this query we are aggregating up volume of token_1 (token swapped for) for each swap pair (UST to LUNA) over the last 30 days -- To get more granular you can add an additional AND clause to pick a singular swap pair  SELECT    date_trunc('day', block_timestamp) as date,   swap_pair,    sum(token_1_amount) as volume,   sum(token_1_amount_usd) as volume_usd FROM terra.swaps  WHERE block_timestamp > current_date - 30 GROUP BY 1,2 ORDER BY 1 DESC
1135f976-c4ab-451f-a5ed-57f0c6c9917d,Axelar Delay,with   axelar as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_blocks' as table_name     from       axelar.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_transactions' as table_name     from       axelar.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msgs' as table_name     from       axelar.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msg_attributes' as table_name     from       axelar.core.fact_msg_attributes   ) select   * from   axelar
4321318d-71b3-48ab-a6b5-fc4e77f3df34,Addresses - gsheet,-- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT   livequery.live.udf_api(     'GET',     'https://science.flipsidecrypto.xyz/googlesheets/readsheet',     { 'Content-Type': 'application/json' },      {        'sheets_id' : '13g-8F0HcKH2RH4CbPPP6NvIG0rmM_KK6BgcBM3VgkaM',        'tab_name' : 'Addresses'     }   ) as result ) select    VALUE:ADDRESS::STRING as address,   VALUE:TICKER::STRING as ticker,   VALUE:ISSUER::STRING as issuer from res, lateral flatten(result:data::ARRAY)
b2798b2d-6a52-46e1-8023-70bcf840a157,stablecoin balances,SELECT 	DATE, 	CURRENCY, 	SUM(BALANCE) as native_balance, 	SUM(BALANCE_USD) as usd_balance FROM terra.daily_balances WHERE DATE > GETDATE() - interval '6 months'   AND currency != 'LUNA' GROUP BY 1,2 ORDER BY 1,4 desc
b2a41109-0294-48cc-8a54-88d985a3dec5,Untitled Query,-- anchor yield reserve query SELECT   date,   sum(balance) as reserve FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   AND currency = 'UST'   AND date > '2021-07-13T00:00:00Z' GROUP BY 1
1b38577c-728f-4c01-92f7-46b93d432d5e,LUNA-UST swap 1,SELECT    block_id,   msg_value,   msg_value:execute_msg:swap:offer_asset:amount::float / 1000000 as swap_amount,   msg_value:execute_msg:swap:offer_asset:info:native_token:denom::string as token FROM terra.msgs WHERE tx_id = '5FDDE4391A751FDD39D9A7DCA9C471B89EF5FC4BE5EC886D6559029DDEA5E5B8';
8661c1e7-368b-4dd5-9833-2169d13a6576,[terradash] Anchor Earn Users,with msgs as (   select     *   from terra.msgs   where block_timestamp > '2021-03-16'    and msg_value:contract::string in (       select address from terra.labels where label = 'anchor'     )     and msg_value:sender::string NOT IN (SELECT address FROM terra.labels WHERE label IS NOT NULL) ),    earn_side as (   select        tx_id,     block_timestamp,     msg_value:sender::string as sender   from msgs   where msg_value:contract in (     'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s', -- anchor market     'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aust redemption   ) ) select 	date_trunc('d', block_timestamp) as date, 	count(distinct sender) as unique_wallets from earn_side group by 1 order by 1
b2fb3a41-c789-4ee7-bbac-bc5f83051e45,Untitled Query,with outbound as ( 	select            block_timestamp,       event_from as sender,       event_amount as amount,       event_amount_usd as amount_usd,   	  event_currency as currency,       tx_id        from terra.transfers   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), labels as (   select * from terra.labels ), named as ( 	select * from outbound 	left join labels on labels.address = outbound.currency ) select * from named
06b04bcd-87c6-4d22-a966-9bbb2bc8a265,UST early 2021,
a9d56c7f-0670-4242-84ed-acd2237aba9c,Untitled Query,select     date_trunc('h',block_timestamp),   	nft_collection,     count(distinct tx_id) as txs from flow.core.fact_nft_sales where block_timestamp::date between '2022-09-27' and '2022-09-28' group by 1,2 having txs > 50; -- select nft_contract from flow.core.fact_nft_sales where nft_contact ilike '%packnft%'
b3434332-e1b3-4663-8b3a-1887a6767008,UST balance from end of dip to present,WITH epochs AS ( SELECT   date,   sum(balance) as ust_balance FROM terra.daily_balances WHERE currency = 'UST'   AND (date LIKE '2021-06-10%'     OR date = CURRENT_DATE) GROUP BY 1) SELECT   CASE   	WHEN date LIKE '2021-06%' THEN 'End of Major UST Burn'     WHEN date = CURRENT_DATE THEN 'Today'   END AS event,   ust_balance,   ust_balance - LAG(ust_balance) OVER (ORDER BY date) as ust_increase,   DATEDIFF(day, LAG(date) OVER (ORDER BY date), date) as days_between,   ust_increase / days_between as avg_daily_ust FROM epochs
b397b4d2-0748-41eb-bca3-e2f563394c2c,Trading Volume by Blockchain since restart [THOR22],WITH trading_volume AS (   SELECT     date_trunc('day', block_timestamp) as date,     blockchain,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-11-17T00:00:00Z'   GROUP BY 1,2   ), daily_total AS (   SELECT      date_trunc('day', block_timestamp) as date,     sum(from_amount_usd) as daily_volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-11-17T00:00:00Z'   GROUP BY 1 ) SELECT   trading_volume.date,   blockchain,   volume,   daily_volume,   avg(volume) OVER (ORDER BY trading_volume.date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as volume_ma,   volume / daily_volume as pct_share FROM trading_volume JOIN daily_total   ON trading_volume.date = daily_total.date ORDER BY 1, 6 desc -- normalize this to 1 and show trading volume by chain as pct
14e47c24-19d9-43b8-ac59-badaeb969882,2023-09-04 06:18 PM,WITH main_posts as ( select block_timestamp,        tx_hash,        block_id as og_post_id,        block_id as current_post_id,        signer_id,        post_text from near.social.fact_posts where signer_id = 'nfcommunity.near' ) , reply_posts as ( select block_timestamp,        tx_hash,        try_parse_json(parse_json(parse_json(node_data):"comment"):"item"):"blockHeight" as og_post_id,        block_id as current_post_id,        signer_id,        try_parse_json(parse_json(node_data):"comment"):"text" as post_text from near.social.fact_decoded_actions where (node_data LIKE '%nfcommunity.near%'   or   signer_id = 'nfcommunity.near') and node = 'post' and og_post_id is not null ), all_posts as ( select * from main_posts UNION ALL select * from reply_posts ), likes as ( select *,          try_parse_json(node_data):"like" as json_data,          try_parse_json(parse_json(parse_json(node_data):"like"):"key"):"blockHeight" as og_post_id,         split(parse_json(json_data):key:path::string, '/')[0] as liked from near.social.fact_decoded_actions where (node_data LIKE '%nfcommunity.near%'   or   signer_id = 'nfcommunity.near') and   node_data LIKE '{"like"%' ) , like_counts as ( select og_post_id as liked_post_id,        count(tx_hash) as total_likes from likes  group by og_post_id ) select block_timestamp,        og_post_id,        current_post_id,        signer_id,        total_likes,        post_text from all_posts a left join like_counts l   on a.current_post_id = l.liked_post_id
b34a2875-4ce0-4ce3-ad3f-63c4316c993b,Untitled Query,select * from ethereum.core.ez_dex_swaps     where platform ilike '%uniswap%' 	and block_timestamp > CURRENT_DATE - 7   limit 10 select * from ethereum.core.ez_dex_swaps where tx_hash = '0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff' -- my swap BAL->ETH  --  where platform ilike '%uniswap%' 	-- and block_timestamp > CURRENT_DATE - 7   limit 10
9857487f-652f-4e8e-ad2b-aaf584fdec4a,Untitled Query,select * from near.core.fact_prices limit 100;
b3e57edf-dbde-4bb1-aac2-bf81371978df,Most Active Orgs,with org_stats as ( select   org,   count(distinct createdat) as activity_created,   count(distinct closedat) as activity_closed,   count(distinct id) as activity_count,   count(distinct author) as author_count,   rank() over (order by activity_created desc) as activity_rank,   rank() over (order by author_count desc) as author_rank from near.beta.github_activity where createdat::date >= '2022-01-01' group by 1 ) select * from org_stats  where activity_rank <= 25 or author_rank <= 25
b3d200db-8604-4e95-b8ae-08320a4052f2,NEAR Staking Pools - Balance investigation ,-- get balance by pool for today -- with  -- last_bal as ( -- SELECT --   *  -- from near.core.fact_staking_pool_balances -- qualify row_number() over ( --   partition by address, block_timestamp::date  --   order by block_id desc -- ) = 1 -- ), -- today as ( -- select --   block_timestamp as _time, --   address, --   sum(BALANCE) as gross_amt -- from last_bal -- where block_timestamp::date = '2023-04-13' -- group by 1,2 -- order by 3 desc -- ) -- select * from today; -- check last bal update for a "missing" pool -- select * from near.core.fact_staking_pool_balances -- where address ilike '%mockingbird%' -- order by block_id DESC -- limit 10; -- need to adjust the daily balance list to fill forward  with daily_balance as ( SELECT   block_timestamp,   block_id,   address,   balance from near.core.fact_staking_pool_balances qualify row_number() over (   partition by address, block_timestamp::date    order by block_id desc ) = 1 ) select * from daily_balance  order by block_timestamp::date desc, balance desc limit 500
b3e91ef2-0347-47ad-9bc2-cafecd4d0d86,2023-03-13 04:45 PM,select   to_address,   tx_json from   ethereum.core.fact_transactions where   block_timestamp > current_timestamp - interval '7 days'   and tx_json::string ilike '0xc9807539' -- transmit(bytes _report, bytes32[] _rs, bytes32[] _ss, bytes32 _rawVs) limit   10
456f1980-b6b5-47cf-9b6f-68a0b93d27fc,DEX, Most Popular Token Pairs,select   block_timestamp::date as _date,   concat_ws('-', token_out, token_in) as token_pairs_oi,   count(distinct trader) as distinct_traders from near.core.ez_dex_swaps where block_timestamp::date >= '2023-01-01' group by 1,2 order by 1,3 desc
1b935cec-1507-4349-b02b-b105afa68fc5,Copy of Missing Top Shot Moments,select  set_series_number as series, set_name, player, team, moment_date, total_circulation, count(serial_number) as records, max(total_circulation) - count(serial_number) as missing_records from  flow.core.dim_topshot_metadata group by 1,2,3,4,5,6 order by missing_records desc
45b7db39-7c97-4af7-a9c2-10cf9a4fc4c5,2023-01-22 03:18 PM,select max(block_timestamp) from near.core.fact_blocks
0f2d1b84-07ef-493c-9fb3-7372ff148b03,Untitled Query,
b3fe8606-7926-4041-adf0-e46196108a15,test query,select *      from       terra.core.fact_blocks   where block_timestamp::date    >=          '2022-10-14' limit    100
466a14db-7580-49ad-a713-63997bd331b9,TerraSwap Liquidity Events,WITH prices as(   SELECT     currency,     symbol   FROM terra.oracle_prices   WHERE block_timestamp >= CURRENT_DATE - 7   GROUP BY 1,2 ) SELECT    m.block_id,   m.block_timestamp,   m.tx_id,   msg_value:sender::string as sender,   'provide_liquidity' as action,   msg_value:execute_msg:provide_liquidity:assets[0]:amount / POW(10,6) as token_0_amount,   msg_value:execute_msg:provide_liquidity:assets[0]:info:token:contract_addr::string as token_0_address,   t0.address_name as token_0_address_name,   msg_value:execute_msg:provide_liquidity:assets[1]:amount / POW(10,6) as token_1_amount,   msg_value:execute_msg:provide_liquidity:assets[1]:info:native_token:denom::string as token_1_address,   t1.symbol as token_1_address_name,   msg_value:contract::string as contract_address,   c.address_name as contract_label FROM terra.msgs m LEFT OUTER JOIN terra.labels t0   ON msg_value:execute_msg:provide_liquidity:assets[0]:info:token:contract_addr = t0.address    LEFT OUTER JOIN prices t1   ON msg_value:execute_msg:provide_liquidity:assets[1]:info:native_token:denom::string  = t1.currency LEFT OUTER JOIN terra.labels c   ON msg_value:contract  = c.address       WHERE msg_value:contract IN(SELECT address FROM terra.labels WHERE label = 'terraswap' AND address_name like '%Pair') --All TerraSwap Pools    AND msg_value:execute_msg:provide_liquidity IS NOT NULL --Ensures we only look for adding liquidity events   AND m.block_timestamp >= CURRENT_DATE - 7 ORDER BY m.block_timestamp DESC LIMIT 100
468cd215-34f5-4a78-80c2-00220b1679d7,4. [Easy 🍳] Decentralization of Validator System,SELECT    date,   validator,   voting_power / sum(voting_power) OVER (PARTITION BY date) as voting_pct FROM (SELECT   date_trunc('week', block_timestamp) as date,   address as validator,   avg(voting_power) as voting_power FROM terra.validator_voting_power   WHERE block_timestamp > GETDATE() - interval '1 month' GROUP BY 1, 2) sub ORDER BY 1, 3 desc
46a4f2c9-1f19-4b73-9c16-591d4d90f832,Flow May 2 Top Event Contracts copy,-- forked from Flow May 2 Top Event Contracts @ https://flipsidecrypto.xyz/edit/queries/42a23231-fca6-4876-901f-3f5a26ec0985 -- forked from Flow May 2 Txs from New Payers @ https://flipsidecrypto.xyz/edit/queries/ac9e9bfa-8777-4e29-aa89-75f75563d14b with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       payer in (         select           payer         from           new_payers       ) as _new_payer,       *     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'   ) select   date_trunc('hour', e.block_timestamp) as _time,   e.event_contract,   t._new_payer,   count(distinct e.tx_id) as txs from   flow.core.fact_events e   left join may_txs t using (tx_id) where   tx_id in (     select distinct       tx_id     from       may_txs   ) group by   1,   2,   3 order by   1
b47e6e84-2029-43cc-9bc4-134e59b43d4d,Copy of Untitled Query,select block_timestamp::date as date, txn_hash::string as txn_hash, (parse_json(trim(args))):amount as asset_amount, (parse_json(args)):recipient as eth_address   from flipside_prod_db.mdao_near.actions_events_function_call   where action_name = 'FunctionCall'    and args::string like '{"%'   and method_name = 'withdraw' -- ERC20 tokens   and (parse_json(trim(args))):amount::string is not null   and (parse_json(trim(args))):recipient::string is not null    and date = '2022-07-01' limit 100
b4580056-bac4-4509-bd5b-07534aacc337,LUNA earnings - the regex (bad) way,-- direct send - old method WITH direct_send AS (   SELECT     block_timestamp,     event_amount as amount,     event_currency as currency   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND event_to = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'     AND tx_status = 'SUCCEEDED'   ORDER BY block_timestamp   ), multisend_tx AS (   SELECT     block_timestamp,     tx_id   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND msg_type = 'bank/MsgMultiSend'     AND tx_status = 'SUCCEEDED'     -- AND block_timestamp LIKE '2021-09-11%' -- filter to just 1 for testing   ORDER BY block_timestamp   ), multi_send AS (   SELECT     m.block_timestamp,     POSITION('terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6' IN msg_value:outputs) as pos,     POSITION('}]}' IN SUBSTR(msg_value:outputs, pos, 115)) as pos_end, -- find next end sequence     parse_json(SUBSTR(msg_value:outputs, pos-12, pos_end+14)) as res, -- isolate the object we want     res:coins[0]:amount::float / pow(10, 6) as amount,     res:coins[0]:denom as currency   FROM terra.msgs m   RIGHT JOIN multisend_tx ON m.tx_id = multisend_tx.tx_id   ),    combo AS (   SELECT     date_trunc('hour', block_timestamp) as date,     amount,     CASE       WHEN currency::string = 'uluna' THEN 'LUNA'     END as currency   FROM multi_send      UNION ALL      SELECT     date_trunc('hour', block_timestamp) as date,     amount,     currency   FROM direct_send   ), prices AS (   SELECT     block_timestamp,     price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'     AND block_timestamp > '2021-07-01T00:00:00Z'   ) SELECT   date,   amount,   currency,   price_usd,   amount * price_usd as at_cost,   SUM(at_cost) OVER (ORDER BY date) as cumulative_earnings FROM combo LEFT JOIN prices ON prices.block_timestamp = date
b4d29742-d5d5-48a7-a07f-9ef1a8f33e11,UST Deposit,SELECT BLOCK_ID,   CHAIN_ID,   EVENT_TYPE,   event_attributes,   EVENT_ATTRIBUTES:amount:amount::float / 1000000 as amount_deposited,   event_attributes:amount:denom::string as currency_deposited,   event_attributes:amount FROM terra.msg_events WHERE TX_ID = '9FBF8CE74BB4E4AF3C341841CBF7D8956794A1A14A03615231D22B0244983953' 	AND event_type = 'transfer';
471274a0-dea1-466f-8f1c-51301bc1e45a,tx per day polygon and eth [p7],WITH matic AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(*) as tx_count_matic   FROM polygon.transactions   WHERE success = 'TRUE'     AND block_timestamp > '2021-06-01T00:00:00Z'   GROUP BY 1 ), eth AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(*) as tx_count_eth   FROM polygon.transactions   WHERE success = 'TRUE'     AND block_timestamp > '2021-06-01T00:00:00Z'   GROUP BY 1) SELECT   * FROM matic JOIN eth ON matic.date = eth.date ORDER BY 1
206ecd91-3048-45c4-b766-1304512f4601,Untitled Query,
c7115118-5aaf-48c8-a241-0c323b90531a,Bitcoin Miner Pools,select   case     when coinbase_decoded ilike '%AntPool%' then 'AntPool'     when coinbase_decoded ilike '%Foundry USA Pool%' then 'Foundry USA Pool'     when coinbase_decoded ilike '%Luxor Tech%' then 'Luxor Tech'     when coinbase_decoded ilike '%ViaBTC%' then 'ViaBTC'     when coinbase_decoded ilike '%MARA Pool%' then 'MARA Pool'     when coinbase_decoded ilike '%ultimus%' then 'ultimus'     when coinbase_decoded ilike '%F2Pool%' then 'F2Pool'     when coinbase_decoded ilike '%poolin.com%' then 'poolin.com'     when coinbase_decoded ilike '%eSpiderPool%' then 'eSpiderPool'     when coinbase_decoded ilike '%binance%' then 'binance'     when coinbase_decoded ilike '%SBICrypto.com%' then 'SBICrypto.com'     when coinbase_decoded ilike '%btccom%' then 'btccom'     when coinbase_decoded ilike '%slush%' then 'slush'     else 'Unmapped'   end as pool_from_coinbase,   count(distinct block_number) as blocks_produced,   sum(fees) as gross_fees,   sum(block_reward) as gross_block_reward from bitcoin.gov.ez_miner_rewards where block_timestamp::date >= sysdate() - interval '30 days' group by 1 order by 2 desc
b5130fb8-3d6c-42ed-91a1-1cff5e0dbd18,anchor net transactions [T32],WITH withdraw AS (SELECT  	date_trunc('day', block_timestamp) as date,   	sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount     FROM terra.msgs   WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%'   	AND tx_status = 'SUCCEEDED'   GROUP BY 1) SELECT   withdraw.date,   deposit_amount,   redemption_amount,   deposit_amount - redemption_amount as net_deposits FROM   (SELECT     	date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1) deposit JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1
47e14f00-1815-44e3-af73-5bf679a4e617,Terra Wormhole - Inbound Traffic,-- native asset transfer  WITH inbound_native AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:denom as denom,     event_attributes:amount / pow(10,6) as amount,     event_attributes:recipient as recipient   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:action = 'complete_transfer_terra_native'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'    ),    prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'    GROUP BY 1 ), inbound_native_usd AS (   SELECT     inbound_native.date as date,     denom,     CASE       WHEN denom = 'uluna' THEN amount * avg_price       ELSE amount     END AS usd_volume   FROM inbound_native   LEFT JOIN prices ON inbound_native.date = prices.date ) SELECT   date,   c   denom,   sum(usd_volume) as amount FROM inbound_native_usd GROUP BY 1,2 ORDER BY 1
aa020a51-fa3f-47eb-9c00-5f6e768d7353,spotty-emerald,select      date_trunc('day', block_timestamp) as _date,   count(distinct tx_signer) as signers from near.core.fact_transactions where date_trunc('day',block_timestamp) >= sysdate() - interval '30 days' group by 1 order by 1
b591edc6-7654-4a18-a0a6-ea4e40b890a1,date subtraction,WITH test AS ( SELECT   date as date,   LAG(date) OVER (ORDER BY date) as date_lag FROM terra.daily_balances WHERE address = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'  AND currency = 'UST'  AND date > CURRENT_DATE - INTERVAL '7 days') SELECT   date,  date_lag,  DATEDIFF(day, date_lag, date) FROM test
9ad22d23-7c78-4e95-a52d-6e59f4ec7cea,Untitled Query,select   date_trunc('d',block_timestamp) as date,   contract_label,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1,2 order by 1
2d96c8c2-60cb-442b-bddc-4d672344433c,Untitled Query,
934e1a9b-0024-48f9-bcf3-ae0dcb139fa6,array,with temp as (     select     [1,2,3] as abc ) select     abc[array_size(abc) - 1] as last_element from temp;
1c40768b-a999-4213-87fe-9820cbe6e31d,anchor.collateral missing amount_ust,select 	date_teunc('m', block_timestamp) as month, 	currency, select   date_trunc('d',block_timestamp),   currency,   count(1),   sum(amount) from anchor.collateral where amount_usd is null group by 1,2 -- terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun beth -- terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58 wasAVAX -- terra18zqcnl83z98tf6lly37gghm7238k7lh79u4z9a batom -- terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp bluna
c0c9e91c-8093-4579-b675-3acf3e9ee786,Pylon HUNT - Claim MINE Airdrop,SELECT * FROM terra.msg_events WHERE tx_id = '97A0AEF7BFDB8AC955356609BF2D79417A39818157C9CFF56C0F50A6B702E47A'
49185cfd-f600-471a-8170-67be5b67ebaf,terraswap sells volume [T57],WITH terraswap_addresses AS (   SELECT     address,     address_name   FROM terra.labels   WHERE label = 'terraswap'     AND label_type = 'dex' ), -- Buying token with UST // UST -> token swap -- buys AS ( -- SELECT --   date_trunc('day', block_timestamp) as date, --   pool, --   sum(token_amt) as quantity_bought, --   sum(ust) as volume_bought -- FROM ( --   SELECT --     *, --     event_attributes:offer_amount / pow(10,6) as ust,  --     event_attributes:return_amount / pow(10,6) as token_amt, --     terraswap_addresses.address_name as pool, --     event_attributes:"1_contract_address" as token_address --   FROM terra.msg_events --   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"0_contract_address" --   WHERE tx_status = 'SUCCEEDED' --     AND event_type = 'from_contract' --     AND event_attributes:"0_action" = 'swap' --     AND event_attributes:"1_action" = 'transfer' --     AND block_timestamp > CURRENT_DATE - INTERVAL '1 week' -- ) -- GROUP BY 1, 2 -- ORDER BY 1), -- Selling token to UST sells AS ( SELECT   date_trunc('day', block_timestamp) as date,   pool,   sum(token_amount) as quantity_sold,   sum(ust) as volume_sold FROM (   SELECT     *,     event_attributes:offer_amount / pow(10,6) as token_amount,     event_attributes:return_amount / pow(10,6) as ust,     terraswap_addresses.address_name as pool,     event_attributes:"0_contract_address" as token_address   FROM terra.msg_events   RIGHT JOIN terraswap_addresses ON terraswap_addresses.address = event_attributes:"1_contract_address"   WHERE tx_status = 'SUCCEEDED'     AND event_type = 'from_contract'     AND event_attributes:"0_action" = 'send'     AND event_attributes:"1_action" = 'swap'     AND block_timestamp > CURRENT_DATE - INTERVAL '1 day' ) GROUP BY 1, 2 ORDER BY 1) SELECT * FROM sells -- main query -- SELECT --   buys.date, --   buys.pool, --   -- quantity_bought, --   -- volume_bought, --   -- -quantity_sold as sold_neg, --   -- -volume_sold as vol_sold_neg, --   -- quantity_bought - quantity_sold as net_daily_token_volume --   sum(volume_bought - volume_sold) as net_daily_volume -- FROM buys -- JOIN sells ON sells.date = buys.date -- GROUP BY 1, 2 -- ORDER BY 1
56caf58b-661d-4ed7-8246-c839d32ac814,test 1 - general data,SELECT * FROM terra.msgs
3f3899b3-94eb-4f98-b81d-d67b0e143f41,top pools by liquidity [T37],SELECT distinct pool_name,   max(block_timestamp)   -- virtual_liquidity_adjusted FROM uniswapv3.pool_stats    WHERE block_timestamp > GETDATE() - interval '24 hours' GROUP BY 1 LIMIT 100
0377b43a-d8c6-471f-aeee-466d4bc2e332,Stacks - Microblocks LQ Example,-- forked from Stacks - Blocks LQ Example @ https://flipsidecrypto.xyz/edit/queries/5d2d348d-5942-4c59-a42f-f668ee14a0ce with call as (   -- /extended/v1/microblock   -- returns latest microblocks and associated metadata   select     live.udf_api(       'GET',       'https://lingering-frequent-uranium.stacks-mainnet.quiknode.pro/0f69bc55d00c3ae9bc85679fd2ee81c835c40abe/extended/v1/microblock?limit=200',       { },       { }     ) as res ), transform as (   SELECT     VALUE:block_height :: INT as block_height,     VALUE:parent_burn_block_time_iso :: TIMESTAMP_NTZ as block_timestamp,     VALUE:microblock_sequence :: INT as microblock_sequence,     VALUE:canonical :: BOOLEAN as canonical,     VALUE:block_hash :: STRING as block_hash,     VALUE:parent_block_hash :: STRING as parent_block_hash,     ARRAY_SIZE(VALUE:txs :: ARRAY) as tx_count,     VALUE as block_header   from     call,     lateral flatten(input => res:data:results :: array) ) select   concat_ws('-', block_height, microblock_sequence) as microblock_block_height,   block_height,   block_timestamp,   microblock_sequence,   canonical,   block_hash,   parent_block_hash,   tx_count,   avg(tx_count) over (     order by       block_height ROWS BETWEEN 4 PRECEDING       AND CURRENT ROW   ) as tx_ct_ma,   block_header from   transform order by   1 desc
3f8c4561-38d5-4e55-9158-a2c6e8c25e2c,Anchor Mariner Hunt 4,-- governance SELECT * FROM terra.msg_events WHERE tx_id = '281A4B4842CD2C74ECD56F382B4ADE64DAA2874017F8FCA9357F68D18A389185'   AND event_type = 'execute_contract'
b67ff3b5-5bb9-4ce1-b91e-f797ab504d94,whAssets Table [T101],SELECT  'terra103c6z8jq8s2yszvxj9mpah0jlvky2pek54f2yg' as token_contract_address, 'wh' as name, '1' as asset_chain, '8' as decimals UNION SELECT  'terra127ww0al7uj9vyg7cv2gtcqenhrjzlnq5vaq6dh' as token_contract_address, 'whUST' as name, '5' as asset_chain, '8' as decimals UNION SELECT  'terra132zppkzw88j35hpwxkrpzymujekky3wcuru65n' as token_contract_address, 'whATOM' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur' as token_contract_address, 'whwstETH' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r' as token_contract_address, 'whWETH' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk' as token_contract_address, 'whSOL' as name, '1' as asset_chain, '8' as decimals UNION SELECT  'terra19phjr9363x44yukx6dl6d4zvn2wqc8gpkk0tm7' as token_contract_address, 'whETH' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra19t8cxscre0jss7nejqy29c97fkg7els3v8zujg' as token_contract_address, 'wh' as name, '1' as asset_chain, '6' as decimals UNION SELECT  'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55' as token_contract_address, 'whWBTC' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva' as token_contract_address, 'whUSDT' as name, '2' as asset_chain, '6' as decimals UNION SELECT  'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8' as token_contract_address, 'whWBNB' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq' as token_contract_address, 'weMATIC' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8' as token_contract_address, 'whWMATIC' as name, '5' as asset_chain, '8' as decimals UNION SELECT  'terra1dx9f62gmeyjerskc3uf5pyuwq3vhwuf6a8wpn4' as token_contract_address, 'wh' as name, '1' as asset_chain, '8' as decimals UNION SELECT  'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl' as token_contract_address, 'whMIR' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4' as token_contract_address, 'wh' as name, '1' as asset_chain, '6' as decimals UNION SELECT  'terra1fme0uqgjucph3kelyejm6yuj60e4te8647gx6v' as token_contract_address, 'whLUNA' as name, '5' as asset_chain, '8' as decimals UNION SELECT  'terra1gdapfuda0dxtjc98raemhszntcxty7chyr0wpd' as token_contract_address, 'whORION' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1gtjr689cyaau20k8ezdxy8eup34tntun5xr9l2' as token_contract_address, 'whDOGE' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5' as token_contract_address, 'wh' as name, '1' as asset_chain, '6' as decimals UNION SELECT  'terra1jlh9xlyahg2d2qwat8jl4evqzuua452dafzqs5' as token_contract_address, 'whWETH' as name, '5' as asset_chain, '8' as decimals UNION SELECT  'terra1jpkhwg9skkgml95v8y8hhp8n2wlktzqx6w2gzc' as token_contract_address, 'whRIN' as name, '1' as asset_chain, '8' as decimals UNION SELECT  'terra1k7tstwhf25wm45x329ny84xe4n2z2nnq9ekuv2' as token_contract_address, 'wh' as name, '1' as asset_chain, '6' as decimals UNION SELECT  'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x' as token_contract_address, 'whUSDC' as name, '5' as asset_chain, '6' as decimals UNION SELECT  'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03' as token_contract_address, 'ORION' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1mzm7nflz93qm7qhftykquv3yklyepwn4x2ujuw' as token_contract_address, 'whBETH' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06' as token_contract_address, 'whUSDC' as name, '2' as asset_chain, '6' as decimals UNION SELECT  'terra1pkfkxzxqawdze8wa6enwh0hfw8yhlkswnqn328' as token_contract_address, 'whaUST' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd' as token_contract_address, 'whBUSD' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap' as token_contract_address, 'whstSOL' as name, '1' as asset_chain, '8' as decimals UNION SELECT  'terra1tnndhfm0khgm3h766edku6833rz392p8cr82y8' as token_contract_address, 'wh' as name, '1' as asset_chain, '5' as decimals UNION SELECT  'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx' as token_contract_address, 'whMIR' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1v584dmdvtlh7rpa22cslnzwkennm39ud5ngdld' as token_contract_address, 'whONT' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd' as token_contract_address, 'whUSDT' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1xu3nyee55dfe5vxqtg9m4rkex8u2t6n2etl08h' as token_contract_address, 'whUSDT' as name, '5' as asset_chain, '6' as decimals UNION SELECT  'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu' as token_contract_address, 'whUSDC' as name, '4' as asset_chain, '8' as decimals UNION SELECT  'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95' as token_contract_address, 'whDAI' as name, '2' as asset_chain, '8' as decimals UNION SELECT  'terra1ukmck39pkrhljc0my0hw7yu0quarncajcqyfz8' as token_contract_address, 'whCake-LP' as name, '4' as asset_chain, '8' as decimals
4e96a114-5611-47c9-bde0-5b48fbfeb3bf,Untitled Query,select * from flipside_prod_db.mdao_near.metrics_daily_gas limit 10
4098aae2-18c5-4662-ac97-4c8a899c0a46,LOOPR Token Holders [T92],SELECT   * FROM terra.transfers WHERE event_currency = 'LOOPR'   LIMIT 100
67059253-5658-4418-ac04-26e2600c4a2f,Untitled Query,
4a6f413f-186b-461d-b47c-db9617ba57f1,USDT/USDC Transfer Volumes copy,-- forked from dan-smith / USDT/USDC Transfer Volumes @ https://flipsidecrypto.xyz/dan-smith/q/2023-02-01-02-49-pm-aSL1I8  SELECT   *   ,AVG(usdc_volume) OVER(ORDER BY dt ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) / 7 AS "USDC Volume 30D MA"   ,AVG(usdt_volume) OVER(ORDER BY dt ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) / 7 AS "USDT Volume 30D MA"   ,"USDC Volume 30D MA" / ("USDC Volume 30D MA" + "USDT Volume 30D MA") * 100 AS "USDC Volume Dominance" FROM ( SELECT    date_trunc('week',block_timestamp) AS dt   ,SUM(CASE WHEN SYMBOL = 'USDC' THEN amount_usd ELSE NULL END) AS usdc_volume   ,SUM(CASE WHEN SYMBOL = 'USDT' THEN amount_usd ELSE NULL END) AS usdt_volume   ,AVG(CASE WHEN SYMBOL = 'USDC' THEN amount_usd ELSE NULL END) AS usdc_c   ,AVG(CASE WHEN SYMBOL = 'USDT' THEN amount_usd ELSE NULL END) AS usdt_c FROM ethereum.core.ez_token_transfers WHERE (   contract_address = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48' -- USDC    OR   contract_address = '0xdac17f958d2ee523a2206206994597c13d831ec7' -- USDT   )   AND dt > '2020-06-01'   AND to_address != '0x0000000000000000000000000000000000000000'    AND from_address != '0x0000000000000000000000000000000000000000' GROUP BY 1  ) WHERE dt < date_trunc('week',CURRENT_DATE) ORDER BY 1 DESC
842c93f8-decf-4efa-b31a-e5e781845081,ENS Registrations - Method A,-- keep this as a check of sorts -- if tx != event count we have an issue select   date_trunc('day', block_timestamp) as date,   count(distinct tx_id) as unique_transactions,   sum(amount) as amount,   sum(amount_usd) as amount_usd,   count(1) as event_count from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp > '2021-07-01T00:00:00Z'   and block_timestamp < '2021-12-09T23:59:59Z' group by 1
4fbd426f-dc46-4039-95c7-897dde2e6381,Untitled Query,
4b8d819d-77a9-4711-a192-3deb56036b8f,TNS Swap prices,-- Buying TOKEN with UST WITH buys AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_buy_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra1hqnk9expq3k4la2ruzdnyapgndntec4fztdyln' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- token contract       AND block_timestamp > '2021-12-23T12:00:00Z'     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_sell_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra1hqnk9expq3k4la2ruzdnyapgndntec4fztdyln' -- swap contract       AND block_timestamp > '2021-12-23T12:00:00Z'     )   GROUP BY 1   ORDER BY 1), final as (   SELECT     *,     avg((avg_buy_price+avg_sell_price)/2) OVER (ORDER BY sells.date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as moving_avg -- using 8 hr = 1/3 of a day   FROM buys   JOIN sells using(date) ) select * from final
b75736c7-82db-44ec-87f7-d9e4d25edae0,MDAO Workshop - Anchor Collateral - Average Transaction by Collateral,select   date_trunc('d',block_timestamp) as date,   contract_label,   avg(amount_usd) as avg_amount    from anchor.collateral group by 1,2 order by 1
b76d97ef-1725-4ce3-9338-4bcdf22afce9,yvBOOST Example Deposit [YC1],SELECT   tx_id,   origin_address as depositor_address,   from_address as event_from_address,   to_address as event_to_address,   event_name,   contract_address,   symbol,   amount FROM ethereum.udm_events WHERE tx_id = '0xfa4ae614ec13a75057ac68ce9e399738fe57ab31e9ad616b3d731d252b52b0b3'
b7d7e8df-3c65-4d1b-bad3-d87f8118220d,bsc bridge null currency transfers [T104],with tx_list as (   select   tx_id from terra.transfers where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' and event_currency is null ),    messages as ( select * from terra.msg_events where event_type = 'from_contract'   ), txs as ( select * from tx_list left join messages on tx_list.tx_id = messages.tx_id ) select distinct event_attributes:contract_address from txs
b7a22ef0-06bf-4c5b-b5a1-d37577ea899e,Arbitrum Delay,with   arbitrum as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_blocks' as table_name     from       arbitrum.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_transactions' as table_name     from       arbitrum.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_event_logs' as table_name     from       arbitrum.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_traces' as table_name     from       arbitrum.core.fact_traces   ) select   * from   arbitrum
31c2ab9e-bc9a-466c-8435-ca804f5d1e8f,cooperative-lime,
2b675d9f-dc43-447f-a70b-c9d9eb830bdb,Untitled Query,
0507a94c-a73f-4da7-a73c-eaeeff794e79,Untitled Query,select * from MDAO_HARMONY.TOKENPRICE_ONE  order by 1 desc
4c643a16-34e2-45d9-be0d-8c6e44231a39,Untitled Query,select distinct nft_collection from flow.core.ez_nft_sales
b4c5616b-ea55-441e-a04b-8c80e31cf9ba,DASH: Full Token Supply Breakdown by rmas copy,-- forked from MoDeFi / DASH: Full Token Supply Breakdown by rmas @ https://flipsidecrypto.xyz/MoDeFi/q/d2jfWFxG9_57/dash-full-token-supply-breakdown-by-rmas -- forked from DASH: Full Token Supply Breakdown by rmas @ https://flipsidecrypto.xyz/edit/queries/bb592751-8674-4e23-9288-1d1e9331e1fb -- forked from rmas / DASH: Full Token Supply Breakdown @ https://flipsidecrypto.xyz/rmas/q/zGSbBlSSN1hn/dash-full-token-supply-breakdown  WITH lockup_receipts AS (     SELECT fr.tx_hash          , fr.block_timestamp          , fr.actions:predecessor_id::string AS predecessor_id          , fr.receiver_id          , fr.actions          , OBJECT_KEYS(fr.status_value)[0]::string AS status          , fr.logs          FROM near.core.fact_receipts AS fr     WHERE fr.receiver_id LIKE '%.lockup.near'       AND status != 'Failure' ), daily_lockup_locked_balances AS (     WITH     -- new lockup contract created     new_lockup_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'new'     ),               -- vesting is stopped by the Foundation     terminate_vesting_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(lr.logs[0], 'unvested balance is ')[1]::bigint / 1e24 AS unvested_balance         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'terminate_vesting'     ),               terminate_vesting_txs_with_vesting_schedule AS (         SELECT tv.*              , fc.args:vesting_schedule_with_salt:vesting_schedule AS vesting_schedule              FROM terminate_vesting_txs AS tv             LEFT JOIN near.core.fact_actions_events_function_call AS fc                 ON fc.tx_hash = tv.tx_hash                 AND fc.method_name = 'terminate_vesting'              QUALIFY row_number() OVER (partition by tv.tx_hash order by tv.block_timestamp) = 1  -- dedupe     ),               -- unvested tokens are withdrawn (effectively unlocked into circulating supply)     termination_withdraw_txs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , lr.receiver_id AS lockup_account_id              , split(split(lr.logs[0], ' of terminated unvested balance')[0], 'Withdrawing ')[1]::bigint / 1e24 AS withdrawn_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE value:FunctionCall:method_name::string = 'termination_withdraw'      -- Simplify logic -> get only first termination withdrawal         -- QUALIFY row_number() OVER (partition by lockup_account_id order by block_timestamp) = 1     ),               daily_termination_withdrawn_amount AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(withdrawn_amount) AS withdrawn_amount         FROM termination_withdraw_txs         GROUP BY 1,2     ),               -- lockup amounts     deposits AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:Transfer:deposit::bigint / 1e24 AS deposit_amount         FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE OBJECT_KEYS(value:Transfer)[0]::string = 'deposit'     ),               lockup_contracts AS (         SELECT lcr.tx_hash              , lcr.block_timestamp              , lcr.lockup_account_id              , fc1.args:lockup_duration::bigint AS input_lockup_duration_ns              , fc1.args:lockup_timestamp::bigint AS input_lockup_timestamp_epoch              , fc1.args:owner_account_id::string AS owner_account_id              , fc1.args:release_duration::bigint AS input_release_duration_ns              , coalesce(tv.vesting_schedule, fc1.args:vesting_schedule:VestingSchedule) AS vesting_schedule_              , vesting_schedule_:cliff_timestamp::bigint AS vesting_cliff_timestamp_epoch              , vesting_schedule_:start_timestamp::bigint AS vesting_start_timestamp_epoch              , vesting_schedule_:end_timestamp::bigint AS vesting_end_timestamp_epoch              , coalesce( fc1.args:transfers_information:TransfersEnabled:transfers_timestamp::bigint,                           1602614338293769340 ) AS transfers_enabled_timestamp_epoch              , d.deposit_amount                   , tv.block_timestamp AS terminate_vesting_timestamp              , tv.unvested_balance AS termination_unvested_amount                   , tw.block_timestamp AS termination_withdraw_timestamp              , tw.withdrawn_amount AS termination_withdrawn_amount                   , (CASE WHEN OBJECT_KEYS(fc1.args:vesting_schedule)[0]::string = 'VestingHash'                      THEN True ELSE False END) AS is_private_vesting              FROM new_lockup_txs AS lcr             LEFT JOIN near.core.fact_actions_events_function_call AS fc1                 ON fc1.tx_hash = lcr.tx_hash                 AND fc1.method_name = 'new'                  LEFT JOIN deposits AS d                 ON d.tx_hash = lcr.tx_hash                  LEFT JOIN terminate_vesting_txs_with_vesting_schedule AS tv                 ON tv.lockup_account_id = lcr.lockup_account_id                  LEFT JOIN termination_withdraw_txs AS tw                 ON tw.lockup_account_id = lcr.lockup_account_id              WHERE lcr.tx_hash IN (SELECT tx_hash FROM new_lockup_txs)           AND d.deposit_amount > 0     ),               lockup_contracts__parsed AS (         SELECT lockup_account_id             -- the number of times the same lockup account ID has been used (used as part of lockup unique identifier)              , row_number() OVER (partition by lockup_account_id order by block_timestamp) AS lockup_index              , owner_account_id              , deposit_amount AS lockup_amount                  -- timestamp when tokens were locked (lock start)              , block_timestamp AS deposit_timestamp                  -- timestamp when transfers were enabled in the blockchain (default reference when lockup_timestamp is null)              , to_timestamp(transfers_enabled_timestamp_epoch, 9) AS transfers_enabled_timestamp                  -- timestamp when tokens start unlocking (explicit parameter)              , to_timestamp(input_lockup_timestamp_epoch, 9) AS input_lockup_timestamp                  -- if lockup_timestamp is null, calculate unlock start from lockup duration              , timestampadd(nanoseconds, input_lockup_duration_ns, transfers_enabled_timestamp) AS calculated_lockup_timestamp                  -- lockup mechanism              , input_lockup_duration_ns              , input_release_duration_ns                  -- Max between input and calculated lockup timestamp              , (CASE WHEN input_lockup_timestamp IS NOT NULL                      THEN greatest(input_lockup_timestamp, calculated_lockup_timestamp)                      ELSE calculated_lockup_timestamp END) AS lockup_timestamp                  -- If release_duration is not provided, tokens are immediately unlocked              , (CASE WHEN input_release_duration_ns IS NOT NULL                      THEN timestampadd(nanosecond, input_release_duration_ns, lockup_timestamp)  -- linear release if release_duration is provided, else full unlock                      ELSE lockup_timestamp END) AS lockup_end_timestamp                  -- vesting mechanism              , is_private_vesting              , to_timestamp(vesting_start_timestamp_epoch, 9) AS vesting_start_timestamp              , to_timestamp(vesting_end_timestamp_epoch, 9) AS vesting_end_timestamp              , to_timestamp(vesting_cliff_timestamp_epoch, 9) AS vesting_cliff_timestamp                  -- vesting termination              , terminate_vesting_timestamp              , termination_unvested_amount              , termination_withdraw_timestamp              , termination_withdrawn_amount                   , tx_hash AS _tx_hash                   , (CASE WHEN lockup_timestamp IS NOT NULL AND vesting_start_timestamp IS NULL                      THEN least(deposit_timestamp, lockup_timestamp)                      WHEN lockup_timestamp IS NULL AND vesting_start_timestamp IS NOT NULL                      THEN least(deposit_timestamp, vesting_start_timestamp)                      ELSE least(deposit_timestamp, lockup_timestamp, vesting_start_timestamp) END)::date AS _lockup_start_date                   , (CASE WHEN lockup_end_timestamp IS NOT NULL AND vesting_end_timestamp IS NULL                      THEN lockup_end_timestamp                      WHEN lockup_end_timestamp IS NULL AND vesting_end_timestamp IS NOT NULL                      THEN vesting_end_timestamp                      ELSE greatest(lockup_end_timestamp, vesting_end_timestamp) END)::date AS _lockup_end_date              FROM lockup_contracts     ),               lockup_contracts_daily_balance__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-01-01' AND CURRENT_DATE )              SELECT lc.lockup_account_id              , lc.lockup_index              , lc.owner_account_id                   , d.utc_date              , d.utc_date + interval '1 day' - interval '1 nanosecond' AS block_timestamp  -- End of day block timestamp                   , lc.lockup_amount              , lc.deposit_timestamp                  -- Lockup logic              , lc.lockup_timestamp              , lc.lockup_end_timestamp              , greatest(0, timestampdiff(nanosecond, block_timestamp, lockup_end_timestamp)) AS lockup_time_left_ns              , (CASE WHEN block_timestamp >= lockup_timestamp                      THEN (CASE WHEN input_release_duration_ns > 0                                 THEN (CASE WHEN block_timestamp >= lockup_end_timestamp                                            THEN 0  -- everything is released                                            ELSE lockup_amount * lockup_time_left_ns / input_release_duration_ns                                            END)                                 ELSE 0 END)                      ELSE lockup_amount  -- The entire balance is still locked before the lockup timestamp                      END) AS unreleased_amount                  -- Vesting logic              , lc.vesting_start_timestamp              , lc.vesting_cliff_timestamp              , lc.vesting_end_timestamp              , lc.terminate_vesting_timestamp              , lc.termination_unvested_amount              , greatest(0, timestampdiff(nanosecond, block_timestamp, vesting_end_timestamp)) AS vesting_time_left_ns              , timestampdiff(nanosecond, vesting_start_timestamp, vesting_end_timestamp) AS vesting_total_time_ns              FROM lockup_contracts__parsed AS lc, dates AS d         WHERE d.utc_date BETWEEN lc._lockup_start_date                              AND lc._lockup_end_date     ),               lockup_contracts_daily_balance__prep_2 AS (         SELECT lc.*              , sum(coalesce(dtw.withdrawn_amount, 0))                     OVER (partition by lc.lockup_account_id, lc.lockup_index                               order by lc.utc_date                               rows between unbounded preceding                                        and current row) AS termination_withdrawn_amount                  FROM lockup_contracts_daily_balance__prep_1 AS lc             LEFT JOIN daily_termination_withdrawn_amount AS dtw                 ON dtw.lockup_account_id = lc.lockup_account_id                 AND dtw.utc_date = lc.utc_date          ),               lockup_contracts_daily_balance AS (         SELECT lc.*                  -- Vesting logic                  -- Not 100% accurate due to private vesting lockups (unknown/hidden vesting parameters)              , (CASE WHEN block_timestamp >= terminate_vesting_timestamp                      THEN termination_unvested_amount - termination_withdrawn_amount                      ELSE (CASE WHEN block_timestamp < vesting_cliff_timestamp                                 THEN lockup_amount  -- Before the cliff, nothing is vested                                 WHEN block_timestamp >= vesting_end_timestamp                                 THEN 0  -- After the end, everything is vested                                 ELSE lockup_amount * vesting_time_left_ns / vesting_total_time_ns                                 END)                      END) AS unvested_amount                  -- Combined logic              , greatest(unreleased_amount - termination_withdrawn_amount, coalesce(unvested_amount, 0)) AS locked_amount                   , locked_amount - coalesce(lag(locked_amount) OVER (partition by lc.lockup_account_id, lc.lockup_index order by lc.utc_date), 0) AS unlocked_amount_today              FROM lockup_contracts_daily_balance__prep_2 AS lc     )     SELECT * FROM lockup_contracts_daily_balance ), daily_lockup_staking_balances AS (     WITH     lockup_staking_logs AS (         SELECT lr.tx_hash              , lr.block_timestamp              , value:FunctionCall:method_name::string AS method_name              , lr.receiver_id AS lockup_account_id              , (CASE method_name                     WHEN 'stake'                     THEN split(split(lr.logs[0], ' at the staking pool')[0], 'Staking ')[1]::bigint / 1e24                                          WHEN 'deposit_and_stake'                     THEN split(split(lr.logs[0], ' to the staking pool')[0], 'Depositing and staking ')[1]::bigint / 1e24                          WHEN 'unstake'                     THEN split(split(lr.logs[0], ' from the staking pool')[0], 'Unstaking ')[1]::bigint / 1e24                          END) AS amount                   , lr.logs              FROM lockup_receipts AS lr,             LATERAL FLATTEN( input => lr.actions:receipt:Action:actions )         WHERE method_name IN ('stake','deposit_and_stake',                               'unstake','unstake_all')     ),               daily_staking_stats AS (         SELECT lockup_account_id              , block_timestamp::date AS utc_date              , sum(CASE WHEN method_name IN ('stake','deposit_and_stake') THEN amount ELSE 0 END) AS staked_amount_              , sum(CASE WHEN method_name IN ('unstake') THEN amount ELSE 0 END) AS unstaked_amount_              , (CASE WHEN count(CASE WHEN method_name = 'unstake_all' THEN tx_hash ELSE NULL END) > 0                      THEN True ELSE False END) AS unstaked_all         FROM lockup_staking_logs         GROUP BY 1,2     ),               lockup_stakers AS (         SELECT lockup_account_id              , min(block_timestamp)::date AS start_date         FROM lockup_staking_logs         GROUP BY 1     ),               lockup_stakers_daily_balances__prep_1 AS (         WITH dates AS ( SELECT DISTINCT dateadd(day, -seq4(), CURRENT_DATE) AS utc_date                         FROM TABLE(GENERATOR(rowcount => 10000))                         WHERE utc_date BETWEEN '2020-09-01' AND CURRENT_DATE )              SELECT ls.lockup_account_id              , d.utc_date              FROM lockup_stakers AS ls, dates AS d         WHERE d.utc_date >= ls.start_date     ),               lockup_stakers_daily_balances__prep_2 AS (         SELECT d.lockup_account_id              , d.utc_date              , coalesce(dss.staked_amount_, 0) AS staked_amount              , coalesce(dss.unstaked_amount_, 0) AS unstaked_amount              , dss.unstaked_all              , sum(CASE WHEN dss.unstaked_all = True THEN 1 ELSE 0 END)                   OVER (partition by d.lockup_account_id                         order by d.utc_date                         rows between unbounded preceding                                  and current row) AS _unstake_counter              FROM lockup_stakers_daily_balances__prep_1 AS d             LEFT JOIN daily_staking_stats AS dss                 ON dss.lockup_account_id = d.lockup_account_id                 AND dss.utc_date = d.utc_date     ),               lockup_stakers_daily_balances__prep_3 AS (         SELECT *              , coalesce(lag(_unstake_counter)                    OVER (partition by lockup_account_id                             order by utc_date)                , 0) AS staking_period_index         FROM lockup_stakers_daily_balances__prep_2     ),               lockup_stakers_daily_balances__prep_4 AS (         SELECT *              , sum(staked_amount - unstaked_amount)                    OVER (partition by lockup_account_id, staking_period_index                             order by utc_date                             rows between unbounded preceding                                      and current row) AS _cumulative_staked_amount                   , (CASE WHEN unstaked_all = True THEN 0 ELSE _cumulative_staked_amount END) AS staked_balance         FROM lockup_stakers_daily_balances__prep_3     ),               lockup_stakers_daily_balances AS (         SELECT lockup_account_id              , utc_date              , staked_balance         FROM lockup_stakers_daily_balances__prep_4     )               SELECT * FROM lockup_stakers_daily_balances ), daily_lockup_locked_and_staking_balances AS (     SELECT l.lockup_account_id          , l.utc_date          , l.locked_amount          , coalesce(s.staked_balance, 0) AS staked_amount          , least(staked_amount, locked_amount) AS locked_and_staked_amount     FROM daily_lockup_locked_balances AS l         LEFT JOIN daily_lockup_staking_balances AS s             ON s.lockup_account_id = l.lockup_account_id             AND s.utc_date = l.utc_date ), daily_locked_and_staked_supply AS (     SELECT utc_date          , sum(locked_amount) AS total_locked_supply          , sum(locked_and_staked_amount) AS locked_and_staked_supply     FROM daily_lockup_locked_and_staking_balances     GROUP BY 1 ), daily_staked_supply AS (     WITH          dim_epochs AS (      	SELECT epoch_id       		 , min(block_id) AS min_block_id       		 , max(block_id) AS max_block_id       		 , count(*) AS blocks       		 , count(distinct block_author) AS block_producers       		 , min(block_timestamp) AS start_time       		 , max(block_timestamp) AS end_time       		 , max(total_supply) / 1e24 AS total_near_supply       		 , row_number() OVER (order by min_block_id asc) - 1 + 900 AS epoch_num              	FROM near.core.fact_blocks AS b       	GROUP BY 1     ),               staking_actions AS (       	SELECT r.tx_hash           	 , r.block_timestamp           	 , r.receiver_id AS validator_address           	 , replace(split(l.value::string, ': Contract received total')[0], 'Epoch ', '')::integer AS epoch_num           	 , split(split(l.value::string, 'New total staked balance is ')[1], '. Total number of shares')[0]::bigint / 1e24 AS staked_balance                    FROM near.core.fact_receipts AS r       	   , lateral flatten( input => r.logs ) AS l                WHERE ( right(receiver_id, 12) = '.poolv1.near' OR right(receiver_id, 10) = '.pool.near' )           AND r.tx_hash IN ( SELECT tx_hash            				     FROM near.core.fact_actions_events_function_call           				     WHERE method_name IN ('ping','stake','unstake','stake_all','unstake_all','deposit_and_stake') )           AND left(l.value::string, 6) = 'Epoch '            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               proposals AS (       	SELECT b.block_id           	 , b.block_timestamp           	 , b.epoch_id           	 , vp.value['account_id'] AS validator_address           	 , vp.value['stake']::bigint / 1e24 AS staked_balance         FROM near.core.fact_blocks AS b            , lateral flatten( input => b.chunks ) AS c            , lateral flatten( input => c.value['validator_proposals']) AS vp       	-- WHERE b.block_timestamp >= '2021-09-01'         QUALIFY row_number() OVER (partition by validator_address, epoch_id order by block_timestamp desc) = 1     ),               proposals_per_epoch AS (       	SELECT p.block_timestamp       		 , p.epoch_id       		 , p.validator_address       		 , p.staked_balance       		 , e.epoch_num              	FROM proposals AS p       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = p.epoch_id            	QUALIFY row_number() OVER (partition by epoch_num, validator_address order by block_timestamp desc) = 1     ),               block_producers_per_epoch AS (       	SELECT b.epoch_id       		 , e.epoch_num       		 , b.block_author AS validator_address       		 , sa.staked_balance       		 , count(distinct b.block_id) OVER (partition by b.epoch_id, b.block_author) AS blocks_produced              	FROM near.core.fact_blocks AS b       		INNER JOIN dim_epochs AS e       			ON e.epoch_id = b.epoch_id            		LEFT JOIN staking_actions AS sa       			ON sa.epoch_num = e.epoch_num       			AND sa.validator_address = b.block_author            	QUALIFY row_number() OVER (partition by b.epoch_id, b.block_author order by b.block_timestamp desc) = 1     ),               dim_validators AS (       	SELECT validator_address       		 , min(start_epoch) AS start_epoch       		 , min(start_time) AS start_time              	FROM (     		SELECT validator_address         		 , min(epoch_num) AS start_epoch         		 , min(block_timestamp) AS start_time         	FROM staking_actions AS sa         	GROUP BY 1                	UNION ALL                	SELECT block_author AS validator_address         		 , min(e.epoch_num) AS start_epoch         		 , min(b.block_timestamp) AS start_time         	FROM near.core.fact_blocks AS b         		LEFT JOIN dim_epochs AS e         			ON b.block_id BETWEEN e.min_block_id AND e.max_block_id         	GROUP BY 1         ) AS x              	GROUP BY 1     ),               dim_table AS (       	SELECT v.validator_address       		 , e.epoch_num       		 , e.start_time       		 , e.total_near_supply              	FROM dim_validators AS v, dim_epochs AS e       	WHERE v.start_epoch <= e.epoch_num     ),               validator_status_per_epoch AS (       	SELECT dt.epoch_num       		 , dt.start_time       		 , dt.validator_address       		 , coalesce(       				last_value(coalesce(bp.staked_balance, p.staked_balance)) IGNORE NULLS       					OVER (partition by dt.validator_address        					  	  order by dt.epoch_num       					  	  rows between unbounded preceding       								   and current row),       				0) AS staked_balance       		 , bp.blocks_produced       		 , (CASE WHEN p.validator_address IS NOT NULL THEN True ELSE False END) AS is_proposer              	FROM dim_table AS dt       		LEFT JOIN block_producers_per_epoch AS bp       			ON bp.epoch_num = dt.epoch_num       			AND bp.validator_address= dt.validator_address            		LEFT JOIN proposals_per_epoch AS p       			ON p.epoch_num = dt.epoch_num       			AND p.validator_address= dt.validator_address          ),               epoch_stats AS (       	SELECT epoch_num           	 , start_time       		 , sum(staked_balance) AS total_near_staked                    FROM validator_status_per_epoch         WHERE staked_balance > 0         GROUP BY 1,2     ),               epoch_stats_2 AS (       	SELECT es.*       		 , de.total_near_supply       		 , de.total_near_supply - es.total_near_staked AS other_near_supply       	 	 , 100.00 * total_near_staked / total_near_supply AS perc_staked_supply       	FROM epoch_stats AS es       		LEFT JOIN dim_epochs AS de       			ON de.epoch_num = es.epoch_num     )               SELECT start_time::date AS utc_date          , total_near_staked AS total_staked_supply          , total_near_supply AS total_supply     FROM epoch_stats_2     QUALIFY row_number() OVER (partition by utc_date order by start_time desc) = 1 ), daily_supply_stats AS (     SELECT s.utc_date          , s.total_supply          , s.total_staked_supply          , s.total_supply - s.total_staked_supply AS total_nonstaked_supply          , ls.total_locked_supply          , ls.locked_and_staked_supply          , greatest(0, total_staked_supply - locked_and_staked_supply) AS nonlocked_and_staked_supply          , greatest(0, total_locked_supply - locked_and_staked_supply) AS locked_and_nonstaked_supply          , total_supply             - locked_and_staked_supply             - locked_and_nonstaked_supply             - nonlocked_and_staked_supply AS nonlocked_and_nonstaked_supply          , total_supply - total_locked_supply AS circulating_supply          , total_locked_supply AS locked_supply     FROM daily_staked_supply AS s         LEFT JOIN daily_locked_and_staked_supply AS ls             ON ls.utc_date = s.utc_date ), output AS (     SELECT utc_date          , utc_date AS "Date"          , total_supply AS "Total Supply"          , total_staked_supply AS "Staked Supply"          , 100 * total_staked_supply / total_supply as "Staked Supply %"          , 100 * (CASE WHEN utc_date >= '2020-10-13' THEN 0.05 * (1 - 0.10) / (nullif("Staked Supply %", 0)/100) ELSE NULL END) AS perc_apr          , perc_apr AS "Validator APR"          , 0.90 * perc_apr AS "Delegator APR (10% fees)"          , total_nonstaked_supply AS "Non-staked Supply"          , circulating_supply AS "Circulating Supply"          , total_locked_supply AS "Locked Supply"          , nonlocked_and_nonstaked_supply AS "Liquid Supply"          , total_supply - nonlocked_and_nonstaked_supply  AS "Non-liquid Supply"          , locked_and_staked_supply AS "Staked (Locked Supply)"          , locked_and_nonstaked_supply AS "Non-staked (Locked Supply)"          , nonlocked_and_staked_supply AS "Staked (Circulating Supply)"          , nonlocked_and_nonstaked_supply AS "Non-staked (Circulating Supply)"          , total_locked_supply / total_supply AS perc_locked_supply          , circulating_supply / total_supply AS perc_circulating_supply          , locked_and_staked_supply / total_locked_supply AS perc_staked__locked          , nonlocked_and_staked_supply / circulating_supply AS perc_staked__circulating          , total_supply / 1e6 AS total_supply__millions          , circulating_supply / 1e6 AS circulating_supply__millions          , total_locked_supply / 1e6 AS locked_supply__millions          , total_staked_supply / 1e6 AS staked_supply__millions          , nonlocked_and_nonstaked_supply / 1e6 AS liquid_supply__millions          , nonlocked_and_staked_supply / 1e6 AS staked_circulating__millions          , locked_and_staked_supply / 1e6 AS staked_locked__millions          , 1 AS dummy     FROM daily_supply_stats ) SELECT * FROM output WHERE utc_date >= '{{starting_date}}' ORDER BY utc_date DESC
81ce7174-e488-4463-b185-8ccd5f78c613,2024-07-18 03:21 PM,select   date_trunc('hour', block_timestamp) as _date,   count(distinct receipt_object_id) as receipt_ct,   count(distinct tx_hash) as tx_ct from near.core.fact_receipts where block_timestamp::date >= sysdate() - interval '1 week' group by 1 order by 1
773abcc2-ef63-4f88-b1a6-5709395946fb,Monitoring - Data Freshness,select    max(block_timestamp) as max_time,   timestampdiff('h', max_time, current_timestamp) as lag,   case   	when lag between 0 and 2 then '✅'   	when lag between 0 and 6 then '⚠️'   	when lag between 6 and 24 then '🚨'   	when lag >24 then '🌶🌶🌶'   end as status from {{blockchain}}.core.fact_blocks
b862fc2e-0b9d-4f1c-ae8a-48e59ca24bba,Flow Token xfers by new payers,-- forked from Flow May 2 Top Event Contracts @ https://flipsidecrypto.xyz/edit/queries/42a23231-fca6-4876-901f-3f5a26ec0985 -- forked from Flow May 2 Txs from New Payers @ https://flipsidecrypto.xyz/edit/queries/ac9e9bfa-8777-4e29-aa89-75f75563d14b with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ),   new_payers as (     select distinct       payer     from       payer_date     where       first_tx_date = '2023-05-02'   ),   may_txs as (     select       *     from       flow.core.fact_transactions     where       block_timestamp::date = '2023-05-02'       and payer in (         select           payer         from           new_payers       )   ) -- select * from flow.core.fact events -- where tx_id in (select tx_id from may_txs) -- order by tx_id, event_index -- limit 500 select   sum(event_data:amount::float) as gross_flow_transferred,   min(event_data:amount::float) as min_flow_transferred,   max(event_data:amount::float) as max_flow_transferred,   median(event_data:amount::float) as median_flow_transferred from   flow.core.fact_events where   tx_id in (     select distinct       tx_id     from       may_txs   )   and event_contract = 'A.1654653399040a61.FlowToken'
1f9794f3-1d95-43b8-acbd-9fcc56de9b9a,Untitled Query,
4d657e74-423d-415b-b59c-444a4cb91e4e,2023-05-08 05:18 PM,select    action_data:code,   try_base64_decode_string(action_data:code::string) from near.core.fact_actions_events where tx_hash = '5A4J4RPDu6buqYBBQqavzMZnZJ5btgyaZ6Zm7NWBextN' and block_timestamp::date = '2022-10-03' -- 4K97XuXbnqusbRiBG2QGZDYb6rYbFMFd8ntSzHxTkrhc
b8f24403-2564-4059-baf0-824dc091efc8,transactions with ust,select   date_trunc('d', block_timestamp) as d,   sum(token_1_amount) as amount from terra.swaps    where ask_currency = 'UST'    and token_1_amount is not null group by 1 order by 1 --   -- or offer_currency = 'UST -- select * from terra.swaps limit 10 -- offer = token_0 -- ask = token_1
b93ae25b-75f5-4bfd-9b2d-95308c74ccff,Daily TPS, 2023,with base as (   SELECT     block_timestamp::date as _date,     count(distinct tx_id) as daily_tx_count   from flow.core.fact_transactions   where block_timestamp::date >= '2023-01-01'   and tx_succeeded   group by 1 ) select   _date,   daily_tx_count / (24 * 60 * 60) as tps from base order by 1
b5265597-b9b3-4b66-bfcc-668dc581fa33,2023-08-23 11:24 AM,select * FROM aurora.core.fact_logs limit 5
351a1394-f906-4e36-9e8b-c8bf964fc3e4,Untitled Query,
ba4854f7-5cec-4f6d-b738-2902d584caf7,LUNA Price - daily change - standard deviation [T31],SELECT   date_trunc('day', block_timestamp) as date,   avg(price_usd) as price,   STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv   -- avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date) as change,   -- (avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date)) / (LAG(avg(price_usd)) OVER (ORDER BY date)) as pct_change FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1
5556861b-23d9-4bcb-a17e-21a9e74cf750,Untitled Query,select   	block_timestamp::date, 	count(tx_id) from flow.core.fact_transactions group by 1
ba06a66f-c62c-4aef-b266-60283229a5c4,Borrow UST against bLuna,SELECT    block_id::string as block_id,   msg_value:execute_msg as execute_message,   c.address_name as contract_label,   tx_status,   block_timestamp FROM terra.msgs LEFT OUTER JOIN terra.labels c   ON msg_value:contract::string = c.address WHERE TX_ID = 'CCB3157E7BE1A538DFBD1CCAE6707A597E99052FA6FF3EF2442C33A69F720B17'
68ae9298-2ec6-4d9c-8767-458feaec9cdf,miserable-tan,select * from near.price.fact_prices limit 5
4c20735c-2d4c-4bf5-94d0-0389badd5a65,Pool TVL copy,-- forked from cloudr3n / Pool TVL @ https://flipsidecrypto.xyz/cloudr3n/q/0REevlBlNnTx/pool-tvl -- weth-usdt 0xd387c40a72703b38a5181573724bcaf2ce6038a5 tokenx usdt tokeny weth -- can use token_transfer -- usdc.e 0xff970a61a04b1ca14834a43f5de4533ebddb5cc8 -- usdc 0xaf88d065e77c8cc2239327c5edb3a432268e5831 -- usdt 0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9 -- weth 0x82af49447d8a07e3bd95bd0d56f35241523fbab1 with  uniswap1 as ( -- WETH-USDT 500 10 UNI-V3 LP 0x641c00a822e8b671738d32a431a4fb6074e5c79d   select     date(block_timestamp) as day,     case       when to_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d' then amount       when from_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d' then amount*(-1)     end as token_amount,     case       when to_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d' then to_address       when from_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d'         or from_address = '0x641c00a822e8b671738d32a431a4fb6074e5c79d'     ) ), uniswap2 as ( -- WETH-USDC 500 10 UNI-V3 LP 0xc6962004f452be9203591991d15f6b388e09e8d0   select     date(block_timestamp) as day,     case       when to_address = '0xc6962004f452be9203591991d15f6b388e09e8d0' then amount       when from_address = '0xc6962004f452be9203591991d15f6b388e09e8d0' then amount*(-1)     end as token_amount,     case       when to_address = '0xc6962004f452be9203591991d15f6b388e09e8d0' then to_address       when from_address = '0xc6962004f452be9203591991d15f6b388e09e8d0' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0xc6962004f452be9203591991d15f6b388e09e8d0'         or from_address = '0xc6962004f452be9203591991d15f6b388e09e8d0'     ) ), uniswap3 as ( -- WETH-USDC 3000 60 UNI-V3 LP 0x17c14d2c404d167802b16c450d3c99f88f2c4f4d   select     date(block_timestamp) as day,     case       when to_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d' then amount       when from_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d' then amount*(-1)     end as token_amount,     case       when to_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d' then to_address       when from_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d'         or from_address = '0x17c14d2c404d167802b16c450d3c99f88f2c4f4d'     ) ), uniswap4 as ( -- WETH-USDC 500 10 UNI-V3 LP 0xc31e54c7a869b9fcbecc14363cf510d1c41fa443   select     date(block_timestamp) as day,     case       when to_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443' then amount       when from_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443' then amount*(-1)     end as token_amount,     case       when to_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443' then to_address       when from_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443'         or from_address = '0xc31e54c7a869b9fcbecc14363cf510d1c41fa443'     ) ), uniswap5 as ( -- WETH-USDC 100 1 UNI-V3 LP 0xe754841b77c874135caca3386676e886459c2d61   select     date(block_timestamp) as day,     case       when to_address = '0xe754841b77c874135caca3386676e886459c2d61' then amount       when from_address = '0xe754841b77c874135caca3386676e886459c2d61' then amount*(-1)     end as token_amount,     case       when to_address = '0xe754841b77c874135caca3386676e886459c2d61' then to_address       when from_address = '0xe754841b77c874135caca3386676e886459c2d61' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0xe754841b77c874135caca3386676e886459c2d61'         or from_address = '0xe754841b77c874135caca3386676e886459c2d61'     ) ), uniswap as (   select * from uniswap1   union all   select * from uniswap2   union all   select * from uniswap3   union all    select * from uniswap4   union all    select * from uniswap5 ), tj1 as ( -- WETH-USDC 0x69f1216cb2905bf0852f74624d5fa7b5fc4da710   select     date(block_timestamp) as day,     case       when to_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710' then amount       when from_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710' then amount*(-1)     end as token_amount,     case       when to_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710' then to_address       when from_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDC' AS pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710'         or from_address = '0x69f1216cb2905bf0852f74624d5fa7b5fc4da710'     ) ), tj2 as (   select     date(block_timestamp) as day,     case       when to_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5' then amount       when from_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5' then amount*(-1)     end as token_amount,     case       when to_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5' then to_address       when from_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5'         or from_address = '0xd387c40a72703b38a5181573724bcaf2ce6038a5'     ) ), tj3 as (   select     date(block_timestamp) as day,     case       when to_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c' then amount       when from_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c' then amount*(-1)     end as token_amount,     case       when to_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c' then to_address       when from_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c'         or from_address = '0x94d53be52706a155d27440c4a2434bea772a6f7c'     ) ), tj4 as (   select     date(block_timestamp) as day,     case       when to_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02' then amount       when from_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02' then amount*(-1)     end as token_amount,     case       when to_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02' then to_address       when from_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02'         or from_address = '0x8728574aF6A374fa9920bE639267e78f45C4eA02'     ) ), tj as ( select * from tj1 union all select * from tj2 union all select * from tj3 union all select * from tj4 ), camelot1 as ( select     date(block_timestamp) as day,     case       when to_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526' then amount       when from_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526' then amount*(-1)     end as token_amount,     case       when to_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526' then to_address       when from_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526'         or from_address = '0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526'     ) ), camelot2 as ( select     date(block_timestamp) as day,     case       when to_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358' then amount       when from_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358' then amount*(-1)     end as token_amount,     case       when to_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358' then to_address       when from_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358'         or from_address = '0x7cccba38e2d959fe135e79aebb57ccb27b128358'     ) ), camelot3 as ( select     date(block_timestamp) as day,     case       when to_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126' then amount       when from_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126' then amount*(-1)     end as token_amount,     case       when to_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126' then to_address       when from_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126'         or from_address = '0x521aa84ab3fcc4c05cabac24dc3682339887b126'     ) ), camelot4 as ( select     date(block_timestamp) as day,     case       when to_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27' then amount       when from_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27' then amount*(-1)     end as token_amount,     case       when to_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27' then to_address       when from_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27'         or from_address = '0x84652bb2539513baf36e225c930fdd8eaa63ce27'     ) ), camelot as ( select * from camelot1 union all select * from camelot2 union all select * from camelot3 --union all --select * from camelot4 ), ramses as ( select     date(block_timestamp) as day,     case       when to_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110' then amount       when from_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110' then amount*(-1)     end as token_amount,     case       when to_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110' then to_address       when from_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110'         or from_address = '0x30afbcf9458c3131a6d051c621e307e6278e4110'     ) ), pancakeswap1 as ( select     date(block_timestamp) as day,     case       when to_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c' then amount       when from_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c' then amount*(-1)     end as token_amount,     case       when to_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c' then to_address       when from_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c'         or from_address = '0xd9e2a1a61b6e61b275cec326465d417e52c1b95c'     ) ), pancakeswap2 as ( select     date(block_timestamp) as day,     case       when to_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197' then amount       when from_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197' then amount*(-1)     end as token_amount,     case       when to_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197' then to_address       when from_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197'         or from_address = '0x0bacc7a9717e70ea0da5ac075889bd87d4c81197'     ) ), pancakeswap3 as ( -- weth usdt 1bps select     date(block_timestamp) as day,     case       when to_address = '0x389938cf14be379217570d8e4619e51fbdafaa21' then amount       when from_address = '0x389938cf14be379217570d8e4619e51fbdafaa21' then amount*(-1)     end as token_amount,     case       when to_address = '0x389938cf14be379217570d8e4619e51fbdafaa21' then to_address       when from_address = '0x389938cf14be379217570d8e4619e51fbdafaa21' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x389938cf14be379217570d8e4619e51fbdafaa21'         or from_address = '0x389938cf14be379217570d8e4619e51fbdafaa21'     ) ), pancakeswap4 as ( -- weth usdt 1bps select     date(block_timestamp) as day,     case       when to_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947' then amount       when from_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947' then amount*(-1)     end as token_amount,     case       when to_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947' then to_address       when from_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947'         or from_address = '0x7fcdc35463e3770c2fb992716cd070b63540b947'     ) ), pancakeswap as ( select * from pancakeswap1 union all select * from pancakeswap2 union all select * from pancakeswap3 union all select * from pancakeswap4 ), sushi1 as ( select     date(block_timestamp) as day,     case       when to_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40' then amount       when from_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40' then amount*(-1)     end as token_amount,     case       when to_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40' then to_address       when from_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDC.e' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8'     )     AND        (         to_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40'         or from_address = '0x15e444da5b343c5a0931f5d3e85d158d1efc3d40'     ) ), sushi2 as ( select     date(block_timestamp) as day,     case       when to_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296' then amount       when from_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296' then amount*(-1)     end as token_amount,     case       when to_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296' then to_address       when from_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296' then from_address     end as pool_address,     contract_address as token_address,     'WETH-USDC' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xaf88d065e77c8cc2239327c5edb3a432268e5831'     )     AND        (         to_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296'         or from_address = '0xf3eb87c1f6020982173c908e7eb31aa66c1f0296'     ) ), sushi3 as ( select     date(block_timestamp) as day,     case       when to_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2' then amount       when from_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2' then amount*(-1)     end as token_amount,     case       when to_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2' then to_address       when from_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2' then from_address     end as pool_address,     contract_address as token_address,   'WETH-USDT' as pool_name   from     arbitrum.core.ez_token_transfers   where     contract_address in (       '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',       '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9'     )     AND        (         to_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2'         or from_address = '0x824d9bc425c599f46c700afdcae0867596f48ce2'     ) ), sushi as ( select * from sushi1  union all select * from sushi2  union all  select * from sushi3 ), price_tb as ( select   date(hour) as time_day,   avg(price) as avg_price,   token_address as token_address2,   symbol from   arbitrum.price.ez_hourly_token_prices where    token_address2 in ('0xff970a61a04b1ca14834a43f5de4533ebddb5cc8','0xaf88d065e77c8cc2239327c5edb3a432268e5831','0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9','0x82af49447d8a07e3bd95bd0d56f35241523fbab1') group by    time_day,   token_address2,   symbol ), final_tb as ( select    day,   sum(token_amount) as daily_change,   sum(daily_change) over (partition by token_address, pool_address order by day asc) daily_balance,   daily_balance*avg_price as daily_balance_usd,   token_address,   pool_address,   protocol, pool_name from  ( select *, 'uniswap' as protocol from uniswap union all select *, 'traderjoe' as protocol from tj union all select *, 'camelot' as protocol from camelot union all select *, 'sushiswap' as protocol from sushi union all select *, 'ramses' as protocol from ramses union all  select *, 'pancakeswap' as protocol from pancakeswap ) left join price_tb on day=time_day and token_address2=token_address group by day, token_address, pool_address, avg_price, protocol, pool_name ) select * from final_tb where day>='2023-01-01' order by day desc, pool_address desc, token_address desc /* price_tb as ( select   date(hour) as time_day,   avg(price) as avg_price   token_address as token_address2,   symbol from   arbitrum.price.ez_hourly_token_prices where    token_address2 in ('0xff970a61a04b1ca14834a43f5de4533ebddb5cc8','0xaf88d065e77c8cc2239327c5edb3a432268e5831','0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9','0x82af49447d8a07e3bd95bd0d56f35241523fbab1') group by    time_day,   token_address2,   symbol ) select    day,   sum(token_amount) as daily_change,   sum(daily_change) over (partition by token_address, pool_address order by day asc) daily_balance,   daily_balance*avg_price as daily_balance_usd,   token_address,   pool_address from  ( select * from uniswap union all select * from tj union all select * from camelot union all select * from sushi union all select * from ramses union all  select * from pancakeswap ) left join price_tb on day=time_day and token_address2=token_address group by day, token_address, pool_address  */
b9ff53ae-eb23-45df-b5aa-642cc54e371b,Untitled Query,select * from flow.core.fact_bridge_transactions;
4f2d9ac5-dbb3-4370-811d-adb4fd82ca38,yvBOOST $ Volume ex first week [YC1],SELECT   date_trunc('week', block_timestamp) as day,   sum(amount) as crv_total,   avg(crv_total) OVER (ORDER BY day ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as ma FROM ethereum.udm_events WHERE contract_address = lower('0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a')   AND origin_function_name = 'deposit'   AND event_name = 'transfer'   AND block_timestamp > '2021-05-02T23:59:00Z' -- vault launched on april 30th GROUP BY 1 ORDER BY 1
4bfb9447-8888-4c05-bca3-04b527bd0d35,Are they really a threat, though? Invasive Stable Inbound Volume [T101],WITH inbound_non_native AS (   SELECT      block_timestamp,     event_attributes:"1_contract_address" as token_contract_address,     event_attributes:"0_amount" as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'complete_transfer_wrapped'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_assets AS (   SELECT    'terra103c6z8jq8s2yszvxj9mpah0jlvky2pek54f2yg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra127ww0al7uj9vyg7cv2gtcqenhrjzlnq5vaq6dh' as token_contract_address,   'whUST' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra132zppkzw88j35hpwxkrpzymujekky3wcuru65n' as token_contract_address,   'whATOM' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra133chr09wu8sakfte5v7vd8qzq9vghtkv4tn0ur' as token_contract_address,   'whwstETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra14tl83xcwqjy0ken9peu4pjjuu755lrry2uy25r' as token_contract_address,   'whWETH' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra190tqwgqx7s8qrknz6kckct7v607cu068gfujpk' as token_contract_address,   'whSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19phjr9363x44yukx6dl6d4zvn2wqc8gpkk0tm7' as token_contract_address,   'whETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra19t8cxscre0jss7nejqy29c97fkg7els3v8zujg' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1aa7upykmmqqc63l924l5qfap8mrmx5rfdm0v55' as token_contract_address,   'whWBTC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ce06wkrdm4vl6t0hvc0g86rsy27pu8yadg3dva' as token_contract_address,   'whUSDT' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1cetg5wruw2wsdjp7j46rj44xdel00z006e9yg8' as token_contract_address,   'whWBNB' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dfasranqm4uyaz72r960umxy0w8t6zewqlnkuq' as token_contract_address,   'weMATIC' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dtqlfecglk47yplfrtwjzyagkgcqqngd5lgjp8' as token_contract_address,   'whWMATIC' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dx9f62gmeyjerskc3uf5pyuwq3vhwuf6a8wpn4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1dyypm0nag84fegagrau8k3wcyjm262rt0v7ggl' as token_contract_address,   'whMIR' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1e6mq63y64zcxz8xyu5van4tgkhemj3r86yvgu4' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1fme0uqgjucph3kelyejm6yuj60e4te8647gx6v' as token_contract_address,   'whLUNA' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gdapfuda0dxtjc98raemhszntcxty7chyr0wpd' as token_contract_address,   'whORION' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1gtjr689cyaau20k8ezdxy8eup34tntun5xr9l2' as token_contract_address,   'whDOGE' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1hd9n65snaluvf7en0p4hqzse9eqecejz2k8rl5' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1jlh9xlyahg2d2qwat8jl4evqzuua452dafzqs5' as token_contract_address,   'whWETH' as name,   '5' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1jpkhwg9skkgml95v8y8hhp8n2wlktzqx6w2gzc' as token_contract_address,   'whRIN' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1k7tstwhf25wm45x329ny84xe4n2z2nnq9ekuv2' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1kkyyh7vganlpkj0gkc2rfmhy858ma4rtwywe3x' as token_contract_address,   'whUSDC' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1mddcdx0ujx89f38gu7zspk2r2ffdl5enyz2u03' as token_contract_address,   'ORION' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1mzm7nflz93qm7qhftykquv3yklyepwn4x2ujuw' as token_contract_address,   'whBETH' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1pepwcav40nvj3kh60qqgrk8k07ydmc00xyat06' as token_contract_address,   'whUSDC' as name,   '2' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1pkfkxzxqawdze8wa6enwh0hfw8yhlkswnqn328' as token_contract_address,   'whaUST' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1skjr69exm6v8zellgjpaa2emhwutrk5a6dz7dd' as token_contract_address,   'whBUSD' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1t9ul45l7m6jw6sxgvnp8e5hj8xzkjsg82g84ap' as token_contract_address,   'whstSOL' as name,   '1' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1tnndhfm0khgm3h766edku6833rz392p8cr82y8' as token_contract_address,   'wh' as name,   '1' as asset_chain,   '5' as decimals   UNION   SELECT    'terra1tuleqeucunvs9rga3dq5h35ew3ml8uv9a4snzx' as token_contract_address,   'whMIR' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1v584dmdvtlh7rpa22cslnzwkennm39ud5ngdld' as token_contract_address,   'whONT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1vlqeghv5mt5udh96kt5zxlh2wkh8q4kewkr0dd' as token_contract_address,   'whUSDT' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1xu3nyee55dfe5vxqtg9m4rkex8u2t6n2etl08h' as token_contract_address,   'whUSDT' as name,   '5' as asset_chain,   '6' as decimals   UNION   SELECT    'terra1yljlrxvkar0c6ujpvf8g57m5rpcwl7r032zyvu' as token_contract_address,   'whUSDC' as name,   '4' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1zmclyfepfmqvfqflu8r3lv6f75trmg05z7xq95' as token_contract_address,   'whDAI' as name,   '2' as asset_chain,   '8' as decimals   UNION   SELECT    'terra1ukmck39pkrhljc0my0hw7yu0quarncajcqyfz8' as token_contract_address,   'whCake-LP' as name,   '4' as asset_chain,   '8' as decimals ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), named_assets AS (   SELECT     block_timestamp,     name,     asset_chain,     amount,     decimals   FROM inbound_non_native   JOIN wh_assets ON inbound_non_native.token_contract_address = wh_assets.token_contract_address   ), adjusted AS (   SELECT     block_timestamp,     named_assets.name as asset,     chain_ids.name as origin_chain,     amount,     amount / pow(10, decimals) as adjusted_amount   FROM named_assets   JOIN chain_ids ON named_assets.asset_chain = chain_ids.id   ) SELECT   asset,   sum(adjusted_amount) as token_count FROM adjusted WHERE asset IN ('whUST', 'whUSDT', 'whaUST', 'whBUSD', 'whUSDC', 'whDAI') GROUP BY 1 ORDER BY 2 desc
ba9d50cb-db6c-438e-95e5-fd4c7fc750c9,Untitled Query,-- select -- 	pool_name, -- 	count(1) -- from ethereum.core.ez_dex_swaps --   where platform ilike '%sushi%' -- 	and block_timestamp::date between '2022-07-01' and '2022-07-31' -- group by 1 -- order by 2 desc; -- select count(1) from ethereum.core.dim_labels   with top_minters as (   select    	nft_to_address, 	count(1) as num from ethereum.core.ez_nft_mints 	where block_timestamp::date between '2022-07-01' and '2022-07-31'   group by 1 order by 2 desc limit 10   ) select sum(num) from top_minters
ae177fe7-3d30-4184-aa2f-e36dbe36e75b,tricky-harlequin,select * from near.price.fact_prices limit 5
128ffc66-4799-4dd1-ba65-485c04de43ee,SNX Debt Share Events - Self Liquidation copy,-- forked from 9ec39d62-de61-43da-b716-ded127d26c7b   -- forked from 72040985-d61b-4d96-a6ba-8a9464e656c8   -- forked from 2811b1ac-b3b6-4074-a984-feb696526cdf   /* 2.    Useful information Synthetix Addresses can be found here: https://github.com/Synthetixio/synthetix-docs/blob/master/content/addresses.md Ethereum L1 Example Addresses: SNX Token - 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F SNX Legacy Token - 0xC011A72400E58ecD99Ee497CF89E3775d4bd732F, 0xF244176246168F24e3187f7288EdbCA29267739b SDS Token - 0x89fcb32f29e509cc42d0c8b6f058c993013a843f SDS Chainlink Price Feed - 0xc7BB32a4951600FBac701589C73e219b26Ca2DFC Cratio changes – tracked by SystemSettings changes */ -- SNX Debt Shares Events with Mint as ( select *  from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0x55b9d0426f093c5f2c3d054e6697d7bb784c0734661222f5f52b2c7bf12d5155' and block_timestamp > '2023-01-01' ), Burn as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5' and block_timestamp > '2023-01-01' -- temp bypass for flashloan and (tx_hash = '0x55b9d0426f093c5f2c3d054e6697d7bb784c0734661222f5f52b2c7bf12d5155' -- temp bypass for liquidateself -- or tx_hash = '0x55b9d0426f093c5f2c3d054e6697d7bb784c0734661222f5f52b2c7bf12d5155' ) --and tx_hash = '0xfce8e22a5d7e5eb842691fffd3069507282620383ef2d8d5c034905dd0118121' ), /* -- not sure if i need transfer, it also contains mints and burns Transfer as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' and block_timestamp > '2023-02-01' ), */ /* DebtCacheUpdated as ( select * from ethereum.core.fact_event_logs where contract_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' and topics[0] = '0x88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68' and block_timestamp > '2023-02-01' limit 10 ), */ RawTraces as ( select  DISTINCT tx_hash, to_address, input, output, data from ethereum.core.fact_traces where 1=1 and substr(input,0,10) = '0x70a08231' -- function balanceOf and block_timestamp > '2023-01-01' ) -- left join traces to find current sds balance. --0x7a727d04c39b796b9a53b3f6413d5d772a0cac1bc8fb2161d92f7e5ccf1e45e8 -- func sig: 0x70a08231: balance off ,final_mints as ( select distinct m.block_timestamp, m.tx_hash, 'Mint' as event_name, ethereum.public.udf_hex_to_int(m.data)::integer / pow(10,18) as sds_difference, '0x' || substr(m.topics[1], 3+24, 40) as wallet_address, ethereum.public.udf_hex_to_int(t1.data:output)::integer / pow(10,18) + sds_difference as sds_balance, ethereum.public.udf_hex_to_int(t2.data:output)::integer / pow(10,18) as snx_balance, ethereum.public.udf_hex_to_int(t3.data:output)::integer / pow(10,18) as snx_escrow_balance from Mint m left join RawTraces t1 on m.tx_hash = t1.tx_hash and t1.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share left join RawTraces t2 on m.tx_hash = t2.tx_hash and t2.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx left join RawTraces t3 on m.tx_hash = t3.tx_hash and t3.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- escrow ) ,final_burns as ( select distinct m.block_timestamp, m.tx_hash, 'Burn' as event_name, ethereum.public.udf_hex_to_int(m.data)::integer / pow(10,18) * -1  as sds_difference, '0x' || substr(m.topics[1], 3+24, 40) as wallet_address, ethereum.public.udf_hex_to_int(t1.data:output)::integer / pow(10,18) + sds_difference as sds_balance, ethereum.public.udf_hex_to_int(t2.data:output)::integer / pow(10,18) as snx_balance, ethereum.public.udf_hex_to_int(t3.data:output)::integer / pow(10,18) as snx_escrow_balance from Burn m left join RawTraces t1 on m.tx_hash = t1.tx_hash and t1.to_address = '0x89fcb32f29e509cc42d0c8b6f058c993013a843f' -- snx debt share left join RawTraces t2 on m.tx_hash = t2.tx_hash and t2.to_address = '0x883a0e7b329df75476d9378462522cf2f78fab3d' -- snx left join RawTraces t3 on m.tx_hash = t3.tx_hash and t3.to_address = '0xac86855865cbf31c8f9fbb68c749ad5bd72802e3' -- escrow ) -- generally works, need to fix flash loans and liquidate self -- remember to remove the bypass on top -- 0x67260f6993d7c5d48c5bcf0c4b6d29e65fc73b3394446a1b424d1b3524e89334 select * from ( select * from final_mints union all select * from final_burns )
ba5b9498-40ec-4d44-9465-5f65b06b363d,All Chains Delay,with   arbitrum as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_blocks' as table_name     from       arbitrum.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_transactions' as table_name     from       arbitrum.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_event_logs' as table_name     from       arbitrum.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_traces' as table_name     from       arbitrum.core.fact_traces   ),   avalanche as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_blocks' as table_name     from       avalanche.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_transactions' as table_name     from       avalanche.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_event_logs' as table_name     from       avalanche.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_traces' as table_name     from       avalanche.core.fact_traces   ),   axelar as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_blocks' as table_name     from       axelar.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_transactions' as table_name     from       axelar.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msgs' as table_name     from       axelar.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msg_attributes' as table_name     from       axelar.core.fact_msg_attributes   ),   bsc as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_blocks' as table_name     from       bsc.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_transactions' as table_name     from       bsc.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_event_logs' as table_name     from       bsc.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_traces' as table_name     from       bsc.core.fact_traces   ),   cosmos as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_blocks' as table_name     from       cosmos.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_transactions' as table_name     from       cosmos.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msgs' as table_name     from       cosmos.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msg_attributes' as table_name     from       cosmos.core.fact_msg_attributes   ),   ethereum as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_blocks' as table_name     from       ethereum.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_transactions' as table_name     from       ethereum.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_event_logs' as table_name     from       ethereum.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_traces' as table_name     from       ethereum.core.fact_traces   ),   flow as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_blocks' as table_name     from       flow.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_transactions' as table_name     from       flow.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_events' as table_name     from       flow.core.fact_events   ),   gnosis as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_blocks' as table_name     from       gnosis.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_transactions' as table_name     from       gnosis.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_event_logs' as table_name     from       gnosis.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_traces' as table_name     from       gnosis.core.fact_traces   ),   near as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_blocks' as table_name     from       near.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_transactions' as table_name     from       near.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_receipts' as table_name     from       near.core.fact_receipts   ),   optimism as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_blocks' as table_name     from       optimism.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_transactions' as table_name     from       optimism.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_event_logs' as table_name     from       optimism.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_traces' as table_name     from       optimism.core.fact_traces   ),   osmosis as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_blocks' as table_name     from       osmosis.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_transactions' as table_name     from       osmosis.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_msgs' as table_name     from       osmosis.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_msg_attributes' as table_name     from       osmosis.core.fact_msg_attributes   ),   polygon as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_blocks' as table_name     from       polygon.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_transactions' as table_name     from       polygon.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_event_logs' as table_name     from       polygon.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_traces' as table_name     from       polygon.core.fact_traces   ),   solana as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_blocks' as table_name     from       solana.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_transactions' as table_name     from       solana.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_events' as table_name     from       solana.core.fact_events   ),   terra as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_blocks' as table_name     from       terra.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_transactions' as table_name     from       terra.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_msgs' as table_name     from       terra.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_msg_attributes' as table_name     from       terra.core.fact_msg_attributes   ),   all_together as (     select       *     from       arbitrum     UNION     select       *     from       avalanche     UNION     select       *     from       axelar     UNION     select       *     from       bsc     union     select       *     from       cosmos     union     select       *     from       ethereum     union     select       *     from       flow     union     select       *     from       gnosis     union     select       *     from       near     union     select       *     from       optimism     union     select       *     from       osmosis     union     select       *     from       polygon     union     select       *     from       solana     union     select       *     from       terra   ) select   * from   all_together order by   chain,   table_name;
d3b7e676-9b04-417e-ae4e-4417b72e7310,Untitled Query,
4fa2c429-291c-429f-97ab-07b9d81fe504,2023-04-20 12:03 PM,with transactions as ( select max(DATE(s.BLOCK_TIMESTAMP)) as DATE       ,s.BUYER_ADDRESS       ,s.NFT_ADDRESS       ,s.TOKENID       ,max(s.PRICE) as PRICE       ,max(s.PRICE_USD) as PRICE_USD  from ethereum.core.ez_nft_sales s  where s.BLOCK_TIMESTAMP >= DATEADD(month,-30,GETDATE())   and s.CURRENCY_SYMBOL IN ('ETH','WETH')   and s.PRICE >= .00001 group by s.BUYER_ADDRESS,s.NFT_ADDRESS,s.TOKENID ) ,mints as ( select max(DATE(s.BLOCK_TIMESTAMP)) as DATE      -- ,'nft_mint' as EVENT_TYPE       ,s.nft_to_address as BUYER_ADDRESS       ,s.NFT_ADDRESS       ,s.TOKENID       ,max(s.MINT_PRICE_ETH) AS PRICE       ,max(s.MINT_PRICE_USD) AS PRICE_USD  from ethereum.core.ez_nft_mints s where s.BLOCK_TIMESTAMP >= DATEADD(month,-30,GETDATE()) group by s.nft_to_address,s.NFT_ADDRESS,s.TOKENID ) SELECT s.BLOCK_NUMBER       ,s.BLOCK_TIMESTAMP       ,s.EVENT_TYPE       ,s.PLATFORM_NAME       ,s.PLATFORM_EXCHANGE_VERSION       ,s.AGGREGATOR_NAME       ,s.SELLER_ADDRESS       ,s.BUYER_ADDRESS       ,s.NFT_ADDRESS       ,s.ERC1155_VALUE       ,s.TOKENID       ,s.CURRENCY_SYMBOL       ,s.PRICE       ,s.PRICE_USD       ,s.TOTAL_FEES       ,s.PLATFORM_FEE       ,s.CREATOR_FEE       ,s.TOTAL_FEES_USD       ,s.PLATFORM_FEE_USD       ,s.CREATOR_FEE_USD       ,s.TX_FEE       ,s.TX_FEE_USD       ,CASE WHEN b.PRICE IS NULL AND m.PRICE IS NOT NULL THEN 'mint' WHEN b.PRICE IS NOT NULL THEN 'sale' ELSE '' END as BOUGHT_EVENT       ,CASE WHEN b.PRICE IS NULL THEN m.DATE ELSE b.DATE END as BOUGHT_DATE       ,CASE WHEN b.PRICE IS NULL THEN m.PRICE ELSE b.PRICE END as BOUGHT_PRICE       ,CASE WHEN b.PRICE IS NULL THEN m.PRICE_USD ELSE b.PRICE_USD END as BOUGHT_USD FROM ethereum.core.ez_nft_sales s   left join transactions b on b.buyer_address = s.seller_address and b.nft_address = s.nft_address and b.tokenid = s.tokenid and b.date < s.block_timestamp   left join mints m on m.buyer_address = s.seller_address and m.nft_address = s.nft_address and m.tokenid = s.tokenid and m.date < s.block_timestamp where 1 = 1    and DATE(s.BLOCK_TIMESTAMP) = '2023-04-19'    and s.CURRENCY_SYMBOL IN ('ETH','WETH')    -- and platform_name = 'blur' order by s.BLOCK_NUMBER desc
0676d587-f7ca-4a8b-8ff8-b28761bd6816,Untitled Query,
40e9ddab-1107-4a54-bc24-bf7153b40dc1,Untitled Query,
a0075801-3555-4978-b5cb-ee98c1e6612d,MDAO Workshop - Anchor Collateral Events - bLUNA,select 	date_trunc('d',block_timestamp) as date,   	event_type,   	count(distinct tx_id) as tx_count    from anchor.collateral where contract_label = 'bLuna Custody' group by 1,2 order by 1
d302485d-5ca4-4910-a253-7d3391f2130e,Untitled Query,
2962a88b-6ece-4dac-931a-0cba078f7318,Untitled Query,select 	if(block_id, block_id, block_height) from flow.core.fact_blocks   limit 100
58bb01ce-7d41-412e-87c2-d409c3628f6d,Untitled Query,
50915277-0ab7-4ea8-91a0-dbd341ab9855,scratch - ENS registrations - nothing done yet,select   		*   	from ethereum.udm_events  	where lower(to_address) = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5' 		and symbol = 'ETH'
50cd8428-d492-4bba-9e6b-546a65df572c,Untitled Query,
5131d46b-083d-4e45-b80e-5718d39934c6,Untitled Query,
ebe72728-0ff1-4ba9-a5ba-e3003c550408,Untitled Query,
074e7c9d-9751-4658-85f4-f09e873f3b60,Untitled Query,
26c01e84-daaa-4173-b1a5-41178cd064fa,Untitled Query,
e56f4fed-2a88-452e-8e20-73a9dc54a07c,Untitled Query,
52f24ffa-aa20-41e9-ab41-b76998b53e36,Untitled Query,
1a878111-0de2-474d-8b9b-ef273b9cd3ad,2024-05-01 09:24 AM,
cd5541e5-b4fa-44cd-8389-2f9f95981921,Mimir changes copy,-- forked from Multipartite / Mimir changes @ https://flipsidecrypto.xyz/Multipartite/q/TNGoNZ2OKep0/mimir-changes SELECT   fact_set_mimir_events.block_timestamp,   block_id,   key,   value FROM   (     thorchain.core.fact_set_mimir_events     INNER JOIN thorchain.core.dim_block ON fact_set_mimir_events.dim_block_id = dim_block.dim_block_id   ) ORDER BY   block_id DESC limit   5;
b86a6f61-62e2-47b7-a80f-98104b774faa,Untitled Query,
2098f321-c515-423b-a3bc-2be0fda1f134,Untitled Query,
1f6a3b90-4ddc-4f85-bbb5-84f254f6751b,Untitled Query,SELECT * FROM terra.msg_events WHERE tx_id = '6652F1CD9AE6F562811A84952C8CBA4F6B6A06D2E0F0A91ADB3E7A4163CE5AC6'
60398576-c5ba-4ad3-a799-7542a00632e7,Flow Latency - Blocks,with blocks as (     select         block_timestamp,         block_height,         lag(block_height) over (order by block_timestamp) as prev_block_height,         block_height - lag(block_height) over (order by block_timestamp) as block_height_diff     from flow.core.fact_blocks     where block_timestamp >= sysdate() - interval '6 hours' ), blocks_metrics as (     -- gross metric over the 6 hour period     select         time_slice(block_timestamp, 15, 'MINUTE') as block_timestamp_15_min,         min(block_timestamp) as min_block_timestamp,         max(block_timestamp) as max_block_timestamp,         min(block_height) as min_block_height,         max(block_height) as max_block_height,         max(block_height) - min(block_height) as blocks_count,         sum(iff(block_height_diff > 1, block_height_diff - 1, 0)) as missed_blocks_count,         missed_blocks_count / (max_block_height - min_block_height) as missed_blocks_ratio     from blocks     group by 1 ) select    concat((row_number() over (order by block_timestamp_15_min desc) - 1) * 15, ' minutes behind chainhead') as label,   * from blocks_metrics order by 2 desc
54631965-f560-4443-81d2-1e5b2f245951,Untitled Query,select * from terra.msgs where tx_id = '50484706BDF6DF3FD7F8C615C00C1DF987DED1F3CDFF593736C207164ED2FCA7'
bb748285-16bd-4d9e-9a06-f56ecea0bae7,LOOP DEX LP Events [T93] LOOP-LOOPR,WITH deposits AS (   SELECT     block_timestamp,     event_attributes:assets,     CASE       WHEN event_attributes:assets[0]:denom = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' THEN event_attributes:assets[0]:amount / pow(10,6) -- LOOP token       ELSE event_attributes:assets[1]:amount / pow(10,6)     END as LOOP_token,        CASE       WHEN event_attributes:assets[1]:denom = 'terra1jx4lmmke2srcvpjeereetc9hgegp4g5j0p9r2q' THEN event_attributes:assets[1]:amount / pow(10,6) -- LOOPR token       ELSE event_attributes:assets[0]:amount / pow(10,6)     END as LOOPR      FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'provide_liquidity'     AND event_attributes:"0_contract_address" = 'terra154jt8ppucvvakvqa5fyfjdflsu6v83j4ckjfq3' -- LOOP-LOOPR pair     AND block_timestamp > '2021-10-07T00:00:00Z'     AND block_timestamp < '2021-10-10T23:59:59Z'   ) SELECT   date_trunc('hour', block_timestamp) as date,   sum(LOOP_token) as loop_deposited,   sum(LOOPR) as loopr_deposited FROM deposits GROUP BY 1 ORDER BY 1
854ecc57-9793-46d0-aca1-1aa7b5cc56ea,Untitled Query,
bb7872cc-1941-402c-99a5-48258183d0ee,Untitled Query,select * from flipside_prod_db.mdao_harmony.txs limit 100
1fc604d8-6a50-4c97-8651-c11cd64783e3,Copy of Untitled Query,select 	date_trunc('d',block_timestamp) as date,   	contract_label,   	sum(amount_usd) as gross_volume    from anchor.collateral group by 1,2 order by 1
56a5cb6d-9c9d-4e71-953f-202054627c66,Untitled Query,
3c34338d-1637-4ffa-875e-9050d65af716,Untitled Query,
e3d6551e-cd2f-4a1a-a3c9-90b8838028a0,bETH Shuttle Vault - returns [LDO1],WITH beth AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(amount) as total FROM ethereum.udm_events WHERE origin_address = '0xc6821958f8d73ad0819502c35e383db8d3077ea2' -- terra deployer   AND from_address = '0xf9dcf31ee6eb94ab732a43c2fba1dc6179c98965' -- bETH Vault GROUP BY 1 ) SELECT    *,   sum(total) OVER (ORDER BY date) as cumulative,   avg(total) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM beth
e51a3701-be1b-4a12-955e-7822de6e22d4,gas fees on 3crv claims [YC2],WITH all_fees AS (   SELECT     date_trunc('week', block_timestamp) as date,     avg(gas_price) as avg_gas,     avg(gas_limit) as avg_limit,     avg(gas_used) as avg_used,     sum(tx_fee) as total_fee_eth,     sum(fee_usd) as total_fee_usd,     count(distinct from_address) as unique_users,     count(*) as tx_count,     total_fee_usd / unique_users as fee_per_user,     total_fee_usd / tx_count as fee_per_tx   FROM ethereum.transactions   WHERE success = 'TRUE'     AND to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'     AND function_name = 'claim'     AND block_timestamp > '2021-02-04T23:59:00Z'   GROUP BY 1   ORDER BY 1   ) SELECT   *,   sum(total_fee_eth) OVER (ORDER BY date) as cumulative_eth,   sum(total_fee_usd) OVER (ORDER BY date) as cumulative_usd FROM all_fees
26a870df-560d-49b1-8120-315abec68883,SDT peg,select date_trunc('hour', block_timestamp) as date,   symbol,   avg(price_usd)   from terra.oracle_prices where date > GETDATE() - interval '6 months'   AND symbol = 'SDT' group by 1,2  order by 1, 2
32ee3f98-e2e2-459f-bd1d-7397c57cff1b,ETH bridge change ?,WITH bridge_old AS ( SELECT   block_timestamp as date,   event_attributes:contract_address as token_address,   event_attributes:amount::float / pow(10,6) as amount FROM terra.msg_events WHERE event_attributes:"action" = 'transfer'   AND event_type = 'from_contract'   AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' -- eth bridge   AND block_timestamp > '2021-10-01T00:00:00Z'   ),    bridge_new AS (   SELECT     block_timestamp as date,     event_attributes:"0_contract_address" as token_address,     event_attributes:"0_amount"::float / pow(10,6) as amount   FROM terra.msg_events   WHERE event_attributes:"0_action" = 'transfer'     AND event_type = 'from_contract'     AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' -- eth bridge     AND block_timestamp > '2021-10-01T00:00:00Z'   ) SELECT   date_trunc('day', date) as date,   token_address,   sum(amount) as gross_amount FROM bridge_new -- LEFT JOIN terra.labels l --   ON token_address = l.address GROUP BY 1,2 ORDER BY 1, 3 desc
06147000-e6fd-4123-9af4-a770f4549954,Untitled Query,
497b865e-6aef-411e-9eef-f9d1da31584f,Anchor Deposits 1 [T32],SELECT   	date_trunc('day', block_timestamp) as date, 	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' 	AND msg_value:execute_msg LIKE '%deposit_stable%' GROUP BY 1 ORDER BY 1
1fa97dc3-e403-48fd-8daf-5740d08591de,yveCRV $ Natural Volume ex-Boost [YC1],SELECT   date_trunc('week', block_timestamp) as day,   sum(amount) as crv_total,   avg(crv_total) OVER (ORDER BY day ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as ma FROM ethereum.udm_events WHERE contract_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'   AND origin_function_name = 'deposit'   AND event_name = 'transfer'   AND block_timestamp > '2021-02-04T23:59:00Z'   AND to_address != '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- exclude deposit forwards from the boost vault GROUP BY 1 ORDER BY 1
e4d6886f-29f4-4945-ad18-5824ac2b7887,Untitled Query,select 	date_trunc('d',block_timestamp),     event_type,   	count(1)    from anchor.collateral group by 1,2 order by 1
377b65fd-212b-4674-aadb-c24f0ef849c6,Voting on Oracle Prices,SELECT    blockchain,   chain_id,   tx_status,   block_id,   block_timestamp,    tx_id,    msg_type,    REGEXP_REPLACE(msg_value:denom,'\"','') as currency,   REGEXP_REPLACE(msg_value:exchange_rate,'\"','') as rate,   REGEXP_REPLACE(msg_value:feeder,'\"','') as feeder,   REGEXP_REPLACE(msg_value:salt,'\"','') as salt,   REGEXP_REPLACE(msg_value:validator,'\"','') as validator FROM flipside_prod_db.silver.terra_msgs  WHERE msg_module = 'oracle'    AND msg_type = 'oracle/MsgExchangeRateVote'   AND tx_id = 'A66E89A8A924979A57B5B7158F6E7380EC36CC6B0C3F78E7F52C1D27FA2834F4'
e566bab7-1088-473b-8ca8-72dd78d5d556,staking return for luna as a $ and rate [T65],WITH rewards AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(event_attributes:amount[0]:amount::float) / pow(10,6) as luna_amt FROM terra.transitions WHERE block_timestamp > CURRENT_DATE - 180   AND block_timestamp < CURRENT_DATE   AND event = 'rewards'   AND transition_type = 'end_block' GROUP BY 1 ORDER BY 1), staking AS (   SELECT   date,   sum(balance) as balance FROM terra.daily_balances WHERE balance_type = 'staked'   AND date > CURRENT_DATE - 180   AND date < CURRENT_DATE   AND currency = 'LUNA' GROUP BY 1 ), prices as (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ), daily_balances AS ( SELECT   rewards.date as date,   luna_amt as luna_reward,   balance as luna_staked,   (luna_amt / balance) * 1000 as luna_per_thousand_staked FROM rewards JOIN staking   ON rewards.date = staking.date) SELECT   daily_balances.date,   luna_reward * price_usd as daily_usd_reward,   luna_staked * price_usd as daily_usd_staked,   pow(1 + (daily_usd_reward / daily_usd_staked), 365) - 1 as apr FROM daily_balances JOIN prices   ON daily_balances.date = prices.date
5eeddbda-4b18-4083-abe7-e7d58a3525c4,Total Activity by Type,select    date_trunc('month', createdat) as month,   state,   count(distinct id) as activity_count,   count(distinct author) as author_count from near.beta.github_activity where createdat::date >= '2022-01-01' group by 1,2 order by 1, 3 desc
35ed8477-b0f6-4c6e-acfd-63644b551712,Untitled Query,
e680cc97-3595-45ec-8b2d-eb3b99f6c193,MDAO Workshop - Anchor Collateral Volume - Gross by Collateral,select 	date_trunc('d',block_timestamp) as date,   	contract_label,   	sum(amount_usd) as gross_volume    from anchor.collateral group by 1,2 order by 1,2
391d712c-03d7-48cf-bc16-288a7b330cb7,Beer is NEAR, Metrics of Top Purchasers by Wallet Address (9/11-9/18),WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'    ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE BETWEEN '2022-09-11' AND '2022-09-18'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ) select   spender,   currency,   count(1) as total_transactions,   sum(deposit_amount) as gross_deposit,   sum(deposit_amount_usd) as gross_sales_deposited_usd,   sum(withdraw_amount) as gross_withdraw,   sum(withdraw_amount_usd) as gross_purchases_deposit_usd from final group by 1,2 order by 3 desc
392448c9-34d1-445b-a5c3-de4841d88b08,Yearn - yvBOOST zapOuts - daily [YC3],with out_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapOut'     AND contract_address = '0xd6b88257e91e4e4d4e990b3a858c849ef2dfde8c' -- yVault ZapOut contract   ) SELECT   date_trunc('day', block_timestamp) as date,   symbol,   sum(amount) as native_amount,   sum(amount_usd) as usd_amount FROM ethereum.udm_events e RIGHT JOIN out_txs ON e.tx_id = out_txs.tx_id WHERE block_timestamp > '2021-04-29T23:59:59Z'   -- AND to_label = 'genesis'   -- AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvBOOST    AND origin_address = to_address GROUP BY 1, 2 ORDER BY 1, 4 desc
e644ec9e-aa1c-4d51-802a-c1280a814bf0,LUNA oracle price [T33],SELECT   date_trunc('day', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price_usd) as avg_price FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-03-14T00:00:00Z' GROUP BY 1 ORDER BY 1
1a702fd4-cb8f-4604-85c0-1c80e9a4d00c,LUNA Price - daily change [T31],SELECT   date_trunc('day', block_timestamp) as date,   avg(price_usd) as price,   avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date) as change,   (avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date)) / (LAG(avg(price_usd)) OVER (ORDER BY date)) as pct_change FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1
64b55387-4eb2-4098-baa3-c6846b63d2c3,5 - delegating decision,
2228e057-7a23-45ea-bed6-7e4b51dfa4fe,10ust - volume,SELECT date_trunc('day', block_timestamp) as date,   event_from_address_name as transfer_type,   sum(event_amount) FROM terra.transfers WHERE event_currency  = 'UST' 	AND event_from_label_type != '' 	AND block_timestamp > GETDATE() - interval '1 month' GROUP BY 1, 2 ORDER BY 1
0482e5c3-e847-48f7-8e8b-34c048e4b13a,[24] Largest liquidity pools,SELECT    balance_date,   platform,   pool_name,   sum(balance),   count(amount_usd) -- i think amount_usd is empty for LPs because LPs don't really have a price. have to compute volume a separate way ...   -- yup - look at the uniswap starter. all that beginning work is to calculate prices and determine liquidity FROM ethereum.erc20_balances as bal JOIN ethereum.dex_liquidity_pools as dex   ON bal.contract_address = dex.pool_address WHERE balance_date > getdate() - interval '1 week' AND   dex.platform LIKE 'uniswap%' GROUP BY 1, 2, 3 ORDER BY 1, 5;
165d0ab4-3c40-46d4-ae69-ee0b3944283e,USDC Bridged back to ETH [P1],SELECT   date_trunc('day', block_timestamp),   symbol,   sum(amount) as amount,   sum(amount_usd) as amount_usd FROM polygon.udm_events WHERE to_address = '0x0000000000000000000000000000000000000000'   AND origin_address != to_address   AND origin_function_name = 'withdraw'   AND symbol IS NOT NULL   AND block_timestamp > CURRENT_DATE - INTERVAL '4 months'   AND symbol IN ('USDT', 'USDC', 'WETH', 'ETH') GROUP BY 1, 2 ORDER BY 1, 4 desc
01f64e0e-59c3-4a21-a991-573d35c2cdcc,Untitled Query,SELECT 	date_trunc('h', timestamp) as _date, 	avg(price_usd) as price from flow.core.fact_prices   where symbol = 'FLOW' group by 1 order by 1
1c52471f-355a-4e7d-90d3-07f6c3e7f7c8,sdr balances over time [T61],SELECT 	  DATE, 	  SUM(BALANCE) as native_balance   FROM terra.daily_balances   WHERE DATE > GETDATE() - interval '6 months'     AND currency IN ('sdr', 'SDT') GROUP BY 1
604772b2-eb21-48df-a0fa-833ccad8e319,Untitled Query,select max(block_timestamp) mdao_near.core.fact_transactions;
b50beb03-f012-4c9e-bc49-329a7d5de457,Top Stablecoin Balances (in UST) [T61],SELECT 	DATE, 	CURRENCY, 	SUM(BALANCE) as native_balance, 	SUM(BALANCE_USD) as usd_balance FROM terra.daily_balances WHERE DATE > GETDATE() - interval '6 months'   AND CURRENCY != 'LUNA' GROUP BY 1,2 ORDER BY 1,4 desc
71f0c20b-f742-4d4d-9111-0ce1cefbd6b8,2024-06-06 09:00 AM,select * from thorchain.price.ez_prices_hourly where hour > sysdste() - interval '1 day' limit 10
8d919e0f-39b9-4e6e-9657-5a7daa866ab2,Rest of the stETH [C2],SELECT * FROM ethereum.udm_events WHERE symbol = 'stETH'   AND origin_function_name = 'wrap'   AND block_timestamp > '2021-08-12T00:00:00Z' LIMIT 100
8dd5d9de-c2ce-4427-bb7d-5d872097ee44,Aggregate Liquidations,-- AGGREGATE LIQUIDATIONS SELECT 	date_trunc('day', block_timestamp),   	sum(event_attributes:"0_amount"::float) / pow(10,6) as bLUNA_liquidated FROM terra.msg_events WHERE event_attributes:"0_action" LIKE '%liquidate_collateral%' GROUP BY 1 ORDER BY 1
8daca270-4be9-413d-ac27-e78a8c2b7ae6,CRV Token Volume [C1],SELECT    date_trunc('day', block_timestamp) as day,   to_label,   count(*) FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - 90 GROUP BY 1,2
8dc6b488-2324-45ed-8cc3-04eb51509827,BSC-Terra Bridge Gross Volume [T104],with terra_bsc as (   select          block_timestamp,     event_from as sender,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id        from terra.transfers   where event_to = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), bsc_terra as (   select        block_timestamp,     event_to as recipient,     event_amount as amount,     event_amount_usd as amount_usd, 	event_currency as currency,     tx_id   from terra.transfers   where event_from = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2' ), labels as (   select * from terra.labels ), terra_bsc_agg as (   select   	date_trunc('day', block_timestamp) as date,     -sum(amount_usd) as amount_usd,   	'outbound' as direction   from terra_bsc   group by 1 ), bsc_terra_agg as (   select   	date_trunc('day', block_timestamp) as date,     sum(amount_usd) as amount_usd,   	'inbound' as direction   from bsc_terra   group by 1 ), final as (   select * from terra_bsc_agg   union   select * from bsc_terra_agg ) select * from final where direction = 'inbound' and date > '2021-01-24T00:00:00Z'
21e44688-4080-4881-8760-13536cc3b5c4,Untitled Query,
6140c463-01ad-4a55-9e07-5038cfdbb84a,Untitled Query,select * from FLIPSIDE_PROD_DB.GOLD.NEAR_ADDRESS_LABELS limit 100;
8e09a3fa-1254-4d01-95df-0a1d01ecf44b,bLUNA custody daily balance [T33],SELECT * FROM terra.daily_balances WHERE address = 'terra1ptjp2vfjrwh0j0faj9r6katm640kgjxnwwq9kn' ORDER BY date
44ad0731-8ab5-4aa6-9d5c-7e96d0db20fa,flow stats: weekly active users copy,-- forked from adriaparcerisas / flow stats: weekly active users @ https://flipsidecrypto.xyz/adriaparcerisas/q/MzwH_ymY7_d2/flow-stats-weekly-active-users with news as (   SELECT     distinct authorizers [0] as users,     min(trunc(block_timestamp, 'week')) as debut   from     flow.core.fact_transactions   group by     1 ), news2 as (   select     distinct debut,     count(distinct users) as new_users   from     news   group by     1 ), actives as (   SELECT     trunc(block_timestamp, 'week') as week,     count(distinct authorizers [0]) as active_users   from     flow.core.fact_transactions x   group by     1   order by     1 desc ), final as (   select     week,     active_users,     new_users,     sum(new_users) over (       order by         week     ) as unique_users   from     actives a     join news2 n on a.week = n.debut --where week<trunc(current_date,'week')   order by     1 asc ), final2 as (   select     week,     active_users,     new_users,     sum(new_users) over (       order by         week     ) as unique_users   from     actives a     join news2 n on a.week = n.debut --where a.week<current_date-INTERVAL '2 WEEKS'   order by     1 asc ), final_week as (   select     *   from     final   order by     1 desc   limit     1 ), final_past_week as (   select     *   from     final2   order by     1 desc   limit     1 ) select   final.*,   concat(     final.unique_users,     ' (',     final.unique_users - final2.unique_users,     ')'   ) as new_accounts,   (     (final.active_users - final2.active_users) / final2.active_users   ) * 100 as pcg_diff from   final_week as final   join final_past_week as final2 --where final.week<trunc(current_date,'week')
a4891486-ff3a-482f-9c53-9fde98a717f3,Untitled Query,
08bd05ac-b7f2-4456-8348-2216b2a06bda,2023-04-25 01:23 PM,select   min(block_number),   min(block_timestamp) from ethereum.core.fact_transactions
1e1f4997-ca49-4f4a-9763-77fff33ddccf,New Pct,with new_authors as ( select     author,     min(closedat) as earliest_close,     min(createdat) as earliest_open,     count(1) as num_issues,     count(distinct org) as count_orgs,     count(distinct repo) as count_repos from near.beta.github_activity     where author not ilike '%dependabot%' group by 1 ), new_2022 as (   select     date_trunc('month', earliest_open::date) as month,     count(distinct author) as new_authors   from new_authors    where earliest_open::date >= '2022-01-01'   group by 1 ), gross_2022 as ( select     date_trunc('month', createdat::date) as month,     count(distinct author) as gross_authors from near.beta.github_activity     where createdat::date >= '2022-01-01' group by 1 ) select   g.month as "Month",   gross_authors,   new_authors as "New",   gross_authors - new_authors as "Returning" from gross_2022 g left join new_2022 n using (month) order by 1
6ab1ba35-ef72-4f26-8147-4468fea6146b,Untitled Query,with staking_txs as (   SELECT   	block_timestamp,   	tx_id,   	event_attributes:sender as sender,   	event_attributes:"0_amount" / pow(10,6) as amount   from terra.msg_events   where tx_status = 'SUCCEEDED'   	and block_timestamp > '2021-12-23T12:00:00Z'   	and event_attributes:"1_action" = 'staking'     and event_attributes:"0_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- tns token contract   	and event_attributes:"1_contract_address" = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9' -- tns gov staking contract ), staking as (   select   	date_trunc('h', block_timestamp) as date,   	sum(amount) as amount,   	count(distinct sender) as unique_wallet,   	count(1) as transactions   from staking_txs   group by 1 ), unstake_txs as (   select     block_timestamp,     event_attributes:"0_amount" / pow(10,6) as amount        from terra.msg_events   where tx_status = 'SUCCEEDED'     and block_timestamp > '2021-12-23T12:00:00Z'     and event_attributes:"0_action" = 'withdraw'     and event_attributes:"0_contract_address" = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9' -- tns gov     and event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- tns ), unstaking as (   select   	date_trunc('h', block_timestamp) as date,     sum(amount) as amount   from unstake_txs   group by 1 ), staking_net as (   select   	staking.date as date,   	staking.amount as staked_amount,   	unstaking.amount as unstaked_amount,   	staked_amount - unstaked_amount as hourly_net_staked   from staking   join unstaking using (date) ),    claim_txs as (   select   	block_timestamp,   	tx_id,   	event_attributes:to as claimant,   	event_attributes:"0_amount" / pow(10,6) as amount      from terra.msg_events   WHERE event_type = 'from_contract'       AND event_attributes:"0_contract_address" = 'terra1ua7mgqjjx04k3syhl0ast3hujy5tfu9440srp9' -- tns airdrop contract       AND event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- tns token contract       AND event_attributes:"0_action" = 'claim'       AND tx_status = 'SUCCEEDED'       AND block_timestamp > '2021-12-23T12:00:00Z' ),    claims AS (   SELECT     date_trunc('h', block_timestamp) as date,     sum(amount) as amount,   	count(distinct claimant) as unique_wallets,   	count(1) as transactions   FROM claim_txs   GROUP BY 1 ), combo as (   select   	claims.date as date,   	claims.amount as claim_amount,   	coalesce(staking_net.staked_amount,0) as stake_amount,   	coalesce(staking_net.unstaked_amount,0) as unstake_amount,   	coalesce(staking_net.hourly_net_staked,0) as net_stake_amount   from claims   left join staking_net using (date) ), final as (   select   	*,   	sum(claim_amount) over (order by date) as cumsum_claim_amount,   	sum(net_stake_amount) over (order by date) as cumsum_stake_amount   from combo ) select * from final
472ce2b2-af27-4f91-93a6-3547fb857619,Untitled Query,WITH outbound AS (   SELECT     block_timestamp,     tx_id,     event_attributes:sender as address,     event_attributes   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   )    SELECT   date_trunc('day', block_timestamp) as date,   count(distinct address) as unique_users -- wallets, not users FROM outbound GROUP BY 1 ORDER BY 1
218a08ee-4ac8-41d1-b216-9b358474a012,logical-pink,select    count(distinct origin_from_address),   count(distinct origin_to_address),   count(distinct contract_address) from core.core.ez_decoded_event_logs ;
8ef85c4d-805c-48f7-892a-fa92408f58ad,Untitled Query,with top as (   select     sender,   	sum(deposit_amount) as deposit   from anchor.deposits   where block_timestamp > CURRENT_DATE - 1   group by 1   ) select  	max(deposit), sender from top
36bf0736-4888-4730-9ad4-b601511369fc,Anchor Top Depositor Volume [Anchor 1],with deposit_volume as (      select        block_timestamp,     sender,     deposit_amount        from anchor.deposits    ), top_depositors as (   select      	sender,     sum(deposit_amount) as gross_deposit      from deposit_volume   group by 1   order by 2 desc   limit 25    ),    deposits as (   select      	sender,   	date_trunc('month', block_timestamp) as d_month,     sum(deposit_amount) as gross_deposit      from deposit_volume   where sender in      (select sender from top_depositors)   group by 1,2   order by 1, 2 ) -- final as (    -- ) select * from deposits
4db10022-259d-4ea6-9d30-43cb36123875,thor ragnarok,SELECT   -- date_trunc('day', block_timestamp) as date,   -- count(distinct msg_value:voter) as unique_wallets   * FROM terra.msg_events -- WHERE msg_type = 'gov/MsgVote' --   AND msg_value:voter IS NOT NULL   WHERE block_timestamp > CURRENT_DATE - 30   AND msg_type = 'bank/MsgMultiSend'   -- AND event_type = 'message' limit 100
8f3eb53d-c91d-4e10-9cc4-ad9dd493269b,Trading Volume by Blockchain - all time [THOR9],WITH trading_volume AS (   SELECT     date_trunc('day', block_timestamp) as date,     blockchain,     sum(from_amount_usd) as volume   FROM thorchain.swaps   GROUP BY 1,2   ), daily_total AS (   SELECT      date_trunc('day', block_timestamp) as date,     sum(from_amount_usd) as daily_volume   FROM thorchain.swaps   GROUP BY 1 ) SELECT   trading_volume.date,   blockchain,   volume,   daily_volume,   avg(volume) OVER (ORDER BY trading_volume.date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as volume_ma,   volume / daily_volume as pct_share FROM trading_volume JOIN daily_total   ON trading_volume.date = daily_total.date ORDER BY 1, 6 desc -- normalize this to 1 and show trading volume by chain as pct
209fce58-5be4-42b2-afdf-f6c36eb22bd6,uni v3 data exploration,-- select platform, count(1) from ethereum.core.dim_dex_liquidity_pools    -- where platform in ('uniswap-v2', 'sushiswap') -- limit 100 -- select    -- block_number,    -- tx_hash,    -- block_timestamp,    -- tx_json:receipt:logs   -- *   -- from ethereum.core.fact_transactions where tx_hash = '0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff' -- dai to weth -- 0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3 -- eth to dai  -- 0x20db61bcf3940f091541c8d186fc42d81591b971871be6d8a3f980a54b730791 -- bal to eth -- 0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff -- fort to usdc -- 0x85139e7479b63f846ccf58784fbdee931733ffe53e3e52744948a5ab521d9977 -- select * from ethereum.core.fact_event_logs  --   where event_name = 'Swap' --   -- and contract_name is not null --   and tx_hash in ('0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff', -- 	'0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3', --   '0x20db61bcf3940f091541c8d186fc42d81591b971871be6d8a3f980a54b730791', --   '0x85139e7479b63f846ccf58784fbdee931733ffe53e3e52744948a5ab521d9977' --   ) -- order by event_index -- limit 10 select c.address_name as address, count(1)    from ethereum.core.fact_event_logs l   left join ethereum.core.dim_labels c on l.origin_to_address = c.address   where event_name = 'Swap' 	-- and origin_to_address = '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45'   and contract_name = 'UniswapV3Pool'   and block_timestamp::date >= CURRENT_DATE - 30 group by 1 order by 2 desc; select *   from ethereum.core.fact_event_logs l   -- left join ethereum.core.dim_labels c on l.origin_to_address = c.address   where event_name = 'Swap' 	-- and origin_to_address = '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45'   and contract_name = 'UniswapV3Pool'   and block_timestamp::date >= CURRENT_DATE - 30 limit 100 select   block_number,   block_timestamp,   tx_hash,   contract_address,   p.pool_name,   event_inputs:amount0,   event_inputs:amount1,   event_inputs,   origin_from_address,   origin_to_address   from ethereum.core.fact_event_logs l   left join ethereum.core.dim_dex_liquidity_pools p on l.contract_address = p.pool_address   where event_name = 'Swap'     -- and contract_name = 'UniswapV3Pool'     and block_timestamp::date >= CURRENT_DATE - 30     and tx_hash in ('0x776673e67ebd2f65e17371aecabc39b18979d40d5778c60afae1cf21153f66ff', 	'0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3',   '0x20db61bcf3940f091541c8d186fc42d81591b971871be6d8a3f980a54b730791',   '0x85139e7479b63f846ccf58784fbdee931733ffe53e3e52744948a5ab521d9977'   ) limit 100
8f64e46f-0f31-4809-9e82-ad141c2a88c2,Hunt TX3 - Deposit AAVE,SELECT   block_id,   tx_id,   to_label_subtype,   to_label,   function_name FROM polygon.transactions WHERE tx_id = '0xa4a5f60386ffed9d55e10f49da6a7ae2b745dae8d75bca932b757f90608a8055'
8f5f7f0f-1a79-4119-8084-cf5119863953,Untitled Query,select * from terra.core.fact_transactions   where tx_id = '25E12F01BEEBE294706845D873F32D111FF6F23B8C62DFEA20830B424F59A3B4'
38caeb5c-58d4-4189-ac2b-9a96e1f2d7be,Sushiswap Hunt - Bento Deposit,SELECT * FROM polygon.udm_events WHERE tx_id = '0xa6ed66d97c6eac31250ed72494537691b6b7e1cd8bc8149a17e1b42bb141dde3'
63115820-1499-4c5c-8c38-e25e9a1d99c4,Arbitrum,select origin_to_address, count(1)  from arbitrum.core.ez_token_transfers where to_address = '0xee9dec2712cce65174b561151701bf54b99c24c8' group by 1 -- origin to address -- 0x4775af8fef4809fe10bf05867d2b038a4b5b2146 -- connext contract -- from address -- 0xee9dec2712cce65174b561151701bf54b99c24c8 -- bridge -- if origin to address the out?
0fad2367-7f38-45d9-9d16-295d1499fcec,DefiLlama LiveQuery,with lq_call as ( SELECT   livequery.live.udf_api('https://api.llama.fi/chains') as response ) select   VALUE from lq_call, lateral flatten(input=>response:data)
8298a233-3951-4516-9a45-47587e76f395,Untitled Query,
8fd5745c-a772-474e-b8e2-99393d75ad50,Copy of Anchor Collateral - Top Outliers (AVAX),select   *    from anchor.collateral where amount_usd is not null   and block_timestamp > CURRENT_DATE - 90   and currency = 'terra1z3e2e4jpk4n0xzzwlkgcfvc95pc5ldq0xcny58' order by amount_usd desc limit 10
4f9097be-4950-4b76-bb1a-14d3192a8877,BTC Network Stats Claude v1,-- Common Table Expression for daily aggregations WITH daily_metrics AS (     SELECT         DATE_TRUNC('day', b.BLOCK_TIMESTAMP) AS date,         COUNT(DISTINCT b.BLOCK_NUMBER) AS blocks_per_day,         COUNT(DISTINCT t.TX_ID) AS transactions_per_day,         COUNT(DISTINCT o.PUBKEY_SCRIPT_ADDRESS) AS active_addresses         -- COUNT(DISTINCT CASE          --     WHEN o.PUBKEY_SCRIPT_ADDRESS NOT IN (         --         SELECT DISTINCT PUBKEY_SCRIPT_ADDRESS          --         FROM BITCOIN.CORE.FACT_OUTPUTS          --         WHERE BLOCK_TIMESTAMP < DATE_TRUNC('day', b.BLOCK_TIMESTAMP)         --     ) THEN o.PUBKEY_SCRIPT_ADDRESS          -- END) AS new_addresses     FROM          BITCOIN.CORE.FACT_BLOCKS b         LEFT JOIN BITCOIN.CORE.FACT_TRANSACTIONS t ON b.BLOCK_NUMBER = t.BLOCK_NUMBER         LEFT JOIN BITCOIN.CORE.FACT_OUTPUTS o ON t.TX_ID = o.TX_ID     GROUP BY          DATE_TRUNC('day', b.BLOCK_TIMESTAMP) ) -- Main query with 7-day moving averages SELECT     date,     AVG(blocks_per_day) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS blocks_per_day_7d_avg,     AVG(transactions_per_day) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS transactions_per_day_7d_avg,     AVG(active_addresses) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS active_addresses_7d_avg     -- AVG(new_addresses) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS new_addresses_7d_avg FROM      daily_metrics ORDER BY      date DESC
90157f8a-179d-4a32-bc13-5090dceb08df,Anchor Collateral - Top Outliers,select   *    from anchor.collateral where amount_usd is not null order by amount_usd desc limit 10
907b7bdc-ddad-4430-a670-41dbaf6c01c4,blocks per day - terra,SELECT  	date_trunc('day', block_timestamp) as date, 	count(distinct block_id) FROM terra.blocks GROUP BY 1 ORDER BY 1
9082b509-2748-4e6d-afa2-c6f76252a35f,TNS AIrdrop Claims,WITH claim_txs as (   select   	block_timestamp,   	tx_id,   	event_attributes:to as claimant,   	event_attributes:"0_amount" / pow(10,6) as amount   from terra.msg_events   WHERE event_type = 'from_contract'       AND event_attributes:"0_contract_address" = 'terra1ua7mgqjjx04k3syhl0ast3hujy5tfu9440srp9' -- tns airdrop contract       AND event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- tns token contract       AND event_attributes:"0_action" = 'claim'       AND tx_status = 'SUCCEEDED'       AND block_timestamp > '2021-12-23T12:00:00Z' ), claims AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(amount) as amount,   	count(distinct claimant) as unique_wallets,   	count(1) as transactions   FROM claim_txs   GROUP BY 1 ), final as (   select     *,   	sum(amount) over (order by date) as cumsum_amount,   	sum(unique_wallets) over (order by date) as cumsum_wallets   from claims ) select * from final
90bc3fcf-ff7e-470c-871f-5d2d917110d4,terra earnings - all tokens,WITH multisend_tx AS (   SELECT     tx_id   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND msg_type = 'bank/MsgMultiSend'     AND tx_status = 'SUCCEEDED'   ),    multi_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     value:coins[0]:amount / pow(10, 6) as amount   FROM terra.msgs m   RIGHT JOIN multisend_tx ON multisend_tx.tx_id = m.tx_id, LATERAL FLATTEN(INPUT => msg_value:outputs)   WHERE value:address = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'   ),    direct_send AS (   SELECT     date_trunc('hour', block_timestamp) as date,     event_amount as amount   FROM terra.transfers   WHERE event_from = 'terra13v8hmfld6747h7fx9gzzqvv80qwz24uvcqwrap'     AND event_to = 'terra1zmld38gefr8g66nc399q949wlvypecdr0v7jp6'     AND tx_status = 'SUCCEEDED'   ORDER BY block_timestamp   ), all_income AS (   SELECT * FROM direct_send   UNION ALL   SELECT * FROM multi_send   ),    prices AS (   SELECT     block_timestamp,     price_usd   FROM terra.oracle_prices   WHERE symbol = 'LUNA'     AND block_timestamp > '2021-07-01T00:00:00Z'   ) SELECT   date,   amount,   amount * price_usd as at_cost,   SUM(at_cost) OVER (ORDER BY date) as cumulative_earnings FROM all_income JOIN prices ON all_income.date = prices.block_timestamp
90859cd8-8937-4b4f-b901-f3417bea4dcc,Untitled Query,select * from flow.core.ez_nft_sales   where nft_collection = 'A.87ca73a41bb50ad5.Golazos' limit 10
308a26ce-1cc3-4c01-82bb-a0201487f8c2,Daily Staked NEAR Balance copy,-- forked from Daily Staked NEAR Balance @ https://flipsidecrypto.xyz/edit/queries/29da7546-ded6-453b-a9fb-f1293d32d244  with   all_staking_pools as (     select       address,       min(block_timestamp::date) as min_date     from       near.core.fact_staking_pool_balances     group by 1   ),   dates as (     select       date_day as date     from       crosschain.core.dim_dates     where       date_day between '2020-08-25' and CURRENT_DATE   ),   boilerplate as (     select       ap.address,       d.date     from       all_staking_pools ap       cross join dates d     where d.date >= ap.min_date   ),   daily_balance as (     SELECT       block_timestamp::date as date,       address,       balance     from       near.core.fact_staking_pool_balances     qualify       row_number() over (         partition by           address,           block_timestamp::date         order by           block_id desc       ) = 1   ),   imputed_balance as (     select       b.date,       b.address,       daily.balance,       lag(balance) ignore nulls over (         partition by           address         order by           date       ) as imputed_bal_lag,       coalesce(balance, imputed_bal_lag) as daily_balance     from       boilerplate b       left join daily_balance daily using (date, address)   ) select   date,   count(distinct address) as addrs,   sum(daily_balance) as staked_bal from imputed_balance group by 1 order by date;
3cb3ec25-2a94-43ac-b326-7ff1e5504d08,Untitled Query,
3e35b55a-9d8f-41a6-ae9e-3d5c8e7a66ce,top sales,SELECT 	* FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8' ORDER BY price desc limit 10
72a03076-3634-4f81-83ce-01cb21ab37da,Untitled Query,select * from flipside_prod_db.mdao_near.receipts   limit 100
0b1b15be-4443-45ec-8ff5-077eb03ec95d,Terra Fee Token List (IBC),WITH fees as ( select  date_trunc('day',block_timestamp) as date,   tx_id,   		nvl(fee[0]:amount[0]:denom,fee[0]:denom)::string as denom,   		nvl(fee[0]:amount[0]:amount,fee[0]:amount) / 1e6 as amount,   		fee   from terra.transactions    where (fee[0]:amount[0]:amount > 0  OR fee[0]:amount > 0)   and	(fee[0]:amount[0]:amount::string <> '[]' or	fee[0]:amount::string <> '[]') ), agg as ( select denom, 		sum(amount) as total_amount from fees  group by 1) select distinct denom from agg where denom like 'ibc%'
3a2f052c-ad87-401d-8e8d-67e07e125360,LUNA and ETH standard deviation [T31],WITH eth AS (SELECT 	date_trunc('hour', hour) as date, 	avg(price) as eth_price,   	STDDEV(avg(price)) OVER (ORDER BY date) as stdv_eth FROM ethereum.token_prices_hourly WHERE symbol = 'ETH' 	AND hour > GETDATE() - interval '2 weeks' GROUP BY 1) SELECT   luna.date,   luna_price,   stdv_luna,   eth_price,   stdv_eth FROM (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(price_usd) as luna_price,     STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv_luna   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > GETDATE() - interval '2 weeks'   GROUP BY 1) luna JOIN eth ON eth.date = luna.date ORDER BY 1
3a46456a-5c23-4870-b584-d2d4f4c70970,LUNA Price - daily change - standard deviation down period [T31],SELECT   date_trunc('day', block_timestamp) as date,   avg(price_usd) as price,   STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv   -- avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date) as change,   -- (avg(price_usd) - LAG(avg(price_usd)) OVER (ORDER BY date)) / (LAG(avg(price_usd)) OVER (ORDER BY date)) as pct_change FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-05-22T00:00:00Z'   AND block_timestamp < '2021-07-19T00:00:00Z' GROUP BY 1 ORDER BY 1
b85951df-8e6a-4d57-a23b-684c46bfcb76,Copy of LUNA Price - daily change - standard deviation full - present [T31],SELECT   date_trunc('day', block_timestamp) as date,   avg(price_usd) as price,   STDDEV(avg(price_usd)) OVER (ORDER BY date) as stdv FROM terra.oracle_prices WHERE SYMBOL = 'LUNA'   AND block_timestamp > '2021-05-22T00:00:00Z' GROUP BY 1 ORDER BY 1
008824e3-541b-450e-9250-b5d79700e189,Untitled Query,SELECT 	date_trunc('d', block_timestamp) as _date, 	count(1) as records from flow.core.fact_swaps where block_timestamp::date >= '2022-06-01' group by 1 order by 1
3f591899-3a33-4c3d-a15c-763b9f4bd30f,2023-02-07 11:14 AM,select * from ethereum.core.ez_snapshot where space_id ilike '%Synthetix%' -- where proposal_title like 'SIP-%' -- where space_id in ( --   'snxgov.eth', --   'snxambassador.eth', -- treasurycouncil -- ) order by vote_timestamp desc  limit 10
ae630170-6ee1-4011-82fb-0f4be5172983,BTC Network Stats Claude v2,-- First, let's create a CTE to identify the first appearance of each address WITH first_appearance AS (     SELECT         PUBKEY_SCRIPT_ADDRESS,         MIN(DATE_TRUNC('day', BLOCK_TIMESTAMP)) AS first_date     FROM BITCOIN.CORE.FACT_OUTPUTS     WHERE PUBKEY_SCRIPT_ADDRESS IS NOT NULL     GROUP BY PUBKEY_SCRIPT_ADDRESS ), -- Now, let's create our daily metrics CTE daily_metrics AS (     SELECT         DATE_TRUNC('day', b.BLOCK_TIMESTAMP) AS date,         COUNT(DISTINCT b.BLOCK_NUMBER) AS blocks_per_day,         COUNT(DISTINCT t.TX_ID) AS transactions_per_day,         COUNT(DISTINCT o.PUBKEY_SCRIPT_ADDRESS) AS active_addresses,         COUNT(DISTINCT CASE              WHEN fa.first_date = DATE_TRUNC('day', b.BLOCK_TIMESTAMP) THEN o.PUBKEY_SCRIPT_ADDRESS          END) AS new_addresses     FROM          BITCOIN.CORE.FACT_BLOCKS b         LEFT JOIN BITCOIN.CORE.FACT_TRANSACTIONS t ON b.BLOCK_NUMBER = t.BLOCK_NUMBER         LEFT JOIN BITCOIN.CORE.FACT_OUTPUTS o ON t.TX_ID = o.TX_ID         LEFT JOIN first_appearance fa ON o.PUBKEY_SCRIPT_ADDRESS = fa.PUBKEY_SCRIPT_ADDRESS     GROUP BY          DATE_TRUNC('day', b.BLOCK_TIMESTAMP) ) -- Main query with 7-day moving averages SELECT     date,     AVG(blocks_per_day) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS blocks_per_day_7d_avg,     AVG(transactions_per_day) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS transactions_per_day_7d_avg,     AVG(active_addresses) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS active_addresses_7d_avg,     AVG(new_addresses) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS new_addresses_7d_avg FROM      daily_metrics ORDER BY      date DESC
6580da4c-8825-4cc2-95a1-e676e2eaa06c,Untitled Query,select   date_trunc('d',block_timestamp) as date,   co,   count(distinct tx_id) as num_tx       from anchor.collateral group by 1,2 order by 1
86777166-01db-487e-b900-b7fe84f6e004,Magic Eden Sales With Join copy,-- forked from alitaslimi / Magic Eden Sales With Join @ https://flipsidecrypto.xyz/alitaslimi/q/Ywtf6KMx1tZi/magic-eden-sales-with-join  with ------------------------------ Magic Eden ------------------------------   magic_eden as (     select       transactions.block_timestamp,       transactions.block_number,       transactions.tx_id,       output2.pubkey_script_address AS buyer,       input3.pubkey_script_address AS seller,       output3.value AS amount     from       bitcoin.core.fact_transactions transactions       join bitcoin.core.fact_inputs input3 on transactions.tx_id = input3.tx_id         AND transactions.block_number = input3.block_number       join bitcoin.core.fact_inputs input4 on transactions.tx_id = input4.tx_id         AND transactions.block_number = input4.block_number       join bitcoin.core.fact_outputs output2 on transactions.tx_id = output2.tx_id         AND transactions.block_number = output2.block_number       join bitcoin.core.fact_outputs output3 on transactions.tx_id = output3.tx_id         AND transactions.block_number = output3.block_number       join bitcoin.core.fact_outputs output4 on transactions.tx_id = output4.tx_id         AND transactions.block_number = output4.block_number       join bitcoin.core.fact_outputs output7 on transactions.tx_id = output7.tx_id         AND transactions.block_number = output7.block_number     where       transactions.block_number > 767429       and transactions.block_timestamp::date >= '2023-03-20'       and input3.index = 2       and input4.index = 3       and output2.index = 1       and output3.index = 2       and output4.index = 3       and output7.index = 6       and output4.pubkey_script_address = 'bc1qcq2uv5nk6hec6kvag3wyevp6574qmsm9scjxc2'       and input4.pubkey_script_address = output7.pubkey_script_address   ) ------------------------------ Result ------------------------------ select   block_timestamp::date as "Date",   'Magic Eden' as "Marketplace",   count(distinct buyer) as "Buyers",   sum(amount) as "Volume" from   magic_eden group by   "Date" order by   "Date" desc
2b5c9bc9-f692-42b9-8758-2f627721bc85,Top Contracts by MAA copy,-- forked from fb946135-0bc5-44da-a440-24d1849dd019   SELECT CASE WHEN tx_receiver IN ('token.sweat','tge-lockup.sweat') THEN 'Sweat Economy'      WHEN tx_receiver = 'embr.playember_reserve.near' THEN 'Play Ember'      WHEN tx_receiver in ('market.fewandfar.near', 'onboarding.wallets.fewandfar.near', 'royalties.fewandfar.near','fnf-club.collections.fewandfar.near') THEN 'Few and Far'      WHEN tx_receiver in ('tickets.stlb.near', 'collectables.stlb.near', 'token.stlb.near') THEN 'SeatLab'      WHEN tx_receiver in ('social.near') THEN 'NEAR Social'      WHEN tx_receiver in ('app.nearcrowd.near') THEN 'NEAR Crowd'      WHEN tx_receiver in ('login.learnclub.near') THEN 'Learn NEAR Club'      WHEN tx_receiver in ('boostfarm.ref-labs.near','token.v2.ref-finance.near','v2.ref-finance.near') THEN 'REF'      WHEN tx_receiver in ('marketplace.paras.near','x.paras.near') THEN 'Paras' ELSE LEFT(tx_receiver,20) END AS "Contract Address", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '24 hours' AND tr.block_timestamp < Current_date THEN tx_signer END) as "Past 24 Hours", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '48 hours' AND tr.block_timestamp < Current_date - INTERVAL '24 hours' THEN tx_signer END) as "24-48 Hours Ago", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '24 hours' AND tr.block_timestamp < Current_date THEN tx_signer END) / count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '48 hours' AND tr.block_timestamp < Current_date - INTERVAL '24 hours' THEN tx_signer END) - 1 AS "Daily Trend", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '30 Days' AND tr.block_timestamp < Current_date THEN tx_signer END) as "Past 30 Days", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '60 Days' AND tr.block_timestamp < Current_date - INTERVAL '30 Days' THEN tx_signer END) as "30-60 Days Ago", count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '30 Days' AND tr.block_timestamp < Current_date THEN tx_signer END) / count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '60 Days' AND tr.block_timestamp < Current_date - INTERVAL '30 Days' THEN tx_signer END) - 1 AS "Monthly Trend" FROM near.core.fact_transactions tr where tr.block_timestamp >= CURRENT_DATE - INTERVAL '60 Days' and tr.block_timestamp < Current_date GROUP BY 1 HAVING count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '48 hours' AND tr.block_timestamp < Current_date - INTERVAL '24 hours' THEN tx_signer END) > 10 AND count(DISTINCT CASE WHEN tr.block_timestamp >= CURRENT_DATE - INTERVAL '60 Days' AND tr.block_timestamp < Current_date - INTERVAL '30 Days' THEN tx_signer END)  ORDER BY 5 DESC LIMIT 50
a2e25705-47cc-494b-b377-93283305e0bf,near - rainbow bridge,select * from flipside_prod_db.mdao_near.transactions   where txn_hash = '8o9ZqwNDAxrhsq5BJQ443nkpqVvuXHp9yUrMtsgb1RuS' -- near to aurora    '7yngXGm9mqtJZP9kwLEr1ZftM9GP7FfeD7Cg4wettKFv' -- usn to aurora select * from flipside_prod_db.mdao_near.transfers where txn_hash = '4qkF3KUBJnm9q1yHe8BUVo2HEyapNB3p7Nyx5H4QGVUN' -- near from aurora    'H1JoBVMNiQtBsMP1CrhpQncyFXhjRzP2s2LBTqFvkJWv' -- near from aurora select * from flipside_prod_db.mdao_near.transfers   where txn_hash = '8o9ZqwNDAxrhsq5BJQ443nkpqVvuXHp9yUrMtsgb1RuS';
05d96a7d-61ba-4576-acca-c0d00ab29adb,Untitled Query,
66be68c1-403d-4693-a9a5-19bb34423e15,Current Oracle Exchange Rates ,-- In this query we are pulling the latest prices for all Terra Stablecoins, LUNA, MIR, and ANC -- The luna_exchange_rate column represents the price of the token comparative to LUNA (6.5 UST = 1 LUNA) SELECT    block_timestamp,   symbol,   luna_exchange_rate,   price_usd FROM terra.oracle_prices ORDER BY 1 DESC LIMIT 100
a34e7b6f-900e-48ec-b850-4c02bb162af3,16 ETH bridge january,SELECT 	date_trunc('day', block_timestamp) as date,   -- CASE   -- 	WHEN event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'out'   -- 	WHEN event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'in'   -- END AS direction,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers WHERE 	block_timestamp > '2021-01-15T00:00:00Z'   	AND block_timestamp < '2021-02-28T00:00:00Z'   	-- AND (event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' OR event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')   	AND event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc'   	AND tx_status = 'SUCCEEDED'   	AND (event_currency = 'UST' OR event_currency = 'LUNA') GROUP BY 1,2 ORDER BY 1, 2 desc
2515a143-025d-484a-a6ba-b1d9366550fe,Flow on Flipside,select   * from   flow.core.fact_blocks where   block_timestamp >= sysdate() - interval '1 day' order by   block_height desc limit   10
c7d26b86-e873-402a-8f4a-5ed8fbecffc6,increment fi liquid staking  bo copy,-- forked from adriaparcerisas / increment fi liquid staking  bo @ https://flipsidecrypto.xyz/adriaparcerisas/q/nORNwVhkJJX5/increment-fi-liquid-staking-bo WITH    staked AS (     SELECT        date_trunc('week', fe.block_timestamp) AS date,       COUNT(DISTINCT CASE WHEN fe.event_type = 'Stake' THEN fe.tx_id END) AS n_stake_action,       SUM(CASE WHEN fe.event_type = 'Stake' THEN fe.event_data:flowAmountIn ELSE 0 END) AS flow_staked,       SUM(CASE WHEN fe.event_type = 'Stake' THEN fe.event_data:stFlowAmountOut ELSE 0 END) AS stFlowAmountOut,       COUNT(DISTINCT CASE WHEN fe.event_type = 'Unstake' THEN fe.tx_id END) AS n_unstake_action,       SUM(CASE WHEN fe.event_type = 'Unstake' THEN fe.event_data:lockedFlowAmount ELSE 0 END) AS flow_unstaked,       SUM(CASE WHEN fe.event_type = 'Unstake' THEN fe.event_data:stFlowAmountIn ELSE 0 END) AS stFlowAmountIn     FROM        flow.core.fact_events fe     WHERE        fe.event_contract = 'A.d6f80565193ad727.LiquidStaking'       AND fe.TX_SUCCEEDED       AND fe.block_timestamp::date >= '2022-10-10'       AND (fe.event_type = 'Stake' OR fe.event_type = 'Unstake')     GROUP BY        date_trunc('week', fe.block_timestamp)   ),   flow_price AS (     SELECT        date_trunc('week', timestamp) AS date,       median(price_usd) AS flow_price     FROM        flow.price.fact_prices     WHERE        symbol ILIKE 'flow'     GROUP BY        1    ),   cumulative AS (     SELECT        COALESCE(s.date, u.date) AS month,       COALESCE(s.n_stake_action, 0) AS staking_actions,       COALESCE(u.n_unstake_action, 0) AS unstaking_actions,       ROUND(COALESCE(s.flow_staked, 0), 2) AS volume_staked,       ROUND(COALESCE(u.flow_unstaked, 0), 2) AS volume_unstaked,       ROUND(COALESCE(s.stFlowAmountOut, 0), 2) AS st_flow_tokens_minted,       ROUND(COALESCE(u.stFlowAmountIn, 0), 2) AS st_flow_tokens_burned     FROM        staked s     FULL JOIN        staked u      ON        s.date = u.date   ) SELECT    a.*,  staking_actions-unstaking_actions as net_actions, volume_staked-volume_unstaked as netflow_volume, sum(netflow_volume) over (order by month) as liquid_staked_volume,  st_flow_tokens_minted-st_flow_tokens_burned as net_stflow_tokens, sum(net_stflow_tokens) over (order by month) as stflow_tokens_supply FROM    cumulative a ORDER BY    a.month DESC --count(distinct staker) as stakers, --count(distinct unstaker) as unstakers, --stakers-unstakers as net_stakers,
66e4580d-91d6-497c-a3e2-60924b1c5a0b,Untitled Query,
ab76ae04-3233-48a5-904f-ff5e062ea53c,Top Flow NFT Collections over time copy,-- forked from adriaparcerisas / Top Flow NFT Collections over time @ https://flipsidecrypto.xyz/adriaparcerisas/q/X7b_xgaw94ge/top-flow-nft-collections-over-time WITH prices AS (     SELECT         trunc(timestamp, 'day') AS hour,         token_contract,         AVG(price_usd) AS price_usd     FROM         flow.price.fact_prices     GROUP BY         1, 2 ), Past_24h1 AS (     SELECT         trunc(block_timestamp, 'hour') AS date,         tx_id,         buyer,         currency,         price,         nft_collection     FROM         flow.nft.ez_nft_sales x     WHERE         tx_succeeded = 'true'         and price is not null         and date>=current_date-INTERVAL '1 DAY' and date<trunc(current_date,'hour')          UNION          SELECT         trunc(x.block_timestamp, 'hour') AS date,         x.tx_id,         z.authorizers[0] AS buyer,         x.event_data:salePaymentVaultType AS currency,         x.event_data:salePrice AS price,         x.event_data:nftType AS nft_collection     FROM         flow.core.fact_events x     JOIN         flow.core.fact_transactions z ON x.tx_id = z.tx_id     WHERE         --x.event_contract = 'A.4eb8a10cb9f87357.NFTStorefrontV2'         --AND          x.event_type = 'ListingCompleted'         AND x.event_data:purchased = 'true'         and x.event_data:salePrice is not null         and date>=current_date-INTERVAL '1 DAY' and date<trunc(current_date,'hour') ), Past_24h as ( SELECT     date,     COUNT(DISTINCT tx_id) as "Sales",     COUNT(DISTINCT buyer) AS "Traders",     case when SUM(price) * AVG(price_usd) is null then sum(price) else SUM(price) * AVG(price_usd) end AS "Volume" FROM     Past_24h1 x LEFT JOIN     prices y ON trunc(date,'day') = hour     AND x.currency ILIKE y.token_contract GROUP BY 1 order by 1 desc ), Past_Week1 AS (     SELECT         trunc(block_timestamp, 'hour') AS date,         tx_id,         buyer,         currency,         price,         nft_collection     FROM         flow.nft.ez_nft_sales x     WHERE         tx_succeeded = 'true'         and price is not null         and date>=current_date-INTERVAL '1 WEEK' and date<trunc(current_date,'day')          UNION          SELECT         trunc(x.block_timestamp, 'hour') AS date,         x.tx_id,         z.authorizers[0] AS buyer,         x.event_data:salePaymentVaultType AS currency,         x.event_data:salePrice AS price,         x.event_data:nftType AS nft_collection     FROM         flow.core.fact_events x     JOIN         flow.core.fact_transactions z ON x.tx_id = z.tx_id     WHERE         --x.event_contract = 'A.4eb8a10cb9f87357.NFTStorefrontV2'         --AND          x.event_type = 'ListingCompleted'         AND x.event_data:purchased = 'true'         and x.event_data:salePrice is not null         and date>=current_date-INTERVAL '1 WEEK' and date<trunc(current_date,'day') ), Past_Week as ( SELECT     date,     COUNT(DISTINCT tx_id) as "Sales",     COUNT(DISTINCT buyer) AS "Traders",     case when SUM(price) * AVG(price_usd) is null then sum(price) else SUM(price) * AVG(price_usd) end AS "Volume" FROM     Past_Week1 x LEFT JOIN     prices y ON trunc(date,'day') = hour     AND x.currency ILIKE y.token_contract GROUP BY 1 order by 1 desc ), Past_Month1 AS (     SELECT         trunc(block_timestamp, 'hour') AS day,         tx_id,         buyer,         currency,         price,         nft_collection     FROM         flow.nft.ez_nft_sales x     WHERE         tx_succeeded = 'true'         and price is not null         and day>=current_date-INTERVAL '1 MONTH' and day<trunc(current_date,'day')          UNION          SELECT         trunc(x.block_timestamp, 'hour') AS day,         x.tx_id,         z.authorizers[0] AS buyer,         x.event_data:salePaymentVaultType AS currency,         x.event_data:salePrice AS price,         x.event_data:nftType AS nft_collection     FROM         flow.core.fact_events x     JOIN         flow.core.fact_transactions z ON x.tx_id = z.tx_id     WHERE         --x.event_contract = 'A.4eb8a10cb9f87357.NFTStorefrontV2'         --AND          x.event_type = 'ListingCompleted'         AND x.event_data:purchased = 'true'         and x.event_data:salePrice is not null         and day>=current_date-INTERVAL '1 MONTH' and day<trunc(current_date,'day') ), Past_Month as ( SELECT     trunc(day,'day') as date,     COUNT(DISTINCT tx_id) as "Sales",     COUNT(DISTINCT buyer) AS "Traders",     case when SUM(price) * AVG(price_usd) is null then sum(price) else SUM(price) * AVG(price_usd) end AS "Volume" FROM     Past_Month1 x LEFT JOIN     prices y ON date = hour     AND x.currency ILIKE y.token_contract GROUP BY 1 order by 1 desc ) SELECT     date,     "Sales",     "Traders",     "Volume" FROM     {{Period}} x order by 1 desc
a40ce8e1-39d4-47ec-b636-8deca23a4426,chai volume - recent month [T68],WITH chai AS ( SELECT    -- compute daily volume and tx count   date_trunc('day', block_timestamp) as date,   sum(event_amount) as krt_amount,   sum(event_amount_usd) as usd_amount,   count(distinct tx_id) as transactions FROM terra.transfers WHERE (event_from_address_label = 'chai'          OR event_to_address_label = 'chai')   AND block_timestamp > CURRENT_DATE - 30   AND block_timestamp < CURRENT_DATE GROUP BY 1 ORDER BY 1) SELECT   date,   transactions,   usd_amount,   avg(usd_amount) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_usd,   avg(transactions) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_tx_count FROM chai
cb49de7c-84c3-401a-972b-a4d4de237518,Untitled Query,select *    from ethereum.core.fact_event_logs   -- where tx_hash = '0x32844e66c41bf08a8c3d249d1dd53a404831bc486e094342dc4b79ae9c7aa8d3' where event_name = 'Swap' and origin_to_address = '0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45' limit 100
c21453fe-6914-40fb-8e91-7207ab47bee3,Untitled Query,
e7ce6bdd-228e-4a49-abb4-168c4b610479,2023-04-12 03:06 PM,select * from near.core.fact_receipts limit 10
3e7279f1-0c42-4405-9f33-87e6aa9998bc,Eth Contract Created, 7d ma,with contract_creates AS ( SELECT  DATE_TRUNC("DAY", BLOCK_TIMESTAMP) as day_,TX_HASH,      FROM_ADDRESS as contract_creator, TX_JSON:receipt:contractAddress as resulting_contract      FROM ethereum.core.fact_transactions     WHERE BLOCK_NUMBER > 10176000 AND resulting_contract != 'null'), summation as ( SELECT day_, COUNT(DISTINCT(resulting_contract)) as num_contracts_created  FROM contract_creates GROUP BY day_) select   	day_ as "Date", 	avg(num_contracts_created) over (order by day_ rows between 6 preceding and current row) as "7 Day Moving Avg", 	avg(num_contracts_created) over (order by day_ rows between 13 preceding and current row) as "14 Day Moving Avg" from summation where day_ >= '2022-01-01' order by 1
993b35b9-7410-4fbf-8836-5b3dcf548e84,BTC Network Stats Claude v3,-- First, let's create a CTE to identify the first appearance of each address WITH first_appearance AS (     SELECT         PUBKEY_SCRIPT_ADDRESS,         DATE_TRUNC('week', MIN(BLOCK_TIMESTAMP)) AS first_week     FROM BITCOIN.CORE.FACT_OUTPUTS     WHERE PUBKEY_SCRIPT_ADDRESS IS NOT NULL     GROUP BY PUBKEY_SCRIPT_ADDRESS ), -- Now, let's create our weekly metrics CTE weekly_metrics AS (     SELECT         DATE_TRUNC('week', b.BLOCK_TIMESTAMP) AS week,         COUNT(DISTINCT b.BLOCK_NUMBER) AS blocks_per_week,         COUNT(DISTINCT t.TX_ID) AS transactions_per_week,         COUNT(DISTINCT o.PUBKEY_SCRIPT_ADDRESS) AS active_addresses,         COUNT(DISTINCT CASE              WHEN fa.first_week = DATE_TRUNC('week', b.BLOCK_TIMESTAMP) THEN o.PUBKEY_SCRIPT_ADDRESS          END) AS new_addresses     FROM          BITCOIN.CORE.FACT_BLOCKS b         LEFT JOIN BITCOIN.CORE.FACT_TRANSACTIONS t ON b.BLOCK_NUMBER = t.BLOCK_NUMBER         LEFT JOIN BITCOIN.CORE.FACT_OUTPUTS o ON t.TX_ID = o.TX_ID         LEFT JOIN first_appearance fa ON o.PUBKEY_SCRIPT_ADDRESS = fa.PUBKEY_SCRIPT_ADDRESS     GROUP BY          DATE_TRUNC('week', b.BLOCK_TIMESTAMP) ) -- Main query with 4-week moving averages SELECT     week,     AVG(blocks_per_week) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS blocks_per_week_4w_avg,     AVG(transactions_per_week) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS transactions_per_week_4w_avg,     AVG(active_addresses) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS active_addresses_4w_avg,     AVG(new_addresses) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS new_addresses_4w_avg FROM      weekly_metrics ORDER BY      week DESC
3bff51fc-75c9-4c03-9a5d-ff377b195808,Anchor and Mirror Address Balances copy,WITH balances AS ( SELECT   date,   address,   balance, CASE   WHEN address = 'terra169urmlm8wcltyjsrn7gedheh7dker69ujmerv2' THEN 'mirror' -- mirror mint   WHEN address = 'terra1zpr8tq3ts96mthcdkukmqq4y9lhw0ycevsnw89' THEN 'mirror' -- mirror limit orders   WHEN address = 'terra17yap3mhph35pcwvhza38c2lkj7gzywzy05h7l0' THEN 'anchor' -- bluna reward   WHEN address = 'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9' THEN 'anchor' -- bETH rewards   ELSE address_label END AS label FROM terra.daily_balances WHERE currency = 'UST' 	AND       (date = CURRENT_DATE       OR date LIKE '2020-12-03%'       OR date LIKE '2021-03-17%')     AND (label = 'anchor' OR label = 'mirror')     AND address != 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' ), epochs AS ( SELECT   date,   sum(balance) as ust_balance FROM terra.daily_balances WHERE currency = 'UST'   AND (date LIKE '2020-12-03%' 	OR date LIKE '2021-03-17%'     OR date = CURRENT_DATE) GROUP BY 1)    SELECT   CASE     WHEN sub.date LIKE '2020%' THEN 'Mirror Launch'     WHEN sub.date LIKE '2021-03%' THEN 'Anchor Launch'     WHEN sub.date = CURRENT_DATE THEN 'Today'   END AS event,   label,   ust_balance,   CASE     WHEN ust_balance - LAG(ust_balance) OVER (PARTITION BY label ORDER BY sub.date) IS NULL THEN 0     WHEN ust_balance - LAG(ust_balance) OVER (PARTITION BY label ORDER BY sub.date) IS NOT NULL THEN ust_balance - LAG(ust_balance) OVER (PARTITION BY label ORDER BY sub.date)   END as ust_increase,   round(ust_increase / sub.days_between,2) as avg_daily_ust,   CASE     WHEN avg_daily_ust IS NULL THEN NULL     ELSE round(avg_daily_ust_from_protocol / avg_daily_ust * 100,2)   END AS pct_from_protocol,   protocol_ust_balance,   sub.days_between,   round(avg_daily_ust_from_protocol,2) as avg_daily_ust_from_protocol FROM (SELECT   date,   label,   sum(balance) as protocol_ust_balance,   protocol_ust_balance - LAG(protocol_ust_balance) OVER (PARTITION BY label ORDER BY date) as protocol_ust_increase,   DATEDIFF(day, LAG(date) OVER (PARTITION BY label ORDER BY date), date) as days_between,   protocol_ust_increase / days_between as avg_daily_ust_from_protocol FROM balances GROUP BY 1,2 ORDER BY 2,1) sub JOIN epochs   ON sub.date = epochs.date ORDER BY 2 desc, sub.date
f5d9b6c2-32d4-479b-91e1-b40a1feca6b4,Untitled Query,
26e4af00-f4e6-4202-902f-1d0fb154f504,Untitled Query,select * from terra.msgs where tx_id = '7CF8BA172FA3B3C45ADF36AD421A6ABAE1B063AC56189F53943C113248BD6BBE'
55369138-c9d9-476d-9226-b38eabb1367c,Untitled Query,select * from solana.core.fact_nft_sales where  MINT='AMZS6TbsovrPA2ifaKhYVxzdq9cocb1YgGvG7os9XQnG' order by block_timestamp desc
31d63a56-e58d-45d2-9571-b5bfd2b0b162,query 3,with transactionn_gas_used as (     select block_timestamp, gas_price, gas_used, gas_price * gas_used as gas_amount, tx_hash     from avalanche.core.fact_transactions ) select date_trunc('day', block_timestamp) as block_date,     count(*) as transaction_count,     avg(gas_price) / 1e9 as average_gas_price,     sum(gas_used) / 1e9 as sum_gas_used,     avg(gas_used) as average_gas_used,     sum(gas_amount) / 1e18 as sum_gas_amount,     avg(gas_amount) / 1e18 as average_gas_amount from transactionn_gas_used group by block_date order by block_date
227c749d-829e-4a4e-88a0-de795f3de813,Untitled Query,select * from flipside_prod_db.mdao_near.transactions limit 10;
e71c0382-541f-460b-a66f-144cfa587767,Untitled Query,select * from near.core.ez_usn_supply limit 1
38e1ff2c-8476-48f1-a2ab-140056ac2ea5,RUNE Upgrade Events [THOR2],WITH rune_burn AS (   SELECT     date_trunc('day', block_timestamp) as date,     burn_asset,     sum(rune_amount) as gross_rune,     sum(rune_amount_usd) as gross_usd   FROM thorchain.upgrades   WHERE date > '2021-09-15T00:00:00Z'   GROUP BY 1, 2   ) SELECT *,   sum(gross_rune) OVER (PARTITION BY burn_asset ORDER BY date) as cumulative_rune,   sum(gross_usd) OVER (PARTITION BY burn_asset ORDER BY date) as cumulative_usd FROM rune_burn ORDER BY 1
8805f192-e00f-4c9e-b14b-50264f52c243,LUNA Circulating Supply vs Seigniorage since Col-5,WITH table1 as (select date_trunc('day',date) as day,   sum(balance) as circ_supply from terra.daily_balances   where currency = 'LUNA'   AND address != 'terra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3nln0mh'   and balance > 0   and date >= '2022-01-01' and address_label_subtype is null group by 1  order by 2 desc),   table2 as (select date_trunc('week', day) as week,   avg(circ_supply) as circulating_Lunaz   from table1   group by 1), lunaburn as (select date_trunc('week',block_timestamp) as week, sum(offer_amount) as luna_burn, sum(luna_burn) over (order by week) as cum_luna_burn, sum(offer_amount_usd) as luna_burn_usd, lag(luna_burn,0) over (order by week) as luna_burn_daily_increment, lag(luna_burn_usd,0) over (order by week) as luna_burn_usd_daily_increment, case  when luna_burn_usd_daily_increment > 125000000 then 'Reached_Cap' else 'Does_not_reach' end as periods, 125000000 as cap_burn from terra.swaps where week >= '2021-06-01' and ask_currency = 'UST' and offer_currency = 'LUNA' and tx_status = 'SUCCEEDED' group by 1), deposits as ( select date_trunc('week', block_timestamp) as week, sum(deposit_amount_usd) as deposit, sum(deposit) over (order by week) as total_accumulated_deposits from anchor.deposits group by 1 order by 1 ), redemptions as ( select date_trunc('week', block_timestamp) as week, sum(amount) as redeems, sum(redeems) over (order by week) as total_accumulated_redeems from anchor.redeem group by 1 order by 1), net_deposits as (select a.week, total_accumulated_deposits - total_accumulated_redeems as net_accumulated_deposits from deposits a join redemptions b  on a.week = b.week order by 1), ma_luna_burn as (select week, avg(luna_burn_usd) OVER(ORDER BY week ROWS BETWEEN 1 PRECEDING AND CURRENT ROW ) as two_week_moving_average, avg(luna_burn_usd) OVER(ORDER BY week ROWS BETWEEN 6 PRECEDING AND CURRENT ROW ) as weekly_moving_average from lunaburn), table3 as (select a.week, luna_burn_daily_increment as "LUNA Seigniorage per Week (in LUNA)", luna_burn_usd_daily_increment as "LUNA Seigniorage per Week (in USD)", sum(luna_burn_daily_increment) over (order by a.week) as "Cumulative LUNA Seigniorage per Week (in LUNA)", sum(luna_burn_usd_daily_increment) over (order by a.week) as "Cumulative LUNA Seigniorage per Week (in USD)", periods, cap_burn, net_accumulated_deposits, weekly_moving_average from net_deposits a  join lunaburn b  on a.week = b.week join ma_luna_burn c  on a.week = c.week where a.week >= '2022-01-01') select a.week, circulating_Lunaz as "Circulating Supply of LUNA", "Cumulative LUNA Seigniorage per Week (in LUNA)" from table2 a  join table3 b  on a.week = b.week --and a.week <= '2021-11-30'
1cc1cb0c-2f83-432c-8509-b19fe8a89551,Untitled Query,-- SELECT  --   DISTINCT PROJECT_NAME, --   COUNT (DISTINCT tx_hash) as unique_mint_txs, --   COUNT (DISTINCT NFT_TO_ADDRESS) as unique_addresses, --   SUM (MINT_PRICE_ETH) as eth_spent, --   SUM (MINT_PRICE_USD) as usd_spent, --   SUM (TX_FEE) as gas, --   SUM (NFT_COUNT) as mints_count --   FROM ethereum.core.ez_nft_mints -- where BLOCK_TIMESTAMP::DATE between '2022-08-16' AND '2022-08-18' --   AND project_name IS NOT NULL --   group by 1 --   order by 6 DESC select * from ethereum.core.ez_nft_mints   where project_name = 'Finiliar'   order by nft_count desc;
ee735c82-030e-447f-945f-2832b326a271,ETH - out,with bridge_out as (   select      block_timestamp,   date_trunc('hour', block_timestamp) as hour,     tx_hash,     contract_address,     contract_name,     coalesce(decoded_log:dst::string, decoded_log:to::string) as dst_addr,     coalesce(decoded_log:src::string, decoded_log:from::string) as src_addr,     coalesce(decoded_log:wad::number, decoded_log:value::number) as raw_amount,     origin_from_address as sender_address,     iff(       contract_address in (         '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',         '0x6b175474e89094c44da98b954eedeac495271d0f'       ),        18,        6     ) as decimals,     raw_amount / pow(10, decimals) as adj_amount,     topics   from ethereum.core.ez_decoded_event_logs   where true   -- tx_hash = lower('0x1d748732a70d1e90f8dfe0bdb528e608168b6f59fb0682e43306235dd4e080f8')     -- and block_timestamp::date >= '2023-04-18'     -- and origin_to_address =  -- ETH bridge     and origin_to_address in (       '0x8898b472c54c31894e3b9bb83cea802a5d0e63c6', -- Ethereum bridge       '0x7e4490e97c8243d844719f26a0b47fd5a59fdc2e' -- ETH Bridge Relayer     )     and event_name = 'Transfer'     and tx_status = 'SUCCESS' ), prices as (   select     hour,     token_address,     price   from crosschain.core.fact_hourly_prices   where token_address in (     select distinct contract_address from bridge_out     ) ), usd as (   select     block_timestamp,     contract_address,     contract_name,     price,     adj_amount,     adj_amount * price as vol_usd,     sender_address,     tx_hash   from bridge_out b   left join prices p on     b.hour = p.hour     and b.contract_address = p.token_address ) select   date_trunc('week', block_timestamp) as day,   contract_name as token,   sum(adj_amount) as volume_token,   sum(vol_usd) as usd_vol,   count(distinct sender_address) as unique_senders,   count(distinct tx_hash) as txs from usd group by 1,2 order by 1,2
ee245484-0bad-4bad-ace1-65c30bf05862,stablecoin value over time [T61],WITH balances AS (   SELECT 	  DATE,       CASE         WHEN currency = 'ust' or currency = 'UST' THEN 'UUSD'         WHEN currency = 'krw' or currency = 'KRT' THEN 'UKRW'         WHEN currency = 'mnt' or currency = 'MNT' THEN 'UMNT'         WHEN currency = 'sdr' or currency = 'SDR' THEN 'USDR'         ELSE currency       END AS currency_adj, 	  SUM(BALANCE) as native_balance   FROM terra.daily_balances   WHERE DATE > GETDATE() - interval '6 months'     AND currency != 'LUNA'   GROUP BY 1,2), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     currency,     avg(price_usd) as fx_rate   FROM terra.oracle_prices   WHERE currency NOT LIKE 'terra%'     AND currency != 'uluna'     AND date > CURRENT_DATE - INTERVAL '6 months'   GROUP BY 1, 2 ) SELECT   balances.date,   balances.currency_adj,   fx_rate,   CASE     WHEN balances.currency_adj IN ('UUSD', 'UKRW', 'UMNT', 'USDR') THEN native_balance     ELSE native_balance / pow(10,6)   END AS adjusted_balance,   fx_rate * adjusted_balance as volume FROM balances JOIN prices   ON (prices.date = balances.date AND UPPER(prices.currency) = balances.currency_adj) ORDER BY 1
ee6dd429-58e1-4d88-bf52-3cfff4ba39a2,Untitled Query,select * from terra.msg_events where tx_id = '381F2A09249137FE9168D94E2FD701DA57E9C1D610F4C840255278F346518AFC'
eea61187-8113-4d74-8631-e4bb32a24fa6,Fees over time on polygon [P7],SELECT   date_trunc('day', block_timestamp) as date,   CASE     WHEN success = 'FALSE' THEN 'failed'     WHEN success = 'TRUE' THEN 'successful'   END AS status,   sum(fee) as daily_fee,   sum(fee_usd) as daily_fee_usd FROM polygon.transactions WHERE block_timestamp > '2021-06-01T00:00:00Z' GROUP BY 1, 2
ef1deeec-fb83-43a5-b4ba-be72d6e853f4,Terra Bridge - BSC Users [T104],with tb_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_attributes:recipient = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     AND block_timestamp > '2021-01-24T00:00:00Z'   ), tb_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_attributes:sender = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     and block_timestamp > '2021-01-24T00:00:00Z'   ), tb_wallets AS (   SELECT * FROM tb_outbound   UNION   SELECT * FROM tb_inbound   ), tb_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_wallets   FROM tb_wallets   GROUP BY 1   ), prices as (   select   	date_trunc('day', block_timestamp) as date,   	avg(price_usd) as avg_price   from terra.oracle_prices   where symbol = 'LUNA'   group by 1 ) select 	*,   	avg(unique_wallets) over (order by tb_unique.date rows between 6 preceding and current row) as weekly_ma from tb_unique left join prices on tb_unique.date = prices.date
ef0c0bbb-c171-41c4-86e2-54c1dfcb0feb,usdc movement - mayday crash,SELECT    contract_address,   to_label,   sum(amount) as total_amount FROM ethereum.udm_events WHERE   to_label is not null AND   amount > 0 AND   event_type = 'erc20_transfer' AND   symbol = 'USDC' AND   block_timestamp LIKE '2021-05-22%' GROUP BY contract_address, to_label ORDER BY total_amount DESC;
d09a5f48-be97-4bae-9a1c-ee2928fd3790,Untitled Query,show views in schema near.core
d226388b-1c8e-4c28-a701-faf6094660ab,2023-03-14 03:17 PM,
f22baba7-8ff5-4dcd-9ad5-07eeafdf3006,Untitled Query,select * from terra.classic.fact_blocks limit 1;
f21c4060-e81d-4702-bbab-dc304c1662bd,Flow Payers - May 2 2023,with   payer_date as (     select       payer,       min(block_timestamp)::date as first_tx_date     from       flow.core.fact_transactions     group by       1   ) select   count(distinct payer) as distinct_new_payers from   payer_date where   first_tx_date = '2023-05-02'
f2138310-52f3-4c90-8106-b2ae1ec7ab71,Avg Fee on FAILURE on Polygon vs ETH [P7],WITH matic AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(fee) as avg_fee_polygon,     sum(fee_usd) as avg_fee_usd_polygon   FROM polygon.transactions   WHERE block_timestamp > '2021-06-01T00:00:00Z'     AND success = 'FALSE'   GROUP BY 1 ), eth AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(tx_fee) as avg_fee_ethereum,     sum(fee_usd) as avg_fee_usd_ethereum   FROM ethereum.transactions   WHERE block_timestamp > '2021-06-01T00:00:00Z'     AND success = 'FALSE'   GROUP BY 1 ) SELECT   matic.date,   SUM(avg_fee_usd_polygon) OVER (ORDER BY matic.date) as polygon_cumulative_fee_usd,   SUM(avg_fee_usd_ethereum) OVER (ORDER BY eth.date) as ethereum_cumulative_fee_usd,   SUM(avg_fee_ethereum) OVER (ORDER BY eth.date) as ethereum_cumulative_fee    FROM matic JOIN eth ON matic.date = eth.date ORDER BY 1
3cca7316-ae08-47f4-a86d-4f64d2472a58,2022-12-06 01:56 PM,select   * from   flow.core.ez_nft_sales limit   10
f340df4a-0b24-4f23-bec2-c41ce2e251b8,Untitled Query,select * from terra.core.fact_messages limit 10;
f5c906f9-bbed-4c38-a370-cab0335fbdc3,Untitled Query,select 	date_trunc('d', block_timestamp) as _date, 	sum(price) as amount from flow.core.fact_nft_sales where nft_collection like '%TopShot%' group by 1 order by 1
f5a9bd6b-4293-4d14-91c6-fd24d0982aa4,TNS Gov Staking,with unstake as (   select     date_trunc('h', block_timestamp) as date,     sum(msg_value:execute_msg:withdraw_voting_tokens:amount / pow(10,6)) as amount   from terra.msgs   where tx_status = 'SUCCEEDED'     and block_timestamp > '2021-12-24T00:00:00Z'     and msg_value:execute_msg like '%withdraw_voting_tokens%'     and msg_value:contract = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9'     group by 1 ), stake as (   select     date_trunc('h', block_timestamp) as date,     sum(msg_value:execute_msg:send:amount / pow(10,6)) as amount   from terra.msgs   where tx_status = 'SUCCEEDED'     and block_timestamp > '2021-12-24T00:00:00Z'     and msg_value:execute_msg:send:msg = 'eyJzdGFrZV92b3RpbmdfdG9rZW5zIjp7fX0='     and msg_value:execute_msg:send:contract = 'terra1a5thpf2gdrrneewjkutyz5q6zr2kn8ymg0cxn9'     and msg_value:contract = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y'   group by 1 ), net_staking as (   select 	stake.date as date,     stake.amount as stake_amount,   	unstake.amount as unstake_amount,   	stake_amount - unstake_amount as net_hour_change   from stake   left join unstake using (date) ),    claim_txs as (   select   	block_timestamp,   	tx_id,   	event_attributes:to as claimant,   	event_attributes:"0_amount" / pow(10,6) as amount      from terra.msg_events   WHERE event_type = 'from_contract'       AND event_attributes:"0_contract_address" = 'terra1ua7mgqjjx04k3syhl0ast3hujy5tfu9440srp9' -- tns airdrop contract       AND event_attributes:"1_contract_address" = 'terra14vz4v8adanzph278xyeggll4tfww7teh0xtw2y' -- tns token contract       AND event_attributes:"0_action" = 'claim'       AND tx_status = 'SUCCEEDED'       AND block_timestamp > '2021-12-23T12:00:00Z' ),    claims AS (   SELECT     date_trunc('h', block_timestamp) as date,     sum(amount) as amount,   	count(distinct claimant) as unique_wallets,   	count(1) as transactions   FROM claim_txs   GROUP BY 1 ), combo as (   select   	claims.date as date,   	claims.amount as claim_amount,   	coalesce(net_staking.stake_amount,0) as stake_amount,   	coalesce(net_staking.unstake_amount,0) as unstake_amount,   	coalesce(net_staking.net_hour_change,0) as net_stake_amount   from claims   left join net_staking using (date) ), final as (   select   	*,   	sum(claim_amount) over (order by date) as cumsum_claim_amount,   	sum(net_stake_amount) over (order by date) as cumsum_stake_amount   from combo ) select * from final
3dfd39af-ba57-4d82-b977-fc9a739d9682,Anchor Earn - Balances and Behavior - max deposit 1 of 2 [T123],-- updated w col-5 data  WITH    redemptions as (   select      date_trunc('d', block_timestamp) as date,     sum(event_attributes:redeem_amount::float) / pow(10,6) as redemption_amount,     avg(event_attributes:redeem_amount::float) / pow(10,6) as avg_redemption,     min(event_attributes:redeem_amount::float) / pow(10,6) as min_redemption,     max(event_attributes:redeem_amount::float) / pow(10,6) as max_redemption, 	count(1) as redemption_tx_count   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   group by 1  -- below returns aUST not UST      --  select  --    date_trunc('day', block_timestamp) as date,  --    sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount,  --    avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption,  --    min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption,  --    max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, 	-- count(1) as redemption_tx_count  --  from terra.msgs  --  where tx_status = 'SUCCEEDED'  --  	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract  --  	and   --  		-- col 4  --  		(msg_value:execute_msg:send:msg LIKE '%redeem_stable%'  --  		or  --  		-- col 5  --    		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract  --  			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=') --col 5 withdraw message  --  	)  --  group by 1 ), all_deposit as (   SELECT     date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount,   	avg(msg_value:coins[0]:amount::float) / pow(10,6) as avg_deposit,   	min(msg_value:coins[0]:amount::float) / pow(10,6) as min_deposit,   	max(msg_value:coins[0]:amount::float) / pow(10,6) as max_deposit,   	count(1) as deposit_tx_count   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1 ), combined_activity as (   select     *,     deposit_amount - redemption_amount as net_depositor_change   from all_deposit   left join redemptions using (date) ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     avg(event_attributes:"0_repay_amount"::float) / pow(10,6) as avg_repay,     min(event_attributes:"0_repay_amount"::float) / pow(10,6) as min_repay,     max(event_attributes:"0_repay_amount"::float) / pow(10,6) as max_repay,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1 ), anchor_earn as (   select   	combined_activity.date,   	combined_activity.deposit_amount,   	combined_activity.avg_deposit,   	combined_activity.min_deposit,   	combined_activity.max_deposit,   	combined_activity.deposit_tx_count,   	combined_activity.redemption_amount,   	combined_activity.avg_redemption,   	combined_activity.min_redemption,   	combined_activity.max_redemption,   	combined_activity.redemption_tx_count,   	combined_activity.net_depositor_change,     -- handle null values cause liqidations don't happen daily   	coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   	coalesce(liquidations.avg_repay,0) as avg_repay,   	coalesce(liquidations.min_repay,0) as min_repay,   	coalesce(liquidations.max_repay,0) as max_repay   from combined_activity   left join liquidations using (date) ),    aggregations as (   SELECT     *,     net_depositor_change as daily_change,     SUM(deposit_amount) OVER (ORDER BY date) as cumulative_deposits,     -SUM(redemption_amount) OVER (ORDER BY date) as cumulative_redemptions,     -SUM(loan_autorepay_amount) OVER (ORDER BY date) as cumulative_liquidations,     SUM(daily_change) OVER (ORDER BY date) as cumulative_anchor_earn,   	avg(avg_deposit) over (order by date rows between 6 preceding and current row) as deposit_ma,   	avg(avg_redemption) over (order by date rows between 6 preceding and current row) as redemption_ma,   	avg(avg_repay) over (order by date rows between 6 preceding and current row) as repay_ma,   	avg(deposit_tx_count) over (order by date rows between 6 preceding and current row) as deposit_tx_ma,   	avg(redemption_tx_count) over (order by date rows between 6 preceding and current row) as redemption_tx_ma,   	avg(max_deposit) over (order by date rows between 6 preceding and current row) as max_deposit_ma,   	avg(max_redemption) over (order by date rows between 6 preceding and current row) as max_redemption_ma   FROM anchor_earn   ORDER BY 1   ), yield_reserve as (   SELECT     date,     balance as yield_reserve   FROM terra.daily_balances   WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   	AND currency = 'UST' ), final as (   select * from aggregations   left join yield_reserve using (date) ) select * from final where date < '2021-08-18T00:00:00Z'
f810a8bd-4d26-4509-be82-4a0d53afaa38,Untitled Query,WITH HARMONY_UST_VOLUME AS (  -- part 2 -- volume from transfers and smart contract interaction + unique users  SELECT   date(block_timestamp) as date,   tx_hash,   from_address,   a.pool_name as from_pool,   to_address,   b.pool_name as to_pool,   case when from_Pool is null then to_Pool else from_pool end as pool_swapped, -- where are the pools the funds are moving to   raw_amount/pow(10,18) as amount FROM mdao_harmony.transfers   LEFT JOIN mdao_harmony.liquidity_pools a ON from_address = a.pool_address   LEFT JOIN mdao_harmony.liquidity_pools b ON to_address = b.pool_address WHERE contract_address = '0x224e64ec1bdce3870a6a6c777edd450454068fec' -- UST address  ), HARMONY_FIRST_TX AS (    SELECT   tx_hash,   -- from_address,   min(date(block_timestamp)) as min_date FROM mdao_harmony.txs   WHERE tx_hash IN (SELECT distinct tx_hash FROM HARMONY_UST_VOLUME)   GROUP BY 1 ) select * from harmony_first_tx
d52e2380-6b97-4d7c-b722-099b6ebcc1ff,CRV Token on DEX Swaps [C1],SELECT    date_trunc('day', block_timestamp) as day,   CASE     WHEN (to_label LIKE 'uni%' OR from_label LIKE 'uni%') THEN 'uni'     WHEN (to_label LIKE 'sushi%' OR from_label LIKE 'sushi%') THEN 'sushi'     WHEN (to_label LIKE 'curve%' OR from_label LIKE 'curve%') THEN 'curve'   END as swap,   count(*) FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - INTERVAL '90 days'   AND (to_label LIKE 'uni%'   OR from_label LIKE 'uni%'   OR to_label LIKE 'sushi%'   OR from_label LIKE 'sushi%'   OR to_label LIKE 'curve%'   OR from_label LIKE 'curve%') GROUP BY 1,2
fa383ba6-d6fe-47fa-a7b7-83b832f530ad,Untitled Query,-- select * from osmosis.core.fact_blocks limit 10 select * from near.core.fact_transactions limit 10
fa6ccaef-36ff-4b62-827c-cfe0fd74fd5e,bridges,SELECT date_trunc('day', block_timestamp) as block_day,   EVENT_CURRENCY,   sum(event_amount_usd) FROM terra.transfers WHERE EVENT_FROM_ADDRESS_NAME LIKE '%shuttle'   AND block_timestamp > GETDATE() - interval '6 months'   AND EVENT_CURRENCY IS NOT NULL GROUP BY 1, 2 ORDER BY 1;
fa3a50dc-e491-4f1a-927c-539c3401cb38,LunaX Mints [S2],with lunax_mints as (   select     block_timestamp,     event_attributes:to as depositor,     event_attributes:amount / pow(10,6) as amount   from terra.msg_events   where block_timestamp > '2021-12-07T00:00:00Z' -- exclude anything before launch     and event_type = 'from_contract'     and event_attributes:action = 'mint'     and event_attributes:contract_address = 'terra17y9qkl8dfkeg4py7n0g5407emqnemc3yqk5rup' -- LunaX token ), aggregations as (   select     date_trunc('day', block_timestamp) as date,   	count(depositor) as total_depositors,     count(distinct depositor) as unique_depositors,     sum(amount) as amount   from lunax_mints   group by 1 ), final as (   select     *,   	sum(amount) over (order by date) as cum_sum   from aggregations ) select * from final
fae9b911-1803-4eb4-8665-28175a0ec052,Aurora Contract - Total User Interacted copy,-- forked from Yousefi_1994 / Aurora Contract - Total User Interacted @ https://flipsidecrypto.xyz/Yousefi_1994/q/2023-04-23-06-00-pm-cPX11m with -- near_contract_address as ( --   select  --     distinct address  --     from near.core.dim_address_labels -- ), user_interacted_with_aurora_transactions as (   select      tx_hash,     block_timestamp,     tx_signer,     transaction_fee * pow(10, -24) as fee     from near.core.fact_transactions     where tx_status = 'Success'     and tx_receiver in ('aurora')     and tx_signer not in ('aurora')     and tx_signer not ilike '%.aurora'     -- and tx_signer not in (select address from near_contract_address)     and block_timestamp >= current_date - interval '3 days' ), aurora_recs as ( select    -- count(distinct tx_hash) as "Number of Interactions Transactions with the Contract",   -- count(distinct tx_signer) as "Number of Users Have Interacted with the Contract",   -- round(sum(fee), 2) as "Total Fee Used for Interactions with the Contract (NEAR)",   -- round(count(distinct tx_hash) / count(distinct (date_trunc('{{Date_Trunc}}', block_timestamp)))) as "Average Interactions Transactions with the Contract per Date Trunc",   -- round(count(distinct tx_hash) / count(distinct tx_signer)) as "Average Interactions Transactions with the Contract per User"   * from near.core.fact_receipts where tx_hash in (   select distinct tx_hash    from user_interacted_with_aurora_transactions    ) ) select * from aurora_recs order by tx_hash, block_id
faf8e353-127b-46e5-add2-a061199320e4,[terradash] Anchor Earn Balance,with deposits as (   select   	date_trunc('d', block_timestamp) as date,   	sum(deposit_amount) as deposit_amount   from anchor.deposits   group by 1    ), redemptions as (   select   	date_trunc('d', block_timestamp) as date,   	sum(amount) as redeem_amount   from anchor.redeem   group by 1    ), combo as (   select * from deposits   left join redemptions using (date) ), net_daily as (   select   	*,   	deposit_amount - redeem_amount as net_daily_amount   from combo    ), earn as (   select   	*,   	sum(net_daily_amount) over (order by date) as z_cumulative_sum   from net_daily   order by 1    ), aust_price as (   select   	date_trunc('d', block_timestamp) as date,   	avg(deposit_amount / mint_amount) as aust_price   from anchor.deposits   group by 1 ), bal_v1_est as (   select   	earn.date,   	z_cumulative_sum,   	aust_price,   	z_cumulative_sum * aust_price as total_bal   from earn   left join aust_price using (date)   order by 1    )    select * from bal_v1_est
fb8c8050-a592-4db1-bfd5-30a2356eeb70,bETH Supply,SELECT * FROM terra.msg_events -- WHERE address = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' -- WHERE event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' WHERE event_attributes::string LIKE '%terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun%'   AND event_attributes:action != 'feed_prices'   AND block_timestamp > '2021-08-12T00:00:00Z'   AND block_timestamp < '2021-08-15T00:00:00Z' LIMIT 100
4dc1d6ae-1f26-422d-9252-71b9f4a3a1b5,PartTimeDevs,WITH monthly_contributions AS (     WITH RAW AS (     select *     from   near.core.fact_developer_activity     where    endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week )     SELECT          repo_owner,         repo_name,         login as contributor,         DATE_TRUNC('MONTH', week_date) as month,  -- Truncate date to the month         COUNT(DISTINCT week_date) as days_contributed  -- Count of unique days contributed within the month     FROM numbered_data     WHERE row_num = 1     GROUP BY repo_owner, repo_name, contributor, month ) SELECT * FROM monthly_contributions WHERE days_contributed < 10  -- Part-Time contributors contributed fewer than 10 days in a month ORDER BY month;
fe5d68b0-7c9c-4d30-bb13-b61d79ca20f8,16 ETH bridge december,SELECT 	date_trunc('day', block_timestamp) as date,   -- CASE   -- 	WHEN event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'out'   -- 	WHEN event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' THEN 'in'   -- END AS direction,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers WHERE 	block_timestamp > '2020-12-01T00:00:00Z'   	AND block_timestamp < '2021-01-15T00:00:00Z'   	-- AND (event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' OR event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')   	AND event_to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc'   	AND tx_status = 'SUCCEEDED'   	AND (event_currency = 'UST' OR event_currency = 'LUNA') GROUP BY 1,2 ORDER BY 1
758c393c-0142-45af-888b-aacd0af3d621,single liquidation,select * from terra.msg_events where tx_id = '2604D8F51F9C4D43FC7576B4C428C7CAA53C3BE5BDAD9C8253F96323DDE9A258'
2bb6814d-edef-4f60-bd90-3c908344610b,2022-12-10 05:24 PM,with flow_data as ( select    block_timestamp,   tx_id,   buyer   from flow.core.ez_nft_sales    )      -- flow as (   -- select    -- trunc(block_timestamp,'{{granularity}}') as date,   -- count(distinct tx_id) as transactions,   -- count(distinct buyer) as nft_users,   -- sum(price) as volume_in_sales     -- from flow_data where date >= CURRENT_DATE - INTERVAL '{{period}}'   -- group by 1   -- ), select date_trunc('month',block_timestamp) as _month,    count(distinct tx_id) as tx_count,   sum(tx_count) over (order by _month) as cumulative   from flow_data  group by 1   -- where block_timestamp::date >= '2022-01-01'
75abe429-4884-4942-8577-a5b4b1f86577,Untitled Query,SELECT     date_trunc('week', date) as week,     avg(balance) as total_luna_staked    FROM terra.daily_balances    -- WHERE DATEDIFF(day, date, GETDATE()) between 0 and 60     WHERE address = 'terra1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3nln0mh' and currency = 'LUNA' and balance_type = 'liquid'    GROUP BY week ORDER BY week
ff5087fa-7355-4995-aaaf-abf5e8d2b3ff,pudgy penguin sales by band,SELECT   * FROM ethereum.nft_metadata -- WHERE created_at_tx_id = '0x6e22c553d02b7fd9e70dfe064e5931436963e9f26798b869cb9886f50130b2a5' -- my purchase WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8' -- penguin  --   AND token_id = '3544' LIMIT 3
ff7a72c7-77fe-42f4-858c-a9084b4d290c,recent terra fees [T45],WITH rates AS (   SELECT   	date_trunc('day', block_timestamp) as date,   	currency,   	avg(price_usd) as fx_rate   FROM terra.oracle_prices   WHERE block_timestamp > CURRENT_DATE - interval '1 week'   GROUP BY 1, 2 ), fees AS  (   SELECT     date_trunc('day', block_timestamp) as date,     fee[0]:denom::string as currency,     sum(fee[0]:amount)/POW(10,6) as fee,   	count(*) as num_events   FROM terra.transactions   WHERE currency IS NOT NULL   	AND tx_status = 'SUCCEEDED'   	AND block_timestamp > CURRENT_DATE - interval '1 week'   GROUP BY 1,2 )    SELECT   week,     CASE   	  WHEN tx_currency = 'uusd' THEN 'uusd'   	  WHEN tx_currency = 'ukrw' THEN 'ukrw'   	  WHEN tx_currency = 'uluna' THEN 'uluna'   	ELSE 'other'   END AS fee_currency,   sum(terra_fee),   sum(num_events),   sum(fee) as native_fee FROM ( SELECT   *,   fees.currency as tx_currency,   fees.date as week,   (fee * fx_rate) as terra_fee FROM fees JOIN rates   ON (rates.date = fees.date AND rates.currency = fees.currency) ) GROUP BY 1, 2 ORDER BY 1
764bc1e5-fd53-40c7-a183-8239e0f3749d,Untitled Query,select * from gnosis.core.ez_xdai_transfers limit 100;
ea6f4fed-fe1c-4cac-9e63-00ea7ae109c5,NEAR Actions - JSON Decoding Examples,select   tx_hash,   block_id,   signer_id,   node,   node_data,   typeof(node_data:graph),   try_parse_json(node_data) as node_data_parsed,   node_data:graph as json_data,   parse_json(node_data) :"like" as json_data_parse,   node_data:graph:key as keys,   try_parse_json(node_data:graph) :key as keys_parsed,   parse_json(parse_json(parse_json(node_data) :"like") :"key") :"blockHeight" as og_post_id,   parse_json(json_data) :key:blockHeight as test1 from   near.social.fact_decoded_actions where   node = 'index'   -- and array_contains('like' :: variant, object_keys(node_data)) and node_data::string ilike '%ciocan%' limit   50
d30169f5-e116-4f99-bcc4-b47a7123dc76,App by Widget,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date >= '2022-10-01'     and tx_hash != '56MWdW7NPvfsy6bNctxe3fn6oVP3NfzLoQut9fCQkMm1' -- broken args ), primary_modules as ( select    block_timestamp,   method_name,   tx_hash,   -- try_parse_json(args) as args,   object_keys(try_parse_json(args):data)[0]::string as wallet_address,   object_keys(get(try_parse_json(args):data, wallet_address))[0]::string as module,   get(get(try_parse_json(args):data, wallet_address), module) as module_value,   object_keys(module_value)[0]::string as app from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)     and method_name = 'set'     and module = 'widget'     and action_id != '8Fn2T8We3GRVBk2ZhdNBqFB26htQ8McAvDaVgUJVP7qC-1' ) select    -- block_timestamp::date as "Date",   case     when app ilike '%nft%' then 'NFT'     when app ilike '%profile%' then 'Profile'     when app ilike '%meme%' then 'Meme'     when app ilike '%follow%' then 'Follow'     when app ilike '%widget%' then 'Widgets'     when app ilike '%book%' then 'Books'     when app ilike '%tag%' then 'Tags'     when app ilike '%idea%' then 'Ideas'     when app ilike '%poll%' then 'Poll'     when app ilike '%genie%' then 'Genie'     when app ilike '%astro%' then 'AstroBounties'     when app ilike '%events%' then 'Events'     when app ilike '%blog%' then 'Blog'     when app in ('Welcome', 'Homepage','HelloWorld') then 'Home'     when app in ('Test', '','HelloAccountIdHeader') then 'Other'     else app    end as "App (category)",   count(distinct tx_hash) as "Transactions",   count(distinct wallet_address) as "Signers" from primary_modules  group by 1 order by 2 desc
66a3c1aa-fbb0-4773-8036-87da7f162b28,Terra - total unique wallets in msgs table,WITH users AS (   SELECT     date_trunc('day', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'   ), summation as (   SELECT     count(distinct address) as addresses   FROM users   ) select * from summation
ef8cf7bd-a8e5-4c41-870c-0a32e245b7f8,Unique Contributors 2022,select     date_trunc('month', createdat::date) as "Month",     count(distinct author) as "Unique Authors",     count(distinct id) as "Activity by ID" from near.beta.github_activity     where createdat::date >= '2022-01-01'     and author not ilike '%dependabot%' group by 1 order by 1;
d11b4071-fed0-45b4-ab1f-d9f5aaff42a4,THOR LP Unique Users Top 25 of past 24h [THOR6],SELECT   pool_name,   lp_action,   count(distinct from_address) as unique_users FROM thorchain.liquidity_actions WHERE block_timestamp > CURRENT_DATE - interval '24 hours' GROUP BY 1, 2 ORDER BY 3 desc LIMIT 25
d351454d-57de-4350-8bc2-d4a2c69b726d,Terra Bridge - Unique Users [T101],WITH outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_attributes:recipient IN ('terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2', 'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk', 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')     AND event_type = 'transfer'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_attributes:sender IN ('terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2', 'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk', 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')     AND event_type = 'transfer'     and block_timestamp > '2021-10-18T00:00:00Z'   ), wallets AS (   SELECT * FROM outbound   UNION   SELECT * FROM inbound   ) SELECT   date_trunc('day', block_timestamp) as date,   count(distinct address) as unique_wallets FROM wallets GROUP BY 1 ORDER BY 1
8033f5d1-8087-41d3-9cbc-65cabd6375c5,THOR Bridge - Unique User Behavior by Origin [THOR3],WITH unique_users AS (   SELECT     to_address,     CASE       WHEN burn_asset LIKE 'BNB%' THEN 'BNB'     	WHEN burn_asset LIKE 'ETH%' THEN 'ETH'     END AS origin_chain,     count(distinct from_address) as incoming_add_count   FROM thorchain.upgrades   GROUP BY 1,2   ORDER BY 1   ), both_chains AS (   SELECT     to_address,     CASE       WHEN count(1) > 1 THEN 'BOTH'     END AS origin_chain,     sum(incoming_add_count) as incoming_add_count   FROM unique_users   GROUP BY 1   HAVING count(1) > 1   ), -- remove unique users where both ETH and BNB origin are present  adjustment AS (   SELECT *   FROM unique_users   WHERE to_address NOT IN (     SELECT to_address FROM both_chains   )   ), final_combination AS (   SELECT * FROM adjustment      UNION       SELECT * FROM both_chains   ) SELECT   origin_chain,   avg(incoming_add_count) as avg_wallets,   count(1) as wallet_count,   max(incoming_add_count) as max_wallets FROM final_combination GROUP BY 1
0f267f10-5c50-4a69-8d9f-4762bb6ef612,Terra Bridge vs Wormhole Unique Users [T101],WITH wh_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND (event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' OR event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf')     AND event_attributes:recipient IS NOT NULL     AND block_timestamp > '2021-10-18T00:00:00Z'   ),    wh_wallets AS (   SELECT * FROM wh_outbound   UNION   SELECT * FROM wh_inbound   ), wh_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_wallets   FROM wh_wallets   GROUP BY 1   ), tb_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_attributes:recipient IN ('terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2', 'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk', 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')     AND event_type = 'transfer'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), tb_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_attributes:sender IN ('terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2', 'terra1rtn03a9l3qsc0a9verxwj00afs93mlm0yr7chk', 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc')     AND event_type = 'transfer'     and block_timestamp > '2021-10-18T00:00:00Z'   ), tb_wallets AS (   SELECT * FROM tb_outbound   UNION   SELECT * FROM tb_inbound   ), tb_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_wallets   FROM tb_wallets   GROUP BY 1   ), total_users AS (   SELECT *, 'wormhole' AS source FROM wh_unique   UNION   SELECT *, 'bridge' AS source FROM tb_unique   ) SELECT   *,   AVG(unique_wallets) OVER (PARTITION BY source ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM total_users
74481981-f07f-4e06-949c-d6db1e4ff312,2023-03-07 06:28 PM,with   new_edits as (     select       signer_id,       min(block_timestamp)::date as first_edit     from       near.social.fact_profile_changes     group by       1   ) select   first_edit,   count(distinct signer_id) as new_profiles from   new_edits group by   1 order by   1
301a1f9c-cea1-4d3b-8a3d-03d7a7edb1ca,top delegators by volume [T44],SELECT   address,   address_label,   balance,   currency FROM terra.daily_balances WHERE balance_type = 'staked'   AND address != 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' -- choosing to not include bLUNA ORDER BY date desc, balance desc limit 25
a5faa2a6-902d-4d04-b4e5-944f5f8d5ce7,June 22 bLUNA burn - in anchor,SELECT   msg_value:sender as sender,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount   FROM terra.msgs WHERE block_timestamp LIKE '2021-06-22%'   AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp'   AND msg_value:execute_msg:send:contract = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts' GROUP BY 1 ORDER BY amount desc limit 3 -- bluna contract msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' 	-- tx with this contract include: deposit_collateral, swap, increase_allowance,  	-- looking for execute_msg:send:msg = 'unbond' using the below contract -- bluna burn msg_value:execute_msg:send:contract: = 'terra1mtwph2juhj0rvjz7dy92gvl6xvukaxu8rfv8ts'   -- msg_value:sender as sender -- june 21: -- terra1t5w5gpf04r03ltg6u3scjafwxmesdv2nnuqwd2 burned 20k -- terra163huvgrqmvr6szweur7lzfyhne49trdysqcs6y 10k -- june 22: -- terra17ysnpmndwa3xqhd4g8d9fzkan8mjc8hn7aa3r8 burned 58.5k -- terra1dsf9zzgwrqvc7p3478s7c0d9t77yyl9md5hqwe 54k -- next most is 4k!!
b5774052-bbb3-4ea5-a59b-bc81a49b5b1f,Terra Weekly Active Wallets - all message types [Flash119],WITH users AS (   SELECT     date_trunc('week', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'   ),    summation as (   SELECT     date,     count(distinct address) as addresses   FROM users   GROUP BY 1   ) SELECT    *,   avg(addresses) OVER (ORDER BY summation.date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as weekly_ma FROM summation ORDER BY 1
e868cb46-ac0d-40a3-9f6c-e399fab368af,Terra Daily Users - Anchor [Flash119],WITH anchor AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2021-10-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN ('terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s', 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8', 'terra1w9ky73v4g7v98zzdqpqgf3kjmusnx4d4mvnac6', 'terra1f32xyep306hhcxxxf7mlyh0ucggc00rm2s9da5', 'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9', 'terra146ahqn6d3qgdvmj8cj96hh03dzmeedhsf0kxqm')   ), by_action AS (   SELECT     date,     contract,     count(distinct address) as unique_wal   FROM anchor   GROUP BY 1,2   ), daily AS (   SELECT     date,     sum(unique_wal) as total   FROM by_action   GROUP BY 1 ) SELECT   by_action.date,   contract,   unique_wal,   unique_wal / total as pct FROM by_action JOIN daily   ON by_action.date = daily.date
be27e68c-e841-4079-b643-c6639c8835c8,Terraswap Daily Active Users [Flash119],WITH protocol AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2021-10-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN (SELECT address FROM terra.labels WHERE label IN ('terraswap', 'TerraSwap'))     ) SELECT   date,   count(distinct address) as unique_wal FROM protocol GROUP BY 1 ORDER BY 1
09f1340c-dc35-457a-bd55-00f393e1dde1,Copy of June 22 bLUNA burn - terraswap,SELECT    date_trunc('hour', block_timestamp) as hourly,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount FROM terra.msgs WHERE (block_timestamp LIKE '2021-06-22%' OR block_timestamp LIKE '2021-06-23%') 	AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' 	AND msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p' 	AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1 asc --  only terra1dta79r3l5dc54npnnyaqjf5kqjumh5nyhyvfyd has coins listed in these swaps over past month. any other bluna swaps further back?
f719a7e2-fde6-4e02-8382-50f02096c276,FLOW Monitoring - Largest Blocks Gaps 4/20+,-- individual missing blocks WITH source AS (     SELECT         block_height,         LAG(             BLOCK_height,             1         ) over (                          ORDER BY                 block_height ASC         ) AS prev_block_height     FROM         (select distinct block_height from           flow.core.fact_blocks          )  ) SELECT     date_trunc('d', b.block_timestamp) as _date,     a.block_height,         a.prev_block_height,     a.block_height - a.prev_block_height - 1 AS gap FROM     source a         left join flow.core.fact_blocks b using (block_height) WHERE     a.block_height - a.prev_block_height <> 1     and block_timestamp >= '2022-04-20' order by gap desc
1a50ced3-61ef-48de-a35c-be1d0b2fcd24,FLOW Monitoring - blocks vs expectation,-- blocks / day select     date_trunc('d', block_timestamp) as _date,     count(distinct block_height) as blocks,     (max(block_height) - min(block_height)) as ex_blocks from flow.core.fact_blocks where block_timestamp >= '2022-04-20' group by 1
ac69cb04-2831-4e01-a039-475e0ec01163,FLOW Monitoring - Blocks Gaps 6/1+,-- individual missing blocks WITH source AS (     SELECT         block_height,         LAG(             BLOCK_height,             1         ) over (                          ORDER BY                 block_height ASC         ) AS prev_block_height     FROM         (select distinct block_height from           flow.core.fact_blocks          )  ) SELECT     date_trunc('d', b.block_timestamp) as _date,     -- a.block_height,         -- a.prev_block_height,     sum(a.block_height - a.prev_block_height - 1) AS gap FROM     source a         left join flow.core.fact_blocks b using (block_height) WHERE     a.block_height - a.prev_block_height <> 1     and block_timestamp >= '2022-06-01' GROUP BY 1
84a6c13f-7182-43b0-bc47-076e5d9b0736,Terra Daily Active Wallets - all message types [Flash119],WITH users AS (   SELECT     date_trunc('day', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'   ), price AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ), summation as (   SELECT     date,     count(distinct address) as addresses   FROM users   GROUP BY 1   ) SELECT    *,   avg(addresses) OVER (ORDER BY summation.date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM summation JOIN price   ON summation.date = price.date ORDER BY 1
89e0657d-1911-4d46-81c6-5ce3928fcd46,Untitled Query,select  	* 	exclude (pool_id)     rename deployment_timestamp as dt from flow.core.dim_swap_pool_labels
ef158f83-222e-45ab-82d6-891ae9892067,June 22 bLUNA burn - terraswap,SELECT    msg_value:sender as sender,   sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as amount FROM terra.msgs WHERE block_timestamp LIKE '2021-06-22%' 	AND msg_module = 'wasm' 	AND msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' 	AND msg_value:execute_msg:send:contract = 'terra1jxazgm67et0ce260kvrpfv50acuushpjsz2y0p' 	AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 2 desc limit 6 --  only terra1dta79r3l5dc54npnnyaqjf5kqjumh5nyhyvfyd has coins listed in these swaps over past month. any other bluna swaps further back?
57fdfb85-6d8e-4c6c-8b33-53bb8f8a9e9d,Untitled Query,select distinct nft_collection from flow.core.ez_nft_sales where nft_collection ilike '%gola%'
6d0893b5-aec7-4a16-8c5e-c81f26d658bb,UST - Mayday,SELECT  	date_trunc('hour', block_timestamp) as hour,   	avg(price_USD) as hourly_price FROM terra.oracle_prices WHERE SYMBOL = 'UST' 	AND block_timestamp > '2021-05-16T00:00:00Z' 	AND block_timestamp < '2021-05-23T00:00:00Z' GROUP BY 1 ORDER BY 1
6df7dc4b-01a2-4076-8432-30fe11f027db,Untitled Query,SELECT 	date_trunc('hour', block_timestamp) as date,   	avg(price_0_1) as ust_price_on_eth FROM uniswapv3.pool_stats WHERE pool_name LIKE 'UST-USDT%' 	AND block_timestamp > '2021-05-06T00:00:00Z' GROUP BY 1 ORDER BY 1
668285bf-0c53-449f-94a5-01a52614aefe,2023-09-27 05:34 PM,SELECT * FROM near.core.fact_developer_activity
b7c3981c-d2d0-4f4e-b00f-bac22a698939,ENS Transaction - Fee and Registration Cost Data - gwei and count [ENS7],with txs as (   select     tx_id   from ethereum.udm_events   where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'     and origin_function_signature = '0xf7a16963'     and block_timestamp < '2021-12-09T23:59:59Z' ), fee_details as (   select     block_timestamp,     txs.tx_id as tx_id,     fee_usd,     gas_limit,     gas_price,     gas_used   from ethereum.transactions   right join txs using (tx_id) ), registration as (   select 	block_timestamp,     tx_id,   	amount,     amount_usd from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp < '2021-12-09T23:59:59Z' ), full_details as (   select   	registration.block_timestamp as block_timestamp,   	registration.tx_id as tx_id,   	registration.amount as amount,   	registration.amount_usd as amount_usd,   	fee_details.fee_usd as fee_usd,   	fee_details.gas_limit as gas_limit,     fee_details.gas_price /pow(10,9) as gwei,     fee_details.gas_used as gas_used,   	(fee_usd / (fee_usd + amount_usd)) as fee_pct   from registration   join fee_details using (tx_id) ), final as (   select   	date_trunc('day', block_timestamp) as date,   	count(1) as registration_count,   	avg(gwei) as avg_gas   from full_details   group by 1   )    select * from final limit
7c89408c-1335-4a5f-8ce9-7d06ca305107,Untitled Query,
6f8c2432-7282-4795-bd93-fcac88b30c9e,yveCRV $ Boost only Volume [YC1],SELECT   date_trunc('week', block_timestamp) as day,   sum(amount) as crv_total,   avg(crv_total) OVER (ORDER BY day ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as ma FROM ethereum.udm_events WHERE contract_address = '0xc5bddf9843308380375a611c18b50fb9341f502a'   AND origin_function_name = 'deposit'   AND event_name = 'transfer'   AND block_timestamp > '2021-04-29T23:59:00Z'   AND to_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- only deposit forwards from the boost vault GROUP BY 1 ORDER BY 1
b41b7727-47f5-4a19-89e3-d84d03717f74,penguins recent max and min,SELECT *,   AVG(hour_min) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as fiveh_min_ma,   AVG(hour_max) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as fiveh_max_ma FROM ( SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price) as avg_eth,   -- count(*) as num_tx,   max(price) as hour_max,   min(price) as hour_min FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8'   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '3 days'   AND (tx_currency = 'ETH' OR tx_currency = 'WETH') GROUP BY 1 ORDER BY 1)
463bd327-795a-4a46-87e7-d474273ce40b,penguins recent max,SELECT *,   AVG(hour_min) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as fiveh_min_ma,   AVG(hour_max) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as fiveh_max_ma FROM ( SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price) as avg_eth,   -- count(*) as num_tx,   max(price) as hour_max,   min(price) as hour_min FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8'   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '3 days'   AND (tx_currency = 'ETH' OR tx_currency = 'WETH') GROUP BY 1 ORDER BY 1)
321853de-3d44-48b8-bdf1-b1c0b71e835d,penguins with the most hops,with all_tx as ( select date_trunc('day', block_timestamp) as dt,  event_from, event_to, contract_address, platform_fee, price, price_usd, token_id, tx_id from ethereum.nft_events where contract_address = lower('0xBd3531dA5CF5857e7CfAA92426877b022e612cf8') ),    trade_most as ( select count(distinct tx_id) as trade_count,   sum(price_usd) as total_volume_traded,   token_id, contract_address from all_tx   group by 3,4 ) select 	trade_count,   	total_volume_traded as total_usd_volume,   	token_id from trade_most where total_volume_traded > 0 order by 1 desc, 2 desc
3a443337-a52c-4011-98b4-021d9dc07385,pudgy penguins trading volume,SELECT *,   sum(eth_traded) OVER (ORDER BY date) as total_traded,   AVG(eth_traded) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as ma FROM ( SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   sum(price) AS eth_traded FROM ethereum.nft_events   WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8' -- pudgy penguin   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '48 hours'   AND (tx_currency = 'ETH' OR tx_currency = 'WETH') GROUP BY 1 ) ORDER BY 1
e087833f-a988-408e-afcc-13dc0ece4755,pudgy penguins recent sale prices,SELECT *,   avg(avg_eth) OVER (ORDER BY date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as ma FROM ( SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   avg(price) as avg_eth,   count(*) as num_tx FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8'   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '3 days'   AND (tx_currency = 'ETH' OR tx_currency = 'WETH') GROUP BY 1 ORDER BY 1)
25034f33-8c9a-4ee4-8836-f75d384f1830,speed test,select * from ethereum.nft_events order by block_timestamp desc limit 100
3f6472b1-8f16-4dd8-8870-026b9f074b9b,Near NFTs Minted (per week),with nft_mints as (     select         block_timestamp,         MD5(             receiver_id || token_id         ) AS nft_id     from near.nft.fact_nft_mints     -- where block_timestamp::date >= '2023-01-01' ) select     date_trunc('week', block_timestamp) as _time,     count(nft_id) as nfts_minted,   sum(nfts_minted) over (order by _time) as gross_nfts from nft_mints group by 1  order by 1
701a6a6c-3484-4efb-aadd-9e2882d44005,Untitled Query,with account_creation as ( select * from flow.core.fact_events   where block_timestamp > '2022-06-20'      and event_type = 'AccountCreated'     and event_data:address::string = '0xfaa9d89989aa5a74' -- Enter your Dapper Wallet here!! ) select * from flow.core.fact_transactions   where tx_id in (select tx_id from account_creation)       and proposer = '0x18eb4ee6b3c026d2' -- dapper labs address, do not exclude. Query will return 0 rows if account was created using another wallet, like Blocto
7d77b9db-2a5f-47e4-99dd-10b297ce2174,Untitled Query,select distinct marketplace from flow.core.ez_nft_sales where nft_collection ilike '%aera%'
6ff0c5e1-25bc-4652-a271-16ebe0bf56c1,2022-12-08 10:24 PM,select   js_hextoint(input) from   ethereum.core.fact_traces where   tx_hash = '0xe774877f1acf71bfb0de83864bf568e18b7416354fa759c668a4bccae0769aee'
e8407f11-ce7e-44a5-b707-e4df62a0e10c,2023-09-25 10:33 AM,select    distinct event_type,   any_value(event_data) from flow.core.fact_events where event_contract in  ('A.4eded0de73020ca5.CricketMoments', 'A.ed398881d9bf40fb.CricketMoments') group by 1
02a35c91-66f2-43c4-b834-c5ef3eb439de,2023-09-26 04:36 PM,select    label_type,   count(1) from bitcoin.core.dim_labels group by 1
0fe9942f-65d5-4d20-a60d-791d29a7ad77,THORChain Top Swap Volume, past 24h - unique users via to address [THOR5],SELECT   pool_name,   count(distinct to_address) as unique_users FROM thorchain.swaps WHERE block_timestamp < CURRENT_DATE - interval '24 hours' GROUP BY 1 ORDER BY 2 DESC
cb543891-676e-4cd3-91a1-0eb5b07d721e,Wormhole - Unique Outbound UST Users [T103],WITH outbound AS (   SELECT     block_timestamp,     tx_id,     event_attributes:sender as address,     event_attributes   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), ust_transactions AS (   SELECT     tx_id   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5'     AND event_attributes:"transfer.token"[0] IS NULL -- UST. rn LUNA is parsed as a dict of some kind ), filtered AS (   SELECT     block_timestamp,     address   FROM outbound   RIGHT JOIN ust_transactions ON outbound.tx_id = ust_transactions.tx_id ), daws AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_users -- wallets, not users   FROM filtered   GROUP BY 1 ) SELECT   date,   unique_users,   AVG(unique_users) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM daws
cb48c975-480d-4981-8f14-5875dfcf5a23,NEAR Social Widgets x Flipside,with   decoded_actions as (     select       *     FROM       near.social.fact_decoded_actions     WHERE       NODE = 'widget'   ),   widgets as (     select       tx_hash,       action_id_social,       block_id,       block_timestamp,       signer_id,       node_data,       object_keys(try_parse_json(node_data)) [0]::string as widget_name, -- id 7qAfCCvMXyytKnT4yCweSTtn6ytnKGbcQ1zgXp91iEWz-0-widget fucking this up w just "$ARGS"       node_data[widget_name] as js_code,       concat(         'https://near.social/#/',         signer_id,         '/widget/',         widget_name       ) as widget_url     from       decoded_actions   ) select   signer_id,   widget_name,     widget_url,   block_id as latest_deploy_block_id,   js_code from   widgets where   js_code ilike '%flipside%' qualify   row_number() over (     partition by       widget_url     order by       block_timestamp desc   ) = 1 order by 4 desc
1d4422d7-db54-48bf-a675-d7f122aa289e,ez_prices_hourly incorrect prices copy copy,-- forked from ez_prices_hourly incorrect prices copy @ https://flipsidecrypto.xyz/edit/queries/b027a490-7e5f-4330-953e-8b239b3cea19 -- forked from flyingfish / ez_prices_hourly incorrect prices @ https://flipsidecrypto.xyz/flyingfish/q/mZpWZOFs3s-1/ez_prices_hourly-incorrect-prices with cte as (   select     symbol     , hour     , token_address     , price   from crosschain.price.ez_prices_hourly   -- from solana.price.ez_prices_hourly   where 1 = 1     and hour::date between '2024-03-01' and '2024-05-10'     --and hour > current_date - 2     and blockchain = 'solana'     and token_address in (         'So11111111111111111111111111111111111111112' -- SOL       , '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs' -- ETH       , '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh' -- BTC     ) ) select   hour   , max(case when symbol = 'SOL' then price end) as sol_price   , max(case when symbol = 'ETH' then price end) as eth_price   , max(case when symbol = 'WBTC' then price end) as btc_price from cte group by 1 order by hour
eea6f241-2855-4ed1-8b7e-d50fb66b9024,UST peg eth vs terra [T28],WITH uni AS (     SELECT     	date_trunc('hour', block_timestamp) as date,   		avg(price_0_1) as ust_price_on_eth     FROM uniswapv3.pool_stats     WHERE pool_name LIKE 'UST-USDT%'   		AND block_timestamp > '2021-05-06T00:00:00Z'     GROUP BY 1 ), ter AS (   SELECT   	date_trunc('hour', block_timestamp) as date,   	avg(price_usd) as terra_price   FROM terra.oracle_prices   WHERE SYMBOL = 'UST'   	AND block_timestamp > '2021-05-06T00:00:00Z'   GROUP BY 1   ORDER BY 1 ) SELECT 	uni.date,   	ust_price_on_eth,   	ter.terra_price as ust_price_on_terra FROM uni JOIN ter 	ON uni.date = ter.date
72dca9b4-10a9-447b-8482-ca3ba3a96744,3 - Transaction Fees,SELECT    sub.date,   sub.currency,   sub.fee as native_fee,   sub.fee * p.price_usd as fee_usd FROM   (SELECT     date_trunc('day', block_timestamp) as date,     fee[0]:denom::string as currency,     sum(fee[0]:amount::float)/POW(10,6) as fee   FROM terra.transactions   WHERE block_timestamp > GETDATE() - interval '30 days'     AND currency IS NOT NULL   GROUP BY 1, 2) sub JOIN (SELECT date_trunc('day', block_timestamp) as date,   currency,   avg(price_usd) as price_usd FROM terra.oracle_prices WHERE block_timestamp > GETDATE() - interval '30 days' GROUP BY 1, 2) p 	ON (sub.currency = p.currency AND sub.date = p.date) ORDER BY 1 desc, 2; -- SELECT -- 	date_trunc('day', block_timestamp) as date, -- 	fee[0]:denom::string as currency, --   	sum(fee[0]:amount::float)/POW(10,6) as fee -- FROM terra.transactions -- WHERE block_timestamp > GETDATE() - interval '30 days' -- 	AND currency IS NOT NULL -- GROUP BY 1, 2 -- ORDER BY 1 desc, 2 -- (SELECT -- 	date_trunc('day', block_timestamp) as date, -- 	currency, -- 	avg(price_usd) as price_usd -- FROM terra.oracle_prices -- WHERE block_timestamp > GETDATE() - interval '30 days' -- GROUP BY 1,2 -- ORDER BY 1 desc, 2) p
8018da89-eccd-4fd4-9665-c36f3bad7803,Untitled Query,
e3abe657-744a-45e1-8615-8dbd947dd762,Untitled Query,select current_timestamp
bb8aa500-d41e-48f1-9cb5-53689f31b215,Active Profiles Activity,with social_txs as (   select * from near.core.fact_transactions    where lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near'     and tx_hash != '56MWdW7NPvfsy6bNctxe3fn6oVP3NfzLoQut9fCQkMm1' -- broken args ), profile_update as ( select    block_timestamp,   tx_hash,   object_keys(try_parse_json(args):data)[0]::string as wallet_address from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)   and method_name = 'set'   and object_keys(get(try_parse_json(args):data, wallet_address))[0]::string = 'profile'     and action_id != '8Fn2T8We3GRVBk2ZhdNBqFB26htQ8McAvDaVgUJVP7qC-1' ) select    block_timestamp::date as "Date",   wallet_address,   count(distinct tx_hash) as "Profile Update Transactions" from profile_update group by 1,2 order by 1, 3 desc
930a99e8-af03-4cb9-888c-956c3c9ab513,Actions by Module,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date >= '2022-10-01'    ), primary_modules as ( select    block_timestamp,   method_name,   tx_hash,   try_parse_json(args) as args,   object_keys(try_parse_json(args):data)[0]::string as wallet_address,   object_keys(get(try_parse_json(args):data, wallet_address))[0]::string as module,   get(get(try_parse_json(args):data, wallet_address), module) as module_value from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)     and method_name = 'set'     and action_id != '8Fn2T8We3GRVBk2ZhdNBqFB26htQ8McAvDaVgUJVP7qC-1' ) select    block_timestamp::date as "Date",   module as "Module",   count(distinct tx_hash) as "Transactions" from primary_modules  group by 1,2 order by 1,2
1d3ba441-7eaa-4cc7-a800-e2a29c2510cf,App by Index,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date >= '2022-10-01' ), primary_modules as ( select    block_timestamp,   method_name,   tx_hash,   try_parse_json(args) as args,   object_keys(try_parse_json(args):data)[0]::string as wallet_address,   object_keys(get(try_parse_json(args):data, wallet_address))[0]::string as module,   get(get(try_parse_json(args):data, wallet_address), module) as module_value from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)     and method_name = 'set'     and module = 'index' ) select    block_timestamp::date as "Date",   -- module as "Module",   object_keys(module_value)[0]::string as "Set Index App",   count(distinct tx_hash) as "Transactions",   count(distinct wallet_address) as "Signers" from primary_modules  group by 1,2 order by 1,2
52955337-4dd6-4133-852e-6e72c8368f07,GithubMonthlyCommits copy,-- forked from GithubMonthlyCommits @ https://flipsidecrypto.xyz/edit/queries/e4a9ac6e-18ec-496a-ae73-7d41cbfc49d2  WITH RAW AS (     select *     from   near.core.fact_developer_activity     where  endpoint_github = 'contributors' ), flattened_data AS (     SELECT         repo_owner,         repo_name,         flattened.value:author::OBJECT as author,         flattened.value:weeks::ARRAY as weeks     FROM RAW,     LATERAL FLATTEN(input => RAW.DATA::ARRAY) AS flattened ), numbered_data AS (     SELECT         repo_owner,         repo_name,         author:login::STRING as login,         TO_DATE(TO_TIMESTAMP(week.value:w::INT)) as week_date,         week.value:a::INT as weekly_additions,         week.value:d::INT as weekly_deletions,         week.value:c::INT as weekly_commits,         ROW_NUMBER() OVER (PARTITION BY repo_owner, repo_name, login, week_date ORDER BY week.value:w::INT) as row_num     FROM flattened_data,     LATERAL FLATTEN(input => flattened_data.weeks) AS week ), -- Monthly commits monthly_commits AS (     SELECT         DATE_TRUNC('MONTH', week_date) AS month_year,  -- Group by month-year         SUM(weekly_commits) AS total_monthly_commits  -- Total commits in the month     FROM numbered_data     WHERE row_num = 1     GROUP BY month_year     ORDER BY month_year ) -- This will output the data from monthly_commits CTE SELECT * FROM monthly_commits;
47597f79-42a9-4254-b699-3034a72d0dce,ENS Transaction - Fee Pct [ENS7],with txs as (   select     tx_id   from ethereum.udm_events   where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'     and origin_function_signature = '0xf7a16963'     and block_timestamp < '2021-12-09T23:59:59Z' ), fee_details as (   select     block_timestamp,     txs.tx_id as tx_id,     fee_usd,     gas_limit,     gas_price,     gas_used   from ethereum.transactions   right join txs using (tx_id) ), registration as (   select 	block_timestamp,     tx_id,   	amount,     amount_usd from ethereum.udm_events where to_address = '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5'   and origin_function_signature = '0xf7a16963'   and block_timestamp < '2021-12-09T23:59:59Z' ), full_details as (   select   	registration.block_timestamp as block_timestamp,   	registration.tx_id as tx_id,   	registration.amount as amount,   	registration.amount_usd as amount_usd,   	fee_details.fee_usd as fee_usd,   	fee_details.gas_limit as gas_limit,     fee_details.gas_price /pow(10,9) as gwei,     fee_details.gas_used as gas_used,   	(fee_usd / (fee_usd + amount_usd)) as fee_pct   from registration   join fee_details using (tx_id) ), final as (   select   	date_trunc('day', block_timestamp) as date,   	avg(fee_pct) as avg_fee_pct   from full_details   group by 1 )    select   *,   avg(avg_fee_pct) over (order by date rows between 6 preceding and current row) as ma from final
75900e54-6ff1-4447-868d-a523276db415,Terra Daily Active Wallets - all message types coalesce [Flash119],WITH users AS (   SELECT     date_trunc('day', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'   ), price AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE symbol = 'LUNA'   GROUP BY 1 ), summation as (   SELECT     date,     count(distinct address) as addresses   FROM users   GROUP BY 1   ) SELECT    *,   avg(addresses) OVER (ORDER BY summation.date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM summation JOIN price   ON summation.date = price.date ORDER BY 1
7576f2a0-46c1-476d-9c3b-596d3461f46c,Untitled Query,select * from crosschain.core.address_labels where lower(blockchain) = 'flow' limit 100;
8174439e-caf3-4dfa-b042-77b945e038c8,Swaps by Hour (EST) [THOR8],SELECT   extract(hour from CONVERT_TIMEZONE('UTC', 'America/New_York', block_timestamp)) as hour,   sum(from_amount_usd) as volume FROM thorchain.swaps WHERE block_timestamp > '2021-10-03T00:00:00Z' GROUP BY 1 ORDER BY 1
75e3e306-d08b-4f7d-ad75-e0e5b626856a,Bridged bETH to ETH - error [LDO1],SELECT   date_trunc('day', block_timestamp) as date,   sum(event_attributes:"0_amount"::float) / pow(10,6) as amount FROM terra.msg_events WHERE event_attributes:"0_action" = 'transfer'   AND event_type = 'from_contract'   AND event_attributes:to = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' -- eth bridge   AND event_attributes:"0_contract_address" = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' -- beth GROUP BY 1 ORDER BY 1
36abc610-d5f6-42f8-9cae-1aa6b99b038d,max price penguin,SELECT * FROM ethereum.nft_events WHERE contract_address = '0xbd3531da5cf5857e7cfaa92426877b022e612cf8' 	AND price = 28
0671ae12-451f-4093-b18a-bdfc6bdc59cc,Anchor Borrow balances [T33],WITH borrow AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:borrow_stable:borrow_amount::float) / pow(10,6) as daily_borrow_amount FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:execute_msg LIKE '%borrow_stable%' GROUP BY 1 ), repay as (   SELECT      date_trunc('day', block_timestamp) as date,     sum(msg_value:coins[0]:amount) / pow(10,6) as daily_repay_amount   FROM terra.msgs   WHERE tx_status ='SUCCEEDED'   	AND msg_value:execute_msg LIKE '%repay_stable%'   GROUP BY 1 ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ORDER BY 1   ), earn as (   select    	*,     daily_borrow_amount - daily_repay_amount as net_daily_borrow   from borrow   left join repay using (date) ), final as (   select     date,     daily_borrow_amount,     daily_repay_amount,   	net_daily_borrow,   	coalesce(loan_autorepay_amount,0) as loan_autorepay,   	net_daily_borrow - loan_autorepay as final_net_daily_borrow   from earn   left join liquidations using (date) )    SELECT   *,   SUM(net_daily_borrow) OVER (ORDER BY date) as no_liquidations,   SUM(final_net_daily_borrow) OVER (ORDER BY date) as w_liquidations FROM final
b85415e4-3e70-4fe9-a7a8-86032dd5edfb,Terra Wormhole - Outbound UST Traffic [T101] [T103],WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), outbound_ust AS (   SELECT     date_trunc('day', block_timestamp) as date,     chain_ids.name,     token,     sum(amount) as amount,     count(1) as tx_count   FROM outbound   JOIN chain_ids ON outbound.destination_chain_id = chain_ids.id   WHERE token = 'UST'   GROUP BY 1,2,3     )    SELECT   *,   amount / tx_count as avg_transfer,   sum(amount) OVER (PARTITION BY name ORDER BY date) as cumsum FROM outbound_ust
b9754a79-3885-44e8-9611-d9c56bde8eea,2023-10-04 02:04 PM,select * from flow.price.fact_prices -- order by block_timestamp desc order by 1 desc limit 250
788aeece-6f68-4b49-9315-a78ec6c7030d,stETH general balances [C2],SELECT   balance_date,   sum(balance) as steth_balance,   sum(amount_usd) as usd_balance FROM ethereum.erc20_balances WHERE contract_address = '0xae7ab96520de3a18e5e111b5eaab095312d7fe84'   AND balance_date > CURRENT_DATE - 30 GROUP BY 1
42cb489d-b2a2-4f11-9242-088cd1f332b8,Atlas - NFT Txns (30d Trailing),with nft_data as (select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   owner_id as owner,   token_id from near.nft.fact_nft_mints union select   block_timestamp::date as day,   tx_hash,   method_name,   receiver_id,   signer_id,   args['receiver_id'] as owner,   args['token_id'] as token_id from near.core.fact_actions_events_function_call where method_name = 'nft_transfer') select   a.day,   count(b.tx_hash) as txns from (select distinct day from nft_data) a   left join nft_data b     on b.day > a.day - interval '30 day' and b.day <= a.day group by 1 order by 1 desc
78fb9e6f-cdec-4399-9e3c-22bf099c75fb,2023-03-13 04:39 PM,with   aggrs as (     select       to_address     from       ethereum.core.fact_transactions     where       block_timestamp > current_timestamp - interval '7 days'       and substr(tx_json, 0, 10) = '0xc9807539' -- transmit(bytes _report, bytes32[] _rs, bytes32[] _ss, bytes32 _rawVs)       -- GROUP by to_address   ),   proxies_or_aggrs as (     select       to_address as proxy,       count(distinct from_address) as users,       count(distinct tx_hash) as txs     from       ethereum.core.fact_traces t2     where       substr(t2.input, 1, 10) in (         '0xfeaf968c', -- latestRoundData()         '0x9a6fc8f5', -- getRoundData(uint80)         '0x668a0f02', -- latestRound() (deprecated)         '0x50d25bcd', -- latestAnswer() (deprecated)         '0xb5ab58dc' -- getAnswer(uint256) (deprecated)       )       and block_timestamp > current_timestamp - interval '7 days'     group by       proxy   ),   proxy_calls as (     select       t2.from_address as proxy,       t2.to_address as aggr     from       aggrs t1       left join ethereum.core.fact_traces on t1.to_address = t2.to_address       and substr(t2.input, 1, 10) in (         '0xfeaf968c', -- latestRoundData()         '0x9a6fc8f5', -- getRoundData(uint80)         '0x668a0f02', -- latestRound() (deprecated)         '0x50d25bcd', -- latestAnswer() (deprecated)         '0xb5ab58dc' -- getAnswer(uint256) (deprecated)       )     where       t2.block_timestamp > current_timestamp - interval '7 days'     group by       t2.from_address,       t2.to_address   ) select   t1.proxy,   t2.aggr,   t1.users,   t1.txs from   proxies_or_aggrs t1   join proxy_calls t2 on t1.proxy = t2.proxy order by   users desc
794d901b-f8cb-4ec7-b7a4-ec4865e119be,Untitled Query,select     from_currency as abc,     address,     label,     trader from terra.core.ez_swaps s left join terra.core.dim_address_labels l on from_currency = address limit 100
4ef237ef-f69f-44ae-95d6-16d2f99bd2bb,Deposit,SELECT BLOCK_ID,   CHAIN_ID,   TX_ID,   EVENT_INDEX,   EVENT_TYPE,   EVENT_ATTRIBUTES FROM terra.msg_events WHERE TX_ID = '9FBF8CE74BB4E4AF3C341841CBF7D8956794A1A14A03615231D22B0244983953';
79c6c388-b52c-46a5-87a5-039629fa9514,Copy of yvBOOST Zap In/Out Volume testing,with in_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapIn'     AND contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' -- yVault ZapIn contract   ), -- not all have amount_usd info so we need to join w prices hourly zapins AS (   SELECT     date_trunc('hour', block_timestamp) as date,     contract_address as token_address,     sum(amount) as native_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events e   RIGHT JOIN in_txs ON e.tx_id = in_txs.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = from_address   GROUP BY 1, 2   ORDER BY 1, 4 desc   ), price_in AS (   SELECT     date,     symbol,     native_amount,     price,     CASE       WHEN usd_amount IS NOT NULL THEN usd_amount       ELSE native_amount * price     END as usd_amount   FROM zapins z   JOIN ethereum.token_prices_hourly p     ON (date = p.hour AND z.token_address = p.token_address)   ), out_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapOut'     AND contract_address = '0xd6b88257e91e4e4d4e990b3a858c849ef2dfde8c' -- yVault ZapOut contract   ), all_out AS (   SELECT     CASE       WHEN symbol = 'WETH' THEN 'ETH'       WHEN symbol LIKE '%susd' THEN 'SUSD'       WHEN symbol = '1inch exchange: 1inch token' THEN '1INCH'       ELSE symbol     END AS symbol,     sum(amount_usd) as zap_out   FROM ethereum.udm_events e   RIGHT JOIN out_txs ON e.tx_id = out_txs.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = to_address     AND symbol != 'yveCRV' -- 0 volume but it's messing up the table     AND symbol != 'hegic token' -- < $1000 usd and it's also messing up the table   GROUP BY 1   ), all_in AS (   SELECT     CASE       WHEN symbol = 'WETH' THEN 'ETH'       ELSE symbol     END AS symbol,     sum(usd_amount) as zap_in   FROM price_in   GROUP BY 1   ) SELECT   a.symbol as token,   b.symbol as tokenb,   coalesce(zap_in,0) as zap_in,   coalesce(zap_out,0) as zap_out,   coalesce(zap_in,0) + coalesce(zap_out,0) as gross_volume_usd FROM all_in a FULL OUTER JOIN all_out b   ON a.symbol = b.symbol ORDER BY 5 desc
7a04c9cd-8104-43f8-8933-4291551ab141,Untitled Query,
e6d55953-f72d-423a-879d-1d398eef2acd,yfi bridge [P HUNT],SELECT   block_timestamp,   tx_id,   from_address,   to_address_name FROM ethereum.transactions WHERE tx_id = '0x31ce7815cc6692f42aa249c66019f17d38fcdb1cea342d33feeb1cd84018af8d'
7a204300-03c4-4cd8-83d3-11af3b7ad809,bsc bridge,SELECT distinct event_currency FROM terra.transfers WHERE EVENT_FROM_ADDRESS_NAME LIKE '%shuttle'
092f5b1c-c6f2-487e-9014-b6e48a49df7c,LOOP Swap Prices - all time [T93],-- Buying TOKEN with UST WITH buys AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_buy_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as ust,       event_attributes:return_amount / pow(10,6) as token     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'swap'       AND event_attributes:"0_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract       AND event_attributes:"1_action" = 'transfer'       AND event_attributes:"1_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract     )   GROUP BY 1   ORDER BY 1), -- Selling TOKEN to UST sells AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(ust/token) as avg_sell_price   FROM (     SELECT       *,       event_attributes:offer_amount / pow(10,6) as token,       event_attributes:return_amount / pow(10,6) as ust     FROM terra.msg_events     WHERE tx_status = 'SUCCEEDED'       AND event_type = 'from_contract'       AND event_attributes:"0_action" = 'send'       AND event_attributes:"0_contract_address" = 'terra1nef5jf6c7js9x6gkntlehgywvjlpytm7pcgkn4' -- token contract       AND event_attributes:"1_action" = 'swap'       AND event_attributes:"1_contract_address" = 'terra106a00unep7pvwvcck4wylt4fffjhgkf9a0u6eu' -- swap contract     )   GROUP BY 1   ORDER BY 1) SELECT   buys.date as date,   avg_buy_price,   avg_sell_price,   avg((avg_buy_price+avg_sell_price)/2) OVER (ORDER BY sells.date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as moving_avg -- using 8 hr = 1/3 of a day FROM buys JOIN sells ON sells.date = buys.date
7c6368f9-3224-4d50-abb7-1dd2510e4ff8,MNT peg,select date_trunc('hour', block_timestamp) as date,   symbol,   avg(price_usd)   from terra.oracle_prices where date > GETDATE() - interval '6 months'   AND symbol = 'MNT' group by 1,2  order by 1, 2
35a331db-07e8-4fd9-b360-5ab650417484,YFI Price,SELECT   hour,   price FROM ethereum.token_prices_hourly WHERE symbol = 'YFI' AND hour > '2021-01-01T00:00:00Z'
7cb23054-67de-4de3-b966-da8cb5960c86,Terra Wormhole - Outbound Gross Volume [T101],WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id,     CASE       WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'       ELSE 'LUNA'     END as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     AND destination_chain_id IS NOT NULL   GROUP BY 1,2,3   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount     -- CASE     --   WHEN token = 'LUNA' THEN amount * avg_price     --   ELSE amount     -- END AS amount_usd   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token = 'LUNA'   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token = 'UST' ) SELECT   date,   chain_ids.name as destination_chain,   sum(amount) as volume_usd FROM combo JOIN chain_ids ON combo.destination_chain_id = chain_ids.id GROUP BY 1,2
7cb8f7d4-bc85-4ca5-93f9-ea1b229eccee,Trading Volume by Blockchain [THOR9],WITH trading_volume AS (   SELECT     date_trunc('day', block_timestamp) as date,     blockchain,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1,2   ), daily_total AS (   SELECT      date_trunc('day', block_timestamp) as date,     sum(from_amount_usd) as daily_volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1 ) SELECT   trading_volume.date,   blockchain,   volume,   daily_volume,   avg(volume) OVER (ORDER BY trading_volume.date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) as volume_ma,   volume / daily_volume as pct_share FROM trading_volume JOIN daily_total   ON trading_volume.date = daily_total.date ORDER BY 1, 6 desc -- normalize this to 1 and show trading volume by chain as pct
7d59492c-1ef9-4ba1-9ae4-03cfe3edfda7,Transactions Signed from Potential New Sweat Accounts,with    sweat_receivers as ( select   tx_receiver,   'sweat' as account_label,   min(block_timestamp) as first_reciept_date from near.core.fact_transactions   where tx_status = 'Success'   and block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_signer in ('sweat_welcome.near',  	    'sweat_oracle_0.near',  	    'sweat_oracle_1.near',  	    'sweat_oracle_2.near',  	    'sweat_oracle_3.near',  	    'sweat_oracle_4.near',  	    'sweat_oracle_5.near',  	    'sweat_oracle_6.near',  	    'sweat_oracle_7.near',  	    'sweat_oracle_8.near',  	    'sweat_oracle_9.near', 	    'token.sweat') group by 1,2 ), append_label as (   select     block_timestamp,     tx_signer,     coalesce(account_label, 'something else') as account_label   from near.core.fact_transactions t   left join sweat_receivers s on t.tx_signer = s.tx_receiver   where block_timestamp::date between '2022-05-01' and '2022-12-31'   and tx_status = 'Success' ) select   date_trunc('month',block_timestamp) as "Month",   account_label,   count(distinct tx_signer) as "Count Tx Signers" from append_label group by 1,2
87aadb0c-1d21-4ae2-8498-bc67845f2aed,Untitled Query,
36048ce1-3f57-4e2d-8d87-49b5c1d126ea,Pylon HUNT - Stake MINE,SELECT * FROM terra.msg_events WHERE tx_id = '73831B1876D6B152F8FDF6F42DC9FE2A54F2AC9A00F2DACAD34077E32189967C'
e67a490b-960f-40d5-9287-5c64fcacf6db,Untitled Query,select * from near.core.fact_actions_events limit 10
63767222-e809-4b9a-bb78-20b5138326c6,MDAO Workshop - Anchor Collateral Events - Gross,select 	date_trunc('d',block_timestamp) as date,   	event_type,   	count(distinct tx_id) as tx_count    from anchor.collateral group by 1,2 order by 1
7d4e8c07-e1b4-4b7d-a9cf-c974d5885e3a,Swap for MIR,SELECT block_id::string as block_id,   msg_type,   msg_value,   c.address_name as contract_label,   tx_status,   block_timestamp FROM terra.msgs LEFT OUTER JOIN terra.labels c   ON msg_value:contract::string = c.address WHERE tx_id = '3A9EBD59D5D40D225335C2EB0EF861FCEEDFF4FDE880349A65A6548685E8ACA7'
7dc9927c-1d6d-427d-a6bd-116d3f069aff,Terra Wormhole - Outbound Gross Volume by chain [T101],WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id,     CASE       WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'       ELSE 'LUNA'     END as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     AND destination_chain_id IS NOT NULL   GROUP BY 1,2,3   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount     -- CASE     --   WHEN token = 'LUNA' THEN amount * avg_price     --   ELSE amount     -- END AS amount_usd   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token = 'LUNA'   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token = 'UST' ) SELECT   chain_ids.name as destination_chain,   sum(amount) as volume_usd FROM combo JOIN chain_ids ON combo.destination_chain_id = chain_ids.id GROUP BY 1
19f88a02-5781-4c58-b851-a2c67b48bbfb,Untitled Query,select * FROM mdao_harmony.transfers WHERE contract_address = '0x224e64ec1bdce3870a6a6c777edd450454068fec' -- UST address  order by block_timestamp limit 100
7fea9f88-4684-4e76-98b3-8ce0221d1dcb,LAG CHECK,select * from terra.blocks where block_id =  (select max(block_id) from terra.swaps) select max(block_timestamp) from terra.msgs select max(block_timestamp) from anchor.liquidations select max(block_timestamp) from astroport.swaps select * from terra.msgs where tx_id = 'F5285516422731F7CE8A99B30A7634DF0090103635D6F67F5EA21A1A18BF8340'    -- 7564823 swaps -- 7564809 blocks -- 3:39 pm select * from terra.swaps   where ask_currency = 'UST' or offer_currency = 'UST' order by block_id desc limit 1000 select * from terra.blocks where block_timestamp between '2022-05-06T23:59:50Z' and '2022-05-07T00:00:10Z'
7fee865f-6712-432f-bf72-7b9ce08c5cb8,RUNE price vs swap volume on select chain [THOR9],WITH trading_volume AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(from_amount_usd) as volume   FROM thorchain.swaps   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1   ), price AS (   SELECT     date_trunc('hour', block_timestamp) as date,     avg(rune_usd) as price   FROM thorchain.prices   WHERE block_timestamp > '2021-10-03T00:00:00Z'   GROUP BY 1   ), combined AS (   SELECT     price.date as date,     volume,     price   FROM price   JOIN trading_volume   	ON price.date = trading_volume.date ) SELECT   date,   volume,   avg(volume) OVER (ORDER BY date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) as volume_ma,   price FROM combined ORDER BY 1
7fb3b065-a560-4722-8e8f-83fe2c7610af,Yearn - yvBOOST zapIns - daily [YC3],with in_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapIn'     AND contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' -- yVault ZapIn contract   ), -- not all have amount_usd info so we need to join w prices hourly zapins AS (   SELECT     date_trunc('hour', block_timestamp) as date,     contract_address as token_address,     sum(amount) as native_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events e   RIGHT JOIN in_txs ON e.tx_id = in_txs.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = from_address   GROUP BY 1, 2   ORDER BY 1, 4 desc   ), final AS (   SELECT     date,     symbol,     native_amount,     price,     CASE       WHEN usd_amount IS NOT NULL THEN usd_amount       ELSE native_amount * price     END as usd_amount   FROM zapins z   JOIN ethereum.token_prices_hourly p     ON (date = p.hour AND z.token_address = p.token_address)   ) SELECT   date_trunc('day', date) as date,   CASE    WHEN symbol IN ('USDC', 'USDT', 'DAI', 'WETH', 'RENBTC', 'WBTC', 'LINK', 'FRAX') THEN symbol    ELSE 'Other'   END as symbol,   sum(usd_amount) as total FROM final GROUP BY 1, 2
7ff1700a-f65c-456c-8a5b-96be6126d93f,Loop Airdrop claims - all time [T93],WITH claims AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(event_attributes:"1_amount"::float) / pow(10,6) as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra1atch4d5t25csx7ranccl48udq94k57js6yh0vk' -- loop airdrop contract     AND tx_status = 'SUCCEEDED'   GROUP BY 1   ) SELECT   *,   sum(amount) OVER (ORDER BY date) as cumulative,   avg(amount) OVER (ORDER BY date ROWS BETWEEN 8 PRECEDING AND CURRENT ROW) as moving_avg FROM claims
803d044a-2de1-4720-b678-44aa774dca9f,UST balance on 3 notable dates [T49],WITH epochs AS ( SELECT   date,   sum(balance) as ust_balance FROM terra.daily_balances WHERE currency = 'UST'   AND (date LIKE '2020-12-03%' 	OR date LIKE '2021-03-17%'     OR date = CURRENT_DATE) GROUP BY 1) SELECT   CASE     WHEN date LIKE '2020%' THEN 'Mirror Launch'     WHEN date LIKE '2021-03%' THEN 'Anchor Launch'     WHEN date = CURRENT_DATE THEN 'Today'   END AS event,   ust_balance,   ust_balance - LAG(ust_balance) OVER (ORDER BY date) as ust_increase,   DATEDIFF(day, LAG(date) OVER (ORDER BY date), date) as days_between,   ust_increase / days_between as avg_daily_ust FROM epochs
82f5a555-02a1-4545-a33d-7e8907bf446b,Terra Wormhole - Outbound UST Traffic capped 4mm [T101] [T103],WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), outbound_ust AS (   SELECT     date_trunc('day', block_timestamp) as date,     chain_ids.name,     token,     sum(amount) as amount,     count(1) as tx_count   FROM outbound   JOIN chain_ids ON outbound.destination_chain_id = chain_ids.id   WHERE token = 'UST'     AND amount < 4000000   GROUP BY 1,2,3     )    SELECT   *,   amount / tx_count as avg_transfer,   sum(amount) OVER (PARTITION BY name ORDER BY date) as cumsum FROM outbound_ust
f29cf5ec-f7dc-46d9-876b-1e10a3ba31cb,Terra Wormhole - recent UST Transfer Spread [T101] [T103],WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   )    SELECT   date_trunc('day', block_timestamp) as date,   chain_ids.name,   token,   amount FROM outbound JOIN chain_ids ON outbound.destination_chain_id = chain_ids.id WHERE token = 'UST'   AND amount < 4000000
8fcf08a8-d377-4db5-ab09-6708d2760358,Untitled Query,select * from osmosis.core.fact_liquidity_provider_actions   where tx_id = '42D30457023215948254C76B0585152C8DEDCBF2A6463DA082DC1FAE1E9C2C1B'
eefde88d-2fa9-4783-aa83-ec9a14d4b639,Untitled Query,SELECT date_trunc('month', s.created_at) AS period, count(distinct s.created_by_id) AS unique_user_submission_count from bi_analytics.silver.bounties b LEFT JOIN bi_analytics.silver.claims cl ON b.id = cl.bounty_id LEFT JOIN bi_analytics.silver.submissions s ON cl.id = s.claim_id WHERE period IS NOT NULL group by period
8864e5c8-70a6-4429-9659-113089afac60,timezone change,SELECT    block_timestamp,   CONVERT_TIMEZONE('America/New_York', block_timestamp) as EST FROM terra.msgs LIMIT 100
850c37f0-2076-4737-a483-a4a5477adb17,Untitled Query,select * from near.core.dim_token_labels
8760c133-b623-47f0-97df-0739fa80e38e,nothing,with in_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapIn'     AND contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' -- yVault ZapIn contract   ), -- originating from the yvboost pool boost_in AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN in_txs ON e.tx_id = in_txs.tx_id   WHERE from_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvboost   ) SELECT * FROM ethereum.udm_events e RIGHT JOIN boost_in ON e.tx_id = boost_in.tx_id WHERE origin_address = from_address -- -- not all have amount_usd info so we need to join w prices hourly -- zapins AS ( --   SELECT --     date_trunc('hour', block_timestamp) as date, --     contract_address as token_address, --     sum(amount) as native_amount, --     sum(amount_usd) as usd_amount --   FROM ethereum.udm_events e --   RIGHT JOIN boost_in ON e.tx_id = boost_in.tx_id --   WHERE block_timestamp > '2021-04-29T23:59:59Z' --     AND origin_address = from_address --   GROUP BY 1, 2 --   ORDER BY 1, 4 desc --   ), -- final AS ( --   SELECT --     date, --     symbol, --     native_amount, --     price, --     CASE --       WHEN usd_amount IS NOT NULL THEN usd_amount --       ELSE native_amount * price --     END as usd_amount --   FROM zapins z --   JOIN ethereum.token_prices_hourly p --     ON (date = p.hour AND z.token_address = p.token_address) --   ) -- SELECT --   symbol, --   sum(usd_amount) as total -- FROM final -- GROUP BY 1 -- select * from ethereum.udm_events where tx_id = '0x0144380d16ccd6ec47393a81f0f1b901c39c19449d9d5706e5f25968b1a20eb9' -- SELECT * from ethereum.udm_events where contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' and event_name = 'zapIn'
872ab2fb-07ed-4723-ac14-b15a854e4632,lebron sales,WITH sales as (   select       trunc(block_timestamp,'day') as date, -- shorthand can just do block_timestamp::date to convert to day       -- i'd also avoid using date as it is a keyword, personally i just name it _date, others do like block_date or bdate       tx_id,       nft_collection,       marketplace,       avg(price) over (partition by marketplace order by date) as avg_price       -- looks like you're not using the marketplace later       -- notice in results, there are multiple responses per date       -- either dont partition out by marketplace contract, or do but use that info     from       flow.core.ez_nft_sales     where       nft_collection ilike '%TopShot%'       and current_date::date-block_timestamp::date <= 14 -- or block_timestamp::date >= current_date - interval '14 days'     -- current_date is already a date, dont need to cast. current_timestamp would be the exact time       limit 100000 -- meh, not too important when you're limiting to the past 2 weeks   ), lebron as (     select       player,       nft_collection     from       flow.core.dim_topshot_metadata     where       player ilike '%Lebron%'     -- nft collection is just going to be the topshot contract     -- you need nft id to get lebron's topshots   ), lebron_sales as (     select       *     from       sales       JOIN lebron ON sales.nft_collection = lebron.nft_collection        -- always specify what type of join you want       -- https://joins.spathon.com/       -- also need nft id, not collection. you're getting all topshots, here       -- i don't like using a join to filter, this should do:       -- where nft_id in (select distinct nft_id from lebron)      ) select  date, avg_price from lebron_sales group by 1, 2 -- no aggregation happening here, thus no groupby needed                 -- https://mode.com/sql-tutorial/sql-group-by/ order by 1 desc limit 10000
44d62bd6-25eb-4a18-9237-ed5ebadee79f,Untitled Query,select * from flow.core.fact_nft_sales   where nft_collection = 'A.01ab36aaf654a13e.RaribleNFT';
ecf1aa3b-7003-4b37-a898-6eab1b1b9601,ETH -> USDT,with eth_sells as ( select   block_timestamp,   tx_hash,   eth_value,   gas_price,   gas_used,   tx_json:receipt:logs[2]:decoded:inputs:tokens_bought / pow(10,6) as tether_amount,   tx_json from ethereum_core.fact_transactions where from_address = '0x6b671b51258db0316dd89bc0075d6113488be5e8' and to_address = '0xd51a44d3fae010294c616388b506acda1bfaae46' and block_timestamp > '2022-05-07'   and tx_json:receipt:logs[1]:decoded:contractName = 'TetherToken' ) select 	date_trunc('h', block_timestamp) as hour, 	sum(eth_value) as eth_sold,   	sum(tether_amount) as usdt_bought,   	sum(eth_sold) over (order by hour) as cumulative_eth,   	sum(usdt_bought) over (order by hour) as cumulative_usdt from eth_sells group by 1 order by 1
a95eaafd-7c0e-4abc-a625-437c1eef506d,Untitled Query,select * from flow.core.dim_topshot_metadata limit 10
0660c65e-2b82-47cc-8828-aab70abfd5d3,LOOP-UST pool withdrawals [T93],SELECT * FROM terra.msg_events WHERE tx_id = 'FA3CA22689966ED1A01F225A4194F9BDDDDA406B9333B93B3D4D612EBC075DCA'
a947ce21-e34b-4f38-9ed7-fed8b3b37e09,UST On-chain Peg from Swaps [1],with ust_swaps as ( select   block_id,   case     when token_0_currency = 'UST' then price0_usd     else price1_usd   end as ust_price    from terra.classic.ez_swaps    where ask_currency = 'UST' or offer_currency = 'UST'   -- and block_timestamp > current_date - 3   and block_id >= 7536784 -- first block on 5/7   and price0_usd is not null    and price1_usd is not null   )    select     floor(block_id, -3) as block_group, 	avg(ust_price) as avg_peg from ust_swaps where block_id >= 7536784 -- first block on 5/7 UTC   -- and block_id <= 7562591 -- last block on 5/8 UTC   and block_id <= 7700000 group by 1 order by 1
0298a804-174d-4fcd-99a1-4dd57a4866be,Copy of Untitled Query,select block_timestamp::date as date,     txn_hash::string as txn_hash,     (parse_json(trim(args))):amount as asset_amount    (parse_json(args)):recipient as eth_address   from flipside_prod_db.mdao_near.actions_events_function_call   where action_name = 'FunctionCall'   and method_name = 'withdraw' -- ERC20 tokens   -- and (parse_json(trim(args))):amount::string is not null   -- and eth_address is not null    and date = '2022-07-01'    and args like '{"%' limit 100
4c023798-297f-4972-a909-ef2226fe8921,fabricant events,select event_contract, event_type, count(1) from flow.core.fact_events where event_contract ilike '%fabricant%'     -- in      -- ('A.09e03b1f871b3513.TheFabricantS1ItemNFT',     -- 'A.7752ea736384322f.TheFabricantS2ItemNFT',     -- 'A.a0cbe021821c0965.TheFabricantMysteryBox_FF1',     -- 'A.09e03b1f871b3513.TheFabricantMarketplace') group by 1, 2 order by 3 desc, 1, 2;
15d0ff0e-5006-42ae-a172-a71ebef4daba,Untitled Query,select max(block_timestamp) from mdao_near.blocks limit 10
48bb1a60-96ce-4d69-937d-24b4b20c9258,Untitled Query,select * from flow.core.fact_prices order by timestamp desc limit 100;
09baee0f-e01e-425e-bcbc-93e0fc386f1a,New Tx Signers, Monthly 2022,with new_signers as ( SELECT    tx_signer,   min(block_timestamp) as first_signing_date FROM near.core.fact_transactions WHERE tx_status = 'Success' 	AND block_timestamp::DATE >= '2022-01-01'   	AND block_timestamp::DATE <= '2022-12-31' GROUP BY 1 ) select   date_trunc('month',first_signing_date) as "Month",   count(distinct tx_signer) as "New Transaction Signers" from new_signers group by 1 order by 1
09ff78ab-6eb7-4847-9573-67969abf2da0,anchor collateral tcl vs tvl [T33] - december copy,-- withdraw message did not change so this is still fine WITH withdraw AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:execute_msg LIKE '%withdraw_collateral%'   GROUP BY 1 ), -- lock collateral before col 5. ends 9/30 deposit as (   SELECT   	  date_trunc('day', block_timestamp) as date,   	  sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit 	FROM terra.msgs  	WHERE tx_status = 'SUCCEEDED'   	  AND msg_value:execute_msg:send:msg LIKE '%deposit_collateral%'       and block_timestamp < '2021-10-01T00:00:00Z'   	GROUP BY 1 ), -- post col-5. begins 10/1 lock_collateral_col_five as (   select   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:send:amount / pow(10,6)) as amount from terra.msgs where tx_status = 'SUCCEEDED'   and msg_value:contract = 'terra1kc87mu460fwkqte29rquh4hc20m54fxwtsx7gp' --bLUNA   and msg_value:execute_msg:send:msg = 'eyJkZXBvc2l0X2NvbGxhdGVyYWwiOnt9fQ=='   and block_timestamp > '2021-09-30T23:59:59Z'   group by 1 ), all_lock as (   select * from deposit   union   select * from lock_collateral_col_five ), prices as (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-03-01T00:00:00Z'   GROUP BY 1 ), collateral as (   select   	withdraw.date,   	withdraw.bluna_withdraw,   	all_lock.bluna_deposit   from withdraw   join all_lock using (date) ), aggregation as (   select   	date,     sum(bluna_deposit - bluna_withdraw) OVER (ORDER BY date) as cumulative_provided_bluna_collateral   from collateral ), final as (   select   	aggregation.date,   	avg_price,   	cumulative_provided_bluna_collateral,   	(avg_price * cumulative_provided_bluna_collateral) as collateral_value   from aggregation   join prices using (date)   where date < CURRENT_DATE ) select * from final
3d0f0e84-84fc-494a-8c2c-52170324d4e5,Top / Whale USDC Stablecoin Bridge Volume [P1],SELECT   block_timestamp as date,   contract_name as coin,   CASE   	WHEN contract_name = 'USD Coin' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)     WHEN contract_name = 'USD Coin' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)   END AS amount,   tx_id FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'Transfer'   AND contract_name = 'USD Coin'   AND amount > 49999999 -- 50mm is a high bar   AND tx_succeeded = 'TRUE'    ORDER BY 3 desc
3cf319ee-2fcf-4804-a5c0-a4b38ca2711f,yveCRV new approvals - from boost? [YC1],SELECT   from_address,   count(*) FROM ethereum.transactions WHERE to_address = '0xc5bddf9843308380375a611c18b50fb9341f502a' -- yveCRV Vault   AND function_name = 'approve'   AND block_timestamp > '2021-09-01T23:59:00Z' GROUP BY 1
f34e5a5d-06c0-48e5-acf1-4730358662b5,Untitled Query,
0d33ed24-a2f8-472c-bae0-a7c92f7dce3e,ENS Airdrop Claims by price block [ENS4],with claims as (   select     date_trunc('hour', block_timestamp) as date,     event_inputs:value / pow(10,16) as amount   from ethereum.events_emitted   where contract_address ='0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'     and event_name = 'Claim'   ), price as (   select     hour as date,   	price   from ethereum.token_prices_hourly   where symbol = 'ENS' ), aggregation as (   select     claims.date as date,   	claims.amount as amount,   	round(price.price,0) as price   from claims   left join price using (date) ), final as (   select 	price,   	sum(amount) as amount   from aggregation   group by 1 ) select * from final
20dea568-f936-4539-adc4-bb5777e0cd50,Untitled Query,select  * from  terra.msgs  where msg_value:contract::string = 'terra1chrdxaef0y2feynkpq63mve0sqeg09acjnp55v'  and   msg_value:sender::string = 'terra1v7v2nqs7flrpqqam7l5ulvnva8ly8j653sw4n3' and   msg_value:execute_msg:mint is not null and   tx_status = 'SUCCEEDED'
459a57b8-c281-4de7-9b3d-3c921262fa91,opensea activity,SELECT   date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,   count(*) FROM ethereum.nft_events WHERE event_platform = 'opensea'   AND CONVERT_TIMEZONE('America/New_York', block_timestamp) > GETDATE() - interval '72 hours' GROUP BY 1 ORDER BY 1
40126abe-b64c-4328-8672-f25f82c48c32,Daily Pool Stats [THOR4],SELECT   day,   pool_name,   swap_volume_rune,   swap_volume_rune_usd, -- this is the info of note for the bounty   to_asset_swap_volume,   to_rune_swap_volume,   rune_price_usd FROM thorchain.daily_pool_stats WHERE day > CURRENT_DATE - interval '24 hours'   AND swap_volume_rune > 0 ORDER BY day, swap_volume_rune_usd desc LIMIT 10
f42679eb-45f0-4835-a12e-0ce3585328b9,Untitled Query,select * from terra.transfers limit 100
4068ef74-de62-4ac6-bb1c-b21eedd0b333,ETH vs Stables Bridged to polygon [P1],WITH eth AS ( SELECT   date_trunc('week', block_timestamp) as date,   sum(event_inputs:amount::float) / pow(10,18) as eth_amount FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'LockedEther'   AND block_timestamp > CURRENT_DATE - interval '4 months'   AND tx_succeeded = 'TRUE' GROUP BY 1), stables AS ( SELECT   date_trunc('week', date) as date,   sum(amount) as stables_amount FROM ( SELECT   block_timestamp as date,   CASE -- tether and usdc = 6, dai and ust = 18 decimals     WHEN contract_name = 'Tether USD' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)      WHEN contract_name = 'Tether USD' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6) -- why 2 ways? this is annoying   	WHEN contract_name = 'USD Coin' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,6)   	WHEN contract_name = 'USD Coin' AND event_inputs:tokenId IS NOT NULL THEN event_inputs:tokenId::float / pow(10,6)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:value IS NOT NULL THEN event_inputs:value::float / pow(10,18)     WHEN contract_name = 'Multi-collateral DAI' AND event_inputs:wad IS NOT NULL THEN event_inputs:wad::float / pow(10,18)     WHEN contract_name = 'Wrapped UST' THEN event_inputs:value::float / pow(10,18)   END AS amount FROM ethereum.events_emitted WHERE tx_to_address = '0xa0c68c638235ee32657e8f720a23cec1bfc77c77' -- polygon bridge   AND event_name = 'Transfer'   AND contract_name IN ('Multi-collateral DAI', 'Wrapped UST', 'Tether USD', 'USD Coin')   AND tx_succeeded = 'TRUE'   AND block_timestamp > CURRENT_DATE - interval '4 months') GROUP BY 1 ) SELECT   eth.date,   stables_amount,   eth_amount FROM eth LEFT JOIN stables ON eth.date = stables.date
4173bd61-7b74-4f96-adbc-c91e173da494,anchor collateral combined deposit and withdraw [T33],WITH withdraw AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:withdraw_collateral:amount::float) / pow(10,6) as bluna_withdraw FROM terra.msgs WHERE tx_status = 'SUCCEEDED'   AND msg_value:execute_msg LIKE '%withdraw_collateral%' GROUP BY 1) SELECT   deposit.date,   bluna_deposit,   bluna_withdraw,   bluna_deposit - bluna_withdraw as net_bluna_deposit,   sum(bluna_deposit - bluna_withdraw) OVER (ORDER BY deposit.date) as cumulative_provided_bluna_collateral FROM 	(SELECT   	  date_trunc('day', block_timestamp) as date,   	  sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as bluna_deposit 	FROM terra.msgs  	WHERE tx_status = 'SUCCEEDED'   	  AND msg_value:execute_msg:send:msg LIKE '%deposit_collateral%'   	GROUP BY 1) deposit LEFT JOIN withdraw ON withdraw.date = deposit.date ORDER BY 1
f5281975-83f9-4133-994b-5385a8e57789,Untitled Query,
41c3acc8-8964-47aa-aa24-677e9535fbb5,Untitled Query,-- Payout 27.99 FLOW -- Grand Prize 83.96 FLOW -- Level Intermediate -- Q5. NBA Top Shot allows users to buy, sell, and collect NBA NFTs that showcase influential “Moments” minted on the FLOW blockchain. -- Create a visualization tracking the total sales volume traded on NBA Top Shot since May 9th by day. -- How many unique wallets have made a trade on Top Shot over that timeframe? -- How do those metrics compare to sales volume and unique users of Magic Eden on Solana and OpenSea on Ethereum? with nft_sales as (   select      *   from flow.core.fact_nft_sales   where block_timestamp >= '2022-05-09'   and marketplace ilike 'A.c1e4f4f4c4257510.%' ) select   block_timestamp::date as date,   count(distinct tx_id) as n_txns,   sum(price) as sale_volume,   count(distinct buyer) as n_wallets_daily,   (select count(distinct buyer) from nft_sales) as n_wallets_unique from nft_sales group by date
49e06a0a-427e-4681-bb05-46f2426ecd72,Beer is NEAR, Top Spending Wallets (9/11-9/18),WITH txs AS (     SELECT         *     FROM         near.core.fact_transactions     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'    ), usn AS (     SELECT         *     FROM         near.core.ez_usn_supply     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18' ), prices AS (     SELECT         DATE_TRUNC(             'm',             TIMESTAMP         ) AS block_timestamp,         symbol,         AVG(price_usd) AS price_usd     FROM         near.core.fact_prices     WHERE         symbol = 'NEAR'         AND TIMESTAMP :: DATE BETWEEN '2022-09-11' AND '2022-09-18'     GROUP BY         1,         2 ), transfers AS (     SELECT         *     FROM         near.core.fact_transfers     WHERE         block_timestamp :: DATE BETWEEN '2022-09-11' AND '2022-09-18'         AND tx_receiver = 'beertruck.near' ), go_pay_txs AS (     SELECT         *     FROM         txs     WHERE         tx_receiver = tx_signer         AND tx :actions ILIKE '%deleteaccount%gopaywith.near%' ), -- near beer_truck AS (     SELECT         *     FROM         txs     WHERE         tx_signer IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND tx_receiver = 'beertruck.near' ), spender AS (     SELECT         *     FROM         txs     WHERE         tx_receiver IN (             SELECT                 tx_receiver             FROM                 go_pay_txs         )         AND tx_receiver != tx_signer         AND tx_receiver != 'usn' ), near_sales AS (     (         SELECT             s.tx_hash AS tx_hash_spender,             b.tx_hash AS tx_hash_beertruck_transfer,             DATE_TRUNC(                 'm',                 b.block_timestamp             ) AS block_timestamp,             b.tx_receiver AS receiver,             s.tx_signer AS spender,             b.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS deposit_amount,             s.tx :actions [0] :Transfer :deposit :: FLOAT / pow(                 10,                 24             ) AS withdraw_amount,             'NEAR' AS currency         FROM             beer_truck b             LEFT JOIN spender s             ON b.tx_signer = s.tx_receiver     ) ), direct_transfers AS (     SELECT         'n/a' AS tx_hash_spender,         tx_hash AS tx_hash_beertruck_transfer,         DATE_TRUNC(             'm',             block_timestamp         ) AS block_timestamp,         tx_receiver AS receiver,         tx_signer AS spender,         deposit / pow(             10,             24         ) AS deposit_amount,         0 AS withdraw_amount,         'NEAR' AS currency     FROM         transfers     WHERE         tx_hash_beertruck_transfer NOT IN (             SELECT                 tx_hash_beertruck_transfer             FROM                 near_sales         ) ), near_combo AS (     SELECT         *     FROM         near_sales     UNION     SELECT         *     FROM         direct_transfers ), near_final AS (     SELECT         tx_hash_spender,         tx_hash_beertruck_transfer,         s.block_timestamp,         receiver,         spender,         deposit_amount,         withdraw_amount,         currency,         price_usd * deposit_amount AS deposit_amount_usd,         price_usd * withdraw_amount AS withdraw_amount_usd     FROM         near_combo s         LEFT JOIN prices p USING (block_timestamp) ), usn_amount_out AS (     SELECT         *,         to_address AS temp_addr     FROM         usn     WHERE         to_address IN (             SELECT                 tx_signer             FROM                 go_pay_txs         )         AND from_address != 'gopaywith.near' ), usn_amount_in AS (     SELECT         *,         from_address AS temp_addr     FROM         usn     WHERE         to_address = 'beertruck.near'         AND from_address IN (             SELECT                 to_address             FROM                 usn_amount_out         ) ), usn_combo AS (     SELECT         o.tx_hash AS tx_hash_spender,         i.tx_hash AS tx_hash_beertruck_transfer,         o.block_timestamp,         i.to_address AS receiver,         o.from_address AS spender,         i.amount AS deposit_amount,         o.amount AS withdraw_amount,         'USN' AS currency,         deposit_amount AS deposit_amount_usd,         withdraw_amount AS withdraw_amount_usd     FROM         usn_amount_out o         LEFT JOIN usn_amount_in i USING (temp_addr)     WHERE         i.to_address = 'beertruck.near' ), FINAL AS (     SELECT         *     FROM         usn_combo     UNION     SELECT         *     FROM         near_final qualify ROW_NUMBER() over (             PARTITION BY tx_hash_beertruck_transfer             ORDER BY                 block_timestamp         ) = 1 ) select   spender,   sum(deposit_amount_usd) as gross_sales_usd from final group by 1 order by 2 desc
45149f65-c37d-4648-9f3a-13f11c6ebf69,ENS Airdrop Claims vs Price [ENS4],with claims as (   select     date_trunc('hour', block_timestamp) as date,     event_inputs:value / pow(10,16) as amount   from ethereum.events_emitted   where contract_address ='0xc18360217d8f7ab5e7c516566761ea12ce7f9d72'     and event_name = 'Claim'   ), price as (   select     hour as date,   	price   from ethereum.token_prices_hourly   where symbol = 'ENS' ), final as (   select     claims.date as date,   	claims.amount as amount,   	price.price as price   from claims   left join price using (date) ) select * from final
4505471f-cde1-4574-b279-a20c8e1b5d0f,Bridge Overview copy,-- connext with   connext_eth as (     -- 0x31efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09     select       'Ethereum' "Chain",       date_trunc('minute', block_timestamp) "time",       date_trunc('day', block_timestamp) "date",       to_varchar(concat('0x', substr(data, 3 + 5 * 64 + 24, 40))) address,       ethereum.public.js_hex_to_int (substr(data, 3 + 18 * 64 + 24, 40)) / pow(10, 18) amount,       '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' token,       tx_hash     from       ethereum.core.fact_event_logs     where       contract_address = '0x31efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09'       and block_timestamp >= '2022-06-22'       and to_varchar(concat('0x', substr(data, 3 + 9 * 64 + 24, 40))) in (         '0x0000000000000000000000000000000000000000',         '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'       )       and ethereum.public.js_hex_to_int (substr(data, 3 + 17 * 64 + 24, 40)) = 42161   ),   connext_opt as (     select       'Optimism' "Chain",       date_trunc('minute', block_timestamp) "time",       date_trunc('day', block_timestamp) "date",       TO_VARCHAR(concat('0x', substr(topics[1], 3 + 24, 40))) address,       ethereum.public.js_hex_to_int (substr(data, 3 + 13 * 64, 64)) / pow(10, 18) amount,       '0x965f84d915a9efa2dd81b653e3ae736555d945f4' token,       tx_hash     from       optimism.core.fact_event_logs     where       contract_address = '0x31efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09'       and block_timestamp >= '2022-06-22'       and topics[0] = '0x88fbf1dbc326c404155bad4643bd0ddadd23f0636929c66442f0433208b2c905'       and ethereum.public.js_hex_to_int (substr(data, 3 + 12 * 64, 64)) = 42161   )   -- no tx on polygon recently https://polygonscan.com/address/0x31efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a09, cause' need $351.66 gas! ,   connext_arb as (     select       *     from       connext_eth     union all     select       *     from       connext_opt   ),   connext_tx_agg as (     select       'Connext' "name",       "date",       count(*) txn,       count(distinct address) wallets,       sum(amount) amount     from       connext_arb     group by       1,       2   ) select   * from   connext_tx_agg
f60f86b0-2a30-41dc-95b1-7febcbe18539,Untitled Query,
f6704de3-dd0c-479f-81ec-8d5d095307a0,Untitled Query,
eab36f94-0c88-4d9d-b223-5ad061a12bdd,root of redelegation [T44],SELECT  * FROM terra.staking WHERE delegator_address = 'terra17fc39atdvxgum707qcejv3w9jeznnxvy6tx786' -- select * from terra.msg_events where tx_id = '7D6D5E5EB2EE61993D613E92BFD4C7CDA73264EABC672355FD56485BCAE46A77'
f677e62e-6451-411b-b922-e4900e65c93a,Polygon Activity vs ETH activity [P7],SELECT * FROM polygon.udm_events  WHERE amount > 0   limit 100
009816d8-2b0a-4802-9c55-017e38998ef8,outstanding-red copy,-- select --   utc_date, --   total_supply, --   total_locked_supply, --   circulating_supply -- from --   near.atlas.ez_supply -- order by 1  -- ; select   date_trunc('week', block_timestamp) as week,   max(header:total_supply :: DOUBLE) / pow(10, 24) as token_supply from   near.core.fact_blocks where   date_trunc('week', block_timestamp) >= '2024-01-01' group by   1 order by   1
2cea348c-d462-4211-9f7e-ace2d28d10ab,Untitled Query,select * from flipside_prod_db.ethereum_core.fact_transactions where TX_HASH = '0x900283abdb06c51b52d560a89d322d40de95c4b44cd753c0164ec231b27f3ac1'
4a9f4dea-598c-4174-98f1-590e48785304,UST Peg on Ethereum, from Swaps copy,-- forked from UST Peg on Ethereum, from Swaps @ https://flipsidecrypto.xyz/edit/queries/30d89f57-0e26-4286-9269-bb707137878a  with ust_in as ( select   block_number,   convert_timezone('UTC', 'America/Denver', block_timestamp) as block_timestamp,   tx_hash,   amount_out_usd / amount_in as ust_price    from ethereum.core.ez_dex_swaps where token_in = '0xa693b19d2931d498c5b318df961919bb4aee87a5'   and block_timestamp ilike '2022-05%' ), ust_out as (   select     block_number,     convert_timezone('UTC', 'America/Denver', block_timestamp) as block_timestamp,     tx_hash,     amount_in_usd / amount_out as ust_price        from ethereum.core.ez_dex_swaps   where token_out = '0xa693b19d2931d498c5b318df961919bb4aee87a5'     and block_timestamp ilike '2022-05%'    ), combo as (   select * from ust_in   union   select * from ust_out    ) select   -- floor(block_number,-2) as block_number,   date_trunc('minute', block_timestamp) as time_period,   avg(ust_price) as ust_price from combo -- where block_number >= 14726564 -- first block on 5/7 UTC -- 	-- and block_number <= 14739154 -- last block on 5/8 UTC --   and block_number <= 14775000 where block_timestamp between '2022-05-10T12:00:00Z' and '2022-05-10T23:30:00Z' group by 1 order by 1 -- first on 5/7: 14726564 -- last on 5/8: 14739154
4b8c8445-2948-40f9-8a7d-f6d5d58174a3,NFT Mints Query Examples copy,-- forked from NFT Mints Query Examples @ https://flipsidecrypto.xyz/edit/queries/91c9311a-43db-4f81-9732-2780fd60ac74  with result_set as (   SELECT         block_timestamp,         nft_address,          nft_to_address,         mint_price_eth,          tx_fee     FROM ethereum.core.ez_nft_mints      WHERE block_timestamp::date = '2023-05-06' ) -- general stats -- select  --   count(1), --   count(distinct nft_address), --   sum(mint_price_eth), --   sum(tx_fee), --   min(block_timestamp), --   max(block_timestamp) -- from result_set -- compare to df output -- select --   nft_address, --   avg(mint_price_eth) as avg_mint_eth, --   max(mint_price_eth) as max_mint_eth, --   sum(tx_fee) as gross_fees, --   count(1) as ct -- from result_set -- group by 1 -- order by 4 desc -- unique minter ratio -- select --   nft_address, --   count(distinct nft_to_address) as unique_minters, --   count(1) as total_mints, --   unique_minters / total_mints as u_ratio -- from result_set -- group by 1 -- order by 4 desc, 2 desc  -- most minters select   nft_address,   count(1) from result_set group by 1 order by 2 desc limit 10
4bae78df-4092-4c6c-a99a-d7cb66466406,USDT->UST aggregated,with swaps as ( select   tx_hash,   block_timestamp,   value:decoded:inputs:tokens_bought / pow(10,6) as ust_bought,   value:decoded:inputs:tokens_sold / pow(10,18) as usdt_sold    from ethereum_core.fact_transactions, lateral flatten( input => tx_json:receipt:logs ) where block_timestamp > '2022-05-07'   and from_address = '0x6b671b51258db0316dd89bc0075d6113488be5e8'   and value:decoded:eventName = 'TokenExchangeUnderlying'   ) select 	date_trunc('h', block_timestamp) as hour, 	sum(ust_bought) as gross_ust, 	sum(usdt_sold) as gross_usdt, 	sum(gross_ust) over (order by hour) as cumulative_ust, 	sum(gross_usdt) over (order by hour) as cumulative_usdt from swaps group by 1 order by 1
f823c33d-6d47-4f07-977e-cc6225a7edc5,ANC yield reserve balance [T33],SELECT   date_trunc('d', date) as date,   balance as daily_ust_balance FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   AND currency = 'UST'   and date > '2021-03-16T23:59:59Z'
4c0d2d06-820a-4a8b-a79e-716db04792f4,Distinct TXs - ENS ,with register as ( select 	*   from ethereum.udm_events  where to_label = 'ens' and symbol = 'ETH'   and block_timestamp > CURRENT_DATE - 90 ) select 	date_trunc('day', block_timestamp), 	count(distinct tx_id) from register group by 1
f8bf1922-5564-4716-9a34-c48c874b4fdd,Untitled Query,
502435d4-b7c0-4057-9405-fbd9573b5249,Terra Wormhole - Outbound UST,WITH outbound AS ( SELECT   block_timestamp,   tx_id,   event_attributes:"transfer.recipient_chain" as destination_chain_id,   CASE     WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'     ELSE 'LUNA'   END as token,   event_attributes:"transfer.amount" / pow(10,6) as amount FROM terra.msg_events WHERE block_timestamp > '2021-10-18T00:00:00Z'   AND event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ) SELECT * from outbound WHERE amount > 25000000
918b95a9-6c7a-4a2e-b66c-e2ef30fb177f,USDT->UST Swaps,select   tx_hash,   block_timestamp,   value:decoded:inputs:tokens_bought / pow(10,6) as ust_bought,   value:decoded:inputs:tokens_sold / pow(10,18) as usdt_sold    from ethereum_core.fact_transactions, lateral flatten( input => tx_json:receipt:logs ) where block_timestamp > '2022-05-07'   and from_address = '0x6b671b51258db0316dd89bc0075d6113488be5e8'   and value:decoded:eventName = 'TokenExchangeUnderlying'
41784544-3319-43e6-8411-1cda0bb8cb76,Untitled Query,select * from flow.core.fact_nft_sales   where nft_collection ilike '%allday%'   and buyer = '0x69a1f5cefd1e0fdf' limit 10;
5589b004-51c6-4fab-87b3-d931a43fb7e8,lota stake unbonding claim,SELECT   date_trunc('hour', block_timestamp) as date,   sum(event_attributes:"0_amount"::float) / pow(10,6) as lota_unbonded FROM terra.msg_events WHERE tx_status = 'SUCCEEDED' 	AND event_attributes:"0_contract_address" = 'terra1342fp86c3z3q0lksq92lncjxpkfl9hujwh6xfn' 	AND event_attributes:"0_action" LIKE '%withdraw_stake%' 	AND block_timestamp > GETDATE() - interval '72 hours' GROUP BY 1 ORDER BY 1
51cac436-5968-4147-ac2f-45b313dc4e49,chai volume [T45] [T68],WITH chai AS ( SELECT    -- compute daily volume and tx count   date_trunc('day', block_timestamp) as date,   sum(event_amount) as krt_amount,   sum(event_amount_usd) as usd_amount,   count(distinct tx_id) as transactions FROM terra.transfers WHERE (event_from_address_label = 'chai'          OR event_to_address_label = 'chai')   AND block_timestamp > '2021-03-01T00:00:00Z'   AND block_timestamp < CURRENT_DATE GROUP BY 1 ORDER BY 1) SELECT   date,   transactions,   usd_amount,   avg(usd_amount) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_usd,   avg(transactions) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma_tx_count FROM chai
525d00de-ae60-46b0-a79b-a47b5f4ebdfd,16 eth shuttle query 1,SELECT date_trunc('day', block_timestamp) as date,   event_currency,   sum(event_amount),   sum(event_amount_usd) FROM terra.transfers -- event_from so this is ETH->terra WHERE event_from = 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' 	AND block_timestamp > GETDATE() - interval '6 months'   	AND tx_status = 'SUCCEEDED' GROUP BY 1,2 ORDER BY 1
087d69c5-d005-4d44-a4c1-29fa93568320,Untitled Query,select * from flipside_prod_db.mdao_near.transfers limit 10
15cdd4ed-c43d-489e-a54c-061c58edf535,Recent Activity ,with social_txs as (   select * from near.core.fact_transactions    where (lower(tx_receiver) = 'social.near'     or lower(tx_signer) = 'social.near')     and block_timestamp::date between '2022-12-13' and '2022-12-14'    ), primary_modules as ( select    block_timestamp,   method_name,   tx_hash,   try_parse_json(args) as args,   object_keys(try_parse_json(args):data)[0]::string as wallet_address,   object_keys(get(try_parse_json(args):data, wallet_address))[0]::string as module,   get(get(try_parse_json(args):data, wallet_address), module) as module_value from near.core.fact_actions_events_function_call    where tx_hash in (select tx_hash from social_txs)     and method_name = 'set' ) select    -- block_timestamp::date as "Date",   module as "Module",   count(distinct tx_hash) as "Transactions" from primary_modules  -- where module not in ('index', 'widget', 'graph', 'HotOrBot', 'profile', 'post', 'nametag') group by 1 order by 2 desc
52bcae2a-b9c7-436f-920e-076f5130380e,Apollo Zap-In,SELECT   block_id,   event_attributes:"0_action" as action,   event_attributes:"0_amount" / pow(10,6) as ust_amount,   event_attributes:ask_asset as token_contract,   address_name,   tx_id FROM terra.msg_events LEFT JOIN terra.labels   ON event_attributes:ask_asset = labels.address WHERE (tx_id = 'F42B4576978324C675C625881146330E50C5AC3D70A02460E2391E727DD91580' -- MINE   OR tx_id = 'E5D73C317D28CA3E7DC15BAC660C35DA5281423A8732FA9DF28DD2CA81FAD38E') -- ANC   AND event_type = 'from_contract'
2333e2c1-0480-42e7-ab33-81b65643cef0,Untitled Query,select * from terra.classic.ez_staking limit 100;
fa8d8e61-85c7-45e4-b87c-5f951672a187,Untitled Query,
5cd9896a-721b-4b4f-a47a-22dfcad8a012,mosquito dawn,WITH users AS ( -- WITH base AS (   SELECT     date_trunc('day', block_timestamp) as date,     msg_value:sender as address   FROM terra.msgs   WHERE msg_value:sender IS NOT NULL     and block_timestamp > CURRENT_DATE - 7 -- ), UNION -- staking AS (   SELECT     date_trunc('day', block_timestamp) as date,     msg_value:delegator_address as address   FROM terra.msgs   WHERE msg_value:delegator_address IS NOT NULL     AND block_timestamp > CURRENT_DATE - 7     AND msg_module != 'oracle'     AND msg_module != 'core'   -- ) ) SELECT   date,   count(distinct address) FROM users GROUP BY 1 ORDER BY 1
22ef336d-b7a4-4c98-8c2b-f8b140ce2b86,Copy of UST - Mayday,SELECT  	date_trunc('hour', block_timestamp) as hour,   	avg(price_USD) as hourly_price FROM terra.oracle_prices WHERE SYMBOL = 'UST' 	AND block_timestamp > '2021-03-23T00:00:00Z' 	AND block_timestamp < '2021-03-30T00:00:00Z' GROUP BY 1 ORDER BY 1
572039b9-5864-4b41-9164-fc2294fb8866,MDAO Workshop - Anchor Collateral Starter Query 0,select * from anchor.collateral limit 100
faa9a9e9-a04a-40ef-ba86-2ed4dd0877b6,Untitled Query,
1b213b7d-84bd-4896-b0d7-851760e92269,Untitled Query,select count(distinct tx_hash), count(tx_hash) from near.core.fact_transactions;
3cdc82d9-712e-47a8-9b37-ed51afa2ed6a,Props KPIs,WITH b0 AS (     SELECT tx_id     , ARRAY_SIZE(account_keys) AS ak_sz     , ARRAY_SIZE(instructions[0]:accounts) AS in_ac_sz     , instructions[0]:accounts AS in_ac     , signers[0]::string AS address     , DATEADD('hours', -7, block_timestamp)::date AS date     , ARRAY_SIZE(inner_instructions[0]:instructions) AS sz     , inner_instructions[0]:instructions AS i     , i[0]:parsed:info AS i0     , i[1]:parsed:info AS i1     , i[2]:parsed:info AS i2     , i[3]:parsed:info AS i3     , i[0]:parsed:type::string AS type0     , i[1]:parsed:type::string AS type1     , i[2]:parsed:type::string AS type2     , COALESCE(i0:authority, i0:source)::string AS address0     , i0:mint::string AS mint0     , i1:mint::string AS mint1     , i2:mint::string AS mint2     , i3:mint::string AS mint3     , COALESCE(i0:amount, i0:lamports)::int AS amt0_raw     , COALESCE(i1:amount, i1:lamports)::int AS amt1_raw     , COALESCE(i2:amount, i2:lamports)::int AS amt2_raw     , CASE      WHEN (sz = 6 AND type2 = 'mintTo') OR (sz=8 AND type2 = 'assign' ) THEN 'Protocol Initialize Pool' -- 14     WHEN type0 = 'allocate' AND type1 = 'assign' AND type2 = 'mintTo' AND in_ac[1] = '6Ch8KyKpkZHKHNzEioLYg6b3w1WM8NMYg4pYnVsBU3pk' THEN 'Protocol Initialize Pool'     WHEN (sz = 6 AND type2 = 'burn') OR (sz=9 AND type2 = 'sol-transfer') THEN 'Protocol Burn Pool' -- 14     WHEN type0 = 'transfer' AND type1 = 'transfer' AND type2 = 'burn' AND in_ac[1] = '6Ch8KyKpkZHKHNzEioLYg6b3w1WM8NMYg4pYnVsBU3pk' THEN 'Protocol Burn Pool'     WHEN type0 = 'burn' AND type1 = 'transfer' AND type2 = 'transfer' AND amt2_raw IS NOT NULL THEN 'User Sell - Pregame' -- 12     WHEN type0 = 'burn' AND type1 = 'transfer' AND amt0_raw > 0 AND amt1_raw > 0 THEN 'User Sell - Win' -- 12     WHEN type0 = 'burn' AND type1 = 'transfer' AND amt0_raw > 0 AND amt1_raw = 0 THEN 'User Sell - Loss' -- 12     WHEN type0 = 'transfer' AND type1 = 'transfer' AND type2 = 'mintTo' THEN 'User Buy - Pregame'     ELSE 'Other' END AS tx_type     , CASE          WHEN in_ac_sz = 15 THEN in_ac[6]         WHEN in_ac_sz = 18 THEN in_ac[7]         WHEN in_ac_sz = 19 AND tx_type = 'Protocol Burn Pool' THEN in_ac[8]         WHEN in_ac_sz = 21 AND tx_type = 'Protocol Initialize Pool' THEN in_ac[6]         WHEN in_ac_sz = 26 AND tx_type = 'Protocol Initialize Pool' THEN in_ac[8]         WHEN in_ac_sz = 21 THEN in_ac[9]         ELSE 'Other'     END AS token     , CASE WHEN token = 'USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX' THEN 6 ELSE 9 END AS decimals     , amt0_raw * POWER(10, -decimals) AS amt0     , amt1_raw * POWER(10, -decimals) AS amt1     , amt2_raw * POWER(10, -decimals) AS amt2     , CASE          WHEN tx_type = 'User Buy - Pregame' THEN mint2         WHEN tx_type = 'User Sell - Pregame' THEN mint0         WHEN tx_type = 'User Sell - Win' THEN mint0         WHEN tx_type = 'User Sell - Loss' THEN mint0         ELSE mint0 END AS team_token     -- , *     FROM solana.core.fact_transactions     WHERE block_timestamp >= '2022-07-14'     AND succeeded     AND instructions[0]:programId = 'GrcZwT9hSByY1QrUTaRPp6zs5KxAA5QYuqEhjT1wihbm'     AND NOT address IN ('6Ch8KyKpkZHKHNzEioLYg6b3w1WM8NMYg4pYnVsBU3pk','AoNVE2rKCE2YNA44V7NQt8N73JdPM7b6acZ2vzSpyPyi','9VhsSZ6ni7dZtmKRHE81yAd3UQW1oKu9LNEWRGFMA5wj')     AND tx_type LIKE '%User%' ), p0 AS (     SELECT *     , recorded_at::date AS date     , ROW_NUMBER() OVER (PARTITION BY asset_id, date ORDER BY recorded_at DESC) AS rn_day     , ROW_NUMBER() OVER (PARTITION BY asset_id, DATE_TRUNC('week', date) ORDER BY recorded_at DESC) AS rn_week     , ROW_NUMBER() OVER (PARTITION BY asset_id, DATE_TRUNC('month', date) ORDER BY recorded_at DESC) AS rn_month     , ROW_NUMBER() OVER (PARTITION BY asset_id ORDER BY recorded_at DESC) AS rn_all     FROM silver.prices_v2     WHERE recorded_at >= '2022-07-14'     AND asset_id IN ('solana','dust-protocol','19550','msol') ), prices AS (     SELECT CASE WHEN asset_id = 'dust-protocol' THEN 'DUSTawucrTsGU8hcqRdHDCbuYhCPADMLM2VcCb8VnFnQ'     WHEN asset_id = '19550' THEN 'USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX'     WHEN asset_id = 'msol' THEN 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'     ELSE 'So11111111111111111111111111111111111111112' END AS token     , date     , price     , rn_day     , rn_week     , rn_month     , rn_all     FROM p0     WHERE LEAST(rn_day, rn_week, rn_month, rn_all) = 1 ), b1 AS (     SELECT address     , b.date     , 1 AS n_users     , SUM(CASE WHEN tx_type LIKE '%Pregame' THEN 1 ELSE 0 END) AS n_bets     , SUM(CASE WHEN tx_type = 'User Sell - Win' AND b.token = 'So11111111111111111111111111111111111111112' THEN amt1 ELSE 0 END) AS payout_sol     , SUM(CASE WHEN tx_type = 'User Sell - Win' THEN amt1 ELSE 0 END * COALESCE(pd.price, pw.price, pm.price, pa.price)) AS payout_usd     , SUM(CASE         WHEN tx_type = 'User Buy - Pregame' THEN amt2         WHEN tx_type = 'User Sell - Pregame' THEN amt0   		ELSE 0 END) AS teamTokenAmount     , SUM(         CASE         WHEN b.token <> 'So11111111111111111111111111111111111111112' THEN 0         WHEN tx_type = 'User Buy - Pregame' THEN amt0 + amt1         WHEN tx_type = 'User Sell - Pregame' THEN amt2 + amt1         ELSE 0 END     ) AS sol_volume     , SUM(         CASE         WHEN tx_type = 'User Buy - Pregame' THEN (amt0 + amt1) * COALESCE(pd.price, pw.price, pm.price, pa.price, 0)         WHEN tx_type = 'User Sell - Pregame' THEN (amt2 + amt1) * COALESCE(pd.price, pw.price, pm.price, pa.price, 0)         ELSE 0 END     ) AS usd_volume     , SUM(         CASE         WHEN tx_type = 'User Buy - Pregame' THEN amt1 * COALESCE(pd.price, pw.price, pm.price, pa.price, 0)         WHEN tx_type = 'User Sell - Pregame' THEN amt2 * COALESCE(pd.price, pw.price, pm.price, pa.price, 0)         ELSE 0 END     ) AS usd_fees     , SUM(         CASE         WHEN b.token <> 'So11111111111111111111111111111111111111112' THEN 0         WHEN tx_type = 'User Buy - Pregame' THEN amt1         WHEN tx_type = 'User Sell - Pregame' THEN amt2         ELSE 0 END     ) AS sol_fees     , SUM(         CASE         WHEN tx_type = 'User Buy - Pregame' THEN amt1         WHEN tx_type = 'User Sell - Pregame' THEN amt2         ELSE 0 END * COALESCE(pd.price, pw.price, pm.price, pa.price)     ) AS fees_usd     FROM b0 b     LEFT JOIN prices pd ON pd.token = b.token AND b.date = pd.date AND pd.rn_day = 1     LEFT JOIN prices pw ON pw.token = b.token AND DATE_TRUNC('week', b.date) = DATE_TRUNC('week', pw.date) AND pw.rn_week = 1     LEFT JOIN prices pm ON pm.token = b.token AND DATE_TRUNC('month', b.date) = DATE_TRUNC('month', pm.date) AND pm.rn_month = 1     LEFT JOIN prices pa ON pa.token = b.token AND pa.rn_all = 1     GROUP BY 1, 2, 3 ), b2 AS (     SELECT address     , MIN(date) AS first_date     FROM b1     GROUP BY 1 ), b3 AS (     SELECT date     , SUM(n_users) AS daily_users     , SUM(n_bets) AS daily_bets     , SUM(CASE WHEN date = first_date THEN 1 ELSE 0 END) AS new_users     , SUM(usd_volume) AS daily_usd_volume     , SUM(sol_volume) AS daily_sol_volume     , SUM(sol_fees) AS daily_sol_fees     , SUM(fees_usd) AS daily_fees_usd     , SUM(payout_sol) AS daily_payout_sol     , SUM(payout_usd) AS daily_payout_usd     FROM b1     JOIN b2 ON b2.address = b1.address     GROUP BY 1 ) SELECT * , SUM(new_users) OVER (ORDER BY date) AS cumu_n_users , SUM(daily_bets) OVER (ORDER BY date) AS cumu_n_bets , SUM(daily_sol_volume) OVER (ORDER BY date) AS cumu_sol_volume , SUM(daily_usd_volume) OVER (ORDER BY date) AS cumu_usd_volume , SUM(daily_sol_fees) OVER (ORDER BY date) AS cumu_sol_fees , SUM(daily_fees_usd) OVER (ORDER BY date) AS cumu_fees_usd , SUM(daily_payout_sol) OVER (ORDER BY date) AS cumu_payout_sol , SUM(daily_payout_usd) OVER (ORDER BY date) AS cumu_payout_usd FROM b3 ORDER BY date DESC
5e97c50c-271b-48c0-b7d5-14e888f8f381,validator self delegation hoagie,-- table is constantly updating so lets isolate the latest one WITH mb AS (SELECT max(block_id) as max_id FROM terra.validator_voting_power) SELECT  	validator_name,   	balance AS self_delegation,   	voting_power,   	delegator_address FROM   (     SELECT   		block_timestamp,     	lab.label as validator_name,     	lab.delegator_address, -- daily_balances use the delegator address so we need to join on this       	voting_power     FROM     (         SELECT address, voting_power, block_timestamp       FROM terra.validator_voting_power       -- limit selection to latest block only       JOIN mb ON block_id = mb.max_id              ORDER BY 2 desc     ) top_val     -- join labels for friendly charting     JOIN terra.validator_labels lab     	ON top_val.address = lab.vp_address     -- we'll limit later, but to ensure speedy queries limit to 10mm luna and up     WHERE voting_power > 10000000   ) top_val JOIN (   SELECT address, balance   FROM terra.daily_balances   	WHERE balance_type = 'staked'   		AND date LIKE '2021-07-27%' -- i tried a lot of methods but couldn't quite get this to parse down without hard coding today's daye ) db ON top_val.delegator_address = db.address ORDER BY voting_power desc LIMIT 5
fb19cf01-d9ae-465c-8d0f-b6d188c271a0,Untitled Query,
5ed9d24c-805c-4749-9ed8-c4e900289e94,ant man and the wasp,SELECT   date_trunc('day', block_timestamp) as date,   count(distinct msg_value:to_address) as unique_wallets FROM terra.msgs WHERE msg_type = 'bank/MsgSend'   AND msg_value:to_address IS NOT NULL   -- AND block_timestamp > CURRENT_DATE - 30   AND msg_module != 'oracle'   AND msg_module != 'core' GROUP BY 1 ORDER BY 1 -- so this is CEX withdraws, that's pretty important
5f524248-2c75-42db-af23-17bd5d5e04ee,Anchor withdrawals [T32],SELECT    	date_trunc('day', block_timestamp) as date,     sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount        FROM terra.msgs WHERE msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' 	AND msg_value:execute_msg:send:msg LIKE '%redeem_stable%' 	AND tx_status = 'SUCCEEDED' GROUP BY 1 ORDER BY 1
608eb7a7-de5b-4572-ba37-98bc488c7052,Untitled Query,select * from terra.nft_metadata limit 10
c816af87-0e28-4257-84f8-68c9ab53d2fa,Untitled Query,select * from terra.classic.fact_transactions limit 10;
610697c1-0d22-4841-8a54-4608559f9463,Wormhole - Unique Users [T101],WITH outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND (event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' OR event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf')     AND event_attributes:recipient IS NOT NULL     AND block_timestamp > '2021-10-18T00:00:00Z'   ),    users AS (   SELECT * FROM outbound   UNION   SELECT * FROM inbound   ) SELECT   date_trunc('day', block_timestamp) as date,   count(distinct address) as unique_users -- wallets, not users FROM users GROUP BY 1 ORDER BY 1
2ad0bd2c-70a0-44be-8127-eb7c8dd22ad4,fabricant sales txs,select * from flow.core.fact_transactions where tx_id in  ('28c9e8396f0747031654e4235bc647abb95c4e5da7f466187428ef80647dc70c', 'fabfe718461ff515ab8056867d4a438ba4a97f7df46d82213b470286fc074e90', '9abd902b3bac53d0e2a575ba2a565d608b7597b841dd8edd8d39458fc13c7a69', 'ce8904370f1e5c5780c9c16728479253565a59a50d6e790a22c9d66f52be2890', '5a839be693bb553e26ddc35a260d25ee039d7b2832fe49260ac41dd86c758534', '332073d8ee7ee98b476c2d7b45d93ca9be82f04a791d0e38abe8bc7e588facfa', 'f34938e0bf6c5cc67d12907ad449f0e7040bfc1be8e05eca1e76dc0162556a34', '20c17e8d3cafaa63d8d175c3ffaf3832bb916de6516fd034d81366c10072b46a', '4fd8ae41f420ad09df69222c3311fd9906ca4503bcc4bf5634dae0ccc0fe336f', '6e0c1f042dd55919bb576590e0a2789b04dbd14789f62cd27c4cfde4b8de882c', '1b598bd168a6fa669a9ceada302a5ef030555c4b52116d378f541d27d96ed2ac', 'fdd15a8a857a2924cef038eeb948f56ab8f55c80324f133b6481c0f26357d151', 'f1aedfc4efa3e3f5e2d0b8d431a3b669a9909fee40ae0f5e646b08e43b5ffa2f', 'd1714d3f5d236b8a70219249e5e3c588265f0c66f7b2bd8e5cea0e2c5d2fda17', 'e0d1f7567a26c57ec964e57313abe0828fce0afee52fef9d174bcfc0c4e3fb24', '96708fd213ebcb2512e38d5896338d4de8c6b1d9e74d4f3f5abb8e7d60164e82', '3041b6602e1e102f90eef6d8c4e87054313aac831cc33463437cdb3b2ae3e313', 'b7df1493a79f9c8838bf57195de052f30b35b1a98104a6939cdf23271a16875f', '78f8f715fc51be12f8902980145b00b574911a3d804ae35f06b68b20d56e7288', '4825b985b510edd9bfc9dbd957042cb1be1f78e5c5698d93554b8209133798ef', '836c2fca22f1d5eb8a00afe29bb0e8d7bff9805b18ddc8d39fd42957f91bb887', 'be44b8b9464eddc5ce1d75a41df736e90e7144498c7f58bf0d70c99559e8238a', 'b70916402722cdd7331a129a66077c2d5851aa348ff729eeea9e3bf06d9bbd27', 'b9f9032345344ebac1e1450650f370baa32661b90cc9ce728d314bfd181d9a4e', 'f36445048144cb8359e3ab3b328fe2dfd7a8a3697ab07f7b39cc652cfb125292', '3335822d4b0b73f5dcdd7e0aee07af5b48d3f77cdf028c5e54b78099314648ea', '9ea063cb3d8759da9dedc8ace2da8061597d08e48132c0f571dc6b395fa1a45c', 'd631c9784c439dc239199c9413bab4936cb1af5fc79a1aa87e223a953140504a', '7aea885c21ec78fc947b0c8c207c0fd9d883f504f27017e21d58abc0d6461ac0', 'b1646a3ee376a6b0435fbe943600501b3390f4e5d23d00a293caeb079fb5e282', '0655896aa70745a22ed3f7c7c75478db2371bb57ecb735c4d2247b6cc01cdae7', '59c3af7ebab58d2cd760d49af1e0cb0e493d531c17c9c2656352a220893ee9ff', '91f438d613d9fcefb6dcb29a0cb8e2b2e3a63a64b08120823a78c6525b295c30', '448d15750829c6185c101f605517c798381b45f0e8fc98337a3b41bc9ae47365', 'c090644cb6c5b6ce7059dd3d735cef01280522fe47dbd40cbdc841948b3c9413', 'a8d77129e7a9d793cfa42c2005720a0a158375f69bf854a721cd5b4e50ef7890', 'd1dc1dae638999791d7f6183c0f2ec4dedc7fb9713e5fb11726726559f0ec03e', '8075c3cbd13fa0538649480c5ce5b70bf981bb41f40ad93debd2a8c6f64bed29', '0de1271925538a610f24baaad63986e2434154a927cba0f917de8fe2a23bf6f5', 'cf19b0d9ff4482b7ecf27003383a1ce5ca9d0c13ea06f87a4af35bcef5c65a64', 'f979d5319f4a42ffb0bc3b930f2a7f4c0da2e158c47a8bd0934fc0ef366a5e4f', '8eb255d4ff09c5500a749e57e0977f7472850f8bf7e8a5a3bb647e5fd97e6e25', '78991938db281cf18e966a546337da79ed3df6cd26274f70c39f9ff0058445cb', '57c72733ad69be875a83ae156188b32be8564f36eb21f5f5744d82ce91bd84fe', '49c26e5da197c0de59543ae642f3d73843cb80330255eef8c1f7faa568921f95', 'c72ae7d0264f8afe4457fccce6ad6c73c58d3f5190016bf12ea052d4994afa97', 'b7957ffba3a6460b517fc7475daeb21ea3c9bb7f07009475d4537517816e12cb', '44749eef199921cd91668bdf23d519426e3bf05016f8419c9aac8cb38c29eae2', '6114714755a6df29c51fa9329909068bacb8b9da5d94d9225e248a5d38400ec6', '38334a0d4ff48a6f771f312fb180923929b198e3b8eb95c8a7a1ef49081d299a', '7d6235c2fc66310cc3866e8429517043df3227f1bb76c2e48a654a0b9eede217', 'b3c5c2e41df4a77084c13af484f173f77e1c5de64d5d38e2985d6da2b903a58d', 'f6cd0b980c207161b8c3fe1b0297e610decfa5125d6c9f1498ee831faa3122c4', 'd04fbbee76d2caf9a1f7337a41034b1dec2a7ea0da8f3eeea183f277dd0e9cc5', 'a792d85a37da4c92598572160b2a2c9aca545ec78d788993891cb0146c4008e1', '60ef6e7d83cda83b4ae58426eda1f09e8c2d21d972e91cd4c8a2e19ff5eeecd3', 'f154a1f8f712271c93f1275e0e18d7a58482c992b5be6993bfeb12a16556188e', '4acf2057e4447c50bed9d419991f706bc0937c1c8fcfba585ca184a2f5e9ed81', '2f4ef45e600cde5a9b24cc91c401961cfe38783f4825b4331044b244370b538f', 'ee3c7bb4622f5a3a211ccebababb61abfb1e4d0dae5850b89a2ff8d3dad6be85', '997fa2cab6f89cf0b2212cb8e2648c7f08b5c7cac4dadb8d8d0b9dad6e63a1ba', 'e90c3c7f36906d89f9c7ffdf81a2c66b507e08b934a104757ea5db1fe4c1a38e', 'db52747a6af2d1209a8a00cb560f3561c1d96d7406452bc1e539e0e877d98ddc', '37c32aecd7bbc5474cbbb0da9f98f36f25773cd99a03771f7c20e4150da92e4d', 'f9a388462e12b17597ed0b064101c25811394b4c44a5e78faec7572be6bbaa59', 'ef93caa12445072f722d9fa4ff16c834a0f4bdd0d5b8219c3f1d786bce3448fa', 'af19bab567b1bc2d96b4080b91e99387e5f73f2dcd1255088ef3cfed25919826', 'b9ce0cc930e599cee7a3f34e64a608c6d876920a554811fbc2f392afc2d9aefc', '072fdf1f880a909949fb037c31ad6df4f1d3e467681da55532225e5aed4cbb97', 'a594000d879edc53b0bdb2ad7b26681fd507c9567a9ffaa7bc2c335cd5e8c10d', '9179447e3f164e689f250b6d850880ddc9caf64cca7e14e8cc7bb9948f63ff26', '91698e6bf584ccd7e182569091f711f8070f3e2dc5ee5ef4b13d37dc9f45bc4f', 'a1ac7876ec5f51f13e0a58bba67f1aa5658ae938c6e2aeaa9dfb07f0f9011ccb', '8a4eaaf69e61ae92e48a7278dadfe2d00ecbcc4204bf32cd20476b8c6412a264', '4c73dcb98da53dae085634960b4655d921bfa0e04e4376b0ff0d48f9e8d57022', 'f24a4f38c796091da254f11932a87417197f487fe7e27006aae49a3108ec978d', '6ed094565a19470bf365a024c285e3026cca2bfc5d46242e0d9d8f737539178a', 'f6c9099a7b03482b8c364a01906f5af784c06646e717767d9225b4a5af9654f2', '77eb3665fd91f1aeb99925c9d412b287d3bec939c822ef9e5dbdd1bb8e7343de', '4c0f7780174026ef2d31a908e29076cc2d0762406c1bc72efc016f552a5d0c83', 'c8e3696dee2664a4a441b0af7d704af1ae816a590526a44a3773a9b2d45215a9', 'd82da55ea8bf2e13f9d01a25b7b3a8df61356ce624e3885bf22ac1a90b519efd', 'e812c0867afeaf52a38965cbecd0ed9073367c2cf46c2df948f0277a29a27f46', '3b610a94bb742c519840a15caa5cf0c8ece5f84dc40f08b6be76bf29c221f175', 'fa4749873abc2f02a9cb72d616d4d1487f4c59b04582a7438ec1b41687b399ba', '806d104882b05b2a3d346bdc9120f30b3c51e29e8a11fd9043fcd8fdb1d326d8', '9e01b1222aa9ea013e1ec53c2c99a5fc8d61b42aa08b66e68a423bb0ed2cd953', 'b2694ef72180685277226534137984fef4f35ca2ad903ade0c701142217d2550', '1d80d0268b2e3af12afb37add2c4c40e093a1bceb1b02d5f48db0796e0ebec40', '96db315b85450fdbf8c804f4baa98460ff64ea04aabd4def43a60f1931275b74', 'd33b8557b33010b563b6b52f387613eafdf9aabee73d002cfbae0d0088e96061', '0d0a6bf90c66e5f4d91b5b275115be6d95fa2e67e592669f15381cfc01f21fad', '2b2142c7d46a30b08f48b26d06f9fe5c42ef08a7c950f16356c865ae8801a9ca', 'd949aad16068e65861e167616a5775e950d83d02f05d023f00b04a6b89ebe98f', 'cfde816fef0206dc42c7ca3df2693e79f546c6c7516314b2bd4e65d4d74c3818', '4a593b3ad90e2ae0d619a83a57560bc85c3bc01c6273c0cd44a68b5c74102864', '8133f932f6f3d0c60b7ccbe73e7e1e39b4a2edd6503542ea53949d4f6e92cfc5', 'd6768b0654be29b8f650d73f06afbc6e4f33d0d36db7ae4f0c922435c3c05eeb', '29290df21fcf9f11f630346b1ca54074d9190e52389dc9e08ee185966e8f0d83', '759bed4e8eb5d0aae264523c1c77b308d937069f465bb8a6599b229149258f6f', '31424fa9b299c96d77d32d666a7d090d0088747cdeb0b56ac09207ef5066663b', '6772fecb2df2013bb96fc44ab87a0e9678f618fc560e89c42c3859c75680240f', '65ee1104c897ae30d13269417d6699c649004d533b7293a7fc9e6136ce3f4817', '2bc0dcf0fe2d09cb4e5fa2caeb372a8afdcd70a39181dc34f129417793cba90c', 'a5a2c456f4997b34d774a24d759bbc021e9b247b158084ec1d888a722bd1facd', '2eae924df039d911f3bc7e0e46dacbd68e174d7d3b6a97b12603dce2d70d11c0', 'a162310cf76b8a6baa82878c8af851a1264cca0b5e0fad50f11027dac028715d', '7967b0c96af1b0f819b445d755b3f8ae9058e6fb32ccbe2712dd61718bdda9ee', '24c766dcc35ec9f7246473bd54782282ac96b65926ff637a874c9646a6724183', 'f4a62fdf771b387dc75d71b42635b299f3ae531d44561c144f5f87d42d976b31', '339a28b96c533e61396aacc874cbc4e3aee4b6f7acf380ea2e6556d4f1a12f78', 'd535183e2889b9f7d99a254bb6a1fde541054088eba8212dc2d019dd2fe8c8d0', 'a4fb65ea22c4b57b130bf2db0c6b9176e7685b4d5fca1e9e55b557794f2f6cfc', '1b3888caf943d77abab6e89e9777bc077aefcad950fb4b91e0baab38f836350d', 'bd8b0c3999da791293b499ff61e6223d65d6262ad4cdb4fd5021edd4d85a0735', '7fd10ebfab708f42fbfba22e1e6774704dce2994cf6b45cc08ec62f7fca9b5c0', 'a64852a0abcbb44f095c5e010fe7fa64082b40ffb8b30f15b18a53ec53d82cdb', 'd3f6f191de56d46a0e1475b3f822e999b85e2a98eabdb9d78d34b27776e98753', '818f7feec88863e75ba9f023ee6952db83fb024734969055765b037040cc7c52', '8da16bee4214bff935aea0c77bab67c6fa90d5e142b7e3e9dccf164c25e39bb6', 'b62a663c7f3f2072599218546dd48808abc5593c7b8dc96e77ef64cb04aed67a', 'a192dfc2dbf1aee49dcb6c526383f4b6f74bfde004d0329a9a6267f9ec529ea1', 'd855652515c613966983e4d1103ea386022d990587853cef34894421fba81e79', '99cba13faf6c9d6498c4db2c31ce38332c245a2ebdee7daf7fb466010af80a9a', '85a7a8cf85f0e36ea6404f4567e2e39b9d095141da5f87fc4e390ff0a61ea3a3', '0d89e1bf7935c093d3e96698fe3bd6a1c7641a8b95fad303ae5b570db411ebfa', 'a3ca88a45d713f70407c0366b0dd71f99587f7729f338f7b142ef941ea547930', '8fa2dbf94e470544458de7590872a901294655776b643533bcb8914ee2699080', 'c5824bbc416534895ed046c7f1cdf98d1fa818cf29c84754aca807ee33195b29', '729b4530fef392128e65a84651c443b6047dc767681cb1a30ca622e99202fcb5', '88371ca5da8a6f486a0f5a874fc017aacc64cf1ae34b2a1cead3c21c304d415b', 'ecc9e810e0a3b018f4d02307ed5acb5e843f08eb8030792cdc83c8aae056f959', 'fcb6c83ff3a2c7c4186c7ed4db82f8f2f99e36870c61462e00444d96f6984c5b', '7b326088fe312a3eb499589b7793303e6197864d8f2b693feecb94827a6948be', 'e54b4059127b4e73a0b567346a23015174be8bc8a34b7644f7d496d71462b50e', '5ede0902c363de8e683a55c89bb90b0b5f7cd23adcfaffa38515e83114c44f90', '5aa91bf318451c562ef8dbabcaf8ce255132c72612e0294cb647fbd34079a9c9', 'ef15d1aaf5cc15e2e30be577c1f456ff26bcc15a071a09871288ecd22d1361a6', '2099b7e3f8ea0204cd3e2232b36afb599c1ac172bf09c99a7aa7d899d61ce91b', '71ac2138ba4e02dd3007d59aa9a1a5fed8e3ab6ef95a001130222483ffc3beb7', 'fca19a2594f1391a939dc6258f217283a684dded30553ce99fcf80cf7de47879', '639eb1c866042f5bd543b33bdb860592538cc4858de444199f280551da9f4878', '24b3f4ffc3a774bef9ccba21deff81ab4f570912bfd070d81008b43a0d6ad980', 'ac2cd0047c0b6780cf49f05f07cab5d5b06fc367f143802c71dc11438e816b74', '1349e6c7eb46976b03ad29299f8635b96bbf561711a9b8689af5a713dc0199bc', '0376c1efb09ea4164201f24bee6bed94dc2147f4d48e17dea8d9959cd7d5f718', 'c547e3c3f3e92c7eb598d54705790bd17e04b1e43789bd105f1f7c0adef4dba9', '987eda24db5e4817f0e07f471fae0e78b4b3e30af78f207dba6f5afee4ee2389', 'c7ed6c6adc41dfd7e312e18704d1fb0647475b6a7c50c22eadeccc4dac141b04', 'ad1081b873f79d4181b530b4446f345fbfea4c16648531863bed8c88c157d223', 'e30f33749aaf0bb2539784cf8e392a7076b2dd4499ce713f1530f891bb61a4aa', '11c82f900001ebfea1107621b59377469323202a809e1a39e3fb61c4721b453e', '467930624283eb1fdb042d28ea484e7c684c8a402549fbb87906ff5febe8b3fe', '4fa9b9701e1fd249b51b8870647b90da583532277bfbf6d68fbaa2414736779b', '1992e60fe765df0a14e540b8ce8aaf6abf4151c45a0ffd0daba73d512cd15400', '37cc45a1dd586b18c611d50b75d3cc5ddbc29163d640b858e51ebc34725a263d', '108289dcfde56059d6f650a0ee9009bba9e29193410e936039fa20df699a3727', '3e0caca2c4496a7da0bd0be8b5bc410d39c28a2a83ab40dffd7bf607496df324', '82fd144765b12d3233065a69af5469381792afa542b7da68d44e282d186890ff', 'd5e383bdc5818b51fa01ccddeb506cd343007ffae96739a5d16f726bcd7b6e1a', '67045ec0dd620da5c8de03a3a0d8631b543ce72428af4bb1c4c7c967eeecc48f', '5eedc71bdd688007a69c4605e6928d51f2f310652622e4edd2b218914b55e86d', '216569bc6373ac44bf1e3924523f333e0327e78145dcb92f360128252b0b1b08', 'a2c65cc1e828c4dd154e46ee49faf73bb497eefc9d7086ab9e634188550bf238', '8a487a40094b4e26bee935234a5ef50b90a2bd51dbd11876bca2dbf969c5b806', 'c799bff8a3b3ff330736b456c744b731cde00dc46602a13d280fba23f3a7f142', '416f96a08c740397d71bafb29a9fa35547d3f00479a157274f549a60894b0d12', '5a186ef2c7f7f73e8db37d8a50c8fefd412aa173adfaf84ae6c43b7b41705092', '7708ff00a0bb5fefc87c2980d2632354af4ef14d9f74b46ef9b685672200fbc3', 'f3f33bbabbd948a36d681465cb372fad56206eb4b4bab79f6e32568a0364d4bb', '941687baf566524ddf5a136bb073010adb7ece1112d3c5c185407d5d54b95203', '716c38895e41fe49626bf51e52be4cc4e831a0ca0ee1d880ca07aecbcedc7478', 'a32b56d8a867678c834e90683cd5a222fcb9d3a1d267ff36ae0891bdd3d88b46', '5af2808cdf553de10922293289c60ddac0a7cee3e650ef5e6cd871c5031ffb16', '352ad382d55eeb6d8bd4437eb454229e53cfc0b2917f114c4375e9c14a6f0b1c', '3a049827cee24358fb88a15d7558570c2c4c528b129d98dd566b74c46e1edad8', '33fffdd5c4ac69db3cf20b6e15ec9f9a3a87f1aeab6354f47e6d26dbb0924c61', '2ad5494198f7e0bc147ac1ada90e071fd94d81e4f7ea5ed2d89d01caa9773030', 'a419adc3856758c31d565400adc26271d96f92d06b136a4c390aedac255e80f0', '237cd3a4fc13aa2b3fe83c4f1dc0f4d9a97143535fe11047f0dfbca8564b5806', '3049d6ff9455037a84cafc4092f2b00b3bbb9a3fd85be1943a9e842ef7327f52', '68ce75438ee137220ee75b88c0cd22913710f861cb36aad7831df4a9bfa0c2fa', '85dff07272950b38f9d601d700c3574eba1fca167826afdc7b46b6bbf9f9ac1a', '717075817e7fe82ef7d89529582ad7bf8ab4acd95435fbaa2347b122cb2aa534', '432c90543efa51720e8b125e0fa3f95f59a342068178509ab52d0cef371cd814', 'b4cce6927a2a91d1dd8cdb6224a7b25b935443d5d6420f6e720e70100ed0d4e0', 'a0b99892e327c20c0046dfbeafdf933598dc35c754ba7b9887ca8788701405fb', '461e96d5fef491ca2e3282167b2963ff9275648b33ab22ca37c5e413b39d75fb', '0049cebabd23f0979cab9a69f6d09de5737fa3891d34c36a34f0c8d557f76b02', '3cb6744c740f9cd32e4792ecf4ceb3bdb913307f089153ae12d3522bbaa7ba24', '4a9f98c5b0916e56cd8103b6a598c766261442286fb5ee04f6ef8e8be8d1ec91', '46dcd021ecd211164569d87031bb7b5c2bd2c7ea19ff02194bc64ba85cced213', 'f9eb0dc641e3e5d403d63689808efcd6ecfe9a4a29027b12b645692c7ef1d270', 'df4fef7d23d56960dddd5940995a41ced3e0eb14b6e30044160117fd21d83748', 'a969e7c33d6e326aa4e7a3daffb1ff0085dc36970867840eba3936577a4e082e', '459be9d2488831ca05132076e94d32a3525e6cfba4e996c7e9ed31073ee99cda', 'e69cb7210e75a081d5614337b70ba4412818531b379a2925c9c70a60d13ff598', 'f75c96638bf969b9e89914c6f0fe565e76614e10248f4595da6411577e44a011', '8e743350127644c4fe100ebef9f2489ae6bc35185e0f46ccaf9a4d5bfe6639b6', '933d19536f79e42196cfc774405e6aa9a2a63627d11e48c7ee76131649b748c7', '57b85da5599025563abbddfa30fd77539eb37f13c1fdc1756d679a235ddae479', 'c9d3fc08ceb3456beea74df50c29e5f066ffb5e3aec3599037f2f7166ffd982d', '1146c5308092e4236fb928900a57b379778b90fcad3877f206f52bac248e718f', '41b24f407cad2c78f81ee968d0a5300eba0fc1c1a9f94d01597bf8308a40f3fb', 'aab79cca9e5dd70dfd7734215aa9e4e9bf86b862e949f00b35ceab7f9c57bda3', '684682353261bbaf169634387f6a2bbc42dd8bd451d380da96d6509df1b3bc7c', '6f68156b06dfc3e5f823e1c42800db39035f4cb92a02b27725bab29870c7fff4', '3a17774529348f78de1ae9764f656e45943a14ce244aaa40af287c3660b56059', '08dfaa096c73fd8080b031142b5fb1825d68d048efe6376b2b9d7f8bd92a1c7e', '41b24f407cad2c78f81ee968d0a5300eba0fc1c1a9f94d01597bf8308a40f3fb', '3f49f1793acefa6e6fa77083d93b7c8c53aa892d4be08d0ce74dd9ca6fcb5523', '023b9545e23fb7d4647c24dca6e423515c8b9ec4c7e8048e1c927fed76860db6', '9c90e31cf3da0e558423ff520274c0a8263c4b92cecfb4e8a515b51725f9c1dc', 'a615f3616e3934ebd55d147716f795a0f5a24f1588d79c88f990db37ebda5a9f', '977fd1b30b96256b5276574dc5c7a04ed6bfabd0c9bc43a3ce24b905c1dedf9a', '87627c8fb1d1ab7d06f0a9c38bae051aed0cdcd8f798cbeca0668e4bc9a17732', '87627c8fb1d1ab7d06f0a9c38bae051aed0cdcd8f798cbeca0668e4bc9a17732', '7e1cf019cd041916ede97246c1e4eaf9a0959a45e1996a1a22dc5eb584e3436f', '021c33c2260ee725a721307d2d7ad0b693e4a3e5f48a44fc876b24401d37ad82', '158c01ae0fed28d28f903f4fab317c4fb820b7b2a1f489be6d9512168c649bfb', 'd38ee348e513d290af3bd1367c2d546551fb5bca7b40ffc273709be97a97db0f', 'c9565ee2e02c05e8bc9e0425a4bd51d3dd958391bf8ed970b8c8beeb6814ae23', 'f94020332f9d9e062445a37407bfe1752a04fea54e2a81911fda154e36e6e9eb', '652dc4efa8be5d84e7b0d3d972dfe5ab6bfa187cedfcb1a7b54e6129dd737b6a', 'cf9b4299adcb7e82cbf41d4ac9156ec85ef974472b89c8e33590f93d4128fbcc', '9e60182e49aa75bb7a121b0a80b395230ae80f21db79c4d62cce9929a19a137a', 'd64e4cd59bc3369b7628b0ca3bd1ec55a9e5e9fb9440b3662c017e1e84e1d4c7', 'dd7195d42769e672a3df0ec9f1c13929a752b91d52abf2daa7cb7879f80ff6fa', '772403c344c340f77270af52a850a8dfdc27974d40aee9bbc8d875a99db5e78e', 'c4120646426f38842d538ed74a3a1b956c8ba53c5f7e74eef5549b7399046f66', 'c088b3f4a2cb09bf9d36246988d3b808e594be42a60665641bbeab397324ec77', 'aa5958e237cb106db6f2d665299ee5a8b466e5d97562a7900637a9d2692152d8', '90b2895a9b43ebe91c0b77acf072d90caebe2bf61f7577c31bcc39f77c66e7c1', 'c8eb0ea3a845ea0fe73ca11e134e72a4ad060a412b8f449ab4d72b9528417b5d', 'ee1bd0620146a3cb405cb9a7fc3ed1010ae417f5162802e49dedeb5b4ebc38d0', 'ae54201747f7b4cedeba2b7fa53f349febfe6281fb722796184831bdd906c0d5', '34e0550986590d81a44bc0f323aa5c319286487f5628f5a36ad894a432c694da', '7a2a266a85589b6880ceec9be00bb158cc6edab6db4db670744ad6bbbb342316', '02508199c611ccaf37f44c95e41ea73030a07b9533ad8606878c705afdd1e39f', '6f7fdab6213af5ca83e42af6cd11e4ba3204fa27679adc1884e6dd4f44f33e9a', '7db2742ca84ae39d2220822d568e9ccf2bb03b2f8fc019520809a6ec9f85f7dd', '02508199c611ccaf37f44c95e41ea73030a07b9533ad8606878c705afdd1e39f', 'fd8d01891812f932a46c186b6503b8321003cf145b8bc96217e707668cad74b8', '61ec5eb9363cacb9b5531507721e081cb41a8cd223abc822dc60f6367b053e67', '285d4728d403eb64d3151144a754e0182be6b5c7a20391dd40b84c5682cd1046', '7a785e685a32cb88a761a428fdda2f8ef4b044a7a2777167b9eabf5353cc5cda', '2e54b4474c0ab8814886e7a8a47e79f8800e1ec1a5474b5778f2e722998164d9', 'f127433625862a2588ce5f87655049c25216a2f736240d1830ab43bbec7683b8', 'ba09482bd463ad2ab5d1d5357d35fad54f9a8bd5a46fec3277ea497dbac5d925', 'ac60bd37ff6eb81201728ffb7b1142968f9e373df09ac4e5317a589ce9f1efcb', '7aaf787bfd1f1952da476633d1843653902a4eeb6654b2fe58f14da182f45354', 'e4b98fad82efc637109b3bae735124fd9edba4ac9c112bea542b0cddb406e3a5', 'd2d33a6f3977b39bb7a1fff9210a41e3deb5b56cff85b2f98cf6734b2483f3bb', 'cb3abe232c8db0d7194576631ef042acf4a322bf899d62849a77b1e97fac2619', 'ab71de72cfa6e5b33df248b02f78e6a3d8b040a8ee3b532b3cabdf83e235236b', '957336ed812908de8ca38327e738c715b12ffb124c81320bc0ff5d1fe61ab859', '81f66e9231cfff84df57e9a334a2f32bcc3f30945c2df48ed21256a8d0e33580', '606d53a982f721bf41aca8c328ee4f5936314213466b4865db0b26854be18a46', '77c4eeae077f687e43bb72323802ced9fff47417f00c25dbda728209e9989c1b', 'beb1cd2918117353ffb6e0503d4874a819c8eab1ed319cf8010c30f1080af113', 'd5849f423f9fbce16415ffcf233f0d5f6bdc1fb2551117199bb035dfcaf65ac6', '58856af06c7e6374c4befbff8ec0982ebc406eaa96d32ac1c42023cc2b217de0', '045c2e491e56903d69de59fceb4cc518534de83cc794334778814220bbd8807b', 'f6781677cc90ba118c0e7844024754d5d4d9f7a20f726569f1e4b4264be66951', '0ba1db5c9d78c0e5b6e3ae67dca18d5181f8f3c08b5abcaae4d9c450fa86a476', 'a9d0263572aecc8eb9a265f44d39bdb46b13aacb8aa179a7c0c95b1b5fc49823', '9e8991c5a5f72f693eb6cf7f60b55e581199ef4bc0373bec8c9531262101d20b', '957e556f78f545ebb4e3c1f08ce731c5a07e3c251aa034825dac071a0155b206', '055cdedd75b64d7eef745356aaac9ac541acfcf07528a3f55f7fe5a4a1a58c1c', 'a2488447bc599bb56d205e82b4bf137f35c3a979528f45ad99093d8dbf547389', '0ee2f6bb8ec270833f345906eaa83e50ccb0a9a2a808252f7bb892db73289929', '3ca03f81164be9cc48584fca9f3463129b7b11231c223e7a8d364553c8aed7e7', '35daaa0618333e6d0224af5ae76d750e8248ceaed5c7fa0261372e9b0bd40b7c', '8a7eff4bce2a2c752070f7d4e4c8b6ffcd252f3092d3c0315996e78fbf9110d4', '82b94d5a49f6f89a7fb54918005b92047e164228678ca3838cbb0a9781631494', 'e1b4b66db181bfd54045052ce0a37400db6792aac4e1aa79061b72596f4444cc', '53846f2b882baefd8e2f6fbb377cfad6751519c8e1d1f13bef882aab2e1853d7', 'c04d7189d1555b29fae2a072125761d929508cb79b06ee2def912f860cbe80ab', 'b6b1309f7a543d6ffdedbdbd114a6f4fb6b59d6ee25e631555ec4398c3c2298b', '930e0a69e1276ecac208e0fa7e5bd2eb3af3220c963460021a761c55368ab7d3', '468e7ce8a6780e8e4e0c637c676cfe3dffd3eee345fe7b57ce87915a46b58508', 'cbae9344bb66c3e638eed2e56699aa04d3396037a4cff3adfee552f0e89abdee', '9add606d1618be4bd378b2e81f1b98ee0203a3c9ba69a5c727e4514b42ba07d7', 'd6f7759b24920cfcd426ae03ebf711ce1ec69e28334918f0675595dde12f0b58', '41a30caa0c4a974d19b42531d8c4e7a4120df1292c73844ae66ce8e933426633', 'eb97cc66217ebde7f2defa309d24e9e90d48f05129a2c3563316650ac08e0457', '7b7309c542eb1332bbf8b2bb87c93da0d2f0977b2aa5cae14692ce913a8c8487', 'fe2bb7cfbad64199db303512729f553380e6ad956fe0a996c5c8882396fe7002', '27b58a30ac621f78b2450de184734fd736f54ba1522971f1f269fd1267e3da99', '2e3c4e26239abbc6228440e90bae9608b90d810e82736f18eea7200e4a5e7a43', 'd25baea8704fd03b3cde542c9c90d80001ea445c27438fea949dae8b88c555db', 'bf49a1804dc179929c9437a607830487d2872bb4ce299aac1dbc5e148aafc6a5', '5e6a5cacb71ac673844c9cad8256ca4ac7c1de4b2bfd0034c9d1e65780464bd0', '76575d64a8247f9f7c06e27177815c5f14e789c097e732d2696183e27203f42d', '266fb7cafe8e8c3875dcd9d6010df5328e76f9299ec6934e6c1d50b8729e4000', '8e5ec0c9e36d9d7eea903d061d993d04a9ea04f2c8cb941bdd8e482d0e3b845f', '1f690763f38e3e6d17cc5f13b551f3416ec5b8b36fc6b380e476e652d09273de', '8f36632b88da6a20e9d3852109ec72a7dae5be54d93cc3be99ed427e8c254c94', '0aa4abdad3a53077ba9d8d9427310a1d974edd1a1e7b1a5ff82a44b6ade6533c', '632bb3dbc6ed1410b9c7ab6c00f6edbd3804f9b09bb22eb20205daab4aad1c85', 'ac5a2ea7b805125d1be6ce792f75bb11c88a5d997cf6f12a1c71b40fa44cc0ba', '3981af2041c84805e62119b7df6414bea96ad05e7188e2a0d23adea7c44c0503', 'd79321ea1280e15792ecb51a14b23136294f255ad6c05f30fcfddadcec17ad37', '08d462f425708f8f9f38e3e2186a7327850ff699ae9556f81800d0046e86b081', '6fe751334c1ca659b9a49ee657eae2cee307468f4ef7d2cc0ba88b9f018b1c94', 'b9c991eabaf9674a2613be9ae0e3af4db6534ff5fbd2842637fddebbe970baaf', '8cd1dd2acf6d34f0ded043c4a947ed152c6d960d1d33497cd183a7298ac6f245', 'c1e8f2fbc73eb8ae1cdc9b315da7199463aff618dd60cf86359fe815728ad780') order by block_timestamp;
68eab090-d8c2-4fd7-8ef2-b67ebafe0b4f,Total Daily Swaps From Tokens copy,-- forked from a7f589d8-c0c9-4bd6-b8e3-f02bfb0148e4   with price as ( select date(TIMESTAMP) as date, token ,token_contract, avg(price_usd) as avg_price from flow.core.fact_prices where TIMESTAMP::date >= CURRENT_DATE - {{N_Days}} group by 1,2,3) , swap as ( select date(block_timestamp) as date, tx_id, trader,TOKEN_IN_CONTRACT, TOKEN_IN_AMOUNT, TOKEN_OUT_CONTRACT, TOKEN_OUT_AMOUNT from flow.core.ez_swaps where block_timestamp::date >= CURRENT_DATE - {{N_Days}}) , volume_usd as ( select a.date, tx_id, trader, b.token as token_in, token_in_amount*b.avg_price as amount_in , c.token as token_out, token_out_amount*c.avg_price as amount_out from swap a left outer join price b on a.date = b.date and a.token_in_contract = b.token_contract left outer join price c on a.date = c.date and a.token_out_contract = c.token_contract ) select date, token_in , count(DISTINCT(tx_id)) as total_tx, count(DISTINCT(trader)) as total_user, sum(amount_in) as volume, avg(amount_IN) as avg_volume, sum(total_tx) over (partition by token_in order by date asc) as cum_tx, sum(volume) over (partition by token_in order by date asc) as cum_volume from volume_usd where token_in is not null and token_in <> 'Blocto Token' group by 1,2 order by 1
690038e4-853c-4f4f-b1b6-11da2e1d8e85,Untitled Query,with list as (   select event_contract, count(1) as popularity from flow.core.fact_events   where block_timestamp::date >= '2022-05-09'   group by event_contract   order by popularity desc   limit 10 ) select event_contract, count(1) as popularity_per_day, date_trunc('day', block_timestamp::date) as date from flow.core.fact_events where block_timestamp::date >= '2022-05-09' and event_contract in (select event_contract from list) group by date, event_contract order by date, popularity_per_day desc
69856e79-1d53-4ae5-9f4f-0a9e4514d888,New Authorizers,with  social_inits as (   select * from near.core.fact_actions_events_addkey     where receiver_id = 'social.near' ), add_signer as (   select     k.tx_hash,     k.block_id,     k.block_timestamp,     t.tx_signer,     k.allowance,     t.tx_signer = t.tx_receiver   from social_inits k     left join near.core.fact_transactions t using (tx_hash) ), de_dupe_resigners as (   select     block_timestamp,     tx_signer   from add_signer   -- ignore subsequent authorizations by the same signer   qualify ROW_NUMBER() over (   PARTITION BY tx_signer   ORDER BY     block_timestamp ASC ) = 1    ) select   block_timestamp::date as "Date",   count(distinct tx_signer) as "Unique Authorizers",   sum("Unique Authorizers") over (order by "Date") as "Cumulative Unique Authorizers" from de_dupe_resigners group by 1 order by 1
6977dd41-d481-4e45-bce5-ffd38b36d34c,bETH Bridged to ETH [LDO1],WITH burns AS (   SELECT     date_trunc('day', block_timestamp) as date,     sum(event_attributes:"0_amount"::float) / pow(10,6) as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" = 'burn'     AND event_attributes:"0_contract_address" = 'terra1dzhzukyezv0etz22ud940z7adyv7xgcjkahuun' -- bETH   GROUP BY 1   ) SELECT   *,   sum(amount) OVER (ORDER BY date) AS cumulative,   AVG(amount) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM burns
5d206aac-814d-4b4c-a8ab-d08ca77692d6,Untitled Query,select * from thorchain.core.dim_block   limit 10
92432290-61ca-4fb7-817a-f091571126a4,Hourly Collateral Redemptions Since 5/7,select  date_trunc(hour,block_timestamp) as hour, sum(amount_usd) as amt_usd, count(distinct sender) as withdraw_wallets, count(distinct tx_id) as withdraw_txs from anchor.collateral where event_type = 'withdraw' and block_timestamp > '2022-05-07' group by hour order by amt_usd desc
6f520b9d-12db-4309-8579-fdc6202b19ca,Untitled Query,select * from flipside_prod_db.mdao_harmony.txs limit 100;
7010494b-bc2f-4112-8740-3bdeeedfe995,liq test,SELECT distinct(action),   count(*) FROM uniswapv3.lp_actions WHERE liquidity_provider = '0x335c0552eb130f3dfbe6efcb4d2895aed1e9938b' 	AND block_timestamp > GETDATE() - interval '1 week' GROUP BY 1;
70e2a7f2-acb1-4a1c-bd19-b2fac102f7d0,Untitled Query,select    array_size(tx:body:messages) as msgz,   tx:body:messages[0]:"@type" as msg0_type,   tx:body:messages[0]:msg as msg0,   tx:body:messages[1]:msg as msg1,   tx:body:messages[1]:"@type" as msg1_type,   tx:body:messages[2]:msg as msg2,   tx:body:messages[2]:"@type" as msg2_type   from    terra.core.fact_transactions where msgz > 1   -- and msg0 is not null limit 10
70cd8a1d-9209-44b0-b051-a951840836ee,Nexus Hunt 2,SELECT * FROM terra.msg_events WHERE tx_id = 'E9EC0048460684A1F48C3AC72AE8CE43379A5AE2D93609777D86FE42CCD6D7B9'
72cdb2e8-d0fd-4b20-a871-89af44a5fd93,lota unbonding and claims,WITH request AS (   SELECT   date_trunc('day', block_timestamp) as date,   sum(msg_value:execute_msg:unbond_stake:amount::float) / pow(10,6) as lota_unbonded FROM terra.msgs WHERE tx_status = 'SUCCEEDED' 	AND msg_value:contract = 'terra1342fp86c3z3q0lksq92lncjxpkfl9hujwh6xfn' -- LOTA staking contract 	AND msg_value:execute_msg LIKE '%unbond_stake%'   	AND block_timestamp > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1), claim AS ( SELECT   date_trunc('day', block_timestamp) as date,   sum(event_attributes:"0_amount"::float) / pow(10,6) as lota_claimed FROM terra.msg_events WHERE tx_status = 'SUCCEEDED' 	AND event_attributes:"0_contract_address" = 'terra1342fp86c3z3q0lksq92lncjxpkfl9hujwh6xfn' 	AND event_attributes:"0_action" LIKE '%withdraw_stake%' 	AND block_timestamp > GETDATE() - interval '2 weeks' GROUP BY 1 ORDER BY 1) SELECT * FROM request FULL OUTER JOIN claim ON request.date = claim.date
739b0450-1dff-479a-bdb4-8acce153e005,Untitled Query,with prices as ( 	SELECT       date_trunc('hour', CONVERT_TIMEZONE('America/New_York', block_timestamp)) as date,       avg(price_usd) as price     FROM terra.oracle_prices     WHERE SYMBOL = 'LUNA'       AND block_timestamp > '2021-11-01T00:00:00Z'     GROUP BY 1 ) select   date,   price,   avg(price) over (order by date rows between 719 preceding and current row) as month_ma    from prices
79a0201e-7c3f-4c27-b46c-ceb64b0a397d,Hunt TX4 - Deposit MATIC for Lending,SELECT   block_id,   tx_id,   to_label_subtype,   to_label,   function_name FROM polygon.transactions WHERE tx_id = '0xa6a8cc9a29c6ae936c19446e52f39b4039b87d939341eef567e29734ce7c19ce'
6a65e45d-4c01-45f1-b60c-9d42b4f08534,New Contributors,with user_data as ( select     author,     min(closedat) as earliest_close,     min(createdat) as earliest_open,     count(1) as num_issues,     count(distinct org) as count_orgs,     count(distinct repo) as count_repos from near.beta.github_activity     where author not ilike '%dependabot%' group by 1 ) select     date_trunc('month', earliest_open::date) as "Month",     count(distinct author) as "First Time Contributors" from user_data group by 1 order by 1
7afdb980-6c36-42aa-84a8-61790c5cc63f,MDAO Workshop - Anchor Collateral Volume - Gross by Event,select 	date_trunc('d',block_timestamp) as date,   	event_type,   	sum(amount_usd) as gross_volume    from anchor.collateral where block_timestamp > CURRENT_DATE - 90    group by 1,2 order by 1,2 desc
0786857b-0379-4e63-b5ba-8497c78a541c,Untitled Query,select * from terra.classic.fact_message_events    where event_attributes::string ilike '%amount%'   -- and tx_id = '43A9ECB086A1F77672F0BA697CD82F1A26FCC3F0C2D1A705C5CFC882EB66CB9A'      order by event_index -- select * from terra.classic.fact_messages where tx_id = '43A9ECB086A1F77672F0BA697CD82F1A26FCC3F0C2D1A705C5CFC882EB66CB9A'
7b469619-5b71-4c68-a71d-b827118ebdf5,Where does CRV go? [C1],SELECT    date_trunc('day', block_timestamp) as day,   from_label,   count(*) FROM ethereum.udm_events WHERE symbol LIKE 'CRV%'   AND block_timestamp > CURRENT_DATE - INTERVAL '90 days' GROUP BY 1,2 ORDER BY 1, 3 desc
6f7cc09c-5ba8-4c9e-8f7c-93698c956f88,Arbitrum,-- select  -- 	block_timestamp::date as days, -- 	count(distinct FROM_ADDRESS) as dau, --   	count(*) as txns, --   	count(distinct tx_hash) -- 	from arbitrum.core.fact_transactions --   	group by days -- 	order by days --from txs: -- select --   	status, -- 	count(distinct tx_hash) as txs -- from arbitrum.core.fact_transactions --   where block_timestamp::Date = '2022-12-01' --   group by 1 -- 639,587 total -- 629,309 success -- 10,197 fail --from blocks -- block count matches arbiscan -- tx count on arbiscan = 372,484 -- vs 639,587 here -- select -- 	sum(tx_count) as txs, -- 	count(distinct block_number) -- from arbitrum.core.fact_blocks --   where block_timestamp::date = '2022-12-01' -- looking at some sample blocks -- top 10 match -- select * -- from arbitrum.core.fact_blocks --   where block_timestamp::date = '2022-12-01' -- order by tx_count desc -- limit 100; -- select * from arbitrum.core.fact_transactions where tx_hash = '0x4e1293970d0e58b589b1bb1c11de785fb863cd78e2e9dd8e61c58184c302ed87' -- select count(1) -- from arbitrum.core.fact_blocks --   where block_timestamp::date = '2022-12-01' -- select * from arbitrum.core.fact_transactions --   where tx_hash = '0x12ba91cd2cdd4ed979b8dfddb40d6e26966cc34f6b60f180760889f363c4713d'; SELECT 	case when origin_function_signature = '0x6bf6a42d' then 'SELF' 	ELSE 'All Other' 	END as sig_type, 	count(distinct tx_hash) as txs  from arbitrum.core.fact_transactions   where block_timestamp::Date = '2022-12-01' group by 1
6f38a040-b5c6-4984-8ff9-100a2c863b6b,Untitled Query,SELECT 	date_trunc('hour', block_timestamp) as _hour, 	avg(tx_count) as avg_txs from flow.core.fact_blocks   where block_timestamp >= current_timestamp - interval '24 hours' group by 1
7c9caf1a-d0bd-4450-a5b1-4027d37ccdee,Opensea 0x Decoding // Status Check,with  event_logs as ( select   DATE_TRUNC(week, block_timestamp) AS time,   COUNT(1) AS total_logs from   polygon.core.fact_event_logs where   contract_address = '0xfede379e48c873c75f3cc0c81f7c784ad730a8f7' group by   time ), decoded_logs as ( select   DATE_TRUNC(week, block_timestamp) AS time,   COUNT(1) AS decoded_logs from   polygon.core.ez_decoded_event_logs where   contract_address = '0xfede379e48c873c75f3cc0c81f7c784ad730a8f7' group by   time ) select   l.time,   total_logs,   coalesce(decoded_logs, 0) as decoded_logs,   (decoded_logs / total_logs) * 100 as pct from event_logs l    left join decoded_logs d using (time) order by 1
7d4c2954-a22c-4b68-b1d0-5be9cf36b696,Terra Wormhole - Outbound Gross Volume [T101] adj,WITH outbound AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"transfer.recipient_chain" as destination_chain_id,     CASE       WHEN event_attributes:"transfer.token"[0] IS NULL THEN 'UST'       ELSE 'LUNA'     END as token,     sum(event_attributes:"transfer.amount") / pow(10,6) as amount   FROM terra.msg_events   WHERE block_timestamp > '2021-10-18T00:00:00Z'     AND event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND event_attributes:"1_contract_address" = 'terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5' -- separate out inbound from outbound     -- AND destination_chain_id IS NOT NULL   GROUP BY 1,2,3   ), chain_ids AS (   SELECT '1' AS id, 'Solana' AS name   UNION   SELECT '2' AS id, 'Ethereum' AS name   UNION   SELECT '3' AS id, 'Terra' AS name   UNION   SELECT '4' AS id, 'BSC' AS name   UNION   SELECT '5' AS id, 'Polygon' AS name   ), prices AS (   SELECT     date_trunc('day', block_timestamp) as date,     avg(price_usd) as avg_price   FROM terra.oracle_prices   WHERE SYMBOL = 'LUNA'     AND block_timestamp > '2021-10-18T00:00:00Z'   GROUP BY 1   ), -- convert luna to usd val using daily avg  outbound_usd AS (   SELECT     outbound.date as date,     destination_chain_id,     token,     amount * avg_price as amount     -- CASE     --   WHEN token = 'LUNA' THEN amount * avg_price     --   ELSE amount     -- END AS amount_usd   FROM outbound   LEFT JOIN prices ON outbound.date = prices.date   WHERE token = 'LUNA'   ), combo AS (   SELECT * FROM outbound_usd   UNION   SELECT * FROM outbound   WHERE token = 'UST' ) SELECT   date,   chain_ids.name as destination_chain,   sum(amount) as volume_usd FROM combo JOIN chain_ids ON combo.destination_chain_id = chain_ids.id GROUP BY 1,2
2ce8ffb7-6b8f-4c45-8a17-b2a57e38d0ea,NEXUS Daily Active Users [Flash119],WITH protocol AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2021-10-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN (       'terra1cda4adzngjzcn8quvfu2229s8tedl5t306352x',       'terra1tfrecwlvzcv9h697q3g0d08vd53ssu5w4war4n',       'terra12897djskt9rge8dtmm86w654g7kzckkd698608',       'terra10f2mt82kjnkxqj2gepgwl637u2w4ue2z5nhz5j',       'terra178v546c407pdnx5rer3hu8s2c0fc924k74ymnn',       'terra163pkeeuwxzr0yhndf8xd2jprm9hrtk59xf7nqf',       'terra1q6r8hfdl203htfvpsmyh8x689lp2g0m7856fwd',       'terra1zvn8z6y8u2ndwvsjhtpsjsghk6pa6ugwzxp6vx',       'terra1tuw46dwfvahpcwf3ulempzsn9a0vhazut87zec',       'terra14zhkur7l7ut7tx6kvj28fp5q982lrqns59mnp3',       'terra1y8kxhfg22px5er32ctsgjvayaj8q36tr590qtp',       'terra1xrk6v2tfjrhjz2dsfecj40ps7ayanjx970gy0j',       'terra15jggavtx37dsmfjy6sed7nnyccw2v5298xlt5g',       'terra16mtntdg7rkvt3q5hcz8nqr6hj8mme5jmrtk8y2',       'terra1992lljnteewpz0g398geufylawcmmvgh8l8v96',       'terra12kzewegufqprmzl20nhsuwjjq6xu8t8ppzt30a',       'terra1hs4ev0ghwn4wr888jwm56eztfpau6rjcd8mczc',       'terra1lws09x0slx892ux526d6atwwgdxnjg58uan8ph'     )     ) SELECT   date,   count(distinct address) as unique_wal FROM protocol GROUP BY 1 ORDER BY 1
52d64333-032f-436b-a0c6-1bd7a3f9a2f8,Terra - Monthly Active Users [Flash119],WITH users AS (   SELECT     date_trunc('month', block_timestamp) as date,     coalesce( -- thank u CryptoIcicle for this optimization       msg_value:sender,       msg_value:from_address,       msg_value:to_address,       msg_value:delegator_address,       msg_value:trader,       msg_value:grantee,       msg_value:granter,       msg_value:voter,       msg_value:owner,       msg_value:signer,       msg_value:delegate,       msg_value:depositor,       msg_value:admin,       msg_value:proposer     ) as address     FROM terra.msgs   WHERE msg_module != 'oracle'     AND msg_module != 'core'   ),    summation as (   SELECT     date,     count(distinct address) as addresses   FROM users   GROUP BY 1   ) SELECT    *,   avg(addresses) OVER (ORDER BY summation.date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as weekly_ma FROM summation ORDER BY 1
4aaf99ff-c849-4925-8e34-66a8bdfab273,Anchor Daily Active Users [Flash119],WITH anchor AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2021-10-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN ('terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s', 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8', 'terra1w9ky73v4g7v98zzdqpqgf3kjmusnx4d4mvnac6', 'terra1f32xyep306hhcxxxf7mlyh0ucggc00rm2s9da5', 'terra14ku9pgw5ld90dexlyju02u4rn6frheexr5f96h', 'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9', 'terra146ahqn6d3qgdvmj8cj96hh03dzmeedhsf0kxqm', 'terra10cxuzggyvvv44magvrh3thpdnk9cmlgk93gmx2')     ) SELECT   date,   count(distinct address) as unique_wal FROM anchor GROUP BY 1 ORDER BY 1
4a8401f8-4b54-4cc9-86e3-fe53be3c9a94,Untitled Query,select * from terra.core.fact_transactions   where memo ilike '%fuck%' limit 10
1f9cbf22-2de1-4989-99eb-c1a3e5c05166,Mirror Daily Active Users [Flash119],WITH protocol AS (   SELECT     date_trunc('day', block_timestamp) as date,     event_attributes:"0_contract_address" as contract,     event_attributes:"0_sender" as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND block_timestamp > '2021-10-01T00:00:00Z'     AND event_attributes:"0_contract_address" IN ('terra1wh39swv7nq36pnefnupttm2nr96kz7jjddyt2x', 'terra1mzj9nsxx0lxlaxnekleqdy8xnyw2qrh3uz6h8p', 'terra1wfz7h3aqf4cjmjcvc6s8lxdhh7k30nkczyf0mj', 'terra17f7zu97865jmknk7p2glqvxzhduk78772ezac5', 'terra1s4fllut0e6vw0k3fxsg4fs6fm2ad6hn0prqp3s', 'terra1kalp2knjm4cs3f59ukr4hdhuuncp648eqrgshw', 'terra1zpr8tq3ts96mthcdkukmqq4y9lhw0ycevsnw89')     ) SELECT   date,   count(distinct address) as unique_wal FROM protocol GROUP BY 1 ORDER BY 1
877d35f8-d036-4225-a18a-e568c91f1190,Untitled Query,select * from near.core.fact_transactions limit 10
45328899-1c1b-4b10-9dbf-c5f00220141b,[terradash] Balance of ANC Yield Reserve,SELECT   date,   sum(balance) as balance FROM terra.daily_balances WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   AND currency = 'UST'   AND date > '2022-01-01T00:00:00Z' GROUP BY 1
881f4a52-31af-4fe7-afdb-b208ec4b393e,Untitled Query,select 	date_trunc('month',block_timestamp),     count(tx_hash) from ethereum.core.fact_transactions   where block_timestamp::date like '2022%' group by 1 order by 2
ecd739f2-1de9-4a6d-9fd1-af7d2b04d195,THOR Bridge - Unique Users [THOR3],SELECT   date_trunc('day', block_timestamp) as date,   count(distinct to_address) as unique_users FROM thorchain.upgrades GROUP BY 1
317438ea-68c7-4d92-93af-fb20d7ded438,Untitled Query,select distinct   -- address   -- , address_name   *   from optimism.core.dim_labels   where 1=1   -- and label_subtype = 'bridge'   and address = '0x4200000000000000000000000000000000000010'
f3c0cca1-2665-4186-821b-aa8ed5423da1,2023-05-07 09:28 PM,SELECT   block_timestamp::date as _date,   count(1) from ethereum.core.ez_nft_mints where block_timestamp::date >= '2023-01-01' group by 1 order by 1; -- 19mm mints in 23 so far, sheesh
f5c9f416-6045-43ef-b12f-ece6749f748a,Untitled Query,select block_timestamp::date, count(distinct tx_hash) from ethereum.core.fact_transactions where block_timestamp::date > current_date - 30 group by 1 order by 1
32e5b00f-92c2-421b-98be-c3cecc689485,Untitled Query,-- select * from near.core.ez_usn_supply    -- where to_address = 'beertruck.near' -- where tx_hash = 'FN4cFF8CnaW5tVVHJyY6JJdEUbH5k48pBm4tjFhdGgGv'   -- where tx_hash = '6kRrarKTBGgBDRK691jiPryXxJTpbacV3kBSSrJykW2d' with txs as (   	select * from near.core.fact_transactions    	where block_timestamp::date >= '2022-09-12' ), usn as (     select * from near.core.ez_usn_supply    	where block_timestamp::date >= '2022-09-12' ), go_pay_txs as ( 	select * from txs     where tx_receiver = tx_signer   		and tx:actions ilike '%deleteaccount%gopaywith.near%' ), usn_amount_out as ( 	select *   	from usn     where to_address in (select tx_signer from go_pay_txs)   		and from_address != 'gopaywith.near' ), usn_amount_in as (   	select * from usn     where to_address = 'beertruck.near' 		and from_address in (select to_address from usn_amount_out) ),   combo as ( select * from usn_amount_out  union select * from usn_amount_in ) select * from combo order by block_timestamp desc
50408819-866d-435f-9f9b-3f21e40929eb,Untitled Query,select    cast(block_timestamp as date) as date,   platform_name as exchange,     count(distinct buyer_address) as buyers,    count(distinct seller_address) as sellers,    count(seller_address) as trades,    sum(platform_fee_usd) as fees,   sum(creator_fee_usd) as royalties,   count(distinct buyer_address)/count(distinct seller_address) as Buyer_v_Seller,    sum(case when currency_symbol IN ('WETH','ETH') then 1 end) as TOTAL_ETH_WETH_TRADES,   sum(case when currency_symbol IN ('WETH','ETH') then price end) as TOTAL_ETH_WETH_VALUE,   sum(case when currency_symbol IN ('WETH','ETH') and creator_fee_usd > 0.9 then price end) as TOTAL_TRADE_W_ROYALTIES,   sum(case when currency_symbol IN ('WETH') then 1 end) as WETH,   count(distinct case when currency_symbol = 'WETH' then seller_address end) as WETH_SELLERS,   count(distinct case when currency_symbol IN ('ETH', 'WETH') then seller_address end) as ALL_SELLERS,   sum(price_usd) as USD   from ethereum.core.ez_nft_sales where block_timestamp > '2021-07-01' and price_usd < 5000000 and platform_name in ('opensea','x2y2','looksrare')   --and creator_fee_usd > .011--and nft_address = '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'   group by 1, 2 order by 1 desc, 2
f7b03839-564b-4fd9-b795-4b2a67ad46c8,Untitled Query,select * from osmosis.core.fact_msgs    order by block_timestamp desc, tx_id   limit 10 select * from osmosis.core.fact_transactions   where tx_id = '00E3C3900A2BED49B7131CAE214D3FD816865C0E5CAC61625E7012DB13A72A48'
90760b01-06f3-44cf-9b85-9948a55e8760,Terra Bridge vs Wormhole Unique BSC Users [T104],WITH wh_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_type = 'execute_contract'     AND event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), wh_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND (event_attributes:contract_address = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf' OR event_attributes:"0_contract_address" = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf')     AND event_attributes:recipient IS NOT NULL     AND block_timestamp > '2021-10-18T00:00:00Z'   ),    wh_wallets AS (   SELECT * FROM wh_outbound   UNION   SELECT * FROM wh_inbound   ), wh_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_wallets   FROM wh_wallets   GROUP BY 1   ), tb_outbound AS (   SELECT     block_timestamp,     event_attributes:sender as address   FROM terra.msg_events   WHERE event_attributes:recipient = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     AND block_timestamp > '2021-10-18T00:00:00Z'   ), tb_inbound AS (   SELECT     block_timestamp,     event_attributes:recipient as address   FROM terra.msg_events   WHERE event_attributes:sender = 'terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2'     AND event_type = 'transfer'     and block_timestamp > '2021-10-18T00:00:00Z'   ), tb_wallets AS (   SELECT * FROM tb_outbound   UNION   SELECT * FROM tb_inbound   ), tb_unique AS (   SELECT     date_trunc('day', block_timestamp) as date,     count(distinct address) as unique_wallets   FROM tb_wallets   GROUP BY 1   ), total_users AS (   SELECT *, 'wormhole' AS source FROM wh_unique   UNION   SELECT *, 'bridge' AS source FROM tb_unique   ) SELECT   *,   AVG(unique_wallets) OVER (PARTITION BY source ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) as weekly_ma FROM total_users
70718ccc-6eae-4645-b115-13fda44853ec,agreeable-salmon,select * from flow.core.dim_address_mapping limit 5
9394ed68-a6d0-486e-b316-8435ac6c8a96,Untitled Query,select * from flow.core.ez_dex_swaps limit 1
788b5ab1-8874-418c-ab7b-ff50ff7e13dc,BTC Network Stats Claude v4,WITH first_appearance AS (     SELECT         PUBKEY_SCRIPT_ADDRESS,         MIN(DATE_TRUNC('day', BLOCK_TIMESTAMP)) AS first_date     FROM BITCOIN.CORE.FACT_OUTPUTS     WHERE PUBKEY_SCRIPT_ADDRESS IS NOT NULL     GROUP BY PUBKEY_SCRIPT_ADDRESS ), daily_metrics AS (     SELECT         DATE_TRUNC('day', b.BLOCK_TIMESTAMP) AS date,         COUNT(DISTINCT b.BLOCK_NUMBER) AS blocks_per_day,         COUNT(DISTINCT t.TX_ID) AS transactions_per_day,         COUNT(DISTINCT o.PUBKEY_SCRIPT_ADDRESS) AS active_addresses_per_day,         COUNT(DISTINCT CASE              WHEN fa.first_date = DATE_TRUNC('day', b.BLOCK_TIMESTAMP) THEN o.PUBKEY_SCRIPT_ADDRESS          END) AS new_addresses_per_day     FROM          BITCOIN.CORE.FACT_BLOCKS b         LEFT JOIN BITCOIN.CORE.FACT_TRANSACTIONS t ON b.BLOCK_NUMBER = t.BLOCK_NUMBER         LEFT JOIN BITCOIN.CORE.FACT_OUTPUTS o ON t.TX_ID = o.TX_ID         LEFT JOIN first_appearance fa ON o.PUBKEY_SCRIPT_ADDRESS = fa.PUBKEY_SCRIPT_ADDRESS     GROUP BY          DATE_TRUNC('day', b.BLOCK_TIMESTAMP) ), weekly_aggregates AS (     SELECT         DATE_TRUNC('week', date) AS week,         AVG(blocks_per_day) AS avg_blocks_per_day,         AVG(transactions_per_day) AS avg_transactions_per_day,         AVG(active_addresses_per_day) AS avg_active_addresses_per_day,         AVG(new_addresses_per_day) AS avg_new_addresses_per_day     FROM daily_metrics     GROUP BY DATE_TRUNC('week', date) ) SELECT     week,     AVG(avg_blocks_per_day) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS blocks_per_day_4w_ma,     AVG(avg_transactions_per_day) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS transactions_per_day_4w_ma,     AVG(avg_active_addresses_per_day) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS active_addresses_per_day_4w_ma,     AVG(avg_new_addresses_per_day) OVER (ORDER BY week ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS new_addresses_per_day_4w_ma FROM weekly_aggregates ORDER BY week DESC
414ce03c-e6f4-46cc-8347-472d66bb5c26,mere-copper,SELECT   column_name,   data_type FROM   berachain.information_schema.columns WHERE   table_schema = 'TESTNET'   AND table_name = 'FACT_BLOCKS' ORDER BY   ordinal_position;
81930386-c104-4f1e-a19f-1f411e444d9e,[Bera] High level block metrics,SELECT      DATE(BLOCK_TIMESTAMP) AS block_date,     COUNT(DISTINCT BLOCK_NUMBER) AS blocks_per_day,     SUM(GAS_USED) AS gas_used_per_day,     SUM(TX_COUNT) AS transactions_per_day,     AVG(TX_COUNT) AS avg_transactions_per_block FROM      berachain.testnet.FACT_BLOCKS WHERE      BLOCK_TIMESTAMP >= DATEADD('day', -30, CURRENT_DATE()) GROUP BY      DATE(BLOCK_TIMESTAMP) ORDER BY      block_date DESC;
2beb91ba-0765-424e-9be4-855ffe9a5254,[Bera] Generate Schema,SELECT      column_name,     data_type,     ordinal_position FROM      BERACHAIN.information_schema.columns WHERE      table_schema = 'TESTNET'     AND table_name = 'FACT_BLOCKS' ORDER BY      ordinal_position;
4b71f155-d6ef-4de2-8328-c9e1b43c397f,Staged Contracts copy,-- forked from contractbrowser / Staged Contracts @ https://flipsidecrypto.xyz/contractbrowser/q/yjogMPpjP7lT/staged-contracts -- Visualization of valid staged contracts.   -- Staging Events:     -- Stage: Counted as staged.     -- Replace: Counted as staged.     -- Unstage: Not counted as staged.     -- Contracts that have not historically had Stage/Replace events: Not counted as staged. WITH StagedContracts AS (     SELECT DISTINCT event_data:contract AS contract     FROM flow.core.fact_events     WHERE block_timestamp > '2024-04-01'         AND event_type ILIKE '%StagingStatusUpdated%'         AND event_contract = 'A.56100d46aa9b0212.MigrationContractStaging'         AND event_data:action = 'stage' ) SELECT      x.event_contract as contract,      CASE          WHEN x.contract_name IN (             'FlowEpoch',              'FlowIDTableStaking',              'FlowQC',              'FlowDKG',              'FlowServiceAccount',              'NodeVersionBeacon',              'RandomBeaconHistory',              'FlowStorageFees',              'FlowStakingCollection',              'StakingProxy',              'LockedTokens',              'FlowFees',              'FlowToken',              'FungibleToken',              'FungibleTokenMetadataViews',              'NonFungibleToken',              'MetadataViews',              'ViewResolver',              'FungibleTokenSwitchboard',              'EVMContract',              'Burner'         )          OR EXISTS (SELECT 1 FROM StagedContracts sc WHERE sc.contract = x.contract_name)          THEN 'Yes'          ELSE 'No'      END AS staged FROM flow.core.dim_contract_labels x WHERE staged = 'Yes' -- Visualization of the total percentage/number of Active Mainnet Contracts staged.   -- Active Contracts Criteria:   -- Last 30 days snapshot of all transactions and their dependencies/imports to identify contract addresses.   -- Union with contracts that have emitted at least one event in the last 30 days. -- Visualization of the percentage/number of Most Depended on Contracts staged (10+ dependencies). -- Visualization of valid staged contracts.   -- Staging Events:     -- Stage: Counted as staged.     -- Replace: Counted as staged.     -- Unstage: Not counted as staged.     -- Contracts that have not historically had Stage/Replace events: Not counted as staged. -- Total number of active contracts and their list. -- Visualization of the percentage/number of unmaintained contracts (data to be provided).
ea86a114-d6dd-48ad-a359-c62c510f3640,[Bera] CTE - event logs,with uniswap_contracts AS ( select address from berachain.testnet.dim_contracts  where name ilike '%uniswap%' ) select * from berachain.testnet.fact_decoded_event_logs where contract_address IN (select distinct address from uniswap_contracts)   and block_timestamp >= sysdate() - interval '30 days' limit 10
a034cf0b-310e-4c56-b3bf-e91ea23c5af6,[Bera] Transfers from log,select   block_number,   block_timestamp,   tx_hash,   origin_function_signature,   origin_from_address,   origin_to_address,   contract_address,   c.symbol,   c.name,   c.decimals,   data,   utils.udf_hex_to_int(SUBSTR(DATA, 3, 64)) AS raw_amount_precise from    berachain.testnet.fact_event_logs l   left join berachain.testnet.dim_contracts c ON lower(l.contract_address) = lower(c.address) where block_timestamp >= sysdate() - interval '7 days' and tx_hash = '0x3abf8261c185d1dbc3d5db8b01a45f011c8c9a191c4f45ba5710c96ab325ca14' ;
c0a252a1-1dbb-49ad-af73-8cd572df47f8,[Bera] Decoded transfers,select * from berachain.testnet.ez_decoded_event_logs sample (50 rows) where event_name in ('Deposit', 'Transfer') and block_timestamp >= sysdate() - interval '7 days'
c2c23736-2ced-4526-b7b8-7d3b434e225b,[Bera] Transfers from double join,-- forked from [Bera] Transfers from log @ https://flipsidecrypto.xyz/studio/queries/a034cf0b-310e-4c56-b3bf-e91ea23c5af6 select   l.block_number,   l.block_timestamp,   l.tx_hash,   l.origin_function_signature,   origin_from_address,   origin_to_address,   contract_address,   c.symbol,   c.name,   c.decimals,   data,   topics,   t.value,   t.value_precise,   t.tx_fee,   t.gas_price from    berachain.testnet.fact_event_logs l   left join berachain.testnet.dim_contracts c ON lower(l.contract_address) = lower(c.address)   left join berachain.testnet.fact_transactions t ON l.block_number = t.block_number AND l.tx_hash = t.tx_hash  where l.block_timestamp >= sysdate() - interval '10 days' and l.tx_hash = '0x3abf8261c185d1dbc3d5db8b01a45f011c8c9a191c4f45ba5710c96ab325ca14' ;
1d075237-14a1-41dd-a9b8-88c7deeaa477,nice-ivory,select   l.block_number,   l.block_timestamp,   l.origin_function_signature,   l.origin_from_address,   l.origin_to_address,   contract_address,   topics,   data,   c.symbol,   c.name,   c.decimals,   t.value,   t.VALUE_PRECISE from  -- berachain.testnet.fact_transactions  berachain.testnet.fact_event_logs l left join berachain.testnet.dim_contracts c ON lower(l.contract_address) = lower(c.address) left join berachain.testnet.fact_transactions t ON l.block_number = t.block_number AND l.tx_hash = t.tx_hash -- sample (25 rows) where l.block_timestamp >= sysdate() - interval '8 days' and l.tx_hash = '0x3abf8261c185d1dbc3d5db8b01a45f011c8c9a191c4f45ba5710c96ab325ca14'
9ac13eee-28b2-4b4c-944d-45e4cf3708d6,NEAR Lands - total (distinct) signers,with tiles as (   select * from near.core.fact_actions_events_function_call     where method_name = 'setTiles' ), get_signer as (   select tx_hash, tx_signer from near.core.fact_transactions     where tx_hash in (select tx_hash from tiles) ) select count(distinct tx_signer) as total_signers from get_signer;
645ed9aa-dfe9-4a15-8156-4a27e78551ea,Addresses,SELECT address, issuer, etf_ticker as ticker FROM (VALUES     ('16d24E9E8nZ5Uk7386Dr3yNYu5uPDxHP7E', 'Franklin Templeton', 'Franklin Templeton EZBC ETF 1', 'EZBC')     , ('3FM9vDYsN2iuMPKWjAcqgyahdwdrUxhbJ3', 'VanEck', 'VanEck HODL ETF 1', 'HODL')     , ('1J3UFXi5kakMFic8YifyCtD1YHBPYJRitq', 'WisdomTree', 'WisdomTree BTCW ETF 1', 'BTCW')     , ('1CKVszDdUp4ymGceAZpGzYEFr4RPNHYqaM', 'Bitwise', 'Bitwise BITB ETF 1', 'BITB')     , ('1K5EW6HLqLTwUmnpnNfkvSej4oT2CbWbPk', 'Bitwise', 'Bitwise BITB ETF 2', 'BITB')     , ('bc1qh9xvgsqh648q7kyq2d0uu90e7tv6ph46rjjy3n', 'Bitwise', 'Bitwise BITB ETF 3', 'BITB')     , ('bc1q9nzr8tzsx8pyk25ufps22p6un4k2y3ymh9lmze', 'Bitwise', 'Bitwise BITB ETF 4', 'BITB')     , ('bc1q0gepug33c0tp6hf7l2f23ve9m0a0t7sv5ylwdx', 'Bitwise', 'Bitwise BITB ETF 5', 'BITB')     , ('bc1q4x6el3tkests79gvf2vkz2revw47r2n5s50uku', 'Bitwise', 'Bitwise BITB ETF 6', 'BITB')     , ('bc1q46dggcuwgftce2uywx23fp4jq6xqda4xa8tuwh', 'Bitwise', 'Bitwise BITB ETF 7', 'BITB')     , ('bc1qznvrh6eq0k88hwu9g44hk4mw5kemap3pmmljza', 'Bitwise', 'Bitwise BITB ETF 8', 'BITB')     , ('bc1qdeurgks0dfqdeetvelhykuh90753swsy8k9kaz', 'Bitwise', 'Bitwise BITB ETF 9', 'BITB')     , ('bc1qfa5x969js5lxn2vetql8ajerjcrn43hja56ex9', 'Bitwise', 'Bitwise BITB ETF 10', 'BITB')     , ('bc1qzq39c6k0k3mxtqyuz342u774csrtljk4xhjvql', 'Bitwise', 'Bitwise BITB ETF 11', 'BITB')     , ('bc1qxyzs02t7gdd9n203ucy03m0yw5zzllyn2k49hm', 'Bitwise', 'Bitwise BITB ETF 12', 'BITB')     , ('bc1qgfqd5dyj6l9s2djwjjhg87tjjtzlshw5egkfct', 'Bitwise', 'Bitwise BITB ETF 13', 'BITB')     , ('bc1qsshluxkwzf3ksnm5gh8wpzt453x75f2gn6dlqw', 'Bitwise', 'Bitwise BITB ETF 14', 'BITB')     , ('bc1qxaqt6jynlh2z4c5ajhdwyr5qa3yqykytwvuml0', 'Bitwise', 'Bitwise BITB ETF 15', 'BITB')     , ('bc1ql324j0ns2pd8sjrgzj8drzzuhhykqcunfennz0', 'Bitwise', 'Bitwise BITB ETF 16', 'BITB')     , ('bc1qz279nw7j400sz3vata2g9ys9y5lxprdxn7j96s', 'Bitwise', 'Bitwise BITB ETF 17', 'BITB')     , ('bc1q66dqar552z4lx7l699telqntadc6jpvlxwersz', 'Bitwise', 'Bitwise BITB ETF 18', 'BITB')     , ('bc1qtce5cel4j4jgewhz8j8lgjsauk2h7e8gw2k06g', 'Bitwise', 'Bitwise BITB ETF 19', 'BITB')     , ('bc1qlyswa4dnas6nf928fvqwvuvawsjqlkxr3efced', 'Bitwise', 'Bitwise BITB ETF 20', 'BITB')     , ('bc1qzscsdx7mwatnav3y3pwl4nt8vksxal4xce608d', 'Bitwise', 'Bitwise BITB ETF 21', 'BITB')     , ('bc1q2nxn5m2tyd4mck76w9ksju470tkg8vamlyazhf', 'Bitwise', 'Bitwise BITB ETF 22', 'BITB')     , ('1GVw5RSMr2WY5qiTmmPsgF8AFeiePe2jpo', 'Invesco', 'Invesco BTCO ETF 1', 'BTCO')     , ('1D7vHCX7w5ojRFXhsvFERXc6UPnizsXSjf', 'Invesco', 'Invesco BTCO ETF 2', 'BTCO')     , ('1HFtnSQ3kw4HuZgpyRc6uNiixa88K74VKq', 'Invesco', 'Invesco BTCO ETF 3', 'BTCO')     , ('165sW57vfL77NQt8h6egDuemqoVjN8CKEn', 'Invesco', 'Invesco BTCO ETF 4', 'BTCO')     , ('167eY6Ug9R7noLLtJAko5GnfWbf8NYyj3j', 'Invesco', 'Invesco BTCO ETF 5', 'BTCO')     , ('12QzgAk8QH3KZsHk2BobWdqi2nCh45CeST', 'Invesco', 'Invesco BTCO ETF 6', 'BTCO')     , ('14tcf9WBUzpZLEkxLyJShdX8PGH9zWNK7K', 'Invesco', 'Invesco BTCO ETF 7', 'BTCO')     , ('13hFKZghy5CuRtM4KF19hby1r3Yt7ygm77', 'Invesco', 'Invesco BTCO ETF 8', 'BTCO')     , ('15koo8XUEcDAga9gHkCS9pq6NFvR1ah66n', 'Invesco', 'Invesco BTCO ETF 9', 'BTCO')     , ('1BoxAp48kudcF5JLQGbDdXTXyr8ZHxUpwX', 'Invesco', 'Invesco BTCO ETF 10', 'BTCO')     , ('14k98y4Nc1Un2Bqhb4CJCwUnirywCEGmzx', 'Invesco', 'Invesco BTCO ETF 11', 'BTCO')     , ('1MZ5473pDgUV4UR6auahzApdEdLCJRHbq9', 'Invesco', 'Invesco BTCO ETF 12', 'BTCO')     , ('1DzqGzwAABYkEDR2w5bLR7CW3H57sCVqDR', 'Invesco', 'Invesco BTCO ETF 13', 'BTCO')     , ('153wiYun6TpxsnugzaxpJZUCDvraGhzVwD', 'Invesco', 'Invesco BTCO ETF 14', 'BTCO')     , ('1FuoSxkRbzEc5kNypKHuPGZ1k9U7cYPUik', 'Invesco', 'Invesco BTCO ETF 15', 'BTCO')     , ('1HS6Ka8xgjJT1f9qwhhdMSpeGMfpd5DV2w', 'Invesco', 'Invesco BTCO ETF 16', 'BTCO')     , ('1AzaC7u2oPfVX4xNdKWPFUAgzJSzMu8UQJ', 'Invesco', 'Invesco BTCO ETF 17', 'BTCO')     , ('14Dq26jTDJmyyEiXteodVfaa4aWUNsrvKi', 'Invesco', 'Invesco BTCO ETF 18', 'BTCO')     , ('13uXWFYi628cep7EbbGQEMQcuj5mRq3nd7', 'Invesco', 'Invesco BTCO ETF 19', 'BTCO')     , ('13j5K2tn8JxgReUsnyKuovV4FvuDBNeYAp', 'Invesco', 'Invesco BTCO ETF 20', 'BTCO')     , ('1CKE9RbGcFmy5SVBEC4ALH3QUe1Xzv2wkx', 'Invesco', 'Invesco BTCO ETF 21', 'BTCO')     , ('1JmZeABWX5cugLk3odnT5GtL7mBXLTn2HT', 'Invesco', 'Invesco BTCO ETF 22', 'BTCO')     , ('1AsoPe53bKh1nWWNrYaoBU8A6AtmmE6jsU', 'Invesco', 'Invesco BTCO ETF 23', 'BTCO')     , ('1LPCQUQHry8mrFhLGhkaah7CjYaQqDWtXD', 'Invesco', 'Invesco BTCO ETF 24', 'BTCO')     , ('1JnTfUoW9VSdZyotdc3FsZchijQgASBPJD', 'Invesco', 'Invesco BTCO ETF 25', 'BTCO')     , ('1Hhcm4ToZc7uBdgkbCwCEXJZzXLNLH21k2', 'Invesco', 'Invesco BTCO ETF 26', 'BTCO')     , ('13GcbSTJUY31ZffDVjzKaMZrNsNQMxzCCK', 'Invesco', 'Invesco BTCO ETF 27', 'BTCO')     , ('1NHDfBYDk896QRXAvzEiTMk37rX2gmx3Xg', 'Invesco', 'Invesco BTCO ETF 28', 'BTCO')     , ('187QgWdQWqt9EiLkALGkqmBhVcGPgRqb2s', 'Invesco', 'Invesco BTCO ETF 29', 'BTCO')     , ('1Q8i3yRnz9EVUrxpLdLofd4Rc9sb6oV5Bs', '21Shares', '21Shares ARKB ETF 1', 'ARKB')     , ('1LSwqfuzWWpcY64n7xGWyfEa5KGsBweo3o', '21Shares', '21Shares ARKB ETF 2', 'ARKB')     , ('1D4gaj1mhyNVd8ooaLkonJRs5uU3VUBnHp', '21Shares', '21Shares ARKB ETF 3', 'ARKB')     , ('1ExNyPqME354YXaNBWLKVnWSHvTEiQrsPv', '21Shares', '21Shares ARKB ETF 4', 'ARKB')     , ('1HnzozYtDbjv88SenhosHHKCXVJfSYM2Mx', '21Shares', '21Shares ARKB ETF 5', 'ARKB')     , ('1Ei9uVarsKp9xinuCKHuWCVom5Z7471XEN', '21Shares', '21Shares ARKB ETF 6', 'ARKB')     , ('1LHHaG9kW2qmQEte3iqxx43k1f9MauWZWu', '21Shares', '21Shares ARKB ETF 7', 'ARKB')     , ('18DLWFYrwcNcYNEDDzGN3mNTcbmS7phM2q', '21Shares', '21Shares ARKB ETF 8', 'ARKB')     , ('13fGeMcB1qGRq2nn2d3UKrdkLS8RMsH6BK', '21Shares', '21Shares ARKB ETF 9', 'ARKB')     , ('145keJ1yzkLzmroaSterQFepdAgkQfiSvY', '21Shares', '21Shares ARKB ETF 10', 'ARKB')     , ('12PDWxCJ56zTwKd6eFRJPqaGBL8duVTxZA', '21Shares', '21Shares ARKB ETF 11', 'ARKB')     , ('1CxRQBWkNKQ2tWDKrPTDfWizg9vSc1S9J3', '21Shares', '21Shares ARKB ETF 12', 'ARKB')     , ('1MEtXq5fSezgrVjK6eNRwB2JF7bbdZeGSH', '21Shares', '21Shares ARKB ETF 13', 'ARKB')     , ('1B2ymZzvKMuBU8mNd6f7ajUFwSae6RVkWo', '21Shares', '21Shares ARKB ETF 14', 'ARKB')     , ('1P6SqZKtsgdjo6vHuJiZxSkahib1qF5ALD', '21Shares', '21Shares ARKB ETF 15', 'ARKB')     , ('1PkJq879HRCj4BJxsY8pywdGMutdsLmWpW', '21Shares', '21Shares ARKB ETF 16', 'ARKB')     , ('12jworBRybVRHXsdniyBbBZa5egJKEdicX', '21Shares', '21Shares ARKB ETF 17', 'ARKB')     , ('16wjw6YbH6KsVQgk8wh9rbbfb79tEYHuJh', '21Shares', '21Shares ARKB ETF 18', 'ARKB')     , ('17pLzaseJKdpUa1FnHM4cJTshXupMcKSDW', '21Shares', '21Shares ARKB ETF 19', 'ARKB')     , ('1EiJipiATd66xCs8Ag5CJXHyByG2eJJPsk', '21Shares', '21Shares ARKB ETF 20', 'ARKB')     , ('1N581hHkyxAmJTJ1Cm5vcL5KPKBEJfQiZe', '21Shares', '21Shares ARKB ETF 21', 'ARKB')     , ('14A7cNoZSUsKZKm9q6m3yqWqkzLXULiBzs', '21Shares', '21Shares ARKB ETF 22', 'ARKB')     , ('1ANe4NMBPya5BBfz2apz4LZCi23ioVTKs8', '21Shares', '21Shares ARKB ETF 23', 'ARKB')     , ('1Disa3ntr2hAPCM3JHh7qrwG8edNHFHMVn', '21Shares', '21Shares ARKB ETF 24', 'ARKB')     , ('1FQMc3Z9rw9Jz6nJaZ6zeWsaGgQ3Udk5Un', '21Shares', '21Shares ARKB ETF 25', 'ARKB')     , ('1G8yBZ8RtfpYv2aTRBHEcCV6YCGihzjPpe', '21Shares', '21Shares ARKB ETF 26', 'ARKB')     , ('1rnMNRZuNRWLA6ebmzzeV2AK7jAPpdX46', '21Shares', '21Shares ARKB ETF 27', 'ARKB')     , ('1NrvGFxrRx1s5g3ea6fc5yKb3sJSUwim1', '21Shares', '21Shares ARKB ETF 28', 'ARKB')     , ('13VevUUVEmnp1CWARnXDmNTy3ezo4yfVrD', '21Shares', '21Shares ARKB ETF 29', 'ARKB')     , ('1LKfo5EQABMiDHmvdvw1s9TB6xkNJNxnXL', '21Shares', '21Shares ARKB ETF 30', 'ARKB')     , ('174Pi7bmuVqc21sLMFTjSW5XcT5z8FVk1k', '21Shares', '21Shares ARKB ETF 31', 'ARKB')     , ('1Ptm8HgCPwpcga2QFfv2r1Q45acejJa8BJ', '21Shares', '21Shares ARKB ETF 32', 'ARKB')     , ('14eiJHiveDLWp2RuANRXAszC5VNA6ehmhU', '21Shares', '21Shares ARKB ETF 33', 'ARKB')     , ('1AModEJSYa8cA6evPQcnWK292F1WAXoVty', '21Shares', '21Shares ARKB ETF 34', 'ARKB')     , ('12mVFuJkKRgSURvock8TSbrzoywspmdjWk', '21Shares', '21Shares ARKB ETF 35', 'ARKB')     , ('1NoPos8MqUYUA7s6rvAgx4hZ4jApXmYXrU', '21Shares', '21Shares ARKB ETF 36', 'ARKB')     , ('1GsTa7q3gKxmPBmg3pmr5oDLpQ1HKcjFwY', '21Shares', '21Shares ARKB ETF 36', 'ARKB')     , ('1Hj2XGBN6Q6Ypa2yS2kGHoTVGbk8xZKNnD', '21Shares', '21Shares ARKB ETF 38', 'ARKB')     , ('1B4eTCfL7FhC1JJJnma7fEm56VgcibdLQX', '21Shares', '21Shares ARKB ETF 39', 'ARKB')     , ('19DbwdhKahRQtY8bbNHmhSafuoRbtsWc33', 'Valkyrie', 'Valkyrie BRRR ETF 1', 'BRRR')     , ('1GmTzLnFasDR6kRcGzzdHrDUvFgSJsF3ot', 'Valkyrie', 'Valkyrie BRRR ETF 2', 'BRRR')     , ('1NRp7pwR51osRaCWo8JVnRfguNjjpKFRLr', 'Valkyrie', 'Valkyrie BRRR ETF 3', 'BRRR')     , ('16dTXCzDP9E3Qx5FhiUC8Rj2rqUmhoBUTM', 'Valkyrie', 'Valkyrie BRRR ETF 4', 'BRRR')     , ('1JM3Ehc1dpbck2S1kVDhvtphkE96N3XmY6', 'Valkyrie', 'Valkyrie BRRR ETF 5', 'BRRR')     , ('1HDqTXMRfwSacn2b5znyHzA9DcDZMGaN2b', 'Valkyrie', 'Valkyrie BRRR ETF 6', 'BRRR')     , ('1ECovG9CQ1XG5CwCBZmYAQZzrNVWrD3KFo', 'Valkyrie', 'Valkyrie BRRR ETF 7', 'BRRR')     , ('1KnJTAgna3kDbe4WVGshAkAAoVYJvhxMUk', 'Valkyrie', 'Valkyrie BRRR ETF 8', 'BRRR')     , ('1DDzYDQrfc6Svn6z1CYvXUur7tANu6uMZE', 'Valkyrie', 'Valkyrie BRRR ETF 9', 'BRRR')     , ('13cFBJmLQo8qGEmiwfUTK9Maz65AJr3oZW', 'Valkyrie', 'Valkyrie BRRR ETF 10', 'BRRR')     , ('19y3wHsbihUefLTBMwt22gdh6pJUhUmfjS', 'Valkyrie', 'Valkyrie BRRR ETF 11', 'BRRR')     , ('32TiohXoCmHr87xVm3E9A3sLiWBJjYn1gf', 'Fidelity', 'Fidelity FBTC ETF 1', 'FBTC')     , ('3NpXph8WN1U9hwXjg1bRtzTff1tPR2Gpw4', 'Fidelity', 'Fidelity FBTC ETF 2', 'FBTC')     , ('3A1mvU9GSc9cWQxicofHFBAKDGVyA3v5g4', 'Fidelity', 'Fidelity FBTC ETF 3', 'FBTC')     /*     , ('39gWRwxQYazBHLDH8q6mnPTnEs8hPF6jCQ', 'Fidelity', 'Fidelity FBTC ETF 4', 'FBTC')     , ('3BkDTVn14dipQAvAeoxPPbMAidEztgwvJ2', 'Fidelity', 'Fidelity FBTC ETF 5', 'FBTC')     , ('35RG62aAWBd5zaXFmxaVubMkyZA8FzjmB7', 'Fidelity', 'Fidelity FBTC ETF 6', 'FBTC')     , ('36ifxtBxBUaDBHCW7gybk5dhH2hKTBTo7W', 'Fidelity', 'Fidelity FBTC ETF 7', 'FBTC')     , ('3HLBMUYYeFN2krrM2QbTKXmKbuiYnNBCaY', 'Fidelity', 'Fidelity FBTC ETF 8', 'FBTC')     , ('3BsTfPr9HCrzKCUDXAzYmFPj32o1stBZSn', 'Fidelity', 'Fidelity FBTC ETF 9', 'FBTC')     , ('3Qp1edXBSzvM6ZLw784pvyueJvgtYZr1eM', 'Fidelity', 'Fidelity FBTC ETF 10', 'FBTC')     , ('36ojT2CsdfRvkH9bxA1g1Y3JUJdsn6KG7S', 'Fidelity', 'Fidelity FBTC ETF 11', 'FBTC')     , ('39zWu83MtEmApj7zqp6isxc9NjZvkhDHrK', 'Fidelity', 'Fidelity FBTC ETF 12', 'FBTC')     , ('3Nozjm7Pse9XsGatSigTTgV1JsJSnkH3LX', 'Fidelity', 'Fidelity FBTC ETF 13', 'FBTC')     , ('3GxdEbnqByNiG8ahbSGqA1uDkVtYPuY2hW', 'Fidelity', 'Fidelity FBTC ETF 14', 'FBTC')     , ('3NXLbVxjoh9RCxv86W2gPs6gQCLQU2CjBR', 'Fidelity', 'Fidelity FBTC ETF 15', 'FBTC')     , ('32ipwpr55Swuecyc4vFqfsqd3VXjzsZiyk', 'Fidelity', 'Fidelity FBTC ETF 16', 'FBTC')     , ('3HQZpaWkAKcqrj28UMtDQvBvJSqLNWEPQp', 'Fidelity', 'Fidelity FBTC ETF 17', 'FBTC')     , ('3Bpj4Re3fBdwfsqesYERMjEWvjmphjCBo3', 'Fidelity', 'Fidelity FBTC ETF 18', 'FBTC')     , ('3Dgd4yN9gaZBPCJx8fW9FkzBPGje21Q87H', 'Fidelity', 'Fidelity FBTC ETF 19', 'FBTC')     , ('3DziU1ePDPgBQ2Tmr7PV1D7bBnWcAD8FuU', 'Fidelity', 'Fidelity FBTC ETF 20', 'FBTC')     , ('35bAV3NUUj48VBuUDiBy6J1e37tYfziJit', 'Fidelity', 'Fidelity FBTC ETF 21', 'FBTC')     , ('33XgTnLBthiu1qQmwW1D6t6xE6hFFZPEk6', 'Fidelity', 'Fidelity FBTC ETF 22', 'FBTC')     , ('3LKAKDYpksvvKu6AEXwu9g6qHJAJ1tBPqk', 'Fidelity', 'Fidelity FBTC ETF 23', 'FBTC')     , ('33vQNWxhuhjSCrAQ7pzUKWdC1Ve2hGr7ne', 'Fidelity', 'Fidelity FBTC ETF 24', 'FBTC')     , ('3EYh1YghrpkkHWNPEmpy861tPEcnDxb16W', 'Fidelity', 'Fidelity FBTC ETF 25', 'FBTC')     , ('3PK1e2TeDLwRYhs8umBaHdzrJfxVgEh3R5', 'Fidelity', 'Fidelity FBTC ETF 26', 'FBTC')     , ('3QhruS3H6Ui8Mb8ZfwGVEDmgKaaVhasfCv', 'Fidelity', 'Fidelity FBTC ETF 27', 'FBTC')     , ('3CZn2zQg2k7y5jTkwV4HbLvrhTUN19aYBs', 'Fidelity', 'Fidelity FBTC ETF 28', 'FBTC')          , ('3MXqiELYKZwEyycK9dWon6rd1NZE2fAts2', 'Fidelity', 'Fidelity FBTC ETF 29', 'FBTC')     , ('399aKXyZNkqqjuwMKTRLMeahnNbL9YjYCA', 'Fidelity', 'Fidelity FBTC ETF 30', 'FBTC')     , ('39NNzCbaWwJhKWg92VBzgpFPKvS22FkEVt', 'Fidelity', 'Fidelity FBTC ETF 31', 'FBTC')     , ('33HvZ1fKEKWB4D6PihMMVHzkSVZJT1ygrt', 'Fidelity', 'Fidelity FBTC ETF 32', 'FBTC')          , ('37XV7yFVWWYJ5HWsctKEmEd4S7gULJgtTV', 'Fidelity', 'Fidelity FBTC ETF 29', 'FBTC')     , ('3F3rjTJbQWc7EmgWzLnWZC7pDoiWweaRkR', 'Fidelity', 'Fidelity FBTC ETF 30', 'FBTC')     , ('3Njrd5ooGzsxfiRwsoMRdnzy4QcExBXUDU', 'Fidelity', 'Fidelity FBTC ETF 31', 'FBTC')     , ('3BsrvEJTrruxPuofj3KrCTGHiSdTvnmivx', 'Fidelity', 'Fidelity FBTC ETF 32', 'FBTC')     , ('36YjBaRAvmtd9EH4Lma494QMNLahsfv5SX', 'Fidelity', 'Fidelity FBTC ETF 33', 'FBTC')     , ('35SK7H7QcGABXwtgLoNdXaznTQPqLC3PtF', 'Fidelity', 'Fidelity FBTC ETF 34', 'FBTC')     , ('3FLG6DuZtuSwxbG425aetSbRH89RhGA9Dj', 'Fidelity', 'Fidelity FBTC ETF 35', 'FBTC')     , ('3KY6L2bQ9yZcvP4FN8Le36Q5DSvhjpHKXk', 'Fidelity', 'Fidelity FBTC ETF 36', 'FBTC')     , ('39rLUVGfZwQMYg2i3Ly1WwXH16JTLNNugH', 'Fidelity', 'Fidelity FBTC ETF 37', 'FBTC')     , ('32gdE1YDG9xKmnpwReo5WhhMKPJyo2fLqz', 'Fidelity', 'Fidelity FBTC ETF 38', 'FBTC')     , ('3BuUbJk4rVXNbTdn4pZMDzzL44NNmiaxHi', 'Fidelity', 'Fidelity FBTC ETF 39', 'FBTC')     , ('3PCCf9pG5D828DXHftQDnNUtnM5kRMB9pa', 'Fidelity', 'Fidelity FBTC ETF 40', 'FBTC')     */          , ('1FibeML7cFtRVFKt3CmbmTcyTVZ1sEphjL', 'BlackRock', 'BlackRock IBIT ETF 1', 'IBIT')     , ('17RrB273m6payxw2sW6MH9xiLaYiGMMGjV', 'BlackRock', 'BlackRock IBIT ETF 2', 'IBIT')     , ('1G4gcbYFX8feYbCvbsC7v4WrrU1n14rdQ5', 'BlackRock', 'BlackRock IBIT ETF 3', 'IBIT')     , ('15xuV3SyQfgbR6oaqv67SnZFtvR5hZq5Uu', 'BlackRock', 'BlackRock IBIT ETF 4', 'IBIT')     , ('147fDJ3Ln2VM87nqQcetFpaCQ6UdqG7HjG', 'BlackRock', 'BlackRock IBIT ETF 5', 'IBIT')     , ('14hzhYFsdNaaPhamNPZQSZDnKViph4quwv', 'BlackRock', 'BlackRock IBIT ETF 6', 'IBIT')     , ('1DZb6vHJE3jb3n3Y6KrzBkBG7P9YnGzPx9', 'BlackRock', 'BlackRock IBIT ETF 7', 'IBIT')     , ('18q7rMd3E9Qq1Y2xZZAckdB7s7fjVmPBZQ', 'BlackRock', 'BlackRock IBIT ETF 8', 'IBIT')     , ('18xM6FjsiyfukWS6k3f8EEtF4cCKGmQRRB', 'BlackRock', 'BlackRock IBIT ETF 9', 'IBIT')     , ('17TofPnNZd9kzY34y8nX9FnppkBLkZwxCR', 'BlackRock', 'BlackRock IBIT ETF 10', 'IBIT')     , ('1KKoFREuuNEAVBExKTEE4aLZDnHt2uV36B', 'BlackRock', 'BlackRock IBIT ETF 11', 'IBIT')     , ('1EHpTzVBpMDJBBYouGMWN9tf5USsCFYQLs', 'BlackRock', 'BlackRock IBIT ETF 12', 'IBIT')     , ('1VqTy1oSGymiZx5pFwUfsnaUF28nMgab8', 'BlackRock', 'BlackRock IBIT ETF 13', 'IBIT')     , ('18KA15gWxzafojfi1w4ZaEpCfDBVnyUcrN', 'BlackRock', 'BlackRock IBIT ETF 14', 'IBIT')     , ('16cJfbxVDcWDmUDuhDsam6Rw5m5i9mByTr', 'BlackRock', 'BlackRock IBIT ETF 15', 'IBIT')     , ('1A5Ta1dChi5RM8vvtVW7CVCwinTjZb7bUe', 'BlackRock', 'BlackRock IBIT ETF 16', 'IBIT')     , ('19RkUi8DRtes7tzihDmZtT7Lpu3wHfXaqV', 'BlackRock', 'BlackRock IBIT ETF 17', 'IBIT')     , ('19ibnMQ8yW3hCLikCMB2E4ajmJyGtm7323', 'BlackRock', 'BlackRock IBIT ETF 18', 'IBIT')     , ('1L5og1PF7stDrkibN8cr1NShP8hHtouFCo', 'BlackRock', 'BlackRock IBIT ETF 19', 'IBIT')     , ('1M3gzq9oJZBbWRjANeWjnrK4is3ERL9Xtg', 'BlackRock', 'BlackRock IBIT ETF 20', 'IBIT')     , ('1P3iYecCPVnwwNbEpWp5y3HiwTW9DGS2xD', 'BlackRock', 'BlackRock IBIT ETF 21', 'IBIT')     , ('19o3A1oqEvDACxjHF41PGspZoXBnh4yjTG', 'BlackRock', 'BlackRock IBIT ETF 22', 'IBIT')     , ('1FW7RYokVDq58TCUJ1j1uCJRj2yzJktfzL', 'BlackRock', 'BlackRock IBIT ETF 23', 'IBIT')     , ('12sZaPJKnCyZB1uyWUnaDnLUGJSb3xNgcm', 'BlackRock', 'BlackRock IBIT ETF 24', 'IBIT')     , ('18K3dEbuwK6pfEE1NCNb1qpnQqhCfEEAPA', 'BlackRock', 'BlackRock IBIT ETF 25', 'IBIT')     , ('1Cg3fKvSKaTURoKRNifu9MwvouNAb3p3u4', 'BlackRock', 'BlackRock IBIT ETF 26', 'IBIT')     , ('1CrGdDTtp4s4yxuYjtcASZ4PxtLvhbasQn', 'BlackRock', 'BlackRock IBIT ETF 27', 'IBIT')     , ('13tCzGAMZhuq1K6VDsfV5pvHgXxgbkYsgQ', 'BlackRock', 'BlackRock IBIT ETF 28', 'IBIT')     , ('1BoTSXbPJqept6saHPCW6U1Uj4RmVbEeWW', 'BlackRock', 'BlackRock IBIT ETF 29', 'IBIT')     , ('1C53EaKHgLCVftkuFGeXL7ubHcyhTWSSDd', 'BlackRock', 'BlackRock IBIT ETF 30', 'IBIT')     , ('15TXy4zht3fCM7KJmE2m8LH1magvRiSTFz', 'BlackRock', 'BlackRock IBIT ETF 31', 'IBIT')     , ('1JF28b6vWhuxJKhLaFg2HQJXuEcJviieeX', 'BlackRock', 'BlackRock IBIT ETF 32', 'IBIT')     , ('1J9Kt1pYArS1k2PPQz9E2cn8gxQDuYi9Gn', 'BlackRock', 'BlackRock IBIT ETF 33', 'IBIT')     , ('1Dmjds2Yx4TuNqpdGVgHLi4TeYv2EcNaso', 'BlackRock', 'BlackRock IBIT ETF 34', 'IBIT')     , ('1BU6jywRECKmuNA6yYq5YCyeWnsw4vtP2B', 'BlackRock', 'BlackRock IBIT ETF 35', 'IBIT')     , ('1KugF4K2ynf7tLVg1TxYB2ecMs8RJ1bzDh', 'BlackRock', 'BlackRock IBIT ETF 36', 'IBIT')     , ('15piuXqtUta8qCy4gnjkBWPwcjfaXj62GL', 'BlackRock', 'BlackRock IBIT ETF 37', 'IBIT')     , ('1FiAwq1yiCi8X6Viz83biwMv5hv85Dt6LH', 'BlackRock', 'BlackRock IBIT ETF 38', 'IBIT')     , ('1Ka7KqsrQoqHbCG5JX6PPygwpfNQETton2', 'BlackRock', 'BlackRock IBIT ETF 39', 'IBIT')     , ('18dddkp5AQk8qnf224rkr7dgUFgRjvG9F2', 'BlackRock', 'BlackRock IBIT ETF 40', 'IBIT')     , ('1DjcDxi78cza1kg5MXufW7c3gXVdVHNbMn', 'BlackRock', 'BlackRock IBIT ETF 41', 'IBIT')     , ('18dj5Cz1MJcQCERHdttYBHp2cJoSrGk94G', 'BlackRock', 'BlackRock IBIT ETF 42', 'IBIT')     , ('1AFN18GERPw9gBmj34Wg3GEY7nKnC7dP4B', 'BlackRock', 'BlackRock IBIT ETF 43', 'IBIT')     , ('1NKQQEA2YPvRvedogddrHKrWkcMqF8bACp', 'BlackRock', 'BlackRock IBIT ETF 44', 'IBIT')     , ('1Drmk7XoDwJ3zuvVp6oC5CZmzVPc5SxgWh', 'BlackRock', 'BlackRock IBIT ETF 45', 'IBIT')     , ('1Gf1XisopbN7qqjshPF7cvjHFXvSL8gb48', 'BlackRock', 'BlackRock IBIT ETF 46', 'IBIT')     , ('14b7gDaGDAGhtnWQq5H8GQ1wDDRDu9d81L', 'BlackRock', 'BlackRock IBIT ETF 47', 'IBIT')     , ('1Bao9BiC3EW6j6r1cMidzBW7cskUNS7ucF', 'BlackRock', 'BlackRock IBIT ETF 48', 'IBIT')     , ('1HEnFKM2gWG8M8wsmuP5mofoFQJxzxakXy', 'BlackRock', 'BlackRock IBIT ETF 49', 'IBIT')     , ('14FWFix4ECQdVfUJ33aAenFBUJ4ecrLHEj', 'BlackRock', 'BlackRock IBIT ETF 50', 'IBIT')     , ('1Fev4M5kGLQ7SA1HxeM47fFgw31oFZmrNC', 'BlackRock', 'BlackRock IBIT ETF 51', 'IBIT')     , ('16HVxMuerhtVe51KmHaex2dhFBJpEfB9bf', 'BlackRock', 'BlackRock IBIT ETF 52', 'IBIT')     , ('1P2xhUZeAdEqxRq5LyR5WRJqaQhMSJHpPe', 'BlackRock', 'BlackRock IBIT ETF 53', 'IBIT')     , ('174rQAHGeUcWNYMTcvgmBNTteF9Cqno4r6', 'BlackRock', 'BlackRock IBIT ETF 54', 'IBIT')     , ('1Jz6jphydSsHSX3WXbUH5LG9PYX6yZjqfy', 'BlackRock', 'BlackRock IBIT ETF 55', 'IBIT')     , ('15bEQEHJLkhWaYgD2QWfGHAUhXNkf8K2Ut', 'BlackRock', 'BlackRock IBIT ETF 56', 'IBIT')     , ('13JvTohzXdRTor18WsSSenBcyz4u3cPH9j', 'BlackRock', 'BlackRock IBIT ETF 57', 'IBIT')     , ('1PUZzkaAoBjaRkdUdUejhes19hVF5aLw6V', 'BlackRock', 'BlackRock IBIT ETF 58', 'IBIT')     , ('1HMwQp9bANcYbEGAWE4RSGrev4fzzZoUKJ', 'BlackRock', 'BlackRock IBIT ETF 59', 'IBIT')     , ('15NHVkWUsKMeMhs6Sk8rXsSHwwo6L9cY3m', 'BlackRock', 'BlackRock IBIT ETF 60', 'IBIT')     , ('1Q4kiFgWgsuWZqYhzy1EY2gPnNRdfdLRC3', 'BlackRock', 'BlackRock IBIT ETF 61', 'IBIT')     , ('1MkRmWH1BsyBH5WprYn72616pZEqyhjL1f', 'BlackRock', 'BlackRock IBIT ETF 62', 'IBIT')     , ('17Eq9g2hEHXSH1KiWVhz5wYYQF6xrWoFnv', 'BlackRock', 'BlackRock IBIT ETF 63', 'IBIT')     , ('1Cyr8Wro7oYxwvdj8kZfi3m1Arhyxooa9t', 'BlackRock', 'BlackRock IBIT ETF 64', 'IBIT')     , ('122jttrS4Mb4ohGDX3567uABaRS1a3zoHZ', 'BlackRock', 'BlackRock IBIT ETF 65', 'IBIT')     , ('141KP1D4aFhW87w25TKnm7PihztLYzs29Q', 'BlackRock', 'BlackRock IBIT ETF 66', 'IBIT')     , ('17zwGKwEPpLh9SQHnZh4QLAiSH8fRigaKG', 'BlackRock', 'BlackRock IBIT ETF 67', 'IBIT')     , ('13qUuoCiECVa8WxTDAoZWkbCYJkEFfH3hi', 'BlackRock', 'BlackRock IBIT ETF 68', 'IBIT')     , ('1ThBGPRyABnsQZkZQv6Drb9QAuUyK1CAy', 'BlackRock', 'BlackRock IBIT ETF 69', 'IBIT')     , ('1ES5Z8qfwjQ1PFy2wvZ9F9WXKG2WFwy3zc', 'BlackRock', 'BlackRock IBIT ETF 70', 'IBIT')     , ('1JCcXxuk1HWVxRzasbQtMLYphZuSC5vydu', 'BlackRock', 'BlackRock IBIT ETF 71', 'IBIT')     , ('1ACdsLLUKvTLREm559G9KHDgPKXy7T1Ych', 'BlackRock', 'BlackRock IBIT ETF 72', 'IBIT')     , ('1xBcxPu97pdSK2gSA4qt1bauVTra7PvVL', 'BlackRock', 'BlackRock IBIT ETF 73', 'IBIT')     , ('1JGxay8QCZAdFAAxzLfLTYTh3Z4j3hW98C', 'BlackRock', 'BlackRock IBIT ETF 74', 'IBIT')     , ('14wDDPrXYXE62w6L6tYt4XZA1rCMCcmAkB', 'BlackRock', 'BlackRock IBIT ETF 75', 'IBIT')     , ('1B8wuQp2ek6fVhCzNcMkbNrFZzzt7EdZ61', 'BlackRock', 'BlackRock IBIT ETF 76', 'IBIT')     , ('1JF4rTudHW1Cc2vownrwckhH9mzvX2XY86', 'BlackRock', 'BlackRock IBIT ETF 77', 'IBIT')     , ('144beukjmyQJ3YC3mu8kyYpfmdqQbfkTxQ', 'BlackRock', 'BlackRock IBIT ETF 78', 'IBIT')     , ('1Cm2axeScMFRmzZiUCW5p4sk8tcdAva4oZ', 'BlackRock', 'BlackRock IBIT ETF 79', 'IBIT')     , ('1FVite6HmNGy87Gav9abpM5zvrkn3dBZke', 'BlackRock', 'BlackRock IBIT ETF 80', 'IBIT')     , ('18cbHNHLf8bd8UMnt3odFxHpEon4dvcYfX', 'BlackRock', 'BlackRock IBIT ETF 81', 'IBIT')     , ('1GwRJdexzdyMXSLvCv4YzyJFzga99JbH6w', 'BlackRock', 'BlackRock IBIT ETF 82', 'IBIT')     , ('1JMHW5g4NBcLeprntqZfor6NY1nrobxYHF', 'BlackRock', 'BlackRock IBIT ETF 83', 'IBIT')     , ('1KWp1492Gii1PQZNnAtBajzZBD3uH71g2N', 'BlackRock', 'BlackRock IBIT ETF 84', 'IBIT')     , ('1PL7L3itP7yvSVKFtFcnbRpAG2p4CYGjau', 'BlackRock', 'BlackRock IBIT ETF 85', 'IBIT')     , ('1FyFWLy3Sn1G7PJQG17LgzT12H6aNPjhH6', 'BlackRock', 'BlackRock IBIT ETF 86', 'IBIT')     , ('16sknmme1vMaEK3iTxSTo6K2ahGpRYRGLj', 'BlackRock', 'BlackRock IBIT ETF 87', 'IBIT')     , ('125HZkRjBE8YRAFyAo7uk6ZsSjPLPDs4pt', 'BlackRock', 'BlackRock IBIT ETF 88', 'IBIT')     , ('164hvYdwJK6RScEoPtSLmTVk6sRBB3WSFB', 'BlackRock', 'BlackRock IBIT ETF 89', 'IBIT')     , ('1M7YZb112AL68cFmBr2MBa4vS6mRkNoSNm', 'BlackRock', 'BlackRock IBIT ETF 90', 'IBIT')     , ('1CE9KjXVC2E2TtHdk2QESce8XNSsfsQuh3', 'BlackRock', 'BlackRock IBIT ETF 91', 'IBIT')     , ('1KY7tV9eprf1G394Soy2zMB26WYbBKfBro', 'BlackRock', 'BlackRock IBIT ETF 92', 'IBIT')     , ('18szKqFvFoosdpNKsX5ofUQiuj7PdptELr', 'BlackRock', 'BlackRock IBIT ETF 93', 'IBIT')     , ('1KZ6kAgL3ZLbxjERnAZ4pd9TqP6H4qyn9Z', 'BlackRock', 'BlackRock IBIT ETF 94', 'IBIT')          --, ('16ZEv6MmHqKDThXpEqqVdWiWy4zbQFPdS8', 'BlackRock', 'BlackRock IBIT ETF 85', 'IBIT')     --, ('1C6JA2adcU9R7HJ4c9CZVzT2HJZwGLCLqV', 'BlackRock', 'BlackRock IBIT ETF 86', 'IBIT')     --, ('1MW64EotjxWXmnkK8YJygVjfcQDBn58LcH', 'BlackRock', 'BlackRock IBIT ETF 87', 'IBIT')     --, ('1N4NQggreZkeiuBzAzqJGTYg1B8JJS7noQ', 'BlackRock', 'BlackRock IBIT ETF 88', 'IBIT')          , ('13CT6kyUeyekcGv7bSj5G1phoD6AX1WJYC', 'Grayscale', 'Grayscale GBTC ETF 1', 'GBTC')     , ('1GxgrQ4SZSfMmuRKcAstDBNAGRPF8WKEo7', 'Grayscale', 'Grayscale GBTC ETF 2', 'GBTC')     , ('1BS384DMcngU1gc4tFFM1ozfaRH9gn1U9x', 'Grayscale', 'Grayscale GBTC ETF 3', 'GBTC')     , ('1LtCvJ6QE7pjzpLXLqtUMqCcnipNG36vAX', 'Grayscale', 'Grayscale GBTC ETF 4', 'GBTC')     , ('17NVm9kEMerKxRWxyEHZwyE59A6ExwouXw', 'Grayscale', 'Grayscale GBTC ETF 5', 'GBTC')     , ('1CUJnEkuTjWtcDff45ecECeyDWMywqsKRZ', 'Grayscale', 'Grayscale GBTC ETF 6', 'GBTC')     , ('1C4iqwV3UCqWBgMuFRpsuMPi7FZdWg763k', 'Grayscale', 'Grayscale GBTC ETF 7', 'GBTC')     , ('1EMbKkv5nyjU3tqq1ZWLes4cMcYyTLJ1CL', 'Grayscale', 'Grayscale GBTC ETF 8', 'GBTC')     , ('17z4W9AU6B1c625ZaSJE7PNxSScQ5VxxEW', 'Grayscale', 'Grayscale GBTC ETF 9', 'GBTC')     , ('1HRRsvWqTjN71eisw4dZ32vFmM98zHHbgq', 'Grayscale', 'Grayscale GBTC ETF 10', 'GBTC')     , ('12vjHbADKCgcP4V3BpYu1q8UyThz5Ap6uh', 'Grayscale', 'Grayscale GBTC ETF 11', 'GBTC')     , ('16jtp4R6vsmoUEfyvPQuxNxiiD8GEF78tJ', 'Grayscale', 'Grayscale GBTC ETF 12', 'GBTC')     , ('15zRqpeRf7XBZqiPHqkxcejPgQJNw6MD5N', 'Grayscale', 'Grayscale GBTC ETF 13', 'GBTC')     , ('13TiDkEj9dYJ8fGufrTyr8jiTgiHuVHXcF', 'Grayscale', 'Grayscale GBTC ETF 14', 'GBTC')     , ('1FZRudC5R76Xh4qVETitmsmyXC7JCdwQcD', 'Grayscale', 'Grayscale GBTC ETF 15', 'GBTC')     , ('1QA21kFmwaES7w5KZsLwVi7HznLPBvX7R3', 'Grayscale', 'Grayscale GBTC ETF 16', 'GBTC')     , ('13ULNac6dcRH3DPKnYpa99WsXSo4WmE7BW', 'Grayscale', 'Grayscale GBTC ETF 17', 'GBTC')     , ('15dAohrSKggvA8G2d1DSxSJZVNeDe3kwuw', 'Grayscale', 'Grayscale GBTC ETF 18', 'GBTC')     , ('1CFbvNRRkK5sWXz1tvjoPEjoA3ihJMQAc8', 'Grayscale', 'Grayscale GBTC ETF 19', 'GBTC')     , ('1Nkayrao1VBkJhPLzU9MvUYQJn2AtFQmwy', 'Grayscale', 'Grayscale GBTC ETF 20', 'GBTC')     , ('1C9mFdjfhcjsuuve29d5b7bGMz1JDSU5Fe', 'Grayscale', 'Grayscale GBTC ETF 21', 'GBTC')     , ('16PecARt3GH8fWgokkQvnEjofYH6yV9G6J', 'Grayscale', 'Grayscale GBTC ETF 22', 'GBTC')     , ('17mma93QoRZi22s99amxLDFpybvzH66SmV', 'Grayscale', 'Grayscale GBTC ETF 23', 'GBTC')     , ('1NDY3YFDyHP5Md8dYjgwZYiDECQTbggfTg', 'Grayscale', 'Grayscale GBTC ETF 24', 'GBTC')     , ('18gK48FVKrZbecBQHq4V25SgcFDNNmicJK', 'Grayscale', 'Grayscale GBTC ETF 25', 'GBTC')     , ('1PoBmPS6JAC79AYfn7Bv867P1jxAd6G665', 'Grayscale', 'Grayscale GBTC ETF 26', 'GBTC')     , ('1LehXvYQoahqhfSaLbdkodaED2gTgjakkx', 'Grayscale', 'Grayscale GBTC ETF 27', 'GBTC')     , ('1DkYd6n6HaX6QgELnq3xPmNrRqR2yN7NbL', 'Grayscale', 'Grayscale GBTC ETF 28', 'GBTC')     , ('1MNm2Y4KS13XtwX4KTsnfkAm8DmB3XBV4t', 'Grayscale', 'Grayscale GBTC ETF 29', 'GBTC')     , ('1DU71GCckRFa6q4zr84mDG62gixSsw6ybS', 'Grayscale', 'Grayscale GBTC ETF 30', 'GBTC')     , ('15bvyRtnamkjEjXCtJt5q5gbonYMwTLyQu', 'Grayscale', 'Grayscale GBTC ETF 31', 'GBTC')     , ('1JHj3mpfhc8j9xpfyHJmLivcQMA7J8dA2i', 'Grayscale', 'Grayscale GBTC ETF 32', 'GBTC')     , ('1KQNFU435SERu5Td1qUhxyDfxnWWSj4uhv', 'Grayscale', 'Grayscale GBTC ETF 33', 'GBTC')     , ('1FVNNXmsbGXTxqxoaBt9moftpeYn2qQMhs', 'Grayscale', 'Grayscale GBTC ETF 34', 'GBTC')     , ('1GAZmhZdcdGuoA4Pnuh9iX5kjpiq4ENw5p', 'Grayscale', 'Grayscale GBTC ETF 35', 'GBTC')     , ('1PB81pFTDNdbDFhZg13HnA7gKEPJh8MwZQ', 'Grayscale', 'Grayscale GBTC ETF 36', 'GBTC')     , ('1PAawVDQeQPyFyZEasYKUuLtghkDHJn4nN', 'Grayscale', 'Grayscale GBTC ETF 37', 'GBTC')     , ('1KHuZ1DuXfbQ5R6NrSVrw9uFZsyf78MHAG', 'Grayscale', 'Grayscale GBTC ETF 38', 'GBTC')     , ('1FngZozfDWdt9FwbmBcSveHLdoMCtsjNwK', 'Grayscale', 'Grayscale GBTC ETF 39', 'GBTC')     , ('1NwBcKB9Nx4p61YqrRFBZkQb7uyxodEw9z', 'Grayscale', 'Grayscale GBTC ETF 40', 'GBTC')     , ('16GR1LgiRdTm9jpCkC9TXnfPxhUsyxdFxg', 'Grayscale', 'Grayscale GBTC ETF 41', 'GBTC')     , ('1PHM1mjadBmWJybJf5z4AdnqifgKmTeN2P', 'Grayscale', 'Grayscale GBTC ETF 42', 'GBTC')     , ('1LQVqcCRSbhrjnbvb5JaKWobREeVnRryfX', 'Grayscale', 'Grayscale GBTC ETF 43', 'GBTC')     , ('15o2d1zvo1tChZpW6rJXDryQMLcRwRsSq4', 'Grayscale', 'Grayscale GBTC ETF 44', 'GBTC')     , ('1LmHabveUmdLV5HA56yBm5ME3Gs4LbWauc', 'Grayscale', 'Grayscale GBTC ETF 45', 'GBTC')     , ('1AVQv32mChxVrEBATxFAvbzPWkh8PtQorg', 'Grayscale', 'Grayscale GBTC ETF 46', 'GBTC')     , ('1PS2epoHjqvF5aDd6kjVx74EHSemC1k68U', 'Grayscale', 'Grayscale GBTC ETF 47', 'GBTC')     , ('1F8Tzyby5QS15BFPGk6nhZbYhZ8EUzixuH', 'Grayscale', 'Grayscale GBTC ETF 48', 'GBTC')     , ('1FojRdPfLoKb2A4QsPBK94NbFA5rJ9Rd6E', 'Grayscale', 'Grayscale GBTC ETF 49', 'GBTC')     , ('12p189bGyFSBMX4ogD9FZzFi9FZAD3p7qA', 'Grayscale', 'Grayscale GBTC ETF 50', 'GBTC')     , ('1JziFgPR9h4MHv169zjyzygLALbSy4JpEB', 'Grayscale', 'Grayscale GBTC ETF 51', 'GBTC')     , ('1LXiMk1WstjFUFyVcMxoq3V6gFDGZWnQFS', 'Grayscale', 'Grayscale GBTC ETF 52', 'GBTC')     , ('1CQw8AaJfPveV7NAnU8cTTDDMR288872mu', 'Grayscale', 'Grayscale GBTC ETF 53', 'GBTC')     , ('14gSg6cufbrvC9uEQo2oqvenvNTe192r7c', 'Grayscale', 'Grayscale GBTC ETF 54', 'GBTC')     , ('1ESi9DvD5WhsW3kaG2QqqV4RrDwdNmcwsR', 'Grayscale', 'Grayscale GBTC ETF 55', 'GBTC')     , ('1HA7ta6yL1UqTzAKrhR6rDeWHZPgKQ4BTx', 'Grayscale', 'Grayscale GBTC ETF 56', 'GBTC')     , ('1M2Rk2urgUSLouf8KaZBKnxCcjV29kXx4n', 'Grayscale', 'Grayscale GBTC ETF 57', 'GBTC')     , ('1F42RQvitnxaUKhRzu8b4eBBs9aAXNfGUb', 'Grayscale', 'Grayscale GBTC ETF 58', 'GBTC')     , ('1JishgoyGi4NWa62umJHrTAvoV3cQcmwuF', 'Grayscale', 'Grayscale GBTC ETF 59', 'GBTC')     , ('1h56NJLRBjWXHpr1gefz28Tr3X8qW7Ee4', 'Grayscale', 'Grayscale GBTC ETF 60', 'GBTC')     , ('1PxEcozu9aMrsfH8ApbaQXi7YWFv6mv52a', 'Grayscale', 'Grayscale GBTC ETF 61', 'GBTC')     , ('1Kuinq656Uy5Rwv2viZThJKNzUyua11kXi', 'Grayscale', 'Grayscale GBTC ETF 62', 'GBTC')     , ('164VPyDQPZjM8C52k853YgQtsgMtLLVyLd', 'Grayscale', 'Grayscale GBTC ETF 63', 'GBTC')     , ('1HATokSHGaAYQiCBeT8D9PTf39d7kSDzDZ', 'Grayscale', 'Grayscale GBTC ETF 64', 'GBTC')     , ('17r4YcrhENCg8pWSpPXGCF64bSvgWU4ztK', 'Grayscale', 'Grayscale GBTC ETF 65', 'GBTC')     , ('1NefWVXsiQvBT6ov4yQLyU2wEsrBQdGWpB', 'Grayscale', 'Grayscale GBTC ETF 66', 'GBTC')     , ('1JRtGcz6uTQLpbWX5x2vwggp8Bx9mLuqqo', 'Grayscale', 'Grayscale GBTC ETF 67', 'GBTC')     , ('14bVPWg4x6tWqyxdfE8u41bxaVvMkK1Cn5', 'Grayscale', 'Grayscale GBTC ETF 68', 'GBTC')     , ('1PytAPEKsK9Mz1atTVw4rADQfC59FeRrX7', 'Grayscale', 'Grayscale GBTC ETF 69', 'GBTC')     , ('1LrkZDX9WnXbRA1AJn3mzXP3DBfmRK9tsd', 'Grayscale', 'Grayscale GBTC ETF 70', 'GBTC')     , ('1NC2ztiAijAHvosg7fSFQHmU5RSijBdrM7', 'Grayscale', 'Grayscale GBTC ETF 71', 'GBTC')     , ('16AXnE16pmV4ewRzvwdMCokHfSJNCyaHfT', 'Grayscale', 'Grayscale GBTC ETF 72', 'GBTC')     , ('19E7NneRvU5VuTMAuJ5Bg9dzCv2yuoAoQU', 'Grayscale', 'Grayscale GBTC ETF 73', 'GBTC')     , ('19eN6ChX8FvKqesL6oeVTSDEiWeEicLPgu', 'Grayscale', 'Grayscale GBTC ETF 74', 'GBTC')     , ('1JJiNHK2oErLFqtFmTnJdFzUwTMmq1xJiH', 'Grayscale', 'Grayscale GBTC ETF 75', 'GBTC')     , ('1AfMNPTdHPWmjdr5oywDwngHeXNSPb4Wzn', 'Grayscale', 'Grayscale GBTC ETF 76', 'GBTC')     , ('14r7egjD19afstZJxqYKHsJkLqBoHYfKfQ', 'Grayscale', 'Grayscale GBTC ETF 77', 'GBTC')     , ('1Dq2Ed6FnTb4F6amCEHwnCHcWrGX8fiQwV', 'Grayscale', 'Grayscale GBTC ETF 78', 'GBTC')     , ('1JVj1oasLSr34MmuQLSLui5XcyQMt2S5cp', 'Grayscale', 'Grayscale GBTC ETF 79', 'GBTC')     , ('1NPu9iWCjREXo6tmsPNherd8dTp3jA9MNU', 'Grayscale', 'Grayscale GBTC ETF 80', 'GBTC')     , ('1NcJeP1XFFfurdgSJejdabZzH6bJQ6uKCk', 'Grayscale', 'Grayscale GBTC ETF 81', 'GBTC')     , ('1MSBpt5PgY7MTRNK8t6DMkvmQq3jt91h8Z', 'Grayscale', 'Grayscale GBTC ETF 82', 'GBTC')     , ('1CnXo5D2Upc1p8Mn7xedZnQx6e4aXN3J2S', 'Grayscale', 'Grayscale GBTC ETF 83', 'GBTC')     , ('13sjdYNu1maBeUhVovWLQSRJbr1oaow945', 'Grayscale', 'Grayscale GBTC ETF 84', 'GBTC')     , ('18bzALHkzFmFi6nLabmrqncaKKC8w7io7B', 'Grayscale', 'Grayscale GBTC ETF 85', 'GBTC')     , ('1MBgDQsgRg55HdyyPHaGs32wKSmMSQ8MDm', 'Grayscale', 'Grayscale GBTC ETF 86', 'GBTC')     , ('1FAe2dppJ8ddHdPTCJ8HudBvb9ufATPka1', 'Grayscale', 'Grayscale GBTC ETF 87', 'GBTC')     , ('19BcPt4A7StgjiYW2FumTE158uatEZo1Br', 'Grayscale', 'Grayscale GBTC ETF 88', 'GBTC')     , ('1EXCUZ36ph3XeRLob5fJe9gv2PGmNbqGPK', 'Grayscale', 'Grayscale GBTC ETF 89', 'GBTC')     , ('13GCHEdKW98GrAxpqbbgHxxeMbUS5Wi9g4', 'Grayscale', 'Grayscale GBTC ETF 90', 'GBTC')     , ('1Np5W6vHPU1XkTqiJuPt1M7ocJKpe4gSdz', 'Grayscale', 'Grayscale GBTC ETF 91', 'GBTC')     , ('17kGrz5hfDfy3jFD32TjV3ge7jVgeRq9is', 'Grayscale', 'Grayscale GBTC ETF 92', 'GBTC')     , ('1NEUbmUZfUQuzWCJs9TU33VdFzHn3zXCgY', 'Grayscale', 'Grayscale GBTC ETF 93', 'GBTC')     , ('16x5SF2KZ3gkQYHB5QM2dik8vWZJfPMDfT', 'Grayscale', 'Grayscale GBTC ETF 94', 'GBTC')     , ('1JoWkWFK2hvdwLGF7frZN4bHyFfxyKNTdf', 'Grayscale', 'Grayscale GBTC ETF 95', 'GBTC')     , ('1DtkzYSTwKcobamqmiP3AH2g5KTj3hYF4h', 'Grayscale', 'Grayscale GBTC ETF 96', 'GBTC')     , ('19nBLwC5Ymx1yt4Vhm8CRYhaMPTGyPzVQ3', 'Grayscale', 'Grayscale GBTC ETF 97', 'GBTC')     , ('1GZhkVYg1oF9HDuHfMBmhxBWSGuudQ7ASS', 'Grayscale', 'Grayscale GBTC ETF 98', 'GBTC')     , ('1JAXANUtTPvM9piFrmbLYJC9DoQtteQ4Cq', 'Grayscale', 'Grayscale GBTC ETF 99', 'GBTC')     , ('17rF6Z6ZQo1XqDtAdgGXAK6P5r7N8VGpGk', 'Grayscale', 'Grayscale GBTC ETF 100', 'GBTC')     , ('1Au4LznKNfvU4xFsAy3B2a1yvj7oJi9vsw', 'Grayscale', 'Grayscale GBTC ETF 101', 'GBTC')     , ('1PgZgF1Xbe4gQtd7nsL6XUBriH3NARpyb7', 'Grayscale', 'Grayscale GBTC ETF 102', 'GBTC')     , ('16kofR8NsfJitEY3oxpUHSRGwjc2n8HaSc', 'Grayscale', 'Grayscale GBTC ETF 103', 'GBTC')     , ('1VqqDU6CxVphcT81zpWs3CT2aSx12ccxB', 'Grayscale', 'Grayscale GBTC ETF 104', 'GBTC')     , ('1MMsX5qUEv9ZsZcZEZ6ZCdV797AX9SvrEC', 'Grayscale', 'Grayscale GBTC ETF 105', 'GBTC')     , ('19e932rjxp85QwC1jQT7kb1yE3eNNCTAUH', 'Grayscale', 'Grayscale GBTC ETF 106', 'GBTC')     , ('1PEEX5Zug9QmJmjbBfHDdfw638ysjqBR8d', 'Grayscale', 'Grayscale GBTC ETF 107', 'GBTC')     , ('1NFqibFD5n74vHg2Fi37HMNs8Yx1e2KCLh', 'Grayscale', 'Grayscale GBTC ETF 108', 'GBTC')     , ('17VHju87EqPD1yTyxsHpxcJT76D1eeFNZf', 'Grayscale', 'Grayscale GBTC ETF 109', 'GBTC')     , ('1AbpqH9LAJeJDQH8176MYfsMd3Vz9NsQSA', 'Grayscale', 'Grayscale GBTC ETF 110', 'GBTC')     , ('1QCTtkkw5ni8R6PWWEvyddgbyt8cmHf2i9', 'Grayscale', 'Grayscale GBTC ETF 111', 'GBTC')     , ('1CNMErb3iJjdDcfzoMwterYZ2eYz7cQrL3', 'Grayscale', 'Grayscale GBTC ETF 112', 'GBTC')     , ('16xPtubShHueTRk5PMWcf4dCb9CqGgXc8z', 'Grayscale', 'Grayscale GBTC ETF 113', 'GBTC')     , ('1EhfsVLfPGWF1PuLdiAgVmkMmhnoQr6UZT', 'Grayscale', 'Grayscale GBTC ETF 114', 'GBTC')     , ('1EP9bpT9khUrWWaTzpk4BbsiJztzh6Wmcd', 'Grayscale', 'Grayscale GBTC ETF 115', 'GBTC')     , ('1HHo5BDCiWo2yS9N47miPtejo6d3QY5SFx', 'Grayscale', 'Grayscale GBTC ETF 116', 'GBTC')     , ('15EusUdmUcC6ac6eKSJDaCagi6pcoDR3x1', 'Grayscale', 'Grayscale GBTC ETF 117', 'GBTC')     , ('13XbNz1yPE535WueYfztEVaU7TTwgS8t49', 'Grayscale', 'Grayscale GBTC ETF 118', 'GBTC')     , ('1BtWodUVPDi5hkzFua6jocs7r9SVees6Nu', 'Grayscale', 'Grayscale GBTC ETF 119', 'GBTC')     , ('1EFwiWYQYDFVTrig3ywfKyWEwhFjgawYPF', 'Grayscale', 'Grayscale GBTC ETF 120', 'GBTC')     , ('19UGZDJMUjDB5E2HnqoirvL7UsVPa1CcPF', 'Grayscale', 'Grayscale GBTC ETF 121', 'GBTC')     , ('15FbtL8abFbYMg3AEmBH1ufFCJxNd6srkG', 'Grayscale', 'Grayscale GBTC ETF 122', 'GBTC')     , ('1BRnM5HVTTisS5cVLGZAS7uFA3yo7XFype', 'Grayscale', 'Grayscale GBTC ETF 123', 'GBTC')     , ('1L8k2SD9sdTTzdDxA19QdobLbUyKyV2RVi', 'Grayscale', 'Grayscale GBTC ETF 124', 'GBTC')     , ('17jUc6HfmBFwnLj8GWemUoy8F3tAh5Bag4', 'Grayscale', 'Grayscale GBTC ETF 125', 'GBTC')     , ('1KSeqK9SSiVPzDm5evqprTsvjwuRN7cBEF', 'Grayscale', 'Grayscale GBTC ETF 126', 'GBTC')     , ('17yRXBxMjmhcgurYJBS4hpUk7Z5Ziqw4ku', 'Grayscale', 'Grayscale GBTC ETF 127', 'GBTC')     , ('1H3KWb47bRp9ECjWKzhVh8fKUPb1VDJzkR', 'Grayscale', 'Grayscale GBTC ETF 128', 'GBTC')     , ('1Q15NxekxKfk4WK2CLBbgpsLNzUeWuHXHa', 'Grayscale', 'Grayscale GBTC ETF 129', 'GBTC')     , ('19yxpLUrwxpcKZp5rgXJtagcBpZanAt6Jz', 'Grayscale', 'Grayscale GBTC ETF 130', 'GBTC')     , ('1DcMBdranZyRRoFSjRDkkrFg3j91nrxvWD', 'Grayscale', 'Grayscale GBTC ETF 131', 'GBTC')     , ('1JrfzUkzoQ4VLzG3GYgtP4Kx6eW8NnttiZ', 'Grayscale', 'Grayscale GBTC ETF 132', 'GBTC')     , ('14u5dWrgujE3dUYMgGzcSfmSkbKmzJFzaV', 'Grayscale', 'Grayscale GBTC ETF 133', 'GBTC')     , ('1KhThatKjLmLBqNK3WSPmjLBmJq9tffhMk', 'Grayscale', 'Grayscale GBTC ETF 134', 'GBTC')     , ('1S8MzSoaf1Dd7CTzuaPux5fXi3vDDV2W8', 'Grayscale', 'Grayscale GBTC ETF 135', 'GBTC')     , ('14LWasNHvuopF8ysGtwsn4F9qv3nvcjJ4z', 'Grayscale', 'Grayscale GBTC ETF 136', 'GBTC')     , ('12Wi5GXNrSTRaJmrG5hV5u9dvQ1YYNUSvs', 'Grayscale', 'Grayscale GBTC ETF 137', 'GBTC')     , ('16CpqtLF9zY3m28uXeZq4pG3cmY2knxqb2', 'Grayscale', 'Grayscale GBTC ETF 138', 'GBTC')     , ('1AXWnkm4f833p1dQ7W2KR7of3iP7ndVvih', 'Grayscale', 'Grayscale GBTC ETF 139', 'GBTC')     , ('1MZk5Xsq37KHUwQ7Qn4pCzt9wU8KZ9rgic', 'Grayscale', 'Grayscale GBTC ETF 140', 'GBTC')     , ('115Xfvse7MjGwENpzJyqe6NhoKDWP9p3qe', 'Grayscale', 'Grayscale GBTC ETF 141', 'GBTC')     , ('1NeAidpAw72ukyN7CjmDsxDzMSz4Mt3N3Z', 'Grayscale', 'Grayscale GBTC ETF 142', 'GBTC')     , ('19eMhpdCG7nB2qB5bbrKT6oyDmfGSeAGD8', 'Grayscale', 'Grayscale GBTC ETF 143', 'GBTC')     , ('1MKkmVbJjUz14st74svnMpeMhA7LaZjk9A', 'Grayscale', 'Grayscale GBTC ETF 144', 'GBTC')     , ('1NHdK4qz7pAKRAnENrvsnKS2JTHRPshbP7', 'Grayscale', 'Grayscale GBTC ETF 145', 'GBTC')     , ('18UKr8wRhQ5ujMkoHMC4HRnzfhWdmbRmmv', 'Grayscale', 'Grayscale GBTC ETF 146', 'GBTC')     , ('16E5Hb3jwm51C8mzGJTPpMg3hRwZdMZj8V', 'Grayscale', 'Grayscale GBTC ETF 147', 'GBTC')     , ('1G3EBvT4hnsvSNWyP5r6axq4KWR6hZajP7', 'Grayscale', 'Grayscale GBTC ETF 148', 'GBTC')     , ('1bh7gez1Y16EkgKBYTnFX9QiWAAtNkG37', 'Grayscale', 'Grayscale GBTC ETF 149', 'GBTC')     , ('1QHykQ8T6G2vcCz9vNqgicWxzwjcHi23PS', 'Grayscale', 'Grayscale GBTC ETF 150', 'GBTC')     , ('14f1UuqiZGr9eRvpy1PNVZwxVR3gnJ56tx', 'Grayscale', 'Grayscale GBTC ETF 151', 'GBTC')     , ('14C9uDeQDsoez8HGKiATahMfBPSsThySTm', 'Grayscale', 'Grayscale GBTC ETF 152', 'GBTC')     , ('1mCEDxU5kVt7dH4UpEscRKBxWm84bcEbK', 'Grayscale', 'Grayscale GBTC ETF 153', 'GBTC')     , ('19DYb5wUFtqAnSMuErxbcptHkdaX4NpgYo', 'Grayscale', 'Grayscale GBTC ETF 154', 'GBTC')     , ('1DdEkmL9t2npJjTGcMzXZeXHgJgmYYmNKm', 'Grayscale', 'Grayscale GBTC ETF 155', 'GBTC')     , ('1GH5HFpiw9z5EDkCAUzF5PSW8d53aLwAsA', 'Grayscale', 'Grayscale GBTC ETF 156', 'GBTC')     , ('1PTHvkGcNDmSn9ajZ2HdJ5nNEjirxvgKss', 'Grayscale', 'Grayscale GBTC ETF 157', 'GBTC')     , ('16MTv1CbByrLzdmDU8NWf9fDmgVZrAcnUX', 'Grayscale', 'Grayscale GBTC ETF 158', 'GBTC')     , ('1691QWdbt9jLmsXhD4BNUzt4xk3AL3eZkC', 'Grayscale', 'Grayscale GBTC ETF 159', 'GBTC')     , ('1HDzwYr1soaWy7xQYJjuGBBbYdz1mMAYJk', 'Grayscale', 'Grayscale GBTC ETF 160', 'GBTC')     , ('1MsDnfa243eAd6GWTWWCjnRadrXar4X6CP', 'Grayscale', 'Grayscale GBTC ETF 161', 'GBTC')     , ('195KuKQUzurTBRSnNUAJbzeVgkMEaNUBdc', 'Grayscale', 'Grayscale GBTC ETF 162', 'GBTC')     , ('1Hh18vSR5MXpPGoANJ2nDbe6hErSUGT1G7', 'Grayscale', 'Grayscale GBTC ETF 163', 'GBTC')     , ('1CZZJHZ58CqD2VoscqDzso8kpgVk4ut1ZC', 'Grayscale', 'Grayscale GBTC ETF 164', 'GBTC')     , ('12wHM6gYmFgNSYKi1manUws6B6QcwA1Acp', 'Grayscale', 'Grayscale GBTC ETF 165', 'GBTC')     , ('16D19Pt4CRZ6iQnUhCgqpR34UoqFcK2TUH', 'Grayscale', 'Grayscale GBTC ETF 166', 'GBTC')     , ('18gtiJc7MuzkmgZUzRuqezZM96m3hur6CE', 'Grayscale', 'Grayscale GBTC ETF 167', 'GBTC')     , ('1HP1bThtYqm4QsmPrxVeBxteTP782tWWqb', 'Grayscale', 'Grayscale GBTC ETF 168', 'GBTC')     , ('1EA3JMsuTWYVV4ZU3v1WCUpoAE4U3QYFNC', 'Grayscale', 'Grayscale GBTC ETF 169', 'GBTC')     , ('1Dh5qdSdcdpPNBxY9ozpz7cd1qfDPebjTT', 'Grayscale', 'Grayscale GBTC ETF 170', 'GBTC')     , ('1Aq8GeFKLsmsJz9uyS8MFnScwB5w9QpMot', 'Grayscale', 'Grayscale GBTC ETF 171', 'GBTC')     , ('13fdL466AtuTa9sgiizanr8jLFLMjhXcpP', 'Grayscale', 'Grayscale GBTC ETF 172', 'GBTC')     , ('1DUgrxQntBzwRAyU6A785HQ3CvzssaKEdF', 'Grayscale', 'Grayscale GBTC ETF 173', 'GBTC')     , ('1Lo6dnQ8QaYuWxDAP2yDHhXuVqzpXLw62Z', 'Grayscale', 'Grayscale GBTC ETF 174', 'GBTC')     , ('1MxKphQo7LgY4KWAzcGucCQ9DhVcEuffwR', 'Grayscale', 'Grayscale GBTC ETF 175', 'GBTC')     , ('1MPzaW6amBDF7h8D4h2u6niamz9r5EECzG', 'Grayscale', 'Grayscale GBTC ETF 176', 'GBTC')     , ('1GBLGGSEtmCds7zAAH9Koo3WYP8LrrNang', 'Grayscale', 'Grayscale GBTC ETF 177', 'GBTC')     , ('1CwEqj3z7ze7JuDQc5LSfy73SziHJw6dwH', 'Grayscale', 'Grayscale GBTC ETF 178', 'GBTC')     , ('17MCgiM8Xzsf7wCa1ZFhBHC4mfw8CCduEd', 'Grayscale', 'Grayscale GBTC ETF 179', 'GBTC')     , ('115KFZwhKoDqYdWdgAW71HBWRrdvgSLouH', 'Grayscale', 'Grayscale GBTC ETF 180', 'GBTC')     , ('13nAhDGENRceQGKDUWLW7XTT8tw3cRTszt', 'Grayscale', 'Grayscale GBTC ETF 181', 'GBTC')     , ('1P5MQbMsya8NBa55wv6joKYHyhuVk3ZQQY', 'Grayscale', 'Grayscale GBTC ETF 182', 'GBTC')     , ('1E1H6wv1HKpejxbL9dBYAuuEs8egYneVJw', 'Grayscale', 'Grayscale GBTC ETF 183', 'GBTC')     , ('13Y1FTvgAsfMit7pELo5CoaVcmsABvdLsi', 'Grayscale', 'Grayscale GBTC ETF 184', 'GBTC')     , ('1HnXxrk1Tf8pjYwahXgY3GKPZuoaZevAJH', 'Grayscale', 'Grayscale GBTC ETF 185', 'GBTC')     , ('19qzhruZhm6FrWbd8BFhb8SXx3PnNFyesE', 'Grayscale', 'Grayscale GBTC ETF 186', 'GBTC')     , ('1NoedaokrqNouWaDJ1wBAejyonfVoD9RGw', 'Grayscale', 'Grayscale GBTC ETF 187', 'GBTC')     , ('1EKZ6R75UZkXPKGAggpuRnV7pXBU7SqzYq', 'Grayscale', 'Grayscale GBTC ETF 188', 'GBTC')     , ('14KKrsH5AgkZAjBgWPqKSY8wnXsw5UBJbs', 'Grayscale', 'Grayscale GBTC ETF 189', 'GBTC')     , ('17KrqRx2oAmHCQmBSM9UaKxQXSLotX2cU5', 'Grayscale', 'Grayscale GBTC ETF 190', 'GBTC')     , ('18CT3cfNfyrfbUSKjY2oNPsAxkVDVVwJBY', 'Grayscale', 'Grayscale GBTC ETF 191', 'GBTC')     , ('1BKdZNvxW6Ud2yo45qG5S21XXQuwEwMxV', 'Grayscale', 'Grayscale GBTC ETF 192', 'GBTC')     , ('17J7N8rFdWsjunVL2qZbBva8Lhnab7qt1h', 'Grayscale', 'Grayscale GBTC ETF 193', 'GBTC')     , ('1K51qwtfi9ms6SBfmEci7Uj19Th4vuNQhB', 'Grayscale', 'Grayscale GBTC ETF 194', 'GBTC')     , ('1LeKKEuREPoCbZEKWL6prFWQcSoUEDQf8P', 'Grayscale', 'Grayscale GBTC ETF 195', 'GBTC')     , ('1Gwh5daiHFxysCRA2U384BYUnPw1fN5y15', 'Grayscale', 'Grayscale GBTC ETF 196', 'GBTC')     , ('1GvF6rMdThhgephR7UY5PJkqj4BEnywJgt', 'Grayscale', 'Grayscale GBTC ETF 197', 'GBTC')     , ('13Ptck9qT6GWsyWGdYAb1PYaRaUGLBeyha', 'Grayscale', 'Grayscale GBTC ETF 198', 'GBTC')     , ('1JcHqA95E9b2XhDxvrXMqxZ7Vg3iGS2Kq3', 'Grayscale', 'Grayscale GBTC ETF 199', 'GBTC')     , ('1NdwPcPhyi8eBu1oE4P2BBoFnYH6w7mshw', 'Grayscale', 'Grayscale GBTC ETF 200', 'GBTC')     , ('1F5oTZnodTpRjsNFpTpA9QZzSqpgWHYzYM', 'Grayscale', 'Grayscale GBTC ETF 201', 'GBTC')     , ('15LdxfHcwfDN7bPN5R6MyjeTsEgjCu3eae', 'Grayscale', 'Grayscale GBTC ETF 202', 'GBTC')     , ('1N1Xn9dFBt6UwEoJEYcaNswSoi324t6ZBi', 'Grayscale', 'Grayscale GBTC ETF 203', 'GBTC')     , ('14NU5pkr64zpgY1WYFT6i9vGkrYsr3MKs3', 'Grayscale', 'Grayscale GBTC ETF 204', 'GBTC')     , ('12aqC29wXKz57wJE4W1yz7szVQDzeLPD45', 'Grayscale', 'Grayscale GBTC ETF 205', 'GBTC')     , ('1CU7oMGWfNKCks7y5jDUQbBeXAuYbD3x1J', 'Grayscale', 'Grayscale GBTC ETF 206', 'GBTC')     , ('1AzhZFwcMyC4f4dAbCxmpFjSAA4zb5VXBz', 'Grayscale', 'Grayscale GBTC ETF 207', 'GBTC')     , ('1M3qNCkENj4BQKL9d6nRxa2i7NCgzTrBhy', 'Grayscale', 'Grayscale GBTC ETF 208', 'GBTC')     , ('1LyKyoupsKrTHfmDtsdjMPv1QQtu3YUJtB', 'Grayscale', 'Grayscale GBTC ETF 209', 'GBTC')     , ('14etcD9QrvFbbmCpyBLdvVQWsSJMST461T', 'Grayscale', 'Grayscale GBTC ETF 210', 'GBTC')     , ('1MAz8tvVRyqrP7ndgGZAQPqvyoXuYAuywo', 'Grayscale', 'Grayscale GBTC ETF 211', 'GBTC')     , ('17dvL8t8RhnfHVzPKY5bB6YYoPicr8oEQ9', 'Grayscale', 'Grayscale GBTC ETF 212', 'GBTC')     , ('1D5DL9qtEXAstvPEmJPichuZkgRUJCWeXB', 'Grayscale', 'Grayscale GBTC ETF 213', 'GBTC')     , ('1CjXBNEX6jXQpqZZ8qVgEAEBdDJyVGPEyW', 'Grayscale', 'Grayscale GBTC ETF 214', 'GBTC')     , ('1JksVFodmUCCniW2HUyd1UcjT71aF77Sf5', 'Grayscale', 'Grayscale GBTC ETF 215', 'GBTC')     , ('1Ncjz2JQDJpcE62ga8XiL1t1vsatxZAsus', 'Grayscale', 'Grayscale GBTC ETF 216', 'GBTC')     , ('18v7Z7SBt2QDphMHk44Sgqx4rmZqbWvNsT', 'Grayscale', 'Grayscale GBTC ETF 217', 'GBTC')     , ('1FZ8dxGnV6fBTPEGm6Hvhf6WLqMdQEPcLD', 'Grayscale', 'Grayscale GBTC ETF 218', 'GBTC')     , ('12usc9kjyfdd7KSfNm8ZLonngwnZKcSK2u', 'Grayscale', 'Grayscale GBTC ETF 219', 'GBTC')     , ('1GVz5NSvRH2yYQAgqQxrZdRqC3G7rCVfC', 'Grayscale', 'Grayscale GBTC ETF 220', 'GBTC')     , ('1CU9gusmCCfCjsmGatxbzvXLqoisgnaV9n', 'Grayscale', 'Grayscale GBTC ETF 221', 'GBTC')     , ('1Htq2AT3uHmPaRMfpTY4KW4iJcyMuxsT8n', 'Grayscale', 'Grayscale GBTC ETF 222', 'GBTC')     , ('16kas6RhLe2HbfPaiBwNo7rwYUAmY6Jykp', 'Grayscale', 'Grayscale GBTC ETF 223', 'GBTC')     , ('1CTR8mZXhEjqWxEQdPVKZ8gLeEHVPizt12', 'Grayscale', 'Grayscale GBTC ETF 224', 'GBTC')     , ('1Fnrnc1piez9vMLu7mj2qivVXfT7BnmEWS', 'Grayscale', 'Grayscale GBTC ETF 225', 'GBTC')     , ('1K2guRFpTGfnu3t5177zZFD9Dgw2jyDe1o', 'Grayscale', 'Grayscale GBTC ETF 226', 'GBTC')     , ('1JZEHBsJTQ5GsthzHhiBWTGaFQArvfKgbF', 'Grayscale', 'Grayscale GBTC ETF 227', 'GBTC')     , ('1KzMCoWbj7nXS9VGgsmryRYdJht3uD3vQy', 'Grayscale', 'Grayscale GBTC ETF 228', 'GBTC')     , ('17FCfms7nX7fK7W8V7KrDjbn8Rv4tGccRs', 'Grayscale', 'Grayscale GBTC ETF 229', 'GBTC')     , ('1EFPcHQN2tpJ6tz3Z4WoVYw9zvDSHUPEyB', 'Grayscale', 'Grayscale GBTC ETF 230', 'GBTC')     , ('1GbncYWHxawSmVFR7t2sxc6xfUi2dQH5Kt', 'Grayscale', 'Grayscale GBTC ETF 231', 'GBTC')     , ('1ENVT9adFDpdUVQ7CAxySsUqLuRdgMDPok', 'Grayscale', 'Grayscale GBTC ETF 232', 'GBTC')     , ('1L7RaszJN5Dc2Zr75BiMqHcjeE4V8LxExg', 'Grayscale', 'Grayscale GBTC ETF 233', 'GBTC')     , ('1FXk12t3xs1o14oKyzkCRHx3zjX15vBSkt', 'Grayscale', 'Grayscale GBTC ETF 234', 'GBTC')     , ('1ET39eoamaVh5KeUPTRwtRHpj36NL8xid9', 'Grayscale', 'Grayscale GBTC ETF 235', 'GBTC')     , ('1AKDKQSRq69V6JEXief8f65snDaf4ETv9a', 'Grayscale', 'Grayscale GBTC ETF 236', 'GBTC')     , ('19WvYhQqmdiF4a7ymDxE9aECWmBHv5pADg', 'Grayscale', 'Grayscale GBTC ETF 237', 'GBTC')     , ('19B91dBf4DNt9Hv5LHyvZRHmXJ6FBNqMKS', 'Grayscale', 'Grayscale GBTC ETF 238', 'GBTC')     , ('12JZomS6YiTWHehPCeLuvwBdZrfqiSEGLz', 'Grayscale', 'Grayscale GBTC ETF 239', 'GBTC')     , ('1EWm8Ewv1BqhDQCU3g99om2gXmDj6zCfDi', 'Grayscale', 'Grayscale GBTC ETF 240', 'GBTC')     , ('1PcHga4b5L9g7k5ZRx9nZjUxiv4rbwyXSQ', 'Grayscale', 'Grayscale GBTC ETF 241', 'GBTC')     , ('1PBBdC9Em4eWdZkDhK4jN4FMJumrBKD2bX', 'Grayscale', 'Grayscale GBTC ETF 242', 'GBTC')     , ('1NTdGFTpgiAi7AY2mUc5vxb1vhpVi1y8hB', 'Grayscale', 'Grayscale GBTC ETF 243', 'GBTC')     , ('1BpgFgssGna2gVqhi6S7CcvFGXdivUbfj5', 'Grayscale', 'Grayscale GBTC ETF 244', 'GBTC')     , ('1Kq5hAVs56arwW77js95wkjLgbeL87FFMY', 'Grayscale', 'Grayscale GBTC ETF 245', 'GBTC')     , ('19uWLuCcecHK3ei1mfGQ5qWD1EmfCW5qzx', 'Grayscale', 'Grayscale GBTC ETF 246', 'GBTC')     , ('1Pr9Niu7V3iB1jB9LwgwLn8n3E5oAoYCVj', 'Grayscale', 'Grayscale GBTC ETF 247', 'GBTC')     , ('15MY9RrVqLU4MLAQZTBbgR4Gs9Q7NkTxAZ', 'Grayscale', 'Grayscale GBTC ETF 248', 'GBTC')     , ('1ERkL98ubq71R8BS1unojqaVodCdoawPL7', 'Grayscale', 'Grayscale GBTC ETF 249', 'GBTC')     , ('12syuX53HMnQmB1nUtSVYHfjC9SXDE6fD5', 'Grayscale', 'Grayscale GBTC ETF 250', 'GBTC')     , ('18sbsEZEfKhmJpqWPjBfaws3Jd5sN5F6rH', 'Grayscale', 'Grayscale GBTC ETF 251', 'GBTC')     , ('132ARu7GtvkBvgzjT2cX7FaW1QST76dnCM', 'Grayscale', 'Grayscale GBTC ETF 252', 'GBTC')     , ('1C4i3Gzg2X47E5fmfhaE3SNGufa9huY6mw', 'Grayscale', 'Grayscale GBTC ETF 253', 'GBTC')     , ('1GUfgw6jDSzmaXjswBFYqdJfy7tz2j6o4g', 'Grayscale', 'Grayscale GBTC ETF 254', 'GBTC')     , ('1FkKtKmTh6TbZRCDKmFNUAcWoXgGwG5NKt', 'Grayscale', 'Grayscale GBTC ETF 255', 'GBTC')     , ('19UbAkmnsVxDCK8piN347s9P5CbxAdP7oy', 'Grayscale', 'Grayscale GBTC ETF 256', 'GBTC')     , ('1BPhGd17i5sYSkXjsYZvLad7ytTZgmzQAL', 'Grayscale', 'Grayscale GBTC ETF 257', 'GBTC')     , ('1GbRMkm4aiqzarij5r7iAZApkCo2BV7XWx', 'Grayscale', 'Grayscale GBTC ETF 258', 'GBTC')     , ('17JpVAtW7QPJEVCdDA2JzY5vvE94kRcdEJ', 'Grayscale', 'Grayscale GBTC ETF 259', 'GBTC')     , ('1HsdK6HEZqPnZNvxumYjDSLNnuYjs3Ctmz', 'Grayscale', 'Grayscale GBTC ETF 260', 'GBTC')     , ('13FC9ZNPnZ2V9HE6D6QqQFr4j36gN8XRRD', 'Grayscale', 'Grayscale GBTC ETF 261', 'GBTC')     , ('17ihYTBkKFTZPC8ARwZzNTdLfZ9pDs8R2F', 'Grayscale', 'Grayscale GBTC ETF 262', 'GBTC')     , ('1Jy1BL1huGLLQSqUmTUjp5J6coBfDMXF8p', 'Grayscale', 'Grayscale GBTC ETF 263', 'GBTC')     , ('18c6RJM4pJonfQKHANmgAYk17tvN877phV', 'Grayscale', 'Grayscale GBTC ETF 264', 'GBTC')     , ('19cT8sp5Nt6FsdHzurRWKhpuKH2yHULCBa', 'Grayscale', 'Grayscale GBTC ETF 265', 'GBTC')     , ('1KcqPSyEE8kPB92w46Z19iWPWoUo8xq5Lu', 'Grayscale', 'Grayscale GBTC ETF 266', 'GBTC')     , ('1J9SJ9Zp4WbLuonJHYbgrDi6xnXMFyz8ob', 'Grayscale', 'Grayscale GBTC ETF 267', 'GBTC')     , ('1KzVC3KGoF2mUSW22i3gGVQ7FgUhy8qcJd', 'Grayscale', 'Grayscale GBTC ETF 268', 'GBTC')     , ('19qfDTwfQXXMxdnUBtXKFEtBM3efkortrN', 'Grayscale', 'Grayscale GBTC ETF 269', 'GBTC')     , ('128cVmBqNQos6eAF3LBfv3Yjb3dvoaLPfg', 'Grayscale', 'Grayscale GBTC ETF 270', 'GBTC')     , ('14KufxHDtyx7Gn32eSuTqBfpEEFqQjzHfU', 'Grayscale', 'Grayscale GBTC ETF 271', 'GBTC')     , ('16whs4jsN3yCa6RMoNTRhXpbXSB61RBkPH', 'Grayscale', 'Grayscale GBTC ETF 272', 'GBTC')     , ('1PgMFuX1j2g2kcmM6fTpU8QjdTcTEfdFEb', 'Grayscale', 'Grayscale GBTC ETF 273', 'GBTC')     , ('1EW6Ny6L8Kwn2Nw9gVhVWjSsuFCXLde4Ld', 'Grayscale', 'Grayscale GBTC ETF 274', 'GBTC')     , ('1BKNENUWDTP1u16zXMssqkFQCJNo8acPks', 'Grayscale', 'Grayscale GBTC ETF 275', 'GBTC')     , ('123u7KUqRisXUtWmWLKW3q83Rp8dKVwh4q', 'Grayscale', 'Grayscale GBTC ETF 276', 'GBTC')     , ('14Fa6VGk8HSevpFX8CzVC4TUXNAPZjsBmu', 'Grayscale', 'Grayscale GBTC ETF 277', 'GBTC')     , ('15VhmN751fJiNsiva4JxJXBCjSqYzL8PEe', 'Grayscale', 'Grayscale GBTC ETF 278', 'GBTC')     , ('1JHLjf9taMqBf1mLLifJ6oqcucdfcsEASJ', 'Grayscale', 'Grayscale GBTC ETF 279', 'GBTC')     , ('18X3vUukGKcz4sBrNreTqoWKmXga2tWo64', 'Grayscale', 'Grayscale GBTC ETF 280', 'GBTC')     , ('1Cj6vucrYbbhhs4cGDnHLMTwx8NudSJ9Dk', 'Grayscale', 'Grayscale GBTC ETF 281', 'GBTC')     , ('17Bbd7Zut9HHB6JLwVZ93jphxGwwCY7tcC', 'Grayscale', 'Grayscale GBTC ETF 282', 'GBTC')     , ('15En1amYCVadAsZfPMtMCPX2GvZQh99W6n', 'Grayscale', 'Grayscale GBTC ETF 283', 'GBTC')     , ('1Fv6VQ4PKF8bPanfyiGydsbKy4j5onmtM9', 'Grayscale', 'Grayscale GBTC ETF 284', 'GBTC')     , ('1H7YZfFmTuMABwe6p5R3GtGhUowgWSmHdb', 'Grayscale', 'Grayscale GBTC ETF 285', 'GBTC')     , ('1N3isZWpvZhUawz9eMayjrTbELaKPcXYxM', 'Grayscale', 'Grayscale GBTC ETF 286', 'GBTC')     , ('1BfSCGYyDe14oRpcNsK14AcmAPDy3wdag', 'Grayscale', 'Grayscale GBTC ETF 287', 'GBTC')     , ('1EZdSsN8K5rivCzytyDmCKSxHbh5jdwpZf', 'Grayscale', 'Grayscale GBTC ETF 288', 'GBTC')     , ('1DLGnfXfx983savJYWfkx6MwttyNExEFoN', 'Grayscale', 'Grayscale GBTC ETF 289', 'GBTC')     , ('16J6UVRn25An8T9kDfXZJmmBJn3pQ6wnpP', 'Grayscale', 'Grayscale GBTC ETF 290', 'GBTC')     , ('1AF4JEuQpdULzgR5R9vjNzt3t5Rh1e1G7d', 'Grayscale', 'Grayscale GBTC ETF 291', 'GBTC')     , ('1HUhJtKWfpjNYcthDoUqrWBahNRVNeCp1y', 'Grayscale', 'Grayscale GBTC ETF 292', 'GBTC')     , ('19133ha3TWhE1npDyZrmBzjZjc3c4VXDoi', 'Grayscale', 'Grayscale GBTC ETF 293', 'GBTC')     , ('1MT4kTjAtHfPAzGD6vMd1rFHPUsxiKavuq', 'Grayscale', 'Grayscale GBTC ETF 294', 'GBTC')     , ('1EPppXQYw6uuoEkE6gLn2Vq815N5vwXosf', 'Grayscale', 'Grayscale GBTC ETF 295', 'GBTC')     , ('12EWkxiRis29sFGbmr2FQEZ1GVqoDYDNcY', 'Grayscale', 'Grayscale GBTC ETF 296', 'GBTC')     , ('1P1VAK6dXhgyCG1Ev3j2XwwWBYFb5DHKx8', 'Grayscale', 'Grayscale GBTC ETF 297', 'GBTC')     , ('1FVgLqzVqq68dXne3Ro8DXmZQrBVefK6EE', 'Grayscale', 'Grayscale GBTC ETF 298', 'GBTC')     , ('1HzNWdtkVx2RtxAUvjFHv2uAquQuVrrC12', 'Grayscale', 'Grayscale GBTC ETF 299', 'GBTC')     , ('12TeiocG8eJZAZAAA5oTJcJk7j5ypXCESA', 'Grayscale', 'Grayscale GBTC ETF 300', 'GBTC')     , ('16WT7VTeB1TgPvEUsNdbRTe4Za751MvQeW', 'Grayscale', 'Grayscale GBTC ETF 301', 'GBTC')     , ('1H1izCvPB5R54BwWcFQMEogpQ87xR32Zxh', 'Grayscale', 'Grayscale GBTC ETF 302', 'GBTC')     , ('1L6Kh2qw9v2ktg2v5FPWCRScLkuxx8DCcL', 'Grayscale', 'Grayscale GBTC ETF 303', 'GBTC')     , ('1F8M4uaYrtDVpKxugPs48vkfC16HKn9SF', 'Grayscale', 'Grayscale GBTC ETF 304', 'GBTC')     , ('1BkQMdFNiApnLEKSTWHSgfrsqWpvWevjqb', 'Grayscale', 'Grayscale GBTC ETF 305', 'GBTC')     , ('146cjLbaAMmhgPisqFWpnuSBgw5eGMkG2M', 'Grayscale', 'Grayscale GBTC ETF 306', 'GBTC')     , ('153rS7fj6Nbsj1pqXEYJZvrkjQoDKRygAE', 'Grayscale', 'Grayscale GBTC ETF 307', 'GBTC')     , ('1JNh9u422Rzjr7WB75iUDa6T1RQPYReQTg', 'Grayscale', 'Grayscale GBTC ETF 308', 'GBTC')     , ('1Q4SYhi4G5LEnYNfuGcWCZeLUd9LHQg8iw', 'Grayscale', 'Grayscale GBTC ETF 309', 'GBTC')     , ('1BZtbgTXufHF3NEe3YnitkMQyYNQXxvuko', 'Grayscale', 'Grayscale GBTC ETF 310', 'GBTC')     , ('1Ayy87Vm1EKKSDKXM2mzps7smKzeJXkkg7', 'Grayscale', 'Grayscale GBTC ETF 311', 'GBTC')     , ('13mvBEnsJ49cB8XAmeHxq6j2rde7jpzxfB', 'Grayscale', 'Grayscale GBTC ETF 312', 'GBTC')     , ('1JfSUf9LbfncTJ9WKhVBSLDuoh3waaMyKf', 'Grayscale', 'Grayscale GBTC ETF 313', 'GBTC')     , ('1Kc4sUnqfHGXvd5zBSkh7YcAJzE56jkGk8', 'Grayscale', 'Grayscale GBTC ETF 314', 'GBTC')     , ('1LYwUq8szQDKvK2e4AbL4PLFWcM5FxrxiZ', 'Grayscale', 'Grayscale GBTC ETF 315', 'GBTC')     , ('15rHv7gVQNxhSorsBPPXTfTrx1GFvr2nLc', 'Grayscale', 'Grayscale GBTC ETF 316', 'GBTC')     , ('1MPdNQzX7TxCqp3CNmF2kHEMv5NJQHUPDo', 'Grayscale', 'Grayscale GBTC ETF 317', 'GBTC')     , ('1K3FqyiqmFxZrQfkPnpditMbQVehBNFdQ3', 'Grayscale', 'Grayscale GBTC ETF 318', 'GBTC')     , ('12Vdr7M9bmZ18qgYffACaDj2trRmEqoubj', 'Grayscale', 'Grayscale GBTC ETF 319', 'GBTC')     , ('1BtCdCsLeND6rv5KnRzyJgqDUQ28AU1AQD', 'Grayscale', 'Grayscale GBTC ETF 320', 'GBTC')     , ('1AXguabB4J3nJKsNUhzPQijB7my3W3NeSE', 'Grayscale', 'Grayscale GBTC ETF 321', 'GBTC')     , ('1PMAwaMTnBFwtxr5weo6sRBfkXMxayucaz', 'Grayscale', 'Grayscale GBTC ETF 322', 'GBTC')     , ('1DYm7VWvLk8JL4HeNdgmLzn4t8R9SRdZRo', 'Grayscale', 'Grayscale GBTC ETF 323', 'GBTC')     , ('1CzmBH7xWfXTWpntduWdNciabdrE4H3QH3', 'Grayscale', 'Grayscale GBTC ETF 324', 'GBTC')     , ('17qsrr61rdcNs85c7LkaNprbrRMUVTFJXm', 'Grayscale', 'Grayscale GBTC ETF 325', 'GBTC')     , ('177KMjbtJQwnCCd9eRaAyvAaqhVrJGfCWP', 'Grayscale', 'Grayscale GBTC ETF 326', 'GBTC')     , ('1HDGVh7PU3ntUxU3pmX8D8x7JqNcjhwnrM', 'Grayscale', 'Grayscale GBTC ETF 327', 'GBTC')     , ('1878B9zzkoY6mD8fHR6zrP756r99TCKpaq', 'Grayscale', 'Grayscale GBTC ETF 328', 'GBTC')     , ('1GhiyW2BnYYyD9Uf4bAZL2KpSQj7oGpzeG', 'Grayscale', 'Grayscale GBTC ETF 329', 'GBTC')     , ('1GNsFgspRX1ToXaVoan1d9wWhYf1FYd9gg', 'Grayscale', 'Grayscale GBTC ETF 330', 'GBTC')     , ('1KPWVMUe837DbQkSmkrchP2MoaxaDtbPx9', 'Grayscale', 'Grayscale GBTC ETF 331', 'GBTC')     , ('1K7s7hnFKGvBL3ZEYsgqTHVbfhMs4nz6Nw', 'Grayscale', 'Grayscale GBTC ETF 332', 'GBTC')     , ('1KT9xDpYbBV8zYvhZ7ayQ5eSKfHG71NW7T', 'Grayscale', 'Grayscale GBTC ETF 333', 'GBTC')     , ('12QQqCzyo5hNdnhBAGBjKaC5DXNcR9D2bN', 'Grayscale', 'Grayscale GBTC ETF 334', 'GBTC')     , ('19oUwPJrm3YyN4cekmxcna7FVeSFKGgiRj', 'Grayscale', 'Grayscale GBTC ETF 335', 'GBTC')     , ('1GVRXcj2GxkQo3dkGeGgqXXTVVWfMQZNuv', 'Grayscale', 'Grayscale GBTC ETF 336', 'GBTC')     , ('17mniJ8Ev9HNWccfNP1S2bbjARhepYzrSd', 'Grayscale', 'Grayscale GBTC ETF 337', 'GBTC')     , ('1gRaQyUsksVSrAQeSSAmLqo7vPT6xj6Yb', 'Grayscale', 'Grayscale GBTC ETF 338', 'GBTC')     , ('1PsDAz7x7JjzNw1eSW3PcLd3RzP7SyQKxs', 'Grayscale', 'Grayscale GBTC ETF 339', 'GBTC')     , ('1KZ3gdvz61Z5Pv5jLcUL1vqaEVYuDSr8A9', 'Grayscale', 'Grayscale GBTC ETF 340', 'GBTC')     , ('1FAmjZ7uawYz8jNn2VUvVMfGEE7MtVaT4S', 'Grayscale', 'Grayscale GBTC ETF 341', 'GBTC')     , ('1GPUsXgujPX2GAVQrwW8MAd34kQn3nZnNH', 'Grayscale', 'Grayscale GBTC ETF 342', 'GBTC')     , ('15gv2T3SiX8JH63vqJApugsRsYFg2U1KYW', 'Grayscale', 'Grayscale GBTC ETF 343', 'GBTC')     , ('1NFHY7tSJzaSrj9KFY4nKcp5Azb78fWwWi', 'Grayscale', 'Grayscale GBTC ETF 344', 'GBTC')     , ('121pqfdfPyLvsUKtECT9byMUQT88uPL8T1', 'Grayscale', 'Grayscale GBTC ETF 345', 'GBTC')     , ('19hi5tPDR6sQRQmuPPUsoMK1Es9ypWEgH6', 'Grayscale', 'Grayscale GBTC ETF 346', 'GBTC')     , ('16PP4dxjCxSivLXtie8AuaMtgDi9uT6Dn7', 'Grayscale', 'Grayscale GBTC ETF 347', 'GBTC')     , ('16Gn5ou1QxZaB44tZ7wHdMxULpbZ9g44Ld', 'Grayscale', 'Grayscale GBTC ETF 348', 'GBTC')     , ('1JEo3ZZTVtNzw6m9TC1CVkncMqS71x5cD9', 'Grayscale', 'Grayscale GBTC ETF 349', 'GBTC')     , ('1GCZpkLTbmEtBpkTSpqm2P5qDCuqUK9xgh', 'Grayscale', 'Grayscale GBTC ETF 350', 'GBTC')     , ('1Q59ahEnKmwvtv4xCeauPKjt98gpexdRwt', 'Grayscale', 'Grayscale GBTC ETF 351', 'GBTC')     , ('1DWqGVKXRc46SQQW5j7TgSiBuMPrPrKoNy', 'Grayscale', 'Grayscale GBTC ETF 352', 'GBTC')     , ('13Md4VgrTqXsCNv3wtp3X8cJqncgCuVvGY', 'Grayscale', 'Grayscale GBTC ETF 353', 'GBTC')     , ('15d36vpTjCGvzG2iN5C57ra2ArNyCRHDww', 'Grayscale', 'Grayscale GBTC ETF 354', 'GBTC')     , ('1P4xRGVAPK5GvgB2YBMNAZ4i7ZEmUFa6fn', 'Grayscale', 'Grayscale GBTC ETF 355', 'GBTC')     , ('19NKUF5e9j7hx9v9tYHd6TsQyuAqUSfHCx', 'Grayscale', 'Grayscale GBTC ETF 356', 'GBTC')     , ('1DoHFjcMktrXraVhjAje88LPqb66MyouAp', 'Grayscale', 'Grayscale GBTC ETF 357', 'GBTC')     , ('1Ac5T9c6gnRWNL9eX93S98FKwxGDReEnpD', 'Grayscale', 'Grayscale GBTC ETF 358', 'GBTC')     , ('1LjubGJxhvTCTLB8FuKT3M4gmixQDKitcQ', 'Grayscale', 'Grayscale GBTC ETF 359', 'GBTC')     , ('1JAj6o7Va5cdd4mAKaDAny77CirM1mjN7c', 'Grayscale', 'Grayscale GBTC ETF 360', 'GBTC')     , ('1PL277SMYnVdMQ6vqsHHyknkDxptp2ECUX', 'Grayscale', 'Grayscale GBTC ETF 361', 'GBTC')     , ('14HSyChAqhPhGPpym4i2yRmAEDviUyhbPd', 'Grayscale', 'Grayscale GBTC ETF 362', 'GBTC')     , ('1Pi1jMDymW7ng1fgTPHhrZZjHLcVPYatZc', 'Grayscale', 'Grayscale GBTC ETF 363', 'GBTC')     , ('19yax1kTbc4RjFKpG1iPfYGYUepV5D8SUE', 'Grayscale', 'Grayscale GBTC ETF 364', 'GBTC')     , ('1FwTz9f9t8YpewQPcvnXFHodDes4vbkzFh', 'Grayscale', 'Grayscale GBTC ETF 365', 'GBTC')     , ('1F9kEiRCJ8gYzXzpE1JfrxG3YBEwkvZVPZ', 'Grayscale', 'Grayscale GBTC ETF 366', 'GBTC')     , ('1DcVDDnouJPz2CTfXvHaqhR9VizZ4JfwgV', 'Grayscale', 'Grayscale GBTC ETF 367', 'GBTC')     , ('1Nqy3AkYmrpLJ96eq9LAvtanaNvpUQ1Ns', 'Grayscale', 'Grayscale GBTC ETF 368', 'GBTC')     , ('1DcitPySm5JBfUT6yNXEaSGQyZAigv8XKf', 'Grayscale', 'Grayscale GBTC ETF 369', 'GBTC')     , ('121k6j53V1pmTEUsTQ9rskcy1ueZRLYw6x', 'Grayscale', 'Grayscale GBTC ETF 370', 'GBTC')     , ('1DFEmSE48NHVoEWyqKYnD3Ggsc4sCxVo4L', 'Grayscale', 'Grayscale GBTC ETF 371', 'GBTC')     , ('1PgKzFpXCPVAvSX3Rk46Y9UJyHDeNvSq8Z', 'Grayscale', 'Grayscale GBTC ETF 372', 'GBTC')     , ('1G42n84gmwBG1Hg3CrSCJC1uDE5k7Cb4dp', 'Grayscale', 'Grayscale GBTC ETF 373', 'GBTC')     , ('1KA7Uu2biv5MsqTYzGwq31XtY1K2o5aq3L', 'Grayscale', 'Grayscale GBTC ETF 374', 'GBTC')     , ('1GVibhMD5yAo68a5XCjJmZ64aV2Z6qrGc6', 'Grayscale', 'Grayscale GBTC ETF 375', 'GBTC')     , ('1PHqL7H7UNe4jXEaXhxcb5uf3HkJaNzNFK', 'Grayscale', 'Grayscale GBTC ETF 376', 'GBTC')     , ('1Jx9EDA1G2zsrRsuDXwCq7K4857N2fCK7L', 'Grayscale', 'Grayscale GBTC ETF 377', 'GBTC')     , ('1KG3n5y6EuPUM9BZ82HZDEGzVbLumvYPf6', 'Grayscale', 'Grayscale GBTC ETF 378', 'GBTC')     , ('1JvLHCPrJHrQg9okQq9v1m9QeuXVahYc8c', 'Grayscale', 'Grayscale GBTC ETF 379', 'GBTC')     , ('1D8DtMpsi1qTvtwRWFABKzQ1FcU8Jok44T', 'Grayscale', 'Grayscale GBTC ETF 380', 'GBTC')     , ('13dGN2HmedfF4BgcCoGZxE8FvQbdJyUcYs', 'Grayscale', 'Grayscale GBTC ETF 381', 'GBTC')     , ('1DQh86PMvr2m2iBstUQVfRXbhxDqEZLGXF', 'Grayscale', 'Grayscale GBTC ETF 382', 'GBTC')     , ('1KdE19SYZp4Mh4x7Ae5uxMnX7wsmew5FQ7', 'Grayscale', 'Grayscale GBTC ETF 383', 'GBTC')     , ('1NPgYSvURb3TXKYEbDZuUxSzdgqybb2XV2', 'Grayscale', 'Grayscale GBTC ETF 384', 'GBTC')     , ('19N8jv9ixGNiNcaPsWwTNtxHHcqz9nhdN4', 'Grayscale', 'Grayscale GBTC ETF 385', 'GBTC')     , ('19jPD93349jB36syh82m2MPbNcTDSXsyt3', 'Grayscale', 'Grayscale GBTC ETF 386', 'GBTC')     , ('18H1CNhuk1mybzoRAPv4FsXGTrnFFnmmeZ', 'Grayscale', 'Grayscale GBTC ETF 387', 'GBTC')     , ('1PN9XgAXaeQQLTwZ3CMU6CNNSC9Sc1kbVX', 'Grayscale', 'Grayscale GBTC ETF 388', 'GBTC')     , ('19gofDXwKZdyNkyvMJ36GBWKFM8Vk7uE5a', 'Grayscale', 'Grayscale GBTC ETF 389', 'GBTC')     , ('1Hapqk7EHA7UFnf3BJ92BBuzMQCQDVcVSF', 'Grayscale', 'Grayscale GBTC ETF 390', 'GBTC')     , ('18gnJCo7UxqUykWtxKa6Em8hPSNxHfuMit', 'Grayscale', 'Grayscale GBTC ETF 391', 'GBTC')     , ('18ZXDSVchAsFipLszBQxShzWL3NP6yj4Ej', 'Grayscale', 'Grayscale GBTC ETF 392', 'GBTC')     , ('13WMj6QxAhhUBB7C8rz4vV8pjZoRndYKmP', 'Grayscale', 'Grayscale GBTC ETF 393', 'GBTC')     , ('15sCErotX7wE2BrCRyiMFoUSq64XmsihPY', 'Grayscale', 'Grayscale GBTC ETF 394', 'GBTC')     , ('1JNqnti9VLxGvZN7n5G6DivSzWvFREqsVS', 'Grayscale', 'Grayscale GBTC ETF 395', 'GBTC')     , ('15jF43ne1rM44Qdug5XG9FEFdJJhrM4ndH', 'Grayscale', 'Grayscale GBTC ETF 396', 'GBTC')     , ('1Am56DQQV3oC6Pvi6X18yFSpzURLSZ3WY3', 'Grayscale', 'Grayscale GBTC ETF 397', 'GBTC')     , ('1Hr5Bi6qvPaXsypWih9Vuio5Mbhv8iM7yf', 'Grayscale', 'Grayscale GBTC ETF 398', 'GBTC')     , ('1FmwGgfVr4wMDSHQL4W6D4NdoHC6Yzbv67', 'Grayscale', 'Grayscale GBTC ETF 399', 'GBTC')     , ('1LArpEJ3bMPFXCq8yU7KfdRdAA3qfaFsfN', 'Grayscale', 'Grayscale GBTC ETF 400', 'GBTC')     , ('1E8UycPV3CvjUbjr3EQ6TEkXE8yTK4omcP', 'Grayscale', 'Grayscale GBTC ETF 401', 'GBTC')     , ('1NGU9mbHAKnV4hAfUoNLJJRruXw4EgTFKy', 'Grayscale', 'Grayscale GBTC ETF 402', 'GBTC')     , ('1MSTdun3wuyfssGKmDXmCEtAg8mfPuAnoA', 'Grayscale', 'Grayscale GBTC ETF 403', 'GBTC')     , ('1KhzbbvqBqSCQYuMiDFAmd5iSuvdvBJLXt', 'Grayscale', 'Grayscale GBTC ETF 404', 'GBTC')     , ('1259AScq489ciPuQWNB4KzqZqS9Fikmry7', 'Grayscale', 'Grayscale GBTC ETF 405', 'GBTC')     , ('13HbteZkgdSCtkHwuJvQHCmF7SuL1Kkua5', 'Grayscale', 'Grayscale GBTC ETF 406', 'GBTC')     , ('1DYWqXNwMmaFpKJrcRZLTeyymVt8CMh7zy', 'Grayscale', 'Grayscale GBTC ETF 407', 'GBTC')     , ('1GiNfPBEEF8g4Ak1NrxCdkmq79fqU5Rieq', 'Grayscale', 'Grayscale GBTC ETF 408', 'GBTC')     , ('1KGXstRx4uxYcWLc8PFHroAkyzTruCK7kx', 'Grayscale', 'Grayscale GBTC ETF 409', 'GBTC')     , ('1Fw8ogXtM6Y9tJmT2uSo7KGwKVopwpWAGE', 'Grayscale', 'Grayscale GBTC ETF 410', 'GBTC')     , ('1GDKdfeTANeJ6oK3Xz5pT9aSY3QtZc6pVf', 'Grayscale', 'Grayscale GBTC ETF 411', 'GBTC')     , ('1MiTDhSoVU49Z2JcWn2on4R3JDPnSMUr3B', 'Grayscale', 'Grayscale GBTC ETF 412', 'GBTC')     , ('1K9NU7CMZu1sWQn84aeKwmyXK55vLQV1Tf', 'Grayscale', 'Grayscale GBTC ETF 413', 'GBTC')     , ('1Q6eEv9RxxpTGKoC7j6eK71s5mnyBBNWAZ', 'Grayscale', 'Grayscale GBTC ETF 414', 'GBTC')     , ('1P4KMyAXRX1BGcNBXdtnAy5ddRHcTFLUhz', 'Grayscale', 'Grayscale GBTC ETF 415', 'GBTC')     , ('1Kp3JXvG37XTnhgSMEYznTxN57BoRZ3HJQ', 'Grayscale', 'Grayscale GBTC ETF 416', 'GBTC')     , ('1Gb4nsSpAvCtWHBSnY9VtsvNzmxB16kbhR', 'Grayscale', 'Grayscale GBTC ETF 417', 'GBTC')     , ('1PesvirFjFK1joQe7Kd7jg8rFL1x6FV6Q4', 'Grayscale', 'Grayscale GBTC ETF 418', 'GBTC')     , ('18ztM7LiAUyiA6jsfnQqx9N7iKK9QYXVEg', 'Grayscale', 'Grayscale GBTC ETF 419', 'GBTC')     , ('183vHoD2KSHm4F5Q5mqPMTSo4kMJCsCQaK', 'Grayscale', 'Grayscale GBTC ETF 420', 'GBTC')     , ('1CNs7aeEoBeD86A1YpgsSTcHPU6F1Qrqou', 'Grayscale', 'Grayscale GBTC ETF 421', 'GBTC')     , ('15L6Kn3opsaGPhkshp22YqKfv4yYREjVgS', 'Grayscale', 'Grayscale GBTC ETF 422', 'GBTC')     , ('16sVGxncFy7ScYX62vAcBeQVDkY9ngENZw', 'Grayscale', 'Grayscale GBTC ETF 423', 'GBTC')     , ('1BXYALpYuYGBpu2pEKPFhYg6g2cvF6FAcG', 'Grayscale', 'Grayscale GBTC ETF 424', 'GBTC')     , ('1DTGkHJ4igRSWG5uXdvtVZy59FYcWPLgvW', 'Grayscale', 'Grayscale GBTC ETF 425', 'GBTC')     , ('1764oYTEXuA2gu93umFBqqsQY3hpN1wV2u', 'Grayscale', 'Grayscale GBTC ETF 426', 'GBTC')     , ('16zLASggXq4sssSu3b23vHQYFESzLXm24K', 'Grayscale', 'Grayscale GBTC ETF 427', 'GBTC')     , ('16fXv5g9vfKTJ735nrVhuKaGfH8GjvSgqq', 'Grayscale', 'Grayscale GBTC ETF 428', 'GBTC')     , ('1KypEPtEzdndrJD5VLH3Bmw3kJsVTsCeRt', 'Grayscale', 'Grayscale GBTC ETF 429', 'GBTC')     , ('1FX9AD3jFXmprjAf7VwiLMNKc1npGy22kR', 'Grayscale', 'Grayscale GBTC ETF 430', 'GBTC')     , ('15id8nm8Q4HQ6Wy6mDyek5YnFq7fJTWGyc', 'Grayscale', 'Grayscale GBTC ETF 431', 'GBTC')     , ('13Gb66H4eq6TbyxUqyPKemcSzt6iDb4Zaf', 'Grayscale', 'Grayscale GBTC ETF 432', 'GBTC')     , ('1Hk6etsaE7eq3RErFsgkyFdkFdtcdnmz4d', 'Grayscale', 'Grayscale GBTC ETF 433', 'GBTC')     , ('1B5hEcbijrqgu83nd6u6yLW1eGcDw9kiHQ', 'Grayscale', 'Grayscale GBTC ETF 434', 'GBTC')     , ('1EXoVNhtbL2WCAMeCsu2tvevh5nPT5bBuG', 'Grayscale', 'Grayscale GBTC ETF 435', 'GBTC')     , ('1oPPFNsPuLAg3bVxCmPzKNpDuMS8mLcMS', 'Grayscale', 'Grayscale GBTC ETF 436', 'GBTC')     , ('1CTTCp3NqLYBErCag4NAeVM9w6KHcY9UGh', 'Grayscale', 'Grayscale GBTC ETF 437', 'GBTC')     , ('186wSpwcd7B6oyKmqKEA8vHeDfpzJDXgTZ', 'Grayscale', 'Grayscale GBTC ETF 438', 'GBTC')     , ('1KqK1JB6Fbfcd4LotnxYqKFp6xkW4TVVu2', 'Grayscale', 'Grayscale GBTC ETF 439', 'GBTC')     , ('1A3j75jAUTAPGgEaipf4JrDcbj9Yh9iH56', 'Grayscale', 'Grayscale GBTC ETF 440', 'GBTC')     , ('13gyqErf1EuF5HoEctYid8w3unvmZfs88W', 'Grayscale', 'Grayscale GBTC ETF 441', 'GBTC')     , ('12ypVVVV8S9jhmpwf9AN5Q62ttWhCZBrNR', 'Grayscale', 'Grayscale GBTC ETF 442', 'GBTC')     , ('18bJNUQn1X54Z99VDssRHcr4A2ixnFzqoP', 'Grayscale', 'Grayscale GBTC ETF 443', 'GBTC')     , ('1LofA7gPKdFeSuA8nFDrjSMaaRocsXNdHa', 'Grayscale', 'Grayscale GBTC ETF 444', 'GBTC')     , ('1BHZRQkhMDxUW5fLCbdbDuQeFVPurdyrby', 'Grayscale', 'Grayscale GBTC ETF 445', 'GBTC')     , ('1AHPZALsMjPyykEwrwtK2EhHbRTRV8vKJB', 'Grayscale', 'Grayscale GBTC ETF 446', 'GBTC')     , ('13JvKvtbgS7ZbxrvbQ75khJ6Tnmtj7tjqH', 'Grayscale', 'Grayscale GBTC ETF 447', 'GBTC')     , ('13dgHtkrDu6fnaTEsg9yyi1rh1NWTz3ifK', 'Grayscale', 'Grayscale GBTC ETF 448', 'GBTC')     , ('1CGK42umD8p8a16LJ9DCTvdxx9BePnkh3y', 'Grayscale', 'Grayscale GBTC ETF 449', 'GBTC')     , ('1P2SFDSR96XrNVRTZK9fvsNJdnAaj7T9Ln', 'Grayscale', 'Grayscale GBTC ETF 450', 'GBTC')     , ('168GWUvMf4xxDtwJYNnMW7woyezvirYLZu', 'Grayscale', 'Grayscale GBTC ETF 451', 'GBTC')     , ('1BfzLUUKMZfZYWd5iunNqisCidQuW4aqih', 'Grayscale', 'Grayscale GBTC ETF 452', 'GBTC')     , ('1KHhVBPq3sJvFBpkiYJ4dc1T6jtU7woxbs', 'Grayscale', 'Grayscale GBTC ETF 453', 'GBTC')     , ('13c6kWWHiGkwQ3mUVWsoUC2KhXrQjzd3PF', 'Grayscale', 'Grayscale GBTC ETF 454', 'GBTC')     , ('189c6iEMC3nEjbNXsA2T3R52nScoeoRZwU', 'Grayscale', 'Grayscale GBTC ETF 455', 'GBTC')     , ('1LXnrQGRiiovnk3SLBioic6BjcbPavXUts', 'Grayscale', 'Grayscale GBTC ETF 456', 'GBTC')     , ('1BU1v3Csw9iomtD2Tz1xE7aYC8abN5RWWD', 'Grayscale', 'Grayscale GBTC ETF 457', 'GBTC')     , ('16HkooyLjszyZg41CQuDD781Xw1XzcbURL', 'Grayscale', 'Grayscale GBTC ETF 458', 'GBTC')     , ('1NCGZB1SFBXLCHMSEgBLXtBUxcneReCPry', 'Grayscale', 'Grayscale GBTC ETF 459', 'GBTC')     , ('1HUA4HBN8dh5HcDcYcnJKyHU5ApwyrzHQQ', 'Grayscale', 'Grayscale GBTC ETF 460', 'GBTC')     , ('15WWRPQFE7rH5PAamcxokDTTZ7JAtDGiY6', 'Grayscale', 'Grayscale GBTC ETF 461', 'GBTC')     , ('1Psorj2cz7WquKMh96p7zj2xPVrfuzZeKv', 'Grayscale', 'Grayscale GBTC ETF 462', 'GBTC')     , ('1JbaUyZmFHR3dzsUC9VQ7uAXeEqoqx1Uax', 'Grayscale', 'Grayscale GBTC ETF 463', 'GBTC')     , ('1J6moNziKYzVVuUcPRVm9TdGdCg3DDZeCS', 'Grayscale', 'Grayscale GBTC ETF 464', 'GBTC')     , ('12reUHSapKHV8nuADYoAPfDFvRHJ3EPJXL', 'Grayscale', 'Grayscale GBTC ETF 465', 'GBTC')     , ('1Png3e9otbn9MBVSWRzULrp8ckUWykQCAV', 'Grayscale', 'Grayscale GBTC ETF 466', 'GBTC')     , ('18YDDceSJvyry97Tnx4GgtBgJDE77cK5wE', 'Grayscale', 'Grayscale GBTC ETF 467', 'GBTC')     , ('1Av2vSzXSQt3Gy3LmFvRZ29auEQ5S4HxLg', 'Grayscale', 'Grayscale GBTC ETF 468', 'GBTC')     , ('19uZc6FasbLVCWZmst6ndvTXdsFjtqNbTY', 'Grayscale', 'Grayscale GBTC ETF 469', 'GBTC')     , ('1J3ga4MdWBKJ8pHJPhwVAN42mdfGa8GmQP', 'Grayscale', 'Grayscale GBTC ETF 470', 'GBTC')     , ('14Viuao9vK8MNXHAiiySfSq1GaBrtA9F2m', 'Grayscale', 'Grayscale GBTC ETF 471', 'GBTC')     , ('1HJrPCQKGofpD8ovUoYJidG9moPvTXdsLb', 'Grayscale', 'Grayscale GBTC ETF 472', 'GBTC')     , ('1GxHpRMhqUdDkFM2Hq2MwN5yAmSzVdscur', 'Grayscale', 'Grayscale GBTC ETF 473', 'GBTC')     , ('1PWBEtEohBoYTNt7edUqdToCpLh78FBWNz', 'Grayscale', 'Grayscale GBTC ETF 474', 'GBTC')     , ('1ANwggEvu8sYEd7rUb5moSVEF73gmDBAqn', 'Grayscale', 'Grayscale GBTC ETF 475', 'GBTC')     , ('1GTZPShBFqp3cYMaN8daif48dm5vZxh8bg', 'Grayscale', 'Grayscale GBTC ETF 476', 'GBTC')     , ('1GRJbowQ9akEJDkCagwsuDTLJVVkPrjst9', 'Grayscale', 'Grayscale GBTC ETF 477', 'GBTC')     , ('1CRVK7vRsr2hHJHMVGmgMGpy4saBi9Bjgt', 'Grayscale', 'Grayscale GBTC ETF 478', 'GBTC')     , ('1P3wSDAveafVLpHSKETJCCpzg7WTVx6UNa', 'Grayscale', 'Grayscale GBTC ETF 479', 'GBTC')     , ('1EsZbkQ2gDF83i7XBsWQRBKCMeP9E49y6A', 'Grayscale', 'Grayscale GBTC ETF 480', 'GBTC')     , ('16m7rZHmhYVhAn1PTCsYPUPC5HrwqCVLVz', 'Grayscale', 'Grayscale GBTC ETF 481', 'GBTC')     , ('1QDExVwoJGu8ZcVT9Kv5NZyDteR36iSwyT', 'Grayscale', 'Grayscale GBTC ETF 482', 'GBTC')     , ('1CYiG28mZnVPrYBuYefYsgzdXqXgXpvs7', 'Grayscale', 'Grayscale GBTC ETF 483', 'GBTC')     , ('1BS7EWNf8AQ1AmUVNpgoarUVTU8WyHVDQE', 'Grayscale', 'Grayscale GBTC ETF 484', 'GBTC')     , ('1Dbcd1GMbr2zkyP9FUNZ5VHEtHTBnfGfPE', 'Grayscale', 'Grayscale GBTC ETF 485', 'GBTC')     , ('1jaQEHcH6TkmZze7KwdyeU3fFAGZwk7S8', 'Grayscale', 'Grayscale GBTC ETF 486', 'GBTC')     , ('139TQohU1VyFmffHm4wadv7Q5TEmrd1NEy', 'Grayscale', 'Grayscale GBTC ETF 487', 'GBTC')     , ('19hkeiL473G4YwKBthqNzmgQHB9PGqzt2h', 'Grayscale', 'Grayscale GBTC ETF 488', 'GBTC')     , ('14RzwydaU6V4pNFF5U947pUkcyHeVqcL97', 'Grayscale', 'Grayscale GBTC ETF 489', 'GBTC')     , ('1AAPeyBRXZpurCGyaHgJj2mkvZ35avKfTS', 'Grayscale', 'Grayscale GBTC ETF 490', 'GBTC')     , ('14eKzG9mS638saFNmVgbxYnXDiHV667cbx', 'Grayscale', 'Grayscale GBTC ETF 491', 'GBTC')     , ('12qX44xJo3qzn9MjjZ8Ewak7wDqNSkQsy4', 'Grayscale', 'Grayscale GBTC ETF 492', 'GBTC')     , ('1AGLezJ6LvVQzMNSffMWJCqis3CpnoUMgp', 'Grayscale', 'Grayscale GBTC ETF 493', 'GBTC')     , ('1En9VtvCVaz7w2Ypj825Jhupvy7xv5zKVo', 'Grayscale', 'Grayscale GBTC ETF 494', 'GBTC')     , ('17tCB6E53SuWMiCLGJBV8itbJL1viMS9ny', 'Grayscale', 'Grayscale GBTC ETF 495', 'GBTC')     , ('1FqCoeG185FY26tdnokm4e8F2V87auysGj', 'Grayscale', 'Grayscale GBTC ETF 496', 'GBTC')     , ('1AET1R7Y7B883gkVHNCiFjS8wPmYdFc1Fz', 'Grayscale', 'Grayscale GBTC ETF 497', 'GBTC')     , ('1J3jDdMUjy7DnjSLPynB4RQgx62B5fmudu', 'Grayscale', 'Grayscale GBTC ETF 498', 'GBTC')     , ('15o3NMjskxjakMf6DqAVw2UKTbsmXzzgC5', 'Grayscale', 'Grayscale GBTC ETF 499', 'GBTC')     , ('17MY3Gsjk6SRT8VdkP37XCT9yXQsWXsBxL', 'Grayscale', 'Grayscale GBTC ETF 500', 'GBTC')     , ('1MVcaZBbmKUpqPbdYXiR5u7S3934J2Dumd', 'Grayscale', 'Grayscale GBTC ETF 501', 'GBTC')     , ('1CRE9KZugFhSJEE1m8NwoGJwy66noEV8gi', 'Grayscale', 'Grayscale GBTC ETF 502', 'GBTC')     , ('12HSV19NJ5bzqERAZgKu5xegMv6sAxdLNw', 'Grayscale', 'Grayscale GBTC ETF 503', 'GBTC')     , ('1PD3gHQH1E2TKwjDeSFHPCKSdQ71M9QBEq', 'Grayscale', 'Grayscale GBTC ETF 504', 'GBTC')     , ('16zSRoK6bXqQKExbnDi6266VxtXvfEBv3J', 'Grayscale', 'Grayscale GBTC ETF 505', 'GBTC')     , ('147feL2ot5CbmWdc1Gh81QMv54mbHNPLPe', 'Grayscale', 'Grayscale GBTC ETF 506', 'GBTC')     , ('12NtPMpEhbgVBi4nnkevAGUNStKC3DWbc3', 'Grayscale', 'Grayscale GBTC ETF 507', 'GBTC')     , ('1FQjs2ndk8zJETc1S15PQ61UnrDs6op68E', 'Grayscale', 'Grayscale GBTC ETF 508', 'GBTC')     , ('1D8x7smxdkjQ6DyN7PC7fosFVL17xTWbZo', 'Grayscale', 'Grayscale GBTC ETF 509', 'GBTC')     , ('1Chyvo2uhstavX79vctkMRS9VyvBgahWfi', 'Grayscale', 'Grayscale GBTC ETF 510', 'GBTC')     , ('1PKz4CHZmmhcD6d8FPFrf6uJudcz3aAe5z', 'Grayscale', 'Grayscale GBTC ETF 511', 'GBTC')     , ('1PXqkMrfvxcFtphQ5mBmNP1d7fYEkgdyry', 'Grayscale', 'Grayscale GBTC ETF 512', 'GBTC')     , ('1PiF6EUYvsH7Gtb8xDQnT9KP3Bys31ideD', 'Grayscale', 'Grayscale GBTC ETF 513', 'GBTC')     , ('1BTpr79W5nhCBNsT6Em8Wrt4PgqTH11qNb', 'Grayscale', 'Grayscale GBTC ETF 514', 'GBTC')     , ('12b2quNjdYy4LDmCu1y5yBQkvFLCiMBUTu', 'Grayscale', 'Grayscale GBTC ETF 515', 'GBTC')     , ('1LWCyALvXxsEsB3m2nQtEXHZxFVbCJQzWT', 'Grayscale', 'Grayscale GBTC ETF 516', 'GBTC')     , ('1FNUj6hosAAt6dhMMFkhriTt5zh7zRKsYD', 'Grayscale', 'Grayscale GBTC ETF 517', 'GBTC')     , ('1LtDrXYyTAkeiuzaHcDR7585V2o442DcuH', 'Grayscale', 'Grayscale GBTC ETF 518', 'GBTC')     , ('1FcHeo7YZfCFX1yCSDhmLk51WeYVn6usPQ', 'Grayscale', 'Grayscale GBTC ETF 519', 'GBTC')     , ('1M29q2YVW6h5aHiJgaBYTRM6yx9u8eWftP', 'Grayscale', 'Grayscale GBTC ETF 520', 'GBTC')     , ('19jmtaGUdtJ1c8JFRjUyZDcbqrMb4cD8me', 'Grayscale', 'Grayscale GBTC ETF 521', 'GBTC')     , ('1FsyuwGFnfoNCfhi9hKnzducqN8PS3XKYh', 'Grayscale', 'Grayscale GBTC ETF 522', 'GBTC')     , ('1KYu3gWwQZdbP92d6DVufzymeQ9UY9XrdE', 'Grayscale', 'Grayscale GBTC ETF 523', 'GBTC')     , ('1NvjBofdE68YKppecetSQ38Qc7rj2FcjqJ', 'Grayscale', 'Grayscale GBTC ETF 524', 'GBTC')     , ('1341BvDUa5vC6dwPngiSLoMEWrKvTMcPWq', 'Grayscale', 'Grayscale GBTC ETF 525', 'GBTC')     , ('17R3n69ogza2XKjv1yzDAxhQzb89T7v1eP', 'Grayscale', 'Grayscale GBTC ETF 526', 'GBTC')     , ('1PsbYK4D3TFr91QtGKZHWUBu1kAPY2s6yT', 'Grayscale', 'Grayscale GBTC ETF 527', 'GBTC')     , ('1HK2DRJEQHzSMqnR7ziFtVmfGAxoCj7R4a', 'Grayscale', 'Grayscale GBTC ETF 528', 'GBTC')     , ('1JhXRY9bT1teiuQmFbueUdPzkuNfgBv977', 'Grayscale', 'Grayscale GBTC ETF 529', 'GBTC')     , ('1Nhwqi2KMxnGiJL7ZLVr39SEKjJdSfKGr1', 'Grayscale', 'Grayscale GBTC ETF 530', 'GBTC')     , ('16b3TAxfB9Tt5CiE9WRSg6BWjvT8VQ9UkU', 'Grayscale', 'Grayscale GBTC ETF 531', 'GBTC')     , ('1KfQh2y8bm1CYjjnJEhYyFA7pUowRuptQm', 'Grayscale', 'Grayscale GBTC ETF 532', 'GBTC')     , ('13RV2KF8yhdvURv5s6Rnw4BENch1i3mCZF', 'Grayscale', 'Grayscale GBTC ETF 533', 'GBTC')     , ('12GAddNMCzRV4K7FwFq4XQxdHSzYJZkXs9', 'Grayscale', 'Grayscale GBTC ETF 534', 'GBTC')     , ('1Dc1WThVRFMR6uoaoqP8wU5EQvFNGgoZ7P', 'Grayscale', 'Grayscale GBTC ETF 535', 'GBTC')     , ('1Be6zPyHAavMZgXTXgKxYvxrTWg6wo7Lie', 'Grayscale', 'Grayscale GBTC ETF 536', 'GBTC')     , ('1DJNB1Exrg9MpAv5W31DDpHhfgvACYtrvC', 'Grayscale', 'Grayscale GBTC ETF 537', 'GBTC')     , ('1GrjozTg814pLAurPmuRrAuYEDYVwbxubR', 'Grayscale', 'Grayscale GBTC ETF 538', 'GBTC')     , ('1B188j9cPFys3er7rgq5d8RQJFb7i5uGo3', 'Grayscale', 'Grayscale GBTC ETF 539', 'GBTC')     , ('1Dq6s4HrrbieHq1HZ7CSvbVkozNFv46cbu', 'Grayscale', 'Grayscale GBTC ETF 540', 'GBTC')     , ('1Ld6sxdhoSLwTz3DWbKxRUvCjeFqtTy9qt', 'Grayscale', 'Grayscale GBTC ETF 541', 'GBTC')     , ('1HXjNnZQPWS29zNhLWaHWagPFaPdZLRgEq', 'Grayscale', 'Grayscale GBTC ETF 542', 'GBTC')     , ('14qojfsizQidAtorZe4Au76nfBCVTta8yq', 'Grayscale', 'Grayscale GBTC ETF 543', 'GBTC')     , ('1JM5MQSQK3MAELBW6zQvMVNGzSGVvZfhXG', 'Grayscale', 'Grayscale GBTC ETF 544', 'GBTC')     , ('17FFJSmAsaDjHT1pTXuUQu6eycVzqqZW6a', 'Grayscale', 'Grayscale GBTC ETF 545', 'GBTC')     , ('1A6zHx1g2UeuudknyGFDwEfSggTsvgWa8M', 'Grayscale', 'Grayscale GBTC ETF 546', 'GBTC')     , ('1LtfmtJyxEx5paSkkf5Tt9rXHk5x7tnVXf', 'Grayscale', 'Grayscale GBTC ETF 547', 'GBTC')     , ('1Pa9qp4KNSGKYYTF5hFex4Zs41bZGPuRKs', 'Grayscale', 'Grayscale GBTC ETF 548', 'GBTC')     , ('1GJAWEgVrfekQyLuD8GKdZQb4yqnTjLchr', 'Grayscale', 'Grayscale GBTC ETF 549', 'GBTC')     , ('1GfY1FaccV5JNUW73N91Zm9jhndrRRo8AL', 'Grayscale', 'Grayscale GBTC ETF 550', 'GBTC')     , ('1BWnY3xfeSooUXHSsrPnbtdzbdchEfJZb5', 'Grayscale', 'Grayscale GBTC ETF 551', 'GBTC')     , ('1GkWogfKtNypP4HeXvBapwB7attsuUS9kM', 'Grayscale', 'Grayscale GBTC ETF 552', 'GBTC')     , ('14kuHnezoRhwXY79Y41yzMZQpYfB3prH9T', 'Grayscale', 'Grayscale GBTC ETF 553', 'GBTC')     , ('16X9V9qW9esaJFkexzEhGA3tHuNbfZAhxy', 'Grayscale', 'Grayscale GBTC ETF 554', 'GBTC')     , ('19iKM9vB7kv4CESyBZxiQ87PkJ2oFp33gh', 'Grayscale', 'Grayscale GBTC ETF 555', 'GBTC')     , ('16Bye7gHLpp8jv5yXddsw35jDgcdyAWTHq', 'Grayscale', 'Grayscale GBTC ETF 556', 'GBTC')     , ('1Hq26z2TcLX9sfDMTBQ59KbJY4WCtDZpBH', 'Grayscale', 'Grayscale GBTC ETF 557', 'GBTC')     , ('1KrjQrkX969JBS2PneU7un9pCtuYR9gV5g', 'Grayscale', 'Grayscale GBTC ETF 558', 'GBTC')     , ('1PuhWMbZnvAXt5ssQNq2s7zdjSB5gaQV1S', 'Grayscale', 'Grayscale GBTC ETF 559', 'GBTC')     , ('1Hk7YNUt4ZdzUiLzm75QK6MLf9G7BcgNy1', 'Grayscale', 'Grayscale GBTC ETF 560', 'GBTC')     , ('15Gc2kqJ8dBNBwECbG3AK5W6x6LVAaySdw', 'Grayscale', 'Grayscale GBTC ETF 561', 'GBTC')     , ('15RqcTN8BqjrPcK1bfxKZGXuD2bQqwHSoM', 'Grayscale', 'Grayscale GBTC ETF 562', 'GBTC')     , ('1K5FF8f3vNEi6CZPN95vPjEEHvxaxZzz2j', 'Grayscale', 'Grayscale GBTC ETF 563', 'GBTC')     , ('16hhX4BbX59ejxZaAiSvXurQRtcW8RdprV', 'Grayscale', 'Grayscale GBTC ETF 564', 'GBTC')     , ('1LL5tUcqjLjQrvVAj9cQiMsjegcPESVj7S', 'Grayscale', 'Grayscale GBTC ETF 565', 'GBTC')     , ('12M3tF1RT9JN1F8D9N6ec547zupgZqdBBA', 'Grayscale', 'Grayscale GBTC ETF 566', 'GBTC')     , ('17kByxkVSxEqEDG9LNGvFU7iuZ99czpPPu', 'Grayscale', 'Grayscale GBTC ETF 567', 'GBTC')     , ('1D6eF1gs3dK2nnthiWJRzh2KVHnsYy5LQt', 'Grayscale', 'Grayscale GBTC ETF 568', 'GBTC')     , ('12PcChTed9wLUHNtpdZ7XwQLqCs3k7DxcM', 'Grayscale', 'Grayscale GBTC ETF 569', 'GBTC')     , ('1LUeVX2Hk6GdV3AXTfx7xNs8bGgxjG1UYr', 'Grayscale', 'Grayscale GBTC ETF 570', 'GBTC')     , ('17FQhKUbw5TA1ojX7Hrcau81Dqe37qCoh9', 'Grayscale', 'Grayscale GBTC ETF 571', 'GBTC')     , ('1KZ3zpSW8oYTH7uHaerVv6J8ucSjvWXzmE', 'Grayscale', 'Grayscale GBTC ETF 572', 'GBTC')     , ('1Eh8QgDG3Z9b4ZcDYX12Q2MrXdeuKqJbni', 'Grayscale', 'Grayscale GBTC ETF 573', 'GBTC')     , ('1QB1SJTqKGF8QsS1LXx44MRN9WYawV4RkM', 'Grayscale', 'Grayscale GBTC ETF 574', 'GBTC')     , ('14o4et4ynmNEstFvhTVkv99V3c2x4HK627', 'Grayscale', 'Grayscale GBTC ETF 575', 'GBTC')     , ('191AD2jMTR9eZUCBiTUU2c6vC7UK76bHA1', 'Grayscale', 'Grayscale GBTC ETF 576', 'GBTC')     , ('1HLNjhmX7uLj2j5emUN4REjSuWxDg4Auws', 'Grayscale', 'Grayscale GBTC ETF 577', 'GBTC')     , ('1BqQ8bgBsezpAiZ4caGq6MJyshcGnqMivC', 'Grayscale', 'Grayscale GBTC ETF 578', 'GBTC')     , ('1AqvJt79KyunZFMnak2eSseKerNjRHqJRj', 'Grayscale', 'Grayscale GBTC ETF 579', 'GBTC')     , ('13LSeghBwiiBpLPTFhipciQkW2ihwLd5XA', 'Grayscale', 'Grayscale GBTC ETF 580', 'GBTC')     , ('193GxuuLVWrd7xgz4LFeP4QsT1kEX5XnLj', 'Grayscale', 'Grayscale GBTC ETF 581', 'GBTC')     , ('1ErusWY9QNM2g7F9aXY8X7VQqcHquiBF8L', 'Grayscale', 'Grayscale GBTC ETF 582', 'GBTC')     , ('1H6QYNmCk17mePxCBkWGwkY4mecQZcjGoV', 'Grayscale', 'Grayscale GBTC ETF 583', 'GBTC')     , ('1BrUJZBojQB4KFuDbb2XU5LfLAcxd1HLaW', 'Grayscale', 'Grayscale GBTC ETF 584', 'GBTC')     , ('1QJvtdBX4nRujtKpwB2LcxxWujUcqAdusr', 'Grayscale', 'Grayscale GBTC ETF 585', 'GBTC')     , ('15vuBXZ7Qx6L4MaaLgp2wUM1pLPCZ2rNaZ', 'Grayscale', 'Grayscale GBTC ETF 586', 'GBTC')     , ('1GUu8bkdMhiNhPK1inmx8kEdcfW6wnj5o', 'Grayscale', 'Grayscale GBTC ETF 587', 'GBTC')     , ('183nPxvtRpAoKWzr3JXEqjhio9i3Wf2mdp', 'Grayscale', 'Grayscale GBTC ETF 588', 'GBTC')     , ('19gD8brh2QUT4oBoyy8wfCotF1gkavxQb5', 'Grayscale', 'Grayscale GBTC ETF 589', 'GBTC')     , ('1MhnRnRd8NzQcW1SFSw67Nqdm3fFNMyvsL', 'Grayscale', 'Grayscale GBTC ETF 590', 'GBTC')     , ('1KCFq3MrJaAVViXJwWxzVsY1UEZeXjxmyK', 'Grayscale', 'Grayscale GBTC ETF 591', 'GBTC')     , ('1JMrXiVDwB1x2kw6uk3YjqHVix7Gvrkp2v', 'Grayscale', 'Grayscale GBTC ETF 592', 'GBTC')     , ('1F6Cyr3UeLeAqvXMx99kWfVAHaX3dfzucR', 'Grayscale', 'Grayscale GBTC ETF 593', 'GBTC')     , ('1H89QPZgaYwejPhDwad422rMgNPSokTzna', 'Grayscale', 'Grayscale GBTC ETF 594', 'GBTC')     , ('18RXY1NG7PPVos3roV955b9PN45nFyE229', 'Grayscale', 'Grayscale GBTC ETF 595', 'GBTC')     , ('1Mfourwr1xSfYYEoQfAcxiZLNNLdKEKCfa', 'Grayscale', 'Grayscale GBTC ETF 596', 'GBTC')     , ('146j1yCAJfGwwQE2mcc5FjpChcKQGeKXXG', 'Grayscale', 'Grayscale GBTC ETF 597', 'GBTC')     , ('17fGLPxCiZHSsa5SrmETzrkgnsJLut9PSk', 'Grayscale', 'Grayscale GBTC ETF 598', 'GBTC')     , ('1H1rjNJimoTp1v4CRBhJezUmVaqwUkzNVw', 'Grayscale', 'Grayscale GBTC ETF 599', 'GBTC')     , ('12ubLHMraQuEWGxJkQigbyfMSho5A1eCgX', 'Grayscale', 'Grayscale GBTC ETF 600', 'GBTC')     , ('1QAxTfvQMTLfYdaKMtY1wG48CriUCR4z76', 'Grayscale', 'Grayscale GBTC ETF 601', 'GBTC')     , ('1BEyimjCA5R8igLUdovpRuTTiNy4GqGx6v', 'Grayscale', 'Grayscale GBTC ETF 602', 'GBTC')     , ('1P9E1vfU5HD4EpSe275WuQhMezstgwb8BV', 'Grayscale', 'Grayscale GBTC ETF 603', 'GBTC')     , ('1LFVXSPW1NDJxNz94W7JFAGLrsf14YfDR6', 'Grayscale', 'Grayscale GBTC ETF 604', 'GBTC')     , ('1N6pugTBcmV1arrTHv2P5RQcq33wG7LTEY', 'Grayscale', 'Grayscale GBTC ETF 605', 'GBTC')     , ('1MweHFQXsw7ReGZup5dcRcaKxrzMESp8br', 'Grayscale', 'Grayscale GBTC ETF 606', 'GBTC')     , ('17z2e3K7hmjNug8ey6FRUPKVCwiormh4gr', 'Grayscale', 'Grayscale GBTC ETF 607', 'GBTC')     , ('1NLhQ45fTzGKGeFtuVAA4g78TQ7ZC6zdQd', 'Grayscale', 'Grayscale GBTC ETF 608', 'GBTC')     , ('1FwWneyiELaZaFdZmdWUmpRzpLW3z7uf3u', 'Grayscale', 'Grayscale GBTC ETF 609', 'GBTC')     , ('1tpm4xG6HtFHXnqjRvpjqbEdGkqRUfAVU', 'Grayscale', 'Grayscale GBTC ETF 610', 'GBTC')     , ('1LgQoPqqVMFF9sYzeLAKeJu25GaUjqPB8K', 'Grayscale', 'Grayscale GBTC ETF 611', 'GBTC')     , ('1225YntqHwp9KFG6x4tT1adeBGbKXWrNps', 'Grayscale', 'Grayscale GBTC ETF 612', 'GBTC')     , ('1Hch3R7x5RCXDFoGYnooxrdCmZ8BmPEe6Q', 'Grayscale', 'Grayscale GBTC ETF 613', 'GBTC')     , ('12NTRxT4gmiW7Wu9EUwBPB9h4w6y7LkLMW', 'Grayscale', 'Grayscale GBTC ETF 614', 'GBTC')     , ('1LM6pJy15JNhyjNpWeUYkZirhVCeRraGEC', 'Grayscale', 'Grayscale GBTC ETF 615', 'GBTC')     , ('1AG3WSgDc74DbrR7YNaLqZDtPYmnLMyE9J', 'Grayscale', 'Grayscale GBTC ETF 616', 'GBTC')     , ('1sbHeosFNZyoXUsjLJBKD29eHRFfxzTmq', 'Grayscale', 'Grayscale GBTC ETF 617', 'GBTC')     , ('1FuZQRAVpbq9k2GsyRAvqQ3iFNv9ZagqrR', 'Grayscale', 'Grayscale GBTC ETF 618', 'GBTC')     , ('156yzkJ7vRb9TH3N1M8X4pvSkV4WqrWUgz', 'Grayscale', 'Grayscale GBTC ETF 619', 'GBTC')     , ('1CPSpG2vhDGN1H1pSTL6hxGPPWFaSinRoS', 'Grayscale', 'Grayscale GBTC ETF 620', 'GBTC')     , ('1NUYSWV1n6qqeF9mMDLd1B94icv95Xck2m', 'Grayscale', 'Grayscale GBTC ETF 621', 'GBTC')     , ('1NfheMFDXue7p5NTeU6z1tpzfSRZP5sR6w', 'Grayscale', 'Grayscale GBTC ETF 622', 'GBTC')     , ('1Q2SYQCfbtXkgQcfr8ecVt9cwNYb5xos1T', 'Grayscale', 'Grayscale GBTC ETF 623', 'GBTC')     , ('1H8huYL1D2dyyBjEzF7TJY28NTNBMMdsVQ', 'Grayscale', 'Grayscale GBTC ETF 624', 'GBTC')     , ('13sUsKAEvDmQSZExUiXuLEYMrCqHEdM9KL', 'Grayscale', 'Grayscale GBTC ETF 625', 'GBTC')     , ('1EMd3fsqYSXEoN6YE2c6aPG8DAdHUpQAPT', 'Grayscale', 'Grayscale GBTC ETF 626', 'GBTC')     , ('16axhfzXV4iFh6AbPfSgew6VnZbtwqvBY', 'Grayscale', 'Grayscale GBTC ETF 627', 'GBTC')     , ('1LquNSDbCmaVKnwVBNGdvYq3kQ6zvoVWN9', 'Grayscale', 'Grayscale GBTC ETF 628', 'GBTC')     , ('1K9Vms5GdM8ckkXuEKxY5q8EL6YhW2WxHC', 'Grayscale', 'Grayscale GBTC ETF 629', 'GBTC')     , ('1PK33tAhHhqVCjEgSBJPgGzpZroqaU3yro', 'Grayscale', 'Grayscale GBTC ETF 630', 'GBTC')     , ('16MAkU93T2vGrq7NMRUSPr3bvntghT9BBn', 'Grayscale', 'Grayscale GBTC ETF 631', 'GBTC')     , ('1LCN5StMtNgn8Wc9Sbv6YnoiPM8ErXg2Sz', 'Grayscale', 'Grayscale GBTC ETF 632', 'GBTC')     , ('1CGaUh9EBPD9zLz8sWaXECUXD9JfSJtW22', 'Grayscale', 'Grayscale GBTC ETF 633', 'GBTC')     , ('1bUKcn4xeXwhvtjXnK7LFFDtx73bPoUC4', 'Grayscale', 'Grayscale GBTC ETF 634', 'GBTC')     , ('19CKmph6way2FTMNVxUD5U7sh5A2TYKunV', 'Grayscale', 'Grayscale GBTC ETF 635', 'GBTC')     , ('1MdwWnC1kEYc8MH4pkL6fZmtL9L1Tr3GzX', 'Grayscale', 'Grayscale GBTC ETF 636', 'GBTC')     , ('1PjLFfntVbaE968PFiymnrsLyn62mVfEwa', 'Grayscale', 'Grayscale GBTC ETF 637', 'GBTC')     , ('15ZGrPwe4EUbrfh8bjdFbE4S2bJrWQz36e', 'Grayscale', 'Grayscale GBTC ETF 638', 'GBTC')     , ('1KQfhqBYja33ZoCkzdMgr3BB6Vb9kVL8dz', 'Grayscale', 'Grayscale GBTC ETF 639', 'GBTC')     , ('1KFosrxQnpD8u6HMyp58giQz75KKDRYpa1', 'Grayscale', 'Grayscale GBTC ETF 640', 'GBTC')     , ('16Kd84yuk51cWGbRJ66xpUi1bcXpKcZ7vF', 'Grayscale', 'Grayscale GBTC ETF 641', 'GBTC')     , ('1FCJZ2JMiTu4jeer8SDYzoru1UVAcfqMRK', 'Grayscale', 'Grayscale GBTC ETF 642', 'GBTC')     , ('15VRozexNq7AWWbn57yoddqiDKzrnG3zrd', 'Grayscale', 'Grayscale GBTC ETF 643', 'GBTC')     , ('16PJmwyGrDbh2wBqL87VjQqbUnLTGbQpoc', 'Grayscale', 'Grayscale GBTC ETF 644', 'GBTC')     , ('1H2Sid576dBjvroXnmtpvAvbrm514P7xMi', 'Grayscale', 'Grayscale GBTC ETF 645', 'GBTC')     , ('1DYUtVhNiRyf4A78u7V64T5CnmRCdkdn81', 'Grayscale', 'Grayscale GBTC ETF 646', 'GBTC')     , ('1JdY3LKa2zv5YJ2GuWE1JJcjzGYcU6owZu', 'Grayscale', 'Grayscale GBTC ETF 647', 'GBTC')     , ('1341ohfqGu6ddGp2zvu2gMXSkJM2mZWd1f', 'Grayscale', 'Grayscale GBTC ETF 648', 'GBTC')     , ('1HxcH5gE5rgVTEqFkZ1ytpD3SUCgiLKTsn', 'Grayscale', 'Grayscale GBTC ETF 649', 'GBTC')     , ('13BxQhE2tv9W7hR44CWBAiBQTJFykFFgGH', 'Grayscale', 'Grayscale GBTC ETF 650', 'GBTC')     , ('1FsYkRL22bknCsCX2s9PMLJCs7c7mwbkUZ', 'Grayscale', 'Grayscale GBTC ETF 651', 'GBTC')     , ('1AZnb5xQ5ZrF2vzPqKryCGYEDSYQYvjVi1', 'Grayscale', 'Grayscale GBTC ETF 652', 'GBTC')     , ('1MDdWYWdw5NiyWSRkMQr3RKTQQj6P6A7ck', 'Grayscale', 'Grayscale GBTC ETF 653', 'GBTC')     , ('14msegkgERAtaqRYQGnRn7QdLdJBw5aBnn', 'Grayscale', 'Grayscale GBTC ETF 654', 'GBTC')     , ('1G9oHeD42grZDU9sJURpM73uNygb8V2pYo', 'Grayscale', 'Grayscale GBTC ETF 655', 'GBTC')     , ('1Edox3EH6qjZ2fqYsyD9JJ2WwwUpLkVoeC', 'Grayscale', 'Grayscale GBTC ETF 656', 'GBTC')     , ('17nS6apmHDmFWbbWKmtwzEv4kHWimaRpfv', 'Grayscale', 'Grayscale GBTC ETF 657', 'GBTC')     , ('1G6RECDvSPx6y4LmH3T1WoPPVKPJnSE9cH', 'Grayscale', 'Grayscale GBTC ETF 658', 'GBTC')     , ('1JcTgCWT4binUiqHHNPY6jKDL1LFdHnYkH', 'Grayscale', 'Grayscale GBTC ETF 659', 'GBTC')     , ('1L2PU89AFMiR8FZ1JWyw9jqPGLZMAALpRj', 'Grayscale', 'Grayscale GBTC ETF 660', 'GBTC')     , ('1QDBPXpnjSZVVXTQ3zW7jCYiaGRHXbZme7', 'Grayscale', 'Grayscale GBTC ETF 661', 'GBTC')     , ('1K8Uk7TyNMAC1Zp9jtQyvhK78FY2tw18Wy', 'Grayscale', 'Grayscale GBTC ETF 662', 'GBTC')     , ('1B5J7ym9TDc5iV8qEvX3Xc2Sh1MRn2YqRa', 'Grayscale', 'Grayscale GBTC ETF 663', 'GBTC')     , ('1KhK4zuqPXuDWAAk6dTCHuLyCMwUADwcec', 'Grayscale', 'Grayscale GBTC ETF 664', 'GBTC')     , ('1AuZxzSvxCKwW464TcMkjQorTC4wDUz9ba', 'Grayscale', 'Grayscale GBTC ETF 665', 'GBTC')     , ('1FZ5N9eBaRpmphxPK9JnLWnLPnczuRbKpA', 'Grayscale', 'Grayscale GBTC ETF 666', 'GBTC')     , ('13XtieCATTR7JYV3t72BWs4fB6KXTsem7n', 'Grayscale', 'Grayscale GBTC ETF 667', 'GBTC')     , ('15jLpDj44eWEfkRS5v4C8mzx53NNvCphYY', 'Grayscale', 'Grayscale GBTC ETF 668', 'GBTC')     , ('1MgqiJZditU3BBQzMoHF4e4kMq8FEVzSyB', 'Grayscale', 'Grayscale GBTC ETF 669', 'GBTC')     , ('15xBP3VMjeddSJgE79DsUsp3hT3rTk2NeM', 'Grayscale', 'Grayscale GBTC ETF 670', 'GBTC')     , ('1AoLTPWARTjiMqr7pksMJzGBQL5aEmS8Ek', 'Grayscale', 'Grayscale GBTC ETF 671', 'GBTC')     , ('1PD8BrxCZDNYqFpyeXnx88G26WFzWb3SVd', 'Grayscale', 'Grayscale GBTC ETF 672', 'GBTC')     , ('1G55jR1Cn7sJt9SzTwiBC9Rc8vwavp7FUN', 'Grayscale', 'Grayscale GBTC ETF 673', 'GBTC')     , ('1AV4WjLzKUjHpw5rnVz95uVRKd98umvbBD', 'Grayscale', 'Grayscale GBTC ETF 674', 'GBTC')     , ('1P2WojEaPksRu8Te5JRosxivquKejFcAUG', 'Grayscale', 'Grayscale GBTC ETF 675', 'GBTC')     , ('19mXWshCyVYyVXWgvtq4uBACKtLvNqC1Ba', 'Grayscale', 'Grayscale GBTC ETF 676', 'GBTC')     , ('17VLTmjuXs5XyU1TWZD148na8WTyBjS3YW', 'Grayscale', 'Grayscale GBTC ETF 677', 'GBTC')     , ('1NYhJXTYJ4aQqZA838icqhf7XAToKsdcMT', 'Grayscale', 'Grayscale GBTC ETF 678', 'GBTC')     , ('17Zu9Y9ajvVH2znabiGK2mrKcdZ88EsUtq', 'Grayscale', 'Grayscale GBTC ETF 679', 'GBTC')     , ('1AohooymJBAjkPTfyMu3cx6DKtLqfgCGnh', 'Grayscale', 'Grayscale GBTC ETF 680', 'GBTC')     , ('12mALjQyQHKsZBtkEfofHemQvGgkP8eG8Q', 'Grayscale', 'Grayscale GBTC ETF 681', 'GBTC')     , ('1DJW1hD95NyGvJFT1stBYuU8ruLuNXF698', 'Grayscale', 'Grayscale GBTC ETF 682', 'GBTC')     , ('1ASktohyPHp1YmxNWsX8Akk2JStmuiAT3K', 'Grayscale', 'Grayscale GBTC ETF 683', 'GBTC')     , ('13NpVFmZq5tvcVnU5r2RsMuWwf2Zt8qJ2S', 'Grayscale', 'Grayscale GBTC ETF 684', 'GBTC')     , ('1CS1M4oVbcFnZjZ5hU5bk6vLi2Q5VSsmpX', 'Grayscale', 'Grayscale GBTC ETF 685', 'GBTC')     , ('18kUJzAomBY2T21gzmhmV2npYy7fCN9Lse', 'Grayscale', 'Grayscale GBTC ETF 686', 'GBTC')     , ('1vf19ewqxCq1wbm74zvvH1wmsqpj4A7r9', 'Grayscale', 'Grayscale GBTC ETF 687', 'GBTC')     , ('1pg5sWujgferHHbkvhzW3V915LNdQfD8Z', 'Grayscale', 'Grayscale GBTC ETF 688', 'GBTC')     , ('12pZmBRTya4efkLjfbT4KyhUMr399Zh18Z', 'Grayscale', 'Grayscale GBTC ETF 689', 'GBTC')     , ('1PukHjNttDz7sC5dVKcE9p9wWio5fDYRyq', 'Grayscale', 'Grayscale GBTC ETF 690', 'GBTC')     , ('1HYSGxqK85TpwYxfYwGEYN6bCRJEgA8fAX', 'Grayscale', 'Grayscale GBTC ETF 691', 'GBTC')     , ('1EW7f9yiS5us2x2Jn5QeQeiz1vCtUaN3q3', 'Grayscale', 'Grayscale GBTC ETF 692', 'GBTC')     , ('157k9TDGVnfTr1WkcaYvAjzKKHfkt9nvQ8', 'Grayscale', 'Grayscale GBTC ETF 693', 'GBTC')     , ('16JcbxK5AeYEnGCsMyaFcMsh2AGqgaJg9q', 'Grayscale', 'Grayscale GBTC ETF 694', 'GBTC')     , ('1Mh89ZQFwaYX19R8j5vpwLF5vXJ6JFhKeT', 'Grayscale', 'Grayscale GBTC ETF 695', 'GBTC')     , ('16DycippRdeovYycAfxBtiQuGNbh14HHa7', 'Grayscale', 'Grayscale GBTC ETF 696', 'GBTC')     , ('18kUfpeP7hxxvHkbm6SzFNEGEaNGbu7yMu', 'Grayscale', 'Grayscale GBTC ETF 697', 'GBTC')     , ('1N7dApV7RZPNNYBqKBkF51jBjwFwnLc9ca', 'Grayscale', 'Grayscale GBTC ETF 698', 'GBTC')     , ('1NCcq3iusnEtX2zeVWLxWjcqpoNoknbcLN', 'Grayscale', 'Grayscale GBTC ETF 699', 'GBTC')     , ('18YbB28LMpdmHRHtknYVgj5NiwgQyPZ8yr', 'Grayscale', 'Grayscale GBTC ETF 700', 'GBTC')     , ('1BBwDKFnRuhM54udiWgWYVcvSwYVoM7EaQ', 'Grayscale', 'Grayscale GBTC ETF 701', 'GBTC')     , ('16BNPSPUbTrYCDDGnnNnpewza8VAwu7PCp', 'Grayscale', 'Grayscale GBTC ETF 702', 'GBTC')     , ('17QJb37zjPZWS4oEMrBEnYoJ28qxm1ZQPd', 'Grayscale', 'Grayscale GBTC ETF 703', 'GBTC')     , ('1DyfA66YgTRA55Rq8n159GeZp3Zes9NjXs', 'Grayscale', 'Grayscale GBTC ETF 704', 'GBTC')     , ('1F7eybDs7mdczKgjjb1M9KZPcRQwgKtsV6', 'Grayscale', 'Grayscale GBTC ETF 705', 'GBTC')     , ('13eEjotuvvPwgztfCmZQqExk6rGbYQ9ypi', 'Grayscale', 'Grayscale GBTC ETF 706', 'GBTC')     , ('1BXB3vXrXEnRrZBJNn2muB5KNUpt7eZWbK', 'Grayscale', 'Grayscale GBTC ETF 707', 'GBTC')     , ('1QGgKwN84stahsgqRHUhyPaSh9fE1ckL5h', 'Grayscale', 'Grayscale GBTC ETF 708', 'GBTC')     , ('13x8J9GaFf84rb4YuCW64q6BZ6ijTRpSUd', 'Grayscale', 'Grayscale GBTC ETF 709', 'GBTC')     , ('1Dr1tDwaBjTGJU25JN3SkqhcXXVY2Y565N', 'Grayscale', 'Grayscale GBTC ETF 710', 'GBTC')     , ('1PN6xKELrpU4PviAUUzfei3dUb7SHkxZUS', 'Grayscale', 'Grayscale GBTC ETF 711', 'GBTC')     , ('1Hr4k7kXTLR9mU4DuHCKhxfKLeMAPqLE9D', 'Grayscale', 'Grayscale GBTC ETF 712', 'GBTC')     , ('1LowUzqMt9evcSh5LxHd4zewxYrhaE3qNC', 'Grayscale', 'Grayscale GBTC ETF 713', 'GBTC')     , ('12bgRyyXR6HdzNiMx76uDr1i8PmJC7EuMz', 'Grayscale', 'Grayscale GBTC ETF 714', 'GBTC')     , ('1CpNFtuw2sTMuT9HffvchVUt1eo4rGj66m', 'Grayscale', 'Grayscale GBTC ETF 715', 'GBTC')     , ('19Fm2emAN26irWa3eCDGcj1uvRFBb3FgBk', 'Grayscale', 'Grayscale GBTC ETF 716', 'GBTC')     , ('1HtnmHYwQMpgEkZ3MYUuM4rs7NpThafPdQ', 'Grayscale', 'Grayscale GBTC ETF 717', 'GBTC')     , ('19x6GJeBPzttjvgQTGerR7JtbCBvLUSf73', 'Grayscale', 'Grayscale GBTC ETF 718', 'GBTC')     , ('15Ez4VGJFe3XJcEQxJW5JsSRJz43bmCPUR', 'Grayscale', 'Grayscale GBTC ETF 719', 'GBTC')     , ('1P7MTtbeL39CEh1g4tATdA1PiNdmXPw8JB', 'Grayscale', 'Grayscale GBTC ETF 720', 'GBTC')     , ('1R2RYYtieR3JSaBCbPht8RMvwhQnHnunC', 'Grayscale', 'Grayscale GBTC ETF 721', 'GBTC')     , ('13sR859UHjYqrBcYqpJsDW8LGUW69bn8PH', 'Grayscale', 'Grayscale GBTC ETF 722', 'GBTC')     , ('19L3x6Z5sqsT6ZkyfP44uXoSdruSrUgqD8', 'Grayscale', 'Grayscale GBTC ETF 723', 'GBTC')     , ('1HS9qPRfEH8mc85ZTFKsMsoWSgjqL9mEfr', 'Grayscale', 'Grayscale GBTC ETF 724', 'GBTC')     , ('1NadLD1qU6cGCL4twHqsEkmwXiRm4UNBXH', 'Grayscale', 'Grayscale GBTC ETF 725', 'GBTC')     , ('12z7bESXN1cwVfU3q5VbyDgRzcoy5FQ9Qb', 'Grayscale', 'Grayscale GBTC ETF 726', 'GBTC')     , ('1MtHMs4fHxbTeWpZW5UYDgy6W1xEQSBy8n', 'Grayscale', 'Grayscale GBTC ETF 727', 'GBTC')     , ('13nCZx12K5Rrq21WVjzewZAhueH2SezK5z', 'Grayscale', 'Grayscale GBTC ETF 728', 'GBTC')     , ('1Nj5uKRdA5t3sSYgZY549ERtvbZA9ZANXy', 'Grayscale', 'Grayscale GBTC ETF 729', 'GBTC')     , ('1EcX89yGGGDQ5mXLFSf4UQC7fuUQytKths', 'Grayscale', 'Grayscale GBTC ETF 730', 'GBTC')     , ('16foN7EY6U1u4h7Ye1SmHAr6sPEYGS5voE', 'Grayscale', 'Grayscale GBTC ETF 731', 'GBTC')     , ('19Ge94RSgG6wgAnP5JrFbRzavseuMmd861', 'Grayscale', 'Grayscale GBTC ETF 732', 'GBTC')     , ('13p1cF7V8AJAdXfZqCkpuEUGBeM3vXj1xY', 'Grayscale', 'Grayscale GBTC ETF 733', 'GBTC')     , ('1PsgRb6rn3oJSnM93PRs6z2yLx51paiYFB', 'Grayscale', 'Grayscale GBTC ETF 734', 'GBTC')     , ('12Hc3Vdz77xtk8FKQiwg83CmikAmq6qApC', 'Grayscale', 'Grayscale GBTC ETF 735', 'GBTC')     , ('1H1NMpznUkNY9L6JpVDiSXYGzaBo7qdmDN', 'Grayscale', 'Grayscale GBTC ETF 736', 'GBTC')     , ('1PU6kduSjhfRXpjkpQQcwyDFSn3f8C4hHe', 'Grayscale', 'Grayscale GBTC ETF 737', 'GBTC')     , ('1Q7PA4p8fNrGu2ZoqjyrXjhnziJJuVqaNT', 'Grayscale', 'Grayscale GBTC ETF 738', 'GBTC')     , ('13D8hSnZWW4N7udXivPDggBmeMVRisvFnU', 'Grayscale', 'Grayscale GBTC ETF 739', 'GBTC')     , ('1Ls6CTGrioUbsUvPAjWQ5hvPfgd4MJjppt', 'Grayscale', 'Grayscale GBTC ETF 740', 'GBTC')     , ('15FaxrWs9tRS1Ub9qGZZJAu1pzgKjPjW3y', 'Grayscale', 'Grayscale GBTC ETF 741', 'GBTC')     , ('189cjNpxwKbQJQ4rL5koNJCxEEQnM3fxjo', 'Grayscale', 'Grayscale GBTC ETF 742', 'GBTC')     , ('1MygX2Pemnip1vTyDJr5fgZ5s3P89iNycx', 'Grayscale', 'Grayscale GBTC ETF 743', 'GBTC')     , ('15syqpHC5WD7Pkxy4T4ZXHLyrW7TExmFWK', 'Grayscale', 'Grayscale GBTC ETF 744', 'GBTC')     , ('1MVqLNmCj5LDWTey46Sh2s1wmwB1cbSRGU', 'Grayscale', 'Grayscale GBTC ETF 745', 'GBTC')     , ('19JrGYFfsc6QEtCS1JggAW55yUxtpkbLyh', 'Grayscale', 'Grayscale GBTC ETF 746', 'GBTC')     , ('1GLWjUXUpZZzhQgiJeaYhr32donoseEoGB', 'Grayscale', 'Grayscale GBTC ETF 747', 'GBTC')     , ('1GoBtKL31K4NpfFNs4hEbHmN24oSQwuvJF', 'Grayscale', 'Grayscale GBTC ETF 748', 'GBTC')     , ('1PSkPsSmoUcmxfpLS4yw8d4iMarVsHaqy8', 'Grayscale', 'Grayscale GBTC ETF 749', 'GBTC')     , ('12E5L32DqH6DULKcmDWraesyDVNivPJE2y', 'Grayscale', 'Grayscale GBTC ETF 750', 'GBTC')     , ('1MioKNUaEHCoHVY182wxCNMRHnLZ931M9x', 'Grayscale', 'Grayscale GBTC ETF 751', 'GBTC')     , ('12whe8LbvwURDgPPLDcQqNycNA1Rp5h5fm', 'Grayscale', 'Grayscale GBTC ETF 752', 'GBTC')     , ('1NNeie6XqvUyB3dhdGFCpGkVt3KNBh2soP', 'Grayscale', 'Grayscale GBTC ETF 753', 'GBTC')     , ('1C7F4MvzggXD1T5qRcUmhcW4fqyRNzQBqw', 'Grayscale', 'Grayscale GBTC ETF 754', 'GBTC')     , ('1KC1QB3Q9tm9RxTJX6sngFDPfrpnvtEN9e', 'Grayscale', 'Grayscale GBTC ETF 755', 'GBTC')     , ('1cWUFJ9tVHUPYXbypkm8ryCwgvhKEufJ9', 'Grayscale', 'Grayscale GBTC ETF 756', 'GBTC')     , ('1EUcnZJx1qqxvva3R3fVsRVb5CL2nB7rv1', 'Grayscale', 'Grayscale GBTC ETF 757', 'GBTC')     , ('1NFFBRAZvXcxQ6e5u2qKhMcpG4JiW5eRUH', 'Grayscale', 'Grayscale GBTC ETF 758', 'GBTC')     , ('1KvrAvbNjgz9p94HPLngNEJUdxcqywDD5U', 'Grayscale', 'Grayscale GBTC ETF 759', 'GBTC')     , ('1EiGauL81h3YqmtWPwo8rnXDpMaTNsrXYU', 'Grayscale', 'Grayscale GBTC ETF 760', 'GBTC')     , ('168gKEAohHNE5QyY5SQ3w6UnRDLfS5KpJD', 'Grayscale', 'Grayscale GBTC ETF 761', 'GBTC')     , ('1Kqkpn4YxHwSXZwhAbYkXpkReEjgEkJ9NY', 'Grayscale', 'Grayscale GBTC ETF 762', 'GBTC')     , ('12Yoe41v6dyH2XpNC68YWPkBBUG4KXo8t2', 'Grayscale', 'Grayscale GBTC ETF 763', 'GBTC')     , ('19z5CBC2CVGkzCsFXFtbBVwkn2XNVjMgxJ', 'Grayscale', 'Grayscale GBTC ETF 764', 'GBTC')     , ('15vPuxFbjD1onfU76PytXHJbFmdYr2Buey', 'Grayscale', 'Grayscale GBTC ETF 765', 'GBTC')     , ('1t3gwSUinTVriYZmBThgw9m6cgnKggj3o', 'Grayscale', 'Grayscale GBTC ETF 766', 'GBTC')     , ('1LMKxScWxPfpJ3XEkPSVurtZ5nvh5DAQsw', 'Grayscale', 'Grayscale GBTC ETF 767', 'GBTC')     , ('16h7BB1JGuH1PrzwGhSxtKj5QoPR6g3uA', 'Grayscale', 'Grayscale GBTC ETF 768', 'GBTC')     , ('1DQSXgPPN4t1P4qrgAGDHRLgBAFNukpFtS', 'Grayscale', 'Grayscale GBTC ETF 769', 'GBTC')     , ('1MYXbqVHzMJXt2qvs1qyAQCB7VwxhDZ18M', 'Grayscale', 'Grayscale GBTC ETF 770', 'GBTC')     , ('13ooJiwZgXeQHjwtt7FkzEeMWAGYNCsaB3', 'Grayscale', 'Grayscale GBTC ETF 771', 'GBTC')     , ('1JcHDdn7RwQAKk67LudhQEmr96prbQnntM', 'Grayscale', 'Grayscale GBTC ETF 772', 'GBTC')     , ('1MhbGFZmwfKMPqbHHXkjBZXoP3CWu7ySLM', 'Grayscale', 'Grayscale GBTC ETF 773', 'GBTC')     , ('1PtkDKN79TtXBHjndt6uPXMrJuS2nJZmLN', 'Grayscale', 'Grayscale GBTC ETF 774', 'GBTC')     , ('1ANboSCX36UHDUmR1YkD6m2YrR6Y2LfC4a', 'Grayscale', 'Grayscale GBTC ETF 775', 'GBTC')     , ('1KzW7Em4Kke9m3cG82gufvttfm9o7rLcty', 'Grayscale', 'Grayscale GBTC ETF 776', 'GBTC')     , ('1LFUeoVFQnZEHsnTUvZgPdktqxGm48nEHD', 'Grayscale', 'Grayscale GBTC ETF 777', 'GBTC')     , ('15hwH6T4AhhfRqH2TouwmfDfyeWpb522sp', 'Grayscale', 'Grayscale GBTC ETF 778', 'GBTC')     , ('1ATMKBZx8ZJrDYq5f9g5Tcez8spbosqfoZ', 'Grayscale', 'Grayscale GBTC ETF 779', 'GBTC')     , ('18Xp6P86hogk6UaDuEwCHSjZzd4JXMcaE3', 'Grayscale', 'Grayscale GBTC ETF 780', 'GBTC')     , ('1BztrnJn47rcQNTgChLzGb89TobhgaRHua', 'Grayscale', 'Grayscale GBTC ETF 781', 'GBTC')     , ('1QCTAS8BS1gApLvvvDqyQis79gbNruY8KD', 'Grayscale', 'Grayscale GBTC ETF 782', 'GBTC')     , ('1H873ijvDfxfjcGxVVaZaTeCkS7gzgiuqN', 'Grayscale', 'Grayscale GBTC ETF 783', 'GBTC')     , ('14zhA7UNUfNVhU1d9C9fCytVYRrvq7APrp', 'Grayscale', 'Grayscale GBTC ETF 784', 'GBTC')     , ('131pcgzUAa5dw8dZcGmefKjdZuookHjWTk', 'Grayscale', 'Grayscale GBTC ETF 785', 'GBTC')     , ('1FDsbwfidSSGYC7pTR84p3RHaTzCSTYB3S', 'Grayscale', 'Grayscale GBTC ETF 786', 'GBTC')     , ('1nak25iCTR1mMVUKtmNXLTFPogfqZdsWL', 'Grayscale', 'Grayscale GBTC ETF 787', 'GBTC')     , ('18VzpmLTRyQijvPXCvCdzL6RBQ1eVd875v', 'Grayscale', 'Grayscale GBTC ETF 788', 'GBTC')     , ('13muK73goFQqcrgZdgpnFpiZQY4JS8QRyn', 'Grayscale', 'Grayscale GBTC ETF 789', 'GBTC')     , ('1Gmvdou4knnUBgH3StgrBTKMmoFGhWxMjJ', 'Grayscale', 'Grayscale GBTC ETF 790', 'GBTC')     , ('16sx2S6GPn54rJWdvshtvDHcVqCczsasJ8', 'Grayscale', 'Grayscale GBTC ETF 791', 'GBTC')     , ('1NKnSKwJTxYC1yJeJddeyevaB2q3PZgKAC', 'Grayscale', 'Grayscale GBTC ETF 792', 'GBTC')     , ('1DTXMwaBJXvU8D6KmTBguaokcajo21YBw5', 'Grayscale', 'Grayscale GBTC ETF 793', 'GBTC')     , ('1HBZKqUNrm4hQnFXondomfBYfPheSK4yPc', 'Grayscale', 'Grayscale GBTC ETF 794', 'GBTC')     , ('1MmhraEfNVSDGQ5ioKHgsriWqhfoQeqVbM', 'Grayscale', 'Grayscale GBTC ETF 795', 'GBTC')     , ('1DtdMtJL2zggkoFPDbEbM2Ja1EYH8LeH9B', 'Grayscale', 'Grayscale GBTC ETF 796', 'GBTC')     , ('14n1qDinwFyccyetRRC44ecgVgWtG6FmeV', 'Grayscale', 'Grayscale GBTC ETF 797', 'GBTC')     , ('13cx4Hx3gAkxGFbcUQaxt8xVEdgp84Z8AV', 'Grayscale', 'Grayscale GBTC ETF 798', 'GBTC')     , ('1HhzgSRwttCUy5AGiaonELLt6iamioQf5y', 'Grayscale', 'Grayscale GBTC ETF 799', 'GBTC')     , ('1A2C9bN8etZLxamE91RMTqHBnEyBKg7i9', 'Grayscale', 'Grayscale GBTC ETF 800', 'GBTC')     , ('1Jkt5Vks5fncvMU4eei5jtKvD665z77VD', 'Grayscale', 'Grayscale GBTC ETF 801', 'GBTC')     , ('1BwJMvoKUGiJppTcDVXBMuJcPZDQiSMQWD', 'Grayscale', 'Grayscale GBTC ETF 802', 'GBTC')     , ('1kQRTQpEn1yp63pHmSR19CLgnBVdgQze1', 'Grayscale', 'Grayscale GBTC ETF 803', 'GBTC')     , ('1P1Z859Mpm4ixA67zpsNwDEzGcfTSE795V', 'Grayscale', 'Grayscale GBTC ETF 804', 'GBTC')     , ('13W5rzdJTdhvaLUHyAVs4eymYD13cwzvkX', 'Grayscale', 'Grayscale GBTC ETF 805', 'GBTC')     , ('1DLm5hFsLsQViJUUy4WoHcuNPEpefpUssP', 'Grayscale', 'Grayscale GBTC ETF 806', 'GBTC')     , ('19kH8VP4TsrSmBPcDaTcWQqQXnMkrdxVXB', 'Grayscale', 'Grayscale GBTC ETF 807', 'GBTC')     , ('18qwkni82sm3dkYUdBS9xPumB1MNf9GRNu', 'Grayscale', 'Grayscale GBTC ETF 808', 'GBTC')     , ('15TdjMUfeRKMCQA3KdP2nJ33DUFzZ5jU4U', 'Grayscale', 'Grayscale GBTC ETF 809', 'GBTC')     , ('12kCiq8K8UQEid4RtQHRBeWc6cY6U2EMVg', 'Grayscale', 'Grayscale GBTC ETF 810', 'GBTC')     , ('15epgoa7Pej8jX2H11rVGnxN4JzswCurwy', 'Grayscale', 'Grayscale GBTC ETF 811', 'GBTC')     , ('1Ep1WPAFgdS8YYHyxfHAvgBszZLBNctJ19', 'Grayscale', 'Grayscale GBTC ETF 812', 'GBTC')     , ('1PhBHT4phzQyKGPCM5yWQfBjE8iQR9ZHsp', 'Grayscale', 'Grayscale GBTC ETF 813', 'GBTC')     , ('1N4XLnQ2nH1vVzTU8rSuUEqWfJatESBQLJ', 'Grayscale', 'Grayscale GBTC ETF 814', 'GBTC')     , ('1KsYCaxC6EJ9WgPjYRH2fYn5QUqLVRm62P', 'Grayscale', 'Grayscale GBTC ETF 815', 'GBTC')     , ('13U6uwfFC7mkZ4wv4LDJAdbjNgLyqxqrpk', 'Grayscale', 'Grayscale GBTC ETF 816', 'GBTC')     , ('1CN4XT8Hif4PuzsCLTpkBLfVrwDzcymwUN', 'Grayscale', 'Grayscale GBTC ETF 817', 'GBTC')     , ('1GGBwsinUQc29dkSMY2rVRQ5B6HnZBrckJ', 'Grayscale', 'Grayscale GBTC ETF 818', 'GBTC')     , ('18RZCsDqnVpp63SfJJ4dFixT4XUxjGNf7H', 'Grayscale', 'Grayscale GBTC ETF 819', 'GBTC')     , ('13TkihECnvPbJMZ8y5Yxpf5aTpm3gnGHrd', 'Grayscale', 'Grayscale GBTC ETF 820', 'GBTC')     , ('1A5LTPi1nNpV3wipDhpGqDBvhsFGDvYikv', 'Grayscale', 'Grayscale GBTC ETF 821', 'GBTC')     , ('16334f5pYqViGZ7jPp7sikB81R5X3R1eaF', 'Grayscale', 'Grayscale GBTC ETF 822', 'GBTC')     , ('1GcCwf7YyDGoBXqiSeYX7mHzAKdHehuPYg', 'Grayscale', 'Grayscale GBTC ETF 823', 'GBTC')     , ('121jC7EXZLjEU8KuZ9xNRKnYc4ipSwJ9GB', 'Grayscale', 'Grayscale GBTC ETF 824', 'GBTC')     , ('1FCM7KjXdhkCZigeWpDwJYbSKgxU9LWLtX', 'Grayscale', 'Grayscale GBTC ETF 825', 'GBTC')     , ('1BMabGRiB5fCcj8CCCnQPhsBBhfHLoWJRJ', 'Grayscale', 'Grayscale GBTC ETF 826', 'GBTC')     , ('1A4Dqetxx51Ay3X5vt3sLwHs61QEcaqxQR', 'Grayscale', 'Grayscale GBTC ETF 827', 'GBTC')     , ('112MxFjsiQptGVh27qTpPaYUsgb5vzQ3oz', 'Grayscale', 'Grayscale GBTC ETF 828', 'GBTC')     , ('169ZwCbmihvYYrAEGbD55LrHsnV9msVseo', 'Grayscale', 'Grayscale GBTC ETF 829', 'GBTC')     , ('156bGsFwcaaPjqTfLHMTQHd46MVvu2j8o8', 'Grayscale', 'Grayscale GBTC ETF 830', 'GBTC')     , ('161qW1EeYVqKXH6oyCHbcHJHhbQHfPGeJB', 'Grayscale', 'Grayscale GBTC ETF 831', 'GBTC')     , ('16eqaEGhLKPnRLGwdMXj6nyCW5h7VaMEjS', 'Grayscale', 'Grayscale GBTC ETF 832', 'GBTC')     , ('187TVN9YsraeFz5UUah2uVjxpvStBqm8iY', 'Grayscale', 'Grayscale GBTC ETF 833', 'GBTC')     , ('199x9GoJRmpwED5PHB8thjhXs1J2Dg7b24', 'Grayscale', 'Grayscale GBTC ETF 834', 'GBTC')     , ('1HWuQ7pqPGdwq1DftmmqZirtb2e9naCx5', 'Grayscale', 'Grayscale GBTC ETF 835', 'GBTC')     , ('1623ybSCpMCnbNu4tTmdT5jTGBBarhXNyT', 'Grayscale', 'Grayscale GBTC ETF 836', 'GBTC')     , ('1CpEa1Rtp6eZA4SMyYgwj6ZAuCSz8TE7xr', 'Grayscale', 'Grayscale GBTC ETF 837', 'GBTC')     , ('15HUgQkXLVh5PuTeu1cdsArG1hhk6vSquq', 'Grayscale', 'Grayscale GBTC ETF 838', 'GBTC')     , ('16Xurv4dag5FK4Rwk6QwTqaJh6m7S1dozN', 'Grayscale', 'Grayscale GBTC ETF 839', 'GBTC')     , ('1ARkf7J3hH7pTKfrqogcoUqwNWjgnpP5YA', 'Grayscale', 'Grayscale GBTC ETF 840', 'GBTC')     , ('14bGxBTEfSvqAtpFrc1Po3eobfMPZb3WyK', 'Grayscale', 'Grayscale GBTC ETF 841', 'GBTC')     , ('1AdGEQrwFXbjqrzFCY5xZbAi1RTaGTNTd1', 'Grayscale', 'Grayscale GBTC ETF 842', 'GBTC')     , ('1D2VCbyX8hkY8sjjjqSKjpa9JZH33CS6wy', 'Grayscale', 'Grayscale GBTC ETF 843', 'GBTC')     , ('124MkyzGrjuuxxouJiYPftBhkd8C5XP9xb', 'Grayscale', 'Grayscale GBTC ETF 844', 'GBTC')     , ('1NhYLNxzWQdqyL2QP3nMxVaAnUEE1dWPLw', 'Grayscale', 'Grayscale GBTC ETF 845', 'GBTC')     , ('17QD9Vu9UmEWMGfcoD32Y2wFj68J4FvJ7Q', 'Grayscale', 'Grayscale GBTC ETF 846', 'GBTC')     , ('1HcRMSRQ2y9cHXjnTfZcaf6zZis3ecsX6s', 'Grayscale', 'Grayscale GBTC ETF 847', 'GBTC')     , ('17RJN29mbRXBThEMhPr7nzgmugkPZvRihX', 'Grayscale', 'Grayscale GBTC ETF 848', 'GBTC')     , ('1Pc9gjNhrrsycyXu8umCtKR9DGckko5d8B', 'Grayscale', 'Grayscale GBTC ETF 849', 'GBTC')     , ('1Ew5Wd3wHB89szBmDmZWkS2WAhbQ2iBLh3', 'Grayscale', 'Grayscale GBTC ETF 850', 'GBTC')     , ('1M1Mqsv97s8FpBg31Mefcw8oEvycBx7o47', 'Grayscale', 'Grayscale GBTC ETF 851', 'GBTC')     , ('1DEDceXSCFG5njoWb9rXusU1mMwQEJcWrq', 'Grayscale', 'Grayscale GBTC ETF 852', 'GBTC')     , ('1DjS64h9TnvWAamtbqQyPT4vnzxS3tp9Xf', 'Grayscale', 'Grayscale GBTC ETF 853', 'GBTC')     , ('1GQN7TpPX1EoANFeYuMZgmKxPMPWa5nEJq', 'Grayscale', 'Grayscale GBTC ETF 854', 'GBTC')     , ('1BMJYwbxpH2e6MhLFEgzomz4ixo3zDSrjE', 'Grayscale', 'Grayscale GBTC ETF 855', 'GBTC')     , ('1BfD4Tfciect6kWsFXxTZ7rcHaEWBPpLeG', 'Grayscale', 'Grayscale GBTC ETF 856', 'GBTC')     , ('1GVqTWhWJTkL8yWyjmPZY6XEUWxaADz3tj', 'Grayscale', 'Grayscale GBTC ETF 857', 'GBTC')     , ('1McNYPrpebVgE3bEkeiDop7rVFn2WNxRhX', 'Grayscale', 'Grayscale GBTC ETF 858', 'GBTC')     , ('1C57rJQpyNrNw3GquoboX99uYGRvNVWWqq', 'Grayscale', 'Grayscale GBTC ETF 859', 'GBTC')     , ('1LzyKpUtQzh7BW4sYnv8xsdBoonX9uv5km', 'Grayscale', 'Grayscale GBTC ETF 860', 'GBTC')     , ('1Bt1mjDCZDpidaYcSdtYhPZSeMU5RZbuKo', 'Grayscale', 'Grayscale GBTC ETF 861', 'GBTC')     , ('162N3T1Kw2M8AtBtpQnyxLKYLaeditWWAp', 'Grayscale', 'Grayscale GBTC ETF 862', 'GBTC')     , ('1HoSPcBAdieUAz5EQxPJQrnpiNZbJK6Yab', 'Grayscale', 'Grayscale GBTC ETF 863', 'GBTC')     , ('1G8EWgNWvpXGDvP7NaDn3cbdk6jbiBXn11', 'Grayscale', 'Grayscale GBTC ETF 864', 'GBTC')     , ('19UpKnPfKqTEFu3rk7urnQPZaYM3QMM1en', 'Grayscale', 'Grayscale GBTC ETF 865', 'GBTC')     , ('1AfE7NaPqhgjXYcMxssDF5ibJKh8HGatTa', 'Grayscale', 'Grayscale GBTC ETF 866', 'GBTC')     , ('12ScZLDptUGuwttPT1nf3FFcpEMX58QMQp', 'Grayscale', 'Grayscale GBTC ETF 867', 'GBTC')     , ('1D55Us5VdJyHEJg8zTzPj8cfijsgMzmHDV', 'Grayscale', 'Grayscale GBTC ETF 868', 'GBTC')     , ('161LKpKyFVVLapwK5iEBecune14QA1WWbg', 'Grayscale', 'Grayscale GBTC ETF 869', 'GBTC')     , ('1DWnHG26EncXhig5rQeMiSdq2hwzk9u2Xr', 'Grayscale', 'Grayscale GBTC ETF 870', 'GBTC')     , ('1FhCo44yyQKisFbT2fNSGmGtQZQBxC91bx', 'Grayscale', 'Grayscale GBTC ETF 871', 'GBTC')     , ('1NuRmYFYGZZwN1DRaWDJBRJ4ZSaExsF8SM', 'Grayscale', 'Grayscale GBTC ETF 872', 'GBTC')     , ('1NDbqTm8hpMs4D1GgTvvZ1YizUWuZ2AqMw', 'Grayscale', 'Grayscale GBTC ETF 873', 'GBTC')     , ('18PdL3giCkyv5bqJbnYw4zA9LByJbGMFSP', 'Grayscale', 'Grayscale GBTC ETF 874', 'GBTC')     , ('1JMgrkSeRfroZtBhBRz1oMscQP1iD1pgRY', 'Grayscale', 'Grayscale GBTC ETF 875', 'GBTC')     , ('1E7zSSPyq92UmVc4ChW3Se9ZCK2rCf4cYw', 'Grayscale', 'Grayscale GBTC ETF 876', 'GBTC')     , ('1AmoVwB2Ux28U93j5gR1zWQd41EuQ7Wco8', 'Grayscale', 'Grayscale GBTC ETF 877', 'GBTC')     , ('1KtQuGtVMeon6W8drDQjRKdeAc131jnLGA', 'Grayscale', 'Grayscale GBTC ETF 878', 'GBTC')     , ('1FPfjxMYZtqQsXjkZyFyetzvRGxzkpZ967', 'Grayscale', 'Grayscale GBTC ETF 879', 'GBTC')     , ('18vLsCE839VWp9vkDBLbMvEb7q16jvSLAL', 'Grayscale', 'Grayscale GBTC ETF 880', 'GBTC')     , ('1KdnzXWxiEmRLDxzkH7LeMSr3cXWen8RoB', 'Grayscale', 'Grayscale GBTC ETF 881', 'GBTC')     , ('14BjyNB1GvXCcjUoPnQ9hRqF2LJCykMZ5T', 'Grayscale', 'Grayscale GBTC ETF 882', 'GBTC')     , ('1DZYf7EeMpBd2ubUgvi8MWU8dHe5H8YLrY', 'Grayscale', 'Grayscale GBTC ETF 883', 'GBTC')     , ('1MG6mjYMPiUBA48611TBTU5Ubizs2HSdVr', 'Grayscale', 'Grayscale GBTC ETF 884', 'GBTC')     , ('1Lu6F4FH78hB21toQSTbEpVjFsoYFpRCjx', 'Grayscale', 'Grayscale GBTC ETF 885', 'GBTC')     , ('1165Eku4F9QJCpg9QArKKLTeZMNPSPfqy', 'Grayscale', 'Grayscale GBTC ETF 886', 'GBTC')     , ('1HJoeTfk9V6p1RyPuXLuCrQsJawFHKyVcd', 'Grayscale', 'Grayscale GBTC ETF 887', 'GBTC')     , ('14eDFwyGLdSR5jN1sjXksKNWZHfX1brDww', 'Grayscale', 'Grayscale GBTC ETF 888', 'GBTC')     , ('177M84u32dxh2m4zMMYDE2aqV7978872bo', 'Grayscale', 'Grayscale GBTC ETF 889', 'GBTC')     , ('1GyBy9k1yKbeDz4GS2Mk6QJwGhTqCGdPa8', 'Grayscale', 'Grayscale GBTC ETF 890', 'GBTC')     , ('1Ktq9Ct2Qi37i7TKTyba9aCs32JrQD8noo', 'Grayscale', 'Grayscale GBTC ETF 891', 'GBTC')     , ('1GxQ8z3JU8sg1B3EEQQbj8ViywYaT5iSBj', 'Grayscale', 'Grayscale GBTC ETF 892', 'GBTC')     , ('1LYc3UbpCfUgK63JmHTtdtiXQfb9LpiBUP', 'Grayscale', 'Grayscale GBTC ETF 893', 'GBTC')     , ('12BeKHQVH1pXjaPBtRXiuwyxZxuzQCmUk8', 'Grayscale', 'Grayscale GBTC ETF 894', 'GBTC')     , ('19LTzpxbAbnCYhjupVtGNnye89P7gqCnYr', 'Grayscale', 'Grayscale GBTC ETF 895', 'GBTC')     , ('1EZWtmphHSQExbTFBDEkHHUKbxdQofq9AT', 'Grayscale', 'Grayscale GBTC ETF 896', 'GBTC')     , ('1N3S7uZEpguwAvBYKJUJpTLCoRr7ep15RV', 'Grayscale', 'Grayscale GBTC ETF 897', 'GBTC')     , ('13k7mMAmruM1W2sRAZMdtLhnt2di6jhKRX', 'Grayscale', 'Grayscale GBTC ETF 898', 'GBTC')     , ('1Esx3TCmd2c9fpNXZkEDaHvayTj1TcBULR', 'Grayscale', 'Grayscale GBTC ETF 899', 'GBTC')     , ('1AeWuHkYKZuU9wDkvJrGKhUffht4F1pmDi', 'Grayscale', 'Grayscale GBTC ETF 900', 'GBTC')     , ('14fZwbFyjn3S2TMAusifr8qJAJLnCMs1EL', 'Grayscale', 'Grayscale GBTC ETF 901', 'GBTC')     , ('1CFu9j28KkLPwZ5oymj1rCv39wKMCw1Qpa', 'Grayscale', 'Grayscale GBTC ETF 902', 'GBTC')     , ('18hsYCcp1PSzC44Emm2o7iPZuYpS5LdbVW', 'Grayscale', 'Grayscale GBTC ETF 903', 'GBTC')     , ('146kjArpSNJ3DBfyqmWzWQ3X88DMjwqBZV', 'Grayscale', 'Grayscale GBTC ETF 904', 'GBTC')     , ('1741B5TwnHTcsVom4FVuggFBe8v2oPUw9N', 'Grayscale', 'Grayscale GBTC ETF 905', 'GBTC')     , ('16RW2CcnnT74wA9uqHAGoxhjmcZcK7Rspj', 'Grayscale', 'Grayscale GBTC ETF 906', 'GBTC')     , ('1Pwf3h6zvwVF3QCr6iNkUnP4skAyBXpQcD', 'Grayscale', 'Grayscale GBTC ETF 907', 'GBTC')     , ('1NGnSLw4L9uRTGFhYFcE7zio5mKCySPRNr', 'Grayscale', 'Grayscale GBTC ETF 908', 'GBTC')     , ('1CM16odGABHF1KvNwW3YnyVQXFV1r9Totn', 'Grayscale', 'Grayscale GBTC ETF 909', 'GBTC')     , ('1PnhRoqa9YJHugnaEGpJ8L979HM4r6TaLS', 'Grayscale', 'Grayscale GBTC ETF 910', 'GBTC')     , ('14dJvQAKFeB9UPkQYyxGvjXGEANQ4JwzuK', 'Grayscale', 'Grayscale GBTC ETF 911', 'GBTC')     , ('1Nyxxz2WWSbzu6FUicYxkPUbdF8Wt52RMJ', 'Grayscale', 'Grayscale GBTC ETF 912', 'GBTC')     , ('1FkigwrYLz1uWceyLTr8cNN7NM8tC6yC9c', 'Grayscale', 'Grayscale GBTC ETF 913', 'GBTC')     , ('1EJne3CDJ2w46XePnbXjvLsWr5EGNPMVcx', 'Grayscale', 'Grayscale GBTC ETF 914', 'GBTC')     , ('1MkLPWh9ZqBQX4swdhmoeNvQnYqufwCfhD', 'Grayscale', 'Grayscale GBTC ETF 915', 'GBTC')     , ('19dSC6BE68tWunHwGYA3FW2n5LhnGnoDWG', 'Grayscale', 'Grayscale GBTC ETF 916', 'GBTC')     , ('1Bd5ozCyyaJHbqPdLZToaANPZeMc2KhDiQ', 'Grayscale', 'Grayscale GBTC ETF 917', 'GBTC')     , ('1D2Z8W7vbwjGzjb5zgxU8CfQknbrfA3mxs', 'Grayscale', 'Grayscale GBTC ETF 918', 'GBTC')     , ('1AUajYppSrKvfMvau3AoGzLw8VAryp8eaE', 'Grayscale', 'Grayscale GBTC ETF 919', 'GBTC')     , ('12BZLzgY5ztraa5iUtnf2y7QSpkAw82qvY', 'Grayscale', 'Grayscale GBTC ETF 920', 'GBTC')     , ('1KphcdGQ6XrbrRA7CZLwPAihcLyNrxQLfP', 'Grayscale', 'Grayscale GBTC ETF 921', 'GBTC')     , ('1CEL7p7owPFK4nx9xBVNNrNu6yPvzR4p7m', 'Grayscale', 'Grayscale GBTC ETF 922', 'GBTC')     , ('1xGg4CuA7ouAHY2HZX7C5m4hNB3Q9FAXz', 'Grayscale', 'Grayscale GBTC ETF 923', 'GBTC')     , ('14MpADT2wPiSxu2prmqTML33EXAcMs3LYa', 'Grayscale', 'Grayscale GBTC ETF 924', 'GBTC')     , ('15jff6Gi4RjZ3jsyZovqCh3GFH6A9w3xAy', 'Grayscale', 'Grayscale GBTC ETF 925', 'GBTC')     , ('1Cu91EbTSnoQ1qdfnVABVvBWaRnfxnBb6M', 'Grayscale', 'Grayscale GBTC ETF 926', 'GBTC')     , ('1C7W9HLjjN39jL29e2ojaYXBbsZn9MpyWi', 'Grayscale', 'Grayscale GBTC ETF 927', 'GBTC')     , ('1DnTZ8L5A1yWB9SNeT186kfQhZ3prrwGjk', 'Grayscale', 'Grayscale GBTC ETF 928', 'GBTC')     , ('1GQHRmSfB7dxcpoFCqz1VdMXakQtYhS5p4', 'Grayscale', 'Grayscale GBTC ETF 929', 'GBTC')     , ('1Dqdv5L85MpgnvPywd6C9uETG3qP114brL', 'Grayscale', 'Grayscale GBTC ETF 930', 'GBTC')     , ('1CygCcebHSpXadBGB9StEx2d4FYUmE7RZA', 'Grayscale', 'Grayscale GBTC ETF 931', 'GBTC')     , ('13Caa9FFGrLNpJLRVLhDzt9UBpTDVQe4BS', 'Grayscale', 'Grayscale GBTC ETF 932', 'GBTC')     , ('1NEo8r4zibUj7vn6RDH59Qo4MYdujY2pMg', 'Grayscale', 'Grayscale GBTC ETF 933', 'GBTC')     , ('1AnJw9iNQRz39d4DQhPz4zyoSUgEenbkSr', 'Grayscale', 'Grayscale GBTC ETF 934', 'GBTC')     , ('123SVEt5DQvvq18hP9AaZ5VsWbFB81jkMR', 'Grayscale', 'Grayscale GBTC ETF 935', 'GBTC')     , ('129nzLMwMR3761QRqZDueFEguBGpmSk2jH', 'Grayscale', 'Grayscale GBTC ETF 936', 'GBTC')     , ('1NQ8Dp3Sp6c4TAJZe9qUhSBxC4KFThfsBv', 'Grayscale', 'Grayscale GBTC ETF 937', 'GBTC')     , ('1FZQzLbnwVMazRAnHr7yTaq5vSbDwcdanN', 'Grayscale', 'Grayscale GBTC ETF 938', 'GBTC')     , ('12bWVtTSft9HefnmoDvcvcGavjF6rkpfwF', 'Grayscale', 'Grayscale GBTC ETF 939', 'GBTC')     , ('1AosuE9jVVJr7WWQ7DyrK5kraRgatoywkt', 'Grayscale', 'Grayscale GBTC ETF 940', 'GBTC')     , ('1A55QTKANJdzLEzRTRVrbcf9Zg74Gsmuet', 'Grayscale', 'Grayscale GBTC ETF 941', 'GBTC')     , ('1LujrEzhFbPXYndAMvYHCAo8mNCEFTNUDY', 'Grayscale', 'Grayscale GBTC ETF 942', 'GBTC')     , ('15V4UBzbCaRR2KT9mcav5EKJkoNE9kXv2D', 'Grayscale', 'Grayscale GBTC ETF 943', 'GBTC')     , ('1QCD7uAQd8ceGxy68MVecMu7A4Ua5NjesY', 'Grayscale', 'Grayscale GBTC ETF 944', 'GBTC')     , ('15F9KyqQJHvEnUPZYWGMMk4kAe2xrxMZyF', 'Grayscale', 'Grayscale GBTC ETF 945', 'GBTC')     , ('1Hb18xEfejNnKyFYRmAd9jfLLXzLQGYrs1', 'Grayscale', 'Grayscale GBTC ETF 946', 'GBTC')     , ('17HFx2UQ3fX2zmtQH4oeCp2yoF8zUJGUPR', 'Grayscale', 'Grayscale GBTC ETF 947', 'GBTC')     , ('1JU4heWz2MHant4jLqDhEDCXH47YWpDAyV', 'Grayscale', 'Grayscale GBTC ETF 948', 'GBTC')     , ('1NoiNUmaN4wJ1XTE3BGusLxqgZ1y4DGG1v', 'Grayscale', 'Grayscale GBTC ETF 949', 'GBTC')     , ('18yGMiT4tXVzF7MmV3sukEC3bdLrnjkXQw', 'Grayscale', 'Grayscale GBTC ETF 950', 'GBTC')     , ('16LuEHoqkAC34iXL38NCErsHzSWGHczTJr', 'Grayscale', 'Grayscale GBTC ETF 951', 'GBTC')     , ('1EVYLGVbHX9kNaSLUihp54ba5bYHqw2Jeq', 'Grayscale', 'Grayscale GBTC ETF 952', 'GBTC')     , ('1KnDWXv5GPsNtxri6HgxbSe8yx9FecqPVd', 'Grayscale', 'Grayscale GBTC ETF 953', 'GBTC')     , ('16pDfuDvbjr6gLeXJY3B5idh3s1K6Q5YpH', 'Grayscale', 'Grayscale GBTC ETF 954', 'GBTC')     , ('1KY8Rmu7ViafQcrV5TDyBgCVWrepJCwNeq', 'Grayscale', 'Grayscale GBTC ETF 955', 'GBTC')     , ('19NnFzZ3B4bRUUgGY2r4L2W2mQ2V68FeU6', 'Grayscale', 'Grayscale GBTC ETF 956', 'GBTC')     , ('1L6cZzHAfi8YMPYXw3FgtVMLxtm6g4xtT5', 'Grayscale', 'Grayscale GBTC ETF 957', 'GBTC')     , ('1492d56u3FH8arydnXGhZMHwsveVG1BYRe', 'Grayscale', 'Grayscale GBTC ETF 958', 'GBTC')     , ('1JwpXwHeAnxBHtT3YRMQ84rEGA2Kvp2Qqg', 'Grayscale', 'Grayscale GBTC ETF 959', 'GBTC')     , ('16giDpnKPyuEF6hwK3z5mZ8MFmEnkyUjVt', 'Grayscale', 'Grayscale GBTC ETF 960', 'GBTC')     , ('134riPchUMHQhW8JWY3Jy44pXwH2rJeKX2', 'Grayscale', 'Grayscale GBTC ETF 961', 'GBTC')     , ('1YfGwjnuRdfBBxCQMrrhhmkpwD3aaFBXd', 'Grayscale', 'Grayscale GBTC ETF 962', 'GBTC')     , ('14chXu9U3UMaejMN1gdn4kFgD6ATbNbbZx', 'Grayscale', 'Grayscale GBTC ETF 963', 'GBTC')     , ('1DvuyuukA7ddDmvuuLHTYYCf93aGV8k32m', 'Grayscale', 'Grayscale GBTC ETF 964', 'GBTC')     , ('1BuZVyefTeBvmGSZmVbZAdEkZNK7qFv2Yv', 'Grayscale', 'Grayscale GBTC ETF 965', 'GBTC')     , ('15hW1WTheXdmRzdjup7g16UFi99tfWkELe', 'Grayscale', 'Grayscale GBTC ETF 966', 'GBTC')     , ('1DtTRRjvPqHmn2SYqELXETTurSegvSuMLU', 'Grayscale', 'Grayscale GBTC ETF 967', 'GBTC')     , ('15erkW4cL3ZVkMsbut3eWJrGsn6LbMnLf2', 'Grayscale', 'Grayscale GBTC ETF 968', 'GBTC')     , ('1E1W2NA9bbSCiky47YAPGe9b6uZcs3K5bU', 'Grayscale', 'Grayscale GBTC ETF 969', 'GBTC')     , ('14Y5gjwT1zCCn5SPQN5ofmKBBS4WEUe9P7', 'Grayscale', 'Grayscale GBTC ETF 970', 'GBTC')     , ('16EDXVyc7dbQVV7RU39Hi2rZegLBgxS4fh', 'Grayscale', 'Grayscale GBTC ETF 971', 'GBTC')     , ('1QDh5RE5qUEhZNgNhW3AjLGfxi21hyPd8', 'Grayscale', 'Grayscale GBTC ETF 972', 'GBTC')     , ('12VuqaarnmuXMBpjUidus8eTPojT5DkFif', 'Grayscale', 'Grayscale GBTC ETF 973', 'GBTC')     , ('1G5gwZk2wgLfx6mottBbP2ZKN5LtzLLS3Q', 'Grayscale', 'Grayscale GBTC ETF 974', 'GBTC')     , ('1JJPoRKxB1HnaipDa3a7scxU9SDnDEWXf6', 'Grayscale', 'Grayscale GBTC ETF 975', 'GBTC')     , ('1hk5vdFBKDhWwLPvTN7bxgRFHEGaYKWMo', 'Grayscale', 'Grayscale GBTC ETF 976', 'GBTC')     , ('13Pje21evQZ8CJcNMx3wAbVnHPzh8N9WkK', 'Grayscale', 'Grayscale GBTC ETF 977', 'GBTC')     , ('1A48Nqi9L4NGUnSvfKrrTxymL1KuwhAwF3', 'Grayscale', 'Grayscale GBTC ETF 978', 'GBTC')     , ('17kGx3hGyaBMMwHmhsPrBuHWU9p7LVihBA', 'Grayscale', 'Grayscale GBTC ETF 979', 'GBTC')     , ('16gAc5QxwdpaNQfpcX6oqtMdDisfacDDca', 'Grayscale', 'Grayscale GBTC ETF 980', 'GBTC')     , ('1HRiaCBU1A5EF1nePWh26AXsJT3aBHiwwf', 'Grayscale', 'Grayscale GBTC ETF 981', 'GBTC')     , ('197tTZBw1TkTeSW7gSxUcyHA8SR7NBLLoi', 'Grayscale', 'Grayscale GBTC ETF 982', 'GBTC')     , ('1CHoSwxAEMdMAidWHXxpytC4fWHdzC7VUa', 'Grayscale', 'Grayscale GBTC ETF 983', 'GBTC')     , ('1CXeHoJpxsnUK1k6RgrkNafesP86JGDWzf', 'Grayscale', 'Grayscale GBTC ETF 984', 'GBTC')     , ('166uCyDraMPiYSRXmuTdYBsGxsf2HH8MDS', 'Grayscale', 'Grayscale GBTC ETF 985', 'GBTC')     , ('18aAqhikhmTz7j4NBrtxqmLftb1VdLprP', 'Grayscale', 'Grayscale GBTC ETF 986', 'GBTC')     , ('1ESG7T2KJcN7Ur6Jwin5uuaQperkLrAUT7', 'Grayscale', 'Grayscale GBTC ETF 987', 'GBTC')     , ('14zeVumCaaKSdJ4gp7M1oxSiYVPKTahmFW', 'Grayscale', 'Grayscale GBTC ETF 988', 'GBTC')     , ('1LaA5RnbT78A1HwsdAHTQGJAvq88pjDCsQ', 'Grayscale', 'Grayscale GBTC ETF 989', 'GBTC')     , ('1M2uz6T1eNpvD1xwaUuQQuEF1j4ZLbw9M1', 'Grayscale', 'Grayscale GBTC ETF 990', 'GBTC')     , ('1BTt3K7VMVfKjMh9qrT3hrdwQEPN38AVhw', 'Grayscale', 'Grayscale GBTC ETF 991', 'GBTC')     , ('18tojWToGWEHi22Fms2bFHqb2wp65SPJm9', 'Grayscale', 'Grayscale GBTC ETF 992', 'GBTC')     , ('1DrM6sg65oSWsD3Euu3VEH5XzTuxYVshL5', 'Grayscale', 'Grayscale GBTC ETF 993', 'GBTC')     , ('1M2wBro3BWk1VVArVVdHoo1gHHqr4GqG7U', 'Grayscale', 'Grayscale GBTC ETF 994', 'GBTC')     , ('1N6kUpbJGFkriXKKLtNy9FySP7qMcpRHgQ', 'Grayscale', 'Grayscale GBTC ETF 995', 'GBTC')     , ('1AMZjLbXH1f4HywuNWWFDK38b1VFfH3zgk', 'Grayscale', 'Grayscale GBTC ETF 996', 'GBTC')     , ('1CL5usnQM8kuapZckFNB2VsMQL6BrSsgET', 'Grayscale', 'Grayscale GBTC ETF 997', 'GBTC')     , ('13UUCGuYLx1PptzesX4Fdjga9YYeSCR9xc', 'Grayscale', 'Grayscale GBTC ETF 998', 'GBTC')     , ('18CkLGqYCEk2W6TGMGkPYzGVDomXd3yDcs', 'Grayscale', 'Grayscale GBTC ETF 999', 'GBTC')     , ('14eVrFdskLsz81gkiSk72bXikfBfERUJ3K', 'Grayscale', 'Grayscale GBTC ETF 1000', 'GBTC')     , ('1N4T3WdTAvMw8noTAeWE3rg3qLvWhT5euq', 'Grayscale', 'Grayscale GBTC ETF 1001', 'GBTC')     , ('1NYDDjXnWKUjsNbc39z94om1ky5bi55wbj', 'Grayscale', 'Grayscale GBTC ETF 1002', 'GBTC')     , ('1ECkdC9My52noK1Mv1EabYMsFkKxRZDoSE', 'Grayscale', 'Grayscale GBTC ETF 1003', 'GBTC')     , ('13YNX3Fzax4rwVXP93cdjbuUF9Es9y1P8j', 'Grayscale', 'Grayscale GBTC ETF 1004', 'GBTC')     , ('138uriJgKfia68PJPoN6LzvzKhEUsjHGKr', 'Grayscale', 'Grayscale GBTC ETF 1005', 'GBTC')     , ('1LyvdCk1LRAh3eca9VzPNyfpCA2ynmdXMQ', 'Grayscale', 'Grayscale GBTC ETF 1006', 'GBTC')     , ('18sJZbuzrrU7paemGJ8wFqDryvnaegJptF', 'Grayscale', 'Grayscale GBTC ETF 1007', 'GBTC')     , ('1PyqRdbwSi2oQQHcA8bHsHWkYkkRDBNRwJ', 'Grayscale', 'Grayscale GBTC ETF 1008', 'GBTC')     , ('1FN3dWD8zfgkj2vrJuXvkNSk1Z4F3W3BTR', 'Grayscale', 'Grayscale GBTC ETF 1009', 'GBTC')     , ('1DuDxFtuX8JrcfK6sZNqvQKUhbCov6einX', 'Grayscale', 'Grayscale GBTC ETF 1010', 'GBTC')     , ('1HVpDZw3gjG8g3VaYASaTmyp8GMpJpc2as', 'Grayscale', 'Grayscale GBTC ETF 1011', 'GBTC')     , ('13VpYd6LZVfgiEev1cSVuimK2FpsCMC5bH', 'Grayscale', 'Grayscale GBTC ETF 1012', 'GBTC')     , ('13Gc7anjcXfueGBuaqPS6Gnv1MZgfmiruz', 'Grayscale', 'Grayscale GBTC ETF 1013', 'GBTC')     , ('1APjgd2m67bP9DpQ7Yezekr9U8C1uCxZua', 'Grayscale', 'Grayscale GBTC ETF 1014', 'GBTC')     , ('16cGS85e7wfKg9XXpifNiqGvoNz8doBf1Y', 'Grayscale', 'Grayscale GBTC ETF 1015', 'GBTC')     , ('1GfHFQ8pbn3izphNjtGHVABQQ1eUHTLDsf', 'Grayscale', 'Grayscale GBTC ETF 1016', 'GBTC')     , ('1QF1p9BehXkLuVn2ZQ6Fq46BxyZ15dZCf', 'Grayscale', 'Grayscale GBTC ETF 1017', 'GBTC')     , ('15pFPbR4xSQHPjwqmgdJpN6JnV9uGnG9Ga', 'Grayscale', 'Grayscale GBTC ETF 1018', 'GBTC')     , ('1J6aVYfPvRKxscrt2vgsZX9UGvXHTnV9rD', 'Grayscale', 'Grayscale GBTC ETF 1019', 'GBTC')     , ('1CLSg6Y62RYE95t4HC8BmLRteHMrt6BzF1', 'Grayscale', 'Grayscale GBTC ETF 1020', 'GBTC')     , ('1BQq71GVvtnWXjp3J6qSEBfhqBi3GYwAeD', 'Grayscale', 'Grayscale GBTC ETF 1021', 'GBTC')     , ('1NjBH9QsfiXwwzu1RUZ1fuAQWqDzjGtJrT', 'Grayscale', 'Grayscale GBTC ETF 1022', 'GBTC')     , ('1LsGUkWtboYLvB7u4QKwccn4iPcEx3LNBj', 'Grayscale', 'Grayscale GBTC ETF 1023', 'GBTC')     , ('1fdc4KVfRi9fQjtUdhtnubae2eAAaFtmz', 'Grayscale', 'Grayscale GBTC ETF 1024', 'GBTC')     , ('1Kfbk85UfbXHupiuxZpNU4iPonC166KJmj', 'Grayscale', 'Grayscale GBTC ETF 1025', 'GBTC')     , ('1PYL2PAwkvXoeVbQ4CXyW4RFdyshJ3JNMG', 'Grayscale', 'Grayscale GBTC ETF 1026', 'GBTC')     , ('18FDxWtgVdmrDHZKUzz8TjUD7nfhEu94b3', 'Grayscale', 'Grayscale GBTC ETF 1027', 'GBTC')     , ('13DAZCh4SeJm5a3zqM485HALYpPSE1snCj', 'Grayscale', 'Grayscale GBTC ETF 1028', 'GBTC')     , ('1ruCBo4qU31EFY5NKyNuddMUH5J2KVFHV', 'Grayscale', 'Grayscale GBTC ETF 1029', 'GBTC')     , ('189eFzc6dcB5Zvn68MjQ6r8qUaDKLYhAp1', 'Grayscale', 'Grayscale GBTC ETF 1030', 'GBTC')     , ('15A6MGvfhMka1ZuEca9aBPaL7gh1TLkJ86', 'Grayscale', 'Grayscale GBTC ETF 1031', 'GBTC')     , ('14tocc42Fxwo8H1nit7V5ZgaeNHqBw3ybu', 'Grayscale', 'Grayscale GBTC ETF 1032', 'GBTC')     , ('1Lv1qAzuwL7992Wgom7iVrV3XcZerpNPcd', 'Grayscale', 'Grayscale GBTC ETF 1033', 'GBTC')     , ('1EBmsYE2ars1H9T1RncWfYoLUonbFE3Zbp', 'Grayscale', 'Grayscale GBTC ETF 1034', 'GBTC')     , ('1NBRmHSiTsnw4CXYnHg9mq11DwrBpjgd3M', 'Grayscale', 'Grayscale GBTC ETF 1035', 'GBTC')     , ('16Kg2LFSBs1CffkEhfdp5B1upDKaLLJqwd', 'Grayscale', 'Grayscale GBTC ETF 1036', 'GBTC')     , ('1Zwe4j4vDSMqysGtio6xM7iRDHoEWyDDS', 'Grayscale', 'Grayscale GBTC ETF 1037', 'GBTC')     , ('19LiAngbDa6qCyNkU6df949QiAmYktKAtR', 'Grayscale', 'Grayscale GBTC ETF 1038', 'GBTC')     , ('17xsCXU4FhU2vsyAZ9uYmdKcSxoWqjmU2X', 'Grayscale', 'Grayscale GBTC ETF 1039', 'GBTC')     , ('1NGKKnn94RGwM7WKqT2PEqyVaCBDrEuDme', 'Grayscale', 'Grayscale GBTC ETF 1040', 'GBTC')     , ('1D2iPks3242iesbex92hhHmmWXAUnzk17M', 'Grayscale', 'Grayscale GBTC ETF 1041', 'GBTC')     , ('1CGUUMcrT3d9e2ycNtqsLicd7AUQSBsUCj', 'Grayscale', 'Grayscale GBTC ETF 1042', 'GBTC')     , ('18KW2vKndDUKDYWCvsqk8ZUmJkUBhoB7bi', 'Grayscale', 'Grayscale GBTC ETF 1043', 'GBTC')     , ('1CNih9xNsMMuiqkBRyG7XwGcFkMNLRzTJe', 'Grayscale', 'Grayscale GBTC ETF 1044', 'GBTC')     , ('16X6TNhdcNwGfNSqx6yhhbmwz8KcHZtwtx', 'Grayscale', 'Grayscale GBTC ETF 1045', 'GBTC')     , ('1MQjgFDoEzyknUryLt2jdnANfJjU2fWigg', 'Grayscale', 'Grayscale GBTC ETF 1046', 'GBTC')     , ('1He3KWGUaVAY9HcfRcxTz6H5dnozSJvWuJ', 'Grayscale', 'Grayscale GBTC ETF 1047', 'GBTC')     , ('1KuJX3rnwHsPXrSPDDaJhaXFucfM6DPFYk', 'Grayscale', 'Grayscale GBTC ETF 1048', 'GBTC')     , ('15T3mRaiVre2E723G2rFYrepZViLBxDaTN', 'Grayscale', 'Grayscale GBTC ETF 1049', 'GBTC')     , ('1B6fQX3VbBnhNSRPsqK4sJbETmo2KcrVM9', 'Grayscale', 'Grayscale GBTC ETF 1050', 'GBTC')     , ('1MR3M4e6JnLvCsK4KbVeSRcamqbmpYvz3B', 'Grayscale', 'Grayscale GBTC ETF 1051', 'GBTC')     , ('1JK9RLjXHjqdUdoUqm5yr91QvEU7s1MZe1', 'Grayscale', 'Grayscale GBTC ETF 1052', 'GBTC')     , ('1GenjibGrT1ikKY4qsGAyb1bBspUA9HcGy', 'Grayscale', 'Grayscale GBTC ETF 1053', 'GBTC')     , ('14w7VJRNUAFWTfU2bL1WaV8vYguB41GcMg', 'Grayscale', 'Grayscale GBTC ETF 1054', 'GBTC')     , ('18MeLxqHEASwVhvbjv8fd8RAyeN4HWBTat', 'Grayscale', 'Grayscale GBTC ETF 1055', 'GBTC')     , ('1ki3tA2BY51WNSkgiUMorrih8EV8gfjKh', 'Grayscale', 'Grayscale GBTC ETF 1056', 'GBTC')     , ('1GSu6ZyDwuNNereK9YGDBAk8whnnf3HNE', 'Grayscale', 'Grayscale GBTC ETF 1057', 'GBTC')     , ('15AN3iSkMySsVfzhQF8P3upy6168ri2Awf', 'Grayscale', 'Grayscale GBTC ETF 1058', 'GBTC')     , ('1DGE64tp2qayT4ec8ZWwjkbj78N2hT9icS', 'Grayscale', 'Grayscale GBTC ETF 1059', 'GBTC')     , ('1GKWXr16mg8Zeqa2EMZBJJdFvAqixthBHm', 'Grayscale', 'Grayscale GBTC ETF 1060', 'GBTC')     , ('18kbMx3xaVpgFjM9wccMqwMBBPWJ3NFLJh', 'Grayscale', 'Grayscale GBTC ETF 1061', 'GBTC')     , ('1GBk2KouHypxBgQV87iaFEUo5ZQFMK9tp2', 'Grayscale', 'Grayscale GBTC ETF 1062', 'GBTC')     , ('1qnhYBAPn1swAmWRD1S4jx1xZijCay2U9', 'Grayscale', 'Grayscale GBTC ETF 1063', 'GBTC')     , ('19SPP2Hidhd6AE3ocCjXvjafVCpMzyTKnc', 'Grayscale', 'Grayscale GBTC ETF 1064', 'GBTC')     , ('1Av6rbP6MbScEEVHc1Xf1NSS995nf9Sywd', 'Grayscale', 'Grayscale GBTC ETF 1065', 'GBTC')     , ('19CQtbA8QjcRHvmFEhKBXmSxRcG2gxwftc', 'Grayscale', 'Grayscale GBTC ETF 1066', 'GBTC')     , ('1BqjttUGVuM3xt9EreEgeMZBNraWpfs8YC', 'Grayscale', 'Grayscale GBTC ETF 1067', 'GBTC')     , ('1B3vFhJkyicJ6T2SZo3cxeveDe8GMugBUj', 'Grayscale', 'Grayscale GBTC ETF 1068', 'GBTC')     , ('1DZYoicKoMTEqerxkiBxHWZ8bNQdofHJ6j', 'Grayscale', 'Grayscale GBTC ETF 1069', 'GBTC')     , ('1Gai8Gh2qWsiKZMGWHEABH3fvUD4jQ2wvY', 'Grayscale', 'Grayscale GBTC ETF 1070', 'GBTC')     , ('1KUVBWQTmarPqFA2Zbyr5GsnqBhg4DjD5C', 'Grayscale', 'Grayscale GBTC ETF 1071', 'GBTC')     , ('1Px2bCQkFTK9URWrRs9z5GKQPKLLSKev74', 'Grayscale', 'Grayscale GBTC ETF 1072', 'GBTC')     , ('1Pby5TsvzW6nuNNSMu8X62UzLcbMeqpqg1', 'Grayscale', 'Grayscale GBTC ETF 1073', 'GBTC')     , ('189PsEya8Y6j9prMscq1w33mBCoGKdw2sk', 'Grayscale', 'Grayscale GBTC ETF 1074', 'GBTC')     , ('1A2P2PqZdP7eZmbE14TMZS8ZpFJUCtn8gs', 'Grayscale', 'Grayscale GBTC ETF 1075', 'GBTC')     , ('1NrW2k5qvsUJkth1EEHAgLwCtgBpMUHfda', 'Grayscale', 'Grayscale GBTC ETF 1076', 'GBTC')     , ('17X6wi9EmWd8p4rMUSQPWSd7EEQ7HQkNu6', 'Grayscale', 'Grayscale GBTC ETF 1077', 'GBTC')     , ('1D5W6ocnCXFVJ5obU2HXDV4zdXszr6dCET', 'Grayscale', 'Grayscale GBTC ETF 1078', 'GBTC')     , ('1PRq8JbuAPELYLLyyJxMgPLCSwoxDC3KfT', 'Grayscale', 'Grayscale GBTC ETF 1079', 'GBTC')     , ('1DJWsGAe6pbQXciBogq9AT2jfMX2yteSez', 'Grayscale', 'Grayscale GBTC ETF 1080', 'GBTC')     , ('12b9rRzGdurV1UsAWWxF6fkTU69jGXBfnu', 'Grayscale', 'Grayscale GBTC ETF 1081', 'GBTC')     , ('1NSE7ruSq8eMAkdjUWS44FrEgUxKao4kNc', 'Grayscale', 'Grayscale GBTC ETF 1082', 'GBTC')     , ('1BWeGVky6vDQ1RdQ43eLzndpGUVPodC9X6', 'Grayscale', 'Grayscale GBTC ETF 1083', 'GBTC')     , ('19FJ7Kbs9AADREE5oML4WWPtPSZAd7aXfo', 'Grayscale', 'Grayscale GBTC ETF 1084', 'GBTC')     , ('1KnZBArHnzTcS5NeQXZJrviPa1Q5h1z3GT', 'Grayscale', 'Grayscale GBTC ETF 1085', 'GBTC')     , ('12PeQpinjVkTv7m5GyCGo4vGUuRhsvXXUV', 'Grayscale', 'Grayscale GBTC ETF 1086', 'GBTC')     , ('1CizGKNnKssvhsv9kTq8HffHSq8LqqbD1m', 'Grayscale', 'Grayscale GBTC ETF 1087', 'GBTC')     , ('1PHzz5ZWNDp5gLkpSMumGsSgoASzr9tjXg', 'Grayscale', 'Grayscale GBTC ETF 1088', 'GBTC')     , ('18cnqdJqX9uiKy8tiAE5o4AZDvh2zbcXC6', 'Grayscale', 'Grayscale GBTC ETF 1089', 'GBTC')     , ('17bWHzHjMJGcD2efSncV8sJw26zZHV3jbW', 'Grayscale', 'Grayscale GBTC ETF 1090', 'GBTC')     , ('1JVq9bgP2uCDrhtxmMBujaeeQYvABp26Af', 'Grayscale', 'Grayscale GBTC ETF 1091', 'GBTC')     , ('1KohmghjvSufTpSWGkTSQdctaUj3z8eCpA', 'Grayscale', 'Grayscale GBTC ETF 1092', 'GBTC')     , ('17bBPUbbGeud1hC86A125n7XJ7fEm9vHBr', 'Grayscale', 'Grayscale GBTC ETF 1093', 'GBTC')     , ('1FsVKQ8842XiWhjjHfxPxt1ibomnFT2Dz7', 'Grayscale', 'Grayscale GBTC ETF 1094', 'GBTC')     , ('1EEG4LM4C1xGoLULb5xfzzrRiiSAvzRaED', 'Grayscale', 'Grayscale GBTC ETF 1095', 'GBTC')     , ('1AkJg8THTLtUA1UHMgBUuDKSAoP1akvyB8', 'Grayscale', 'Grayscale GBTC ETF 1096', 'GBTC')     , ('1GXAwR6oWT5YoNY3mMKQCsgefrNx2FwQsd', 'Grayscale', 'Grayscale GBTC ETF 1097', 'GBTC')     , ('12yzSS6wFhdMwETZP6tP6RR9fKjd9vLexy', 'Grayscale', 'Grayscale GBTC ETF 1098', 'GBTC')     , ('1EBffES8UuW2nHWkTJP6HxrMj4Sq71kyE4', 'Grayscale', 'Grayscale GBTC ETF 1099', 'GBTC')     , ('12i5FmsvNhH6wKTDCNgUZmsfB2x9GVbtev', 'Grayscale', 'Grayscale GBTC ETF 1100', 'GBTC')     , ('15KFfj13LGSnH5i3F5TwdANmxotRLb5MSY', 'Grayscale', 'Grayscale GBTC ETF 1101', 'GBTC')     , ('125bUS4Vej9HbEztD1qUyNx4q2oRkSUyeX', 'Grayscale', 'Grayscale GBTC ETF 1102', 'GBTC')     , ('1HS694w7WMD94GCfYUVt3NWGonSh6kx6ei', 'Grayscale', 'Grayscale GBTC ETF 1103', 'GBTC')     , ('1weJj1Q6SzkyuurxDnspZEztPd4nNXACW', 'Grayscale', 'Grayscale GBTC ETF 1104', 'GBTC')     , ('1HoNhCBXRnL7rS4tqCtJYh7yfFgSZDhX5X', 'Grayscale', 'Grayscale GBTC ETF 1105', 'GBTC')     , ('16d3PBqzjdUfASZaCphvSPBz1jty3XqKgY', 'Grayscale', 'Grayscale GBTC ETF 1106', 'GBTC')     , ('17rQqwWHZPXwMie7XVyrmmSEEAfJyBBtNc', 'Grayscale', 'Grayscale GBTC ETF 1107', 'GBTC')     , ('186E2kPBFCCo6Knt9MdLXmpYLeH4pvh2Fo', 'Grayscale', 'Grayscale GBTC ETF 1108', 'GBTC')     , ('12yXkqiPERuS3oPncvYnoqp6drdzNGTNs1', 'Grayscale', 'Grayscale GBTC ETF 1109', 'GBTC')     , ('1HstfZYNMfVuZD3Yc51u4WSwZtHZ7txfwm', 'Grayscale', 'Grayscale GBTC ETF 1110', 'GBTC')     , ('15DjcBf3BT521ReBwWxgk1KA3UeqvQJdzA', 'Grayscale', 'Grayscale GBTC ETF 1111', 'GBTC')     , ('15vegeLjCRXxM3GpfmmcZj5wvNuzcNrvLt', 'Grayscale', 'Grayscale GBTC ETF 1112', 'GBTC')     , ('1C97MjP5kqYzHizm76PY3ckKoBNzvXhuvV', 'Grayscale', 'Grayscale GBTC ETF 1113', 'GBTC')     , ('1JYubRnR6FdpZQ6LC6cyTkYRpJRv7emnK', 'Grayscale', 'Grayscale GBTC ETF 1114', 'GBTC')     , ('1EWM4oVZt4DheqrGRpjakk234wFPusC2Eq', 'Grayscale', 'Grayscale GBTC ETF 1115', 'GBTC')     , ('1GyLJqQFTAfUkEWbxLSL3MSKwwv43d1dZS', 'Grayscale', 'Grayscale GBTC ETF 1116', 'GBTC')     , ('18LhwWe5ZHxzvGX75TB11dbo9E8sGeVhMd', 'Grayscale', 'Grayscale GBTC ETF 1117', 'GBTC')     , ('179TxrabE3epWcPXZx6XyD68XXEAUUT3q', 'Grayscale', 'Grayscale GBTC ETF 1118', 'GBTC')     , ('1PnWBmd9dDZSHZ6V3PKoK7JmLV8yU7N7kS', 'Grayscale', 'Grayscale GBTC ETF 1119', 'GBTC')     , ('1PUWKpdnvtX5dfQrALWdoTTw6S83y6SprM', 'Grayscale', 'Grayscale GBTC ETF 1120', 'GBTC')     , ('1HPTc4ADzgLLHbdqCM5M9YCC3qvceCqg7A', 'Grayscale', 'Grayscale GBTC ETF 1121', 'GBTC')     , ('18YAZPmTujrPJLLNm2Jha55CzLBQGyAxVq', 'Grayscale', 'Grayscale GBTC ETF 1122', 'GBTC')     , ('1FBXcqR8we5kwQqfBzF2Dfm2YLtiMiB6MB', 'Grayscale', 'Grayscale GBTC ETF 1123', 'GBTC')     , ('12U5Q4n2ReG26vAMv3C6bHEuXLfygGsbaP', 'Grayscale', 'Grayscale GBTC ETF 1124', 'GBTC')     , ('1PKZmnz9hHJgzveA79mS1PS4wZw9Dgf7uG', 'Grayscale', 'Grayscale GBTC ETF 1125', 'GBTC')     , ('1Bz35kdJ3R4CHvx94MeHyvNaCeoG6LuVzm', 'Grayscale', 'Grayscale GBTC ETF 1126', 'GBTC')     , ('16eK8PRYBss3kzL5XwwftwMp1wkuZQiqGe', 'Grayscale', 'Grayscale GBTC ETF 1127', 'GBTC')     , ('1cAPHCetKLsTe8pLgG22zgfFwswf6vi5n', 'Grayscale', 'Grayscale GBTC ETF 1128', 'GBTC')     , ('1BQARFYHmSNgkc4Qwga4tamN4ZK1uQ63BV', 'Grayscale', 'Grayscale GBTC ETF 1129', 'GBTC')     , ('1Gz1xXV85QGeNeTm8weDXZPWmyR7RGm8bg', 'Grayscale', 'Grayscale GBTC ETF 1130', 'GBTC')     , ('1MhDsSYTndi1favgL5S4WtFdHJe7zgaYC6', 'Grayscale', 'Grayscale GBTC ETF 1131', 'GBTC')     , ('1NzEdi9qS2wmwp5as3NBZkDN7peZ9P6rhT', 'Grayscale', 'Grayscale GBTC ETF 1132', 'GBTC')     , ('1AZ5Xm1StuTGhhmTVHBGsWAs4yKxkrJ1cA', 'Grayscale', 'Grayscale GBTC ETF 1133', 'GBTC')     , ('1D6fAogQYsPU5k6Pc4qKTCGP8USVv6TDVp', 'Grayscale', 'Grayscale GBTC ETF 1134', 'GBTC')     , ('1ZS1QPt72kMk5DmqGCethuzn1kQyvdVZr', 'Grayscale', 'Grayscale GBTC ETF 1135', 'GBTC')     , ('1CPS26N1DG3W5ibUgP4FZ9zNWAQNnzQiVL', 'Grayscale', 'Grayscale GBTC ETF 1136', 'GBTC')     , ('142Dpf98c5pRWuo3cvrwa93UupVXs9zCZr', 'Grayscale', 'Grayscale GBTC ETF 1137', 'GBTC')     , ('1Wkauu5rcEpx6djNRkefoURJcuxrTUW4L', 'Grayscale', 'Grayscale GBTC ETF 1138', 'GBTC')     , ('1HUYACTfuw9Vm1nNx2heLBFyBzvfd7P8Hq', 'Grayscale', 'Grayscale GBTC ETF 1139', 'GBTC')     , ('1KT7ZHqZfmxyi7wn96nCMCv8rxDr6j9GZB', 'Grayscale', 'Grayscale GBTC ETF 1140', 'GBTC')     , ('1EUbTN3GtWTYmjqaoPrBoKHWT2CG6wqFB9', 'Grayscale', 'Grayscale GBTC ETF 1141', 'GBTC')     , ('1Bb7rZT6NsDrNCwmZr4EVcpbZ9yiGAsK2x', 'Grayscale', 'Grayscale GBTC ETF 1142', 'GBTC')     , ('18QViqkhPHLkdQsAyZcBq2Akm4DJfU46vA', 'Grayscale', 'Grayscale GBTC ETF 1143', 'GBTC')     , ('18GKefWWsbEEWTnFdKCjUzLu7UMAgZvUjf', 'Grayscale', 'Grayscale GBTC ETF 1144', 'GBTC')     , ('12Dp9x6HUAtQXuoP9sRLrejYfa93bcxgPM', 'Grayscale', 'Grayscale GBTC ETF 1145', 'GBTC')     , ('1A6Uu7DQ1AYZFnaz886J4tttZMP4oLV1Jy', 'Grayscale', 'Grayscale GBTC ETF 1146', 'GBTC')     , ('13zRs4EUnLt8H6thFFPY3rZtgHqmcpAuaa', 'Grayscale', 'Grayscale GBTC ETF 1147', 'GBTC')     , ('1HkTVahfor7KwnQs3iacZaiv63wCavvA17', 'Grayscale', 'Grayscale GBTC ETF 1148', 'GBTC')     , ('133UJkfHPUT6e2Qd4ibf3tidvNbGYNtfYk', 'Grayscale', 'Grayscale GBTC ETF 1149', 'GBTC')     , ('1Q3jVArRzbNDgRsVRkMBWJvwDt8p2g7M53', 'Grayscale', 'Grayscale GBTC ETF 1150', 'GBTC')     , ('1221Y9ns4AaA8nSorfeREDF22rmrvaB4XV', 'Grayscale', 'Grayscale GBTC ETF 1151', 'GBTC')     , ('1G9MxRLxinzd76fPvagr7VJhQpsg5f7dhH', 'Grayscale', 'Grayscale GBTC ETF 1152', 'GBTC')     , ('1MKp6xk24DBmGqxGgDmXWhJiEnK8qesA8w', 'Grayscale', 'Grayscale GBTC ETF 1153', 'GBTC')     , ('19pZXgD73hCjhm6PRVjVur9R4DGHZ7dybc', 'Grayscale', 'Grayscale GBTC ETF 1154', 'GBTC')     , ('1LT2gr2cGS7egis9k5XcJe53NGeKorx3oj', 'Grayscale', 'Grayscale GBTC ETF 1155', 'GBTC')     , ('1XUAB5H6tJybxEMQhjAtQizQbcgk6uaXv', 'Grayscale', 'Grayscale GBTC ETF 1156', 'GBTC')     , ('16bkKW4GLRozgEhTkWCM6oRX4RT7qrK6dB', 'Grayscale', 'Grayscale GBTC ETF 1157', 'GBTC')     , ('1BuXz4bj3DAXzkSbDWpLPp5gpDU3CyiszP', 'Grayscale', 'Grayscale GBTC ETF 1158', 'GBTC')     , ('19XNvhB3fcmniWqqgM93H9Q4Njnk7DLzXz', 'Grayscale', 'Grayscale GBTC ETF 1159', 'GBTC')     , ('1HJA3FL19B6jYxgGnrFwcN6yicn1si3sSP', 'Grayscale', 'Grayscale GBTC ETF 1160', 'GBTC')     , ('1CvrG5aE4KLGWP5W8wU6UuttfrcPtAWQvB', 'Grayscale', 'Grayscale GBTC ETF 1161', 'GBTC')     , ('1Bq1H6VzkKcDQGrF72iFX6PXyho4b1DAPP', 'Grayscale', 'Grayscale GBTC ETF 1162', 'GBTC')     , ('14GnxXQCbfShavp7zEWKJmnJ6NV3keq5mP', 'Grayscale', 'Grayscale GBTC ETF 1163', 'GBTC')     , ('1A6sG7niwPg8374vgWg2mSQ811F7oCLxVf', 'Grayscale', 'Grayscale GBTC ETF 1164', 'GBTC')     , ('1EQUeamYSQkjCooN5B4PkSJEqhytwKYDeC', 'Grayscale', 'Grayscale GBTC ETF 1165', 'GBTC')     , ('1AwHSztyktyyys8MmU1koYhrwEQXrkw9JB', 'Grayscale', 'Grayscale GBTC ETF 1166', 'GBTC')     , ('1JETuTUFyzZs5i2ikaFAdkrhoQ6LxKx4ea', 'Grayscale', 'Grayscale GBTC ETF 1167', 'GBTC')     , ('166oCDCsNx26StYLtabkH4JvrimgVTiiU3', 'Grayscale', 'Grayscale GBTC ETF 1168', 'GBTC')     , ('1wqrcU9CFSYBiyitKCdh9GtUhXrkp87BJ', 'Grayscale', 'Grayscale GBTC ETF 1169', 'GBTC')     , ('1HaeubrGHb2WqGuRzZQGhJsWjZyY9qmBjw', 'Grayscale', 'Grayscale GBTC ETF 1170', 'GBTC')     , ('1Dd8cu2SE5rGkWjUboybEy2LdzTfpxR83G', 'Grayscale', 'Grayscale GBTC ETF 1171', 'GBTC')     , ('16CaaKCvwwyRNd7yQwKhvUa1oNgzc5U2y5', 'Grayscale', 'Grayscale GBTC ETF 1172', 'GBTC')     , ('1Bvm5aiiQRFyVKAXzM1AiZAmpKYwYztktf', 'Grayscale', 'Grayscale GBTC ETF 1173', 'GBTC')     , ('1FYhNvv6x3iBEr5jkttncwSZTLoBtBvCqE', 'Grayscale', 'Grayscale GBTC ETF 1174', 'GBTC')     , ('1L8YVDCPReEEPJDZEk6rBtsLDhhnDjfxqp', 'Grayscale', 'Grayscale GBTC ETF 1175', 'GBTC')     , ('18TneU7efFyFbSQjG1ka7Sd4EACSb5ieJu', 'Grayscale', 'Grayscale GBTC ETF 1176', 'GBTC')     , ('1AW4gorMXC8Zjs3ipsK6hzsXs6dSx1gNXV', 'Grayscale', 'Grayscale GBTC ETF 1177', 'GBTC')     , ('1AtPVTc5xs85MPGhajQuQ51mNqxBWojdka', 'Grayscale', 'Grayscale GBTC ETF 1178', 'GBTC')     , ('1EPL6sqQpXh8Dy9Te63Ah2JedZZxZxLcvb', 'Grayscale', 'Grayscale GBTC ETF 1179', 'GBTC')     , ('13nMk9isCnFks8aLU83kGQHLA4rATkrV2G', 'Grayscale', 'Grayscale GBTC ETF 1180', 'GBTC')     , ('1P4tqG76qHYMfAwoCqgTkgCQXue7xENmYg', 'Grayscale', 'Grayscale GBTC ETF 1181', 'GBTC')     , ('17qGrouB8GxsfGrFk3AXA7cJgUVZanVD1J', 'Grayscale', 'Grayscale GBTC ETF 1182', 'GBTC')     , ('16U1ZnogjPXJ1HF65zKgiS5z98ZZK1WPfG', 'Grayscale', 'Grayscale GBTC ETF 1183', 'GBTC')     , ('1E8vVn84v93m9Dee8uXgkgxdyHkzxAMFwh', 'Grayscale', 'Grayscale GBTC ETF 1184', 'GBTC')     , ('1N7ejDxNAvVLs6Dd6x2bDMPDCkgwLTktNt', 'Grayscale', 'Grayscale GBTC ETF 1185', 'GBTC')     , ('17x5SJFncivDxfp18bMYx8YghwK18iF3JT', 'Grayscale', 'Grayscale GBTC ETF 1186', 'GBTC')     , ('142ix9D1Qx1eGkWLkBBEeqBL8v493R88xi', 'Grayscale', 'Grayscale GBTC ETF 1187', 'GBTC')     , ('1CQuXJwDUtBz1G3kPyB9pzgWzYdizbCCA7', 'Grayscale', 'Grayscale GBTC ETF 1188', 'GBTC')     , ('18jbmCopiqCovAiqJfMhh5xyiU9rFnZsi', 'Grayscale', 'Grayscale GBTC ETF 1189', 'GBTC')     , ('1Ppjc3j1nHRGFEMjWSsTDULi8xtKkRBxD4', 'Grayscale', 'Grayscale GBTC ETF 1190', 'GBTC')     , ('13rNapwaMbuiimah9td28ApZJPAFSrhzx4', 'Grayscale', 'Grayscale GBTC ETF 1191', 'GBTC')     , ('1BxxK8F3B3ebrJ3KXZxpyyFqrizHf8cJqb', 'Grayscale', 'Grayscale GBTC ETF 1192', 'GBTC')     , ('1Fm4cYPL5HmbcAtjJHLxRsXMGZx2Pjnb7y', 'Grayscale', 'Grayscale GBTC ETF 1193', 'GBTC')     , ('1Fe96r9FiRytg3p3X73HCwThQ3TcUmHrxZ', 'Grayscale', 'Grayscale GBTC ETF 1194', 'GBTC')     , ('1PG4s9pSBpiNFyMYhpPiRLaG9mU6bkVasS', 'Grayscale', 'Grayscale GBTC ETF 1195', 'GBTC')     , ('1C5mvc5xh12K4xWqB4NEJPqK95N37KXAUf', 'Grayscale', 'Grayscale GBTC ETF 1196', 'GBTC')     , ('1NZkjVcM9k36PkX4RnJZigDS4sZGB12d1t', 'Grayscale', 'Grayscale GBTC ETF 1197', 'GBTC')     , ('1BsTaXJnmB1hAf6Z4TCCZhmeZ35PVceEw3', 'Grayscale', 'Grayscale GBTC ETF 1198', 'GBTC')     , ('1Pqynux3pRYF1x4nj4Uew4Eg8Yw74JPUsH', 'Grayscale', 'Grayscale GBTC ETF 1199', 'GBTC')     , ('16stqSaqimBqMRc5xLzvJQnm6zB9Fby9Tp', 'Grayscale', 'Grayscale GBTC ETF 1200', 'GBTC')     , ('126Qxpi679Zz4QFS9Vvc7bE2zU42CrqFSu', 'Grayscale', 'Grayscale GBTC ETF 1201', 'GBTC')     , ('12yS6q1yFafv7LT1hmjyHQrhG46qJ8c1N1', 'Grayscale', 'Grayscale GBTC ETF 1202', 'GBTC')     , ('176KnZSJs3jc7D6YzDEjimxpn6J1t5pVvk', 'Grayscale', 'Grayscale GBTC ETF 1203', 'GBTC')     , ('1Bk37UQbiL1WYkFnRNnyqNtyRcVWrAawXX', 'Grayscale', 'Grayscale GBTC ETF 1204', 'GBTC')     , ('1LUtjHttUhGkEMQc9Lo52reEUnfwX6AgTX', 'Grayscale', 'Grayscale GBTC ETF 1205', 'GBTC')     , ('19X5M7KksVvUECaZijHWaEHbDEegqL3uT9', 'Grayscale', 'Grayscale GBTC ETF 1206', 'GBTC')     , ('1MG4t2Eu45QxC6AfPTT7AHAuWRuWcvsetC', 'Grayscale', 'Grayscale GBTC ETF 1207', 'GBTC')     , ('1JtKpNueFo3GEvU4jzHKFPSCdnTYKoA1ZL', 'Grayscale', 'Grayscale GBTC ETF 1208', 'GBTC')     , ('1Kc77WEztEABAg6jBLrszyNHkHXao75k1Q', 'Grayscale', 'Grayscale GBTC ETF 1209', 'GBTC')     , ('1DyuVp8E17mNepWuwd6BBUY22jscNhuhq7', 'Grayscale', 'Grayscale GBTC ETF 1210', 'GBTC')     , ('1AB5BWnV4ii5hCkmwe7Ps1KjM9PSVuhRVb', 'Grayscale', 'Grayscale GBTC ETF 1211', 'GBTC')     , ('1Hn93aSa2bEC3ju6M76eyWjVqVRShqMAwg', 'Grayscale', 'Grayscale GBTC ETF 1212', 'GBTC')     , ('1FGSca2TMFy3JfmsETcyeEcMn2ThNKaApx', 'Grayscale', 'Grayscale GBTC ETF 1213', 'GBTC')     , ('1QGHQcZfG7ZmgW7xYDgRxMLqsdEEzqyaDQ', 'Grayscale', 'Grayscale GBTC ETF 1214', 'GBTC')     , ('1JbqGNGRm4wuqvLxm1CgwsEtDwFwKAJ4mh', 'Grayscale', 'Grayscale GBTC ETF 1215', 'GBTC')     , ('12qP1HZcURbGdWWeRUixTW9ARJQzhHjcMM', 'Grayscale', 'Grayscale GBTC ETF 1216', 'GBTC')     , ('1FQNsyFAfM7sCtTgH7npd2YRe5UKNijjhS', 'Grayscale', 'Grayscale GBTC ETF 1217', 'GBTC')     , ('1KgL3LYCgGbpsd2G9SWxEPAkc6eczU5NrD', 'Grayscale', 'Grayscale GBTC ETF 1218', 'GBTC')     , ('1CRN6R25KCUB3J6cxU5StnYCZbqNfjvSka', 'Grayscale', 'Grayscale GBTC ETF 1219', 'GBTC')     , ('1NtwumU2iDMAyrBKFYgT95kBNt6rt7FpAC', 'Grayscale', 'Grayscale GBTC ETF 1220', 'GBTC')     , ('1BLWZSTto2a3HaUfmg2kCmz64P94wuNe5R', 'Grayscale', 'Grayscale GBTC ETF 1221', 'GBTC')     , ('14jn35a6cu6YF4qAJkRRDyqdAuoVVwwnNe', 'Grayscale', 'Grayscale GBTC ETF 1222', 'GBTC')     , ('135c3SJuZ2PKQxUGTMnN1HiatAHF1HbDKV', 'Grayscale', 'Grayscale GBTC ETF 1223', 'GBTC')     , ('1NLYa5jShQFR7w7Y695PSivCAWk5yxoBV5', 'Grayscale', 'Grayscale GBTC ETF 1224', 'GBTC')     , ('1GcB6QcjLk5TqYTmDruptiKeHpMtvcNBss', 'Grayscale', 'Grayscale GBTC ETF 1225', 'GBTC')     , ('1LsJ4Q4SLxrxwMD5nC8qiwCAA7rk8chbt1', 'Grayscale', 'Grayscale GBTC ETF 1226', 'GBTC')     , ('1BEzxcoLpNZRSpKmwgjddokUqat5n7Szk7', 'Grayscale', 'Grayscale GBTC ETF 1227', 'GBTC')     , ('16BtXAKZpKMQjfb6NMvSXrrG1se9NLSSnn', 'Grayscale', 'Grayscale GBTC ETF 1228', 'GBTC')     , ('1GRGfd3TtBA2vMjoHH3hVpE6CRx5nZ1YJp', 'Grayscale', 'Grayscale GBTC ETF 1229', 'GBTC')     , ('13MrNFDdpVZqy23Kh3m6BFJkfGRFG2bkjZ', 'Grayscale', 'Grayscale GBTC ETF 1230', 'GBTC')     , ('14dws6hwZ2X9sRMTcSx4LNAb9rk3zePMHW', 'Grayscale', 'Grayscale GBTC ETF 1231', 'GBTC')     , ('19KZnYzY9myKy8rn19CbPEvUshMXps5pcP', 'Grayscale', 'Grayscale GBTC ETF 1232', 'GBTC')     , ('1DbbU3eiY1BW4RWm21GGKRuVgVPcjvYYx1', 'Grayscale', 'Grayscale GBTC ETF 1233', 'GBTC')     , ('1LQBwPRtqAhcWVXXDKjm22q1ghj5xfVhfQ', 'Grayscale', 'Grayscale GBTC ETF 1234', 'GBTC')     , ('1NKMKEi4RuAEFpykHQyPtLDRn8mmZMC8rk', 'Grayscale', 'Grayscale GBTC ETF 1235', 'GBTC')     , ('1EoiGs6Hh7ssmjpEqDzvK8YvV3PQJZDUbP', 'Grayscale', 'Grayscale GBTC ETF 1236', 'GBTC')     , ('1L4upWxHRHkF9mAagAa9bhGZogM7RWYUFg', 'Grayscale', 'Grayscale GBTC ETF 1237', 'GBTC')     , ('1HHP5M9v1RkDr1VbPuCjyQUTzPU6MdtHhv', 'Grayscale', 'Grayscale GBTC ETF 1238', 'GBTC')     , ('19ZBqGVgwFpaMeNrbYJhBD1tAc3JmfEwkC', 'Grayscale', 'Grayscale GBTC ETF 1239', 'GBTC')     , ('14DW6UdfS5UVzC9xz5vDk2nk1cCWgsACUu', 'Grayscale', 'Grayscale GBTC ETF 1240', 'GBTC')     , ('12ebjteAspVYvi2jUcKBZQeQyrxnn8thXL', 'Grayscale', 'Grayscale GBTC ETF 1241', 'GBTC')     , ('1KnqjUdaihK8r3neNQGd8SmfmCrbdEmF9v', 'Grayscale', 'Grayscale GBTC ETF 1242', 'GBTC')     , ('197NVYX8G6skUs6vaycFv1vUrS8ny7eTcw', 'Grayscale', 'Grayscale GBTC ETF 1243', 'GBTC')     , ('1DoyiQVdRLYNgor82G5XaFQT5EYWE9EApe', 'Grayscale', 'Grayscale GBTC ETF 1244', 'GBTC')     , ('19rbjbb5gdAducgQ7bbN9MrCygKnjGUQyZ', 'Grayscale', 'Grayscale GBTC ETF 1245', 'GBTC')     , ('1GP5sSvpR81Cgpga2D53nDrUZUWvwSC2q7', 'Grayscale', 'Grayscale GBTC ETF 1246', 'GBTC')     , ('1EUGNthKqJnG4Quri8G2uJJ5hXKe82Cg2Z', 'Grayscale', 'Grayscale GBTC ETF 1247', 'GBTC')     , ('1LNqgXfAhUrga46zTTkTAQU1kWpa9PTtAi', 'Grayscale', 'Grayscale GBTC ETF 1248', 'GBTC')     , ('13wZBdBhU3ZpEYKS1Hhepvorsh8X8wiKHk', 'Grayscale', 'Grayscale GBTC ETF 1249', 'GBTC')     , ('1FfhxKRSfVQS9vWBRttWMXMYWVfTeN7SBe', 'Grayscale', 'Grayscale GBTC ETF 1250', 'GBTC')     , ('17f47Rfv5MwTBQLBVrrqFVnQ2esJkkVNdb', 'Grayscale', 'Grayscale GBTC ETF 1251', 'GBTC')     , ('1E9ENkfoCJYBTKWKkHRWFMeaft8Ame39uX', 'Grayscale', 'Grayscale GBTC ETF 1252', 'GBTC')     , ('1FofR4QvXZLGjgcakCukMSscuHLMS2cjhA', 'Grayscale', 'Grayscale GBTC ETF 1253', 'GBTC')     , ('19aHmhwVFjWc77uCQKLR79bSB9agskdSQt', 'Grayscale', 'Grayscale GBTC ETF 1254', 'GBTC')     , ('147CDinCWq6voqy55xbZidxxQ9dAMgEY3a', 'Grayscale', 'Grayscale GBTC ETF 1255', 'GBTC')     , ('17JmMaXZx8LiQWFhJdd3yXkwEtcmUVHQWC', 'Grayscale', 'Grayscale GBTC ETF 1256', 'GBTC')     , ('16Bgg1hysFwkspNAwLRQ6HrRUBzAYFmx52', 'Grayscale', 'Grayscale GBTC ETF 1257', 'GBTC')     , ('1LPYuiC7PmJgLzVAADDEL7w8hUXWMpL9GU', 'Grayscale', 'Grayscale GBTC ETF 1258', 'GBTC')     , ('1L7BXfmDE3Ktn6KicB5WkvSmnxrtGLHaBd', 'Grayscale', 'Grayscale GBTC ETF 1259', 'GBTC')     , ('1J7SA1DynbtUKsTEtasGu6ZM4emxXAGV2T', 'Grayscale', 'Grayscale GBTC ETF 1260', 'GBTC')     , ('1GEYSJcYH5AWTnGRqF8VYWhHqPySb4C5Px', 'Grayscale', 'Grayscale GBTC ETF 1261', 'GBTC')     , ('1PFqNhUSaBKjdD5Z78jWmBCbdufK7dTFAW', 'Grayscale', 'Grayscale GBTC ETF 1262', 'GBTC')     , ('1NC6cH2VvqjBD3ZSpzqqdkrYB8qYfRbyer', 'Grayscale', 'Grayscale GBTC ETF 1263', 'GBTC')     , ('1LCSqBvXnJnjeHUzppcL58dDQchJCkLZa3', 'Grayscale', 'Grayscale GBTC ETF 1264', 'GBTC')     , ('1Bdvk2P1RVEY4PgADMtU3sPxE3Gopswp8s', 'Grayscale', 'Grayscale GBTC ETF 1265', 'GBTC')     , ('17iRaixeKKCdhmjGRvWTaTjx7btVQskKiV', 'Grayscale', 'Grayscale GBTC ETF 1266', 'GBTC')     , ('1GTRGdg7TVCbsgPtjnp4DTiEhRNBtrUkHt', 'Grayscale', 'Grayscale GBTC ETF 1267', 'GBTC')     , ('14u67p9bqxRr1ArTc8WeybwzWU7ZgFmLE2', 'Grayscale', 'Grayscale GBTC ETF 1268', 'GBTC')     , ('1FC5pgkk2SQx5P9qiuAjL6x29bbZHBRzHN', 'Grayscale', 'Grayscale GBTC ETF 1269', 'GBTC')     , ('1PFZdYKRg1xtvnq1TSKZMgZ5JAFJEeXzTv', 'Grayscale', 'Grayscale GBTC ETF 1270', 'GBTC')     , ('16KnaLSC5x3XAkGmsHTMwG2R5czcZr2gxa', 'Grayscale', 'Grayscale GBTC ETF 1271', 'GBTC')     , ('1By2o72Z9qcyGKAug3G5dNUYf7RLroQZs7', 'Grayscale', 'Grayscale GBTC ETF 1272', 'GBTC')     , ('1BBdzA2SwD5uKb99k2TQ1b5dLqnWudWnsa', 'Grayscale', 'Grayscale GBTC ETF 1273', 'GBTC')     , ('1JzmyTJJabmjdCrsFvmBQww3T48FX89Lga', 'Grayscale', 'Grayscale GBTC ETF 1274', 'GBTC')     , ('1PrMCiH8y5cMCecsdJG2aT7bZN42xnKpap', 'Grayscale', 'Grayscale GBTC ETF 1275', 'GBTC')     , ('151bW4ShurYE1bJgyUjyDagviVv9XhQhau', 'Grayscale', 'Grayscale GBTC ETF 1276', 'GBTC')     , ('12N9cqC5bjSAXJuzbLevdkSBpjMdCkQTQR', 'Grayscale', 'Grayscale GBTC ETF 1277', 'GBTC')     , ('13y4CTv4uytWHzfj6rBrhTwwEhmhJuRUS9', 'Grayscale', 'Grayscale GBTC ETF 1278', 'GBTC')     , ('19atKfDz4fLKwiEnvtVFWKg2csWJcvCRux', 'Grayscale', 'Grayscale GBTC ETF 1279', 'GBTC')     , ('15gioFeKnUjerTQ9LYNreW3Bt9kn9xrTU4', 'Grayscale', 'Grayscale GBTC ETF 1280', 'GBTC')     , ('1PUSCPnx98JuytBV86q8TCTqus37dE7ovN', 'Grayscale', 'Grayscale GBTC ETF 1281', 'GBTC')     , ('13E5SsqLV3G7HzXyPN6pnJwH4FHhiJyrQv', 'Grayscale', 'Grayscale GBTC ETF 1282', 'GBTC')     , ('1CgNW3LddU11wL4bSYyYHiF4yCsFwSFdEh', 'Grayscale', 'Grayscale GBTC ETF 1283', 'GBTC')     , ('1GrSsCqxLDuekEHAtMpVdYspXhjgcdNwWz', 'Grayscale', 'Grayscale GBTC ETF 1284', 'GBTC')     , ('1JuWgkzATpUwepzvMPG3jA3Mbc4nxngFTe', 'Grayscale', 'Grayscale GBTC ETF 1285', 'GBTC')     , ('1FGNGPMqm3GKMRKdPphUuoUhMiHUQ1k2Lv', 'Grayscale', 'Grayscale GBTC ETF 1286', 'GBTC')     , ('113Us6GxbgauUQ7YCx1FnznJbbzk3ujMdG', 'Grayscale', 'Grayscale GBTC ETF 1287', 'GBTC')     , ('16Exc5cAgezMUJLk7mBnncRAR1hSZnuB1X', 'Grayscale', 'Grayscale GBTC ETF 1288', 'GBTC')     , ('1JiS4fb2m2uPoAWrkLp8TPNXEWDpX4TH4s', 'Grayscale', 'Grayscale GBTC ETF 1289', 'GBTC')     , ('1AKqRUNCaYbSQQRkeCd28Cvfksk5njnoiM', 'Grayscale', 'Grayscale GBTC ETF 1290', 'GBTC')     , ('163f8dxht3RGsXdKvEJha2TA5wybDFsCLx', 'Grayscale', 'Grayscale GBTC ETF 1291', 'GBTC')     , ('1BNirddEPC43ReNxL9tCKDh9jXvcbkibUB', 'Grayscale', 'Grayscale GBTC ETF 1292', 'GBTC')     , ('1LzS1ZQUuuSgYDmi8FK7D8v2R5MuyoWJXB', 'Grayscale', 'Grayscale GBTC ETF 1293', 'GBTC')     , ('1KuC1DBoQXi3Kov6kdH7kDJTRGcbFDyJYc', 'Grayscale', 'Grayscale GBTC ETF 1294', 'GBTC')     , ('13TFxg6gqqxxJtNucJhPYUcRzCvKeuavs2', 'Grayscale', 'Grayscale GBTC ETF 1295', 'GBTC')     , ('15T32AwYewo58C1w6NsZozt7ScMpisxcA4', 'Grayscale', 'Grayscale GBTC ETF 1296', 'GBTC')     , ('17J7qVwARmHh5HXUf9yD9He4BBai2bPYCL', 'Grayscale', 'Grayscale GBTC ETF 1297', 'GBTC')     , ('1NUkczEMcYZb8mFkyLA4PwVzTmHs6Ja2fT', 'Grayscale', 'Grayscale GBTC ETF 1298', 'GBTC')     , ('1NUNvzSjRJu2HpQs4qcfnoahfxzWoLH1As', 'Grayscale', 'Grayscale GBTC ETF 1299', 'GBTC')     , ('12GZzYZuniQA2xPxGkTWf9jNDfYU5oDiAA', 'Grayscale', 'Grayscale GBTC ETF 1300', 'GBTC')     , ('17SR8qFJ3NfQrRUoKvuHKPZRTh3MpN6NFL', 'Grayscale', 'Grayscale GBTC ETF 1301', 'GBTC')     , ('1AGkxyTjtMKLfNA6XjFfSyJR5pJb3XUHWH', 'Grayscale', 'Grayscale GBTC ETF 1302', 'GBTC')     , ('1NbEwJNSNR8UWryVqN1ZdwLMX5hDaJXA7y', 'Grayscale', 'Grayscale GBTC ETF 1303', 'GBTC')     , ('1LeMdR65sBJS41kFopABeTWLBeGuRQCuxA', 'Grayscale', 'Grayscale GBTC ETF 1304', 'GBTC')     , ('1AK8SMaU7L7P96BTC56i8tLLjmydQKn9bY', 'Grayscale', 'Grayscale GBTC ETF 1305', 'GBTC')     , ('1EZ4ofvPBUyguooLuUUCm2qJUP8vC3jkEV', 'Grayscale', 'Grayscale GBTC ETF 1306', 'GBTC')     , ('15XaFheNg7RwwPxZftD5zApDdrkvpMRRZP', 'Grayscale', 'Grayscale GBTC ETF 1307', 'GBTC')     , ('1J6wjASNwJ2DipUe3tMPzTNq8Gh248GjdE', 'Grayscale', 'Grayscale GBTC ETF 1308', 'GBTC')     , ('1PfeNhEur4aA3s3hm7N2j65N7FxrtJww94', 'Grayscale', 'Grayscale GBTC ETF 1309', 'GBTC')     , ('1DKb89Bywuu5HDRBuRZLuhtQJAjKHUPLL8', 'Grayscale', 'Grayscale GBTC ETF 1310', 'GBTC')     , ('12Ut3N2WD2piLtbFe1AoxG2f57XyrAViYT', 'Grayscale', 'Grayscale GBTC ETF 1311', 'GBTC')     , ('14TV5gV1yLmCdyCMNbeg3dqBEqTLADdHf7', 'Grayscale', 'Grayscale GBTC ETF 1312', 'GBTC')     , ('1HydM7GDhJnVyHuWkVGeTqr3KWhDPEh2XU', 'Grayscale', 'Grayscale GBTC ETF 1313', 'GBTC')     , ('13LEPXmkSuk2pFPpxpy4s2iYMLVFU4aJQT', 'Grayscale', 'Grayscale GBTC ETF 1314', 'GBTC')     , ('1HFBNg9kG7mM5rSfjQfAacaWh4UHwkWKGv', 'Grayscale', 'Grayscale GBTC ETF 1315', 'GBTC')     , ('1Cjp4sKHUq5iuC5NxqV6gQt6dH9jfeVxQJ', 'Grayscale', 'Grayscale GBTC ETF 1316', 'GBTC')     , ('1Driboq6x5sE3UErDbWsn7EUMTvf5YzR8q', 'Grayscale', 'Grayscale GBTC ETF 1317', 'GBTC')     , ('1MWtVwmfGmfRT6x5SV2ZXbYTV9UfqcP2zv', 'Grayscale', 'Grayscale GBTC ETF 1318', 'GBTC')     , ('1HPchFiRVxZVf1zbSXGNDQrQykzwwBYj5f', 'Grayscale', 'Grayscale GBTC ETF 1319', 'GBTC')     , ('1upGjhm2eeQbns8gwvDmZFmWa3QMQ1Yhv', 'Grayscale', 'Grayscale GBTC ETF 1320', 'GBTC')     , ('13aT9yJch1B482wEzpY1xXYSfSMho9RkEu', 'Grayscale', 'Grayscale GBTC ETF 1321', 'GBTC')     , ('1MWfye7ZRHiVkPP4UGvtqGvE2UK9WJkEAf', 'Grayscale', 'Grayscale GBTC ETF 1322', 'GBTC')     , ('1HHD2URDTVrYV8dvuLrXBBwiKqZeKHSfAh', 'Grayscale', 'Grayscale GBTC ETF 1323', 'GBTC')     , ('1KYmqZaKrb14CAXuEmBSTZdjPutqW6gssV', 'Grayscale', 'Grayscale GBTC ETF 1324', 'GBTC')     , ('13RwKZHvU2drVLHq2FNX17yWQR3MwgQMCr', 'Grayscale', 'Grayscale GBTC ETF 1325', 'GBTC')     , ('1DWiCcE3kG33KgXtJ8MEC9RP1yYdeNx1Ep', 'Grayscale', 'Grayscale GBTC ETF 1326', 'GBTC')     , ('1PncbJGRSvgb4fTUVrN1iVFMCe5XeJ5m61', 'Grayscale', 'Grayscale GBTC ETF 1327', 'GBTC')     , ('1HyXzVJFJrkDdyNjCcDzqE8oDCCzUJhsEi', 'Grayscale', 'Grayscale GBTC ETF 1328', 'GBTC')     , ('1EAjwCea3swb8UKau7ZrT3TRDCnAc1Q13k', 'Grayscale', 'Grayscale GBTC ETF 1329', 'GBTC')     , ('15QM6UYVThmkr9AQRff99UERCwEciESb1n', 'Grayscale', 'Grayscale GBTC ETF 1330', 'GBTC')     , ('1HLaSXGkZAfHULs6GeYCR8NPxndbLibGVB', 'Grayscale', 'Grayscale GBTC ETF 1331', 'GBTC')     , ('13jFtXZfmb1jT3SjvPLsFc3KHZy5PrNuSF', 'Grayscale', 'Grayscale GBTC ETF 1332', 'GBTC')     , ('1DnhYTzkr2TNVfoNH4FoMAbMB2xcPBmfQN', 'Grayscale', 'Grayscale GBTC ETF 1333', 'GBTC')     , ('1N237omsYdFnGEECJi36VBjPpuW7V3Te4', 'Grayscale', 'Grayscale GBTC ETF 1334', 'GBTC')     , ('1AhV4L41bQybGKTYvQnsxBuHXHNAQaRfyN', 'Grayscale', 'Grayscale GBTC ETF 1335', 'GBTC')     , ('1MyyZSuVmymXz6Bhhb3uoX31SaeuiFhGVd', 'Grayscale', 'Grayscale GBTC ETF 1336', 'GBTC')     , ('14XFoVATdDsByJZxSufQeVCriyRVWL3Hof', 'Grayscale', 'Grayscale GBTC ETF 1337', 'GBTC')     , ('12Veush2tzKeKbaFxZrnf9uJ699TH1beD3', 'Grayscale', 'Grayscale GBTC ETF 1338', 'GBTC')     , ('1BDSuvEvtUhrgTHqVCDbDMLQre7SPu4RnS', 'Grayscale', 'Grayscale GBTC ETF 1339', 'GBTC')     , ('1AdwehDzv6G5TXJgr1ifNgH1VQHzDGyW3s', 'Grayscale', 'Grayscale GBTC ETF 1340', 'GBTC')     , ('15FgBGDaDCGRnBQrg3WV7MB97LDypSYzoJ', 'Grayscale', 'Grayscale GBTC ETF 1341', 'GBTC')     , ('1BxAsiVFPfrgvvxvRdc5qDfFReSk5aprZW', 'Grayscale', 'Grayscale GBTC ETF 1342', 'GBTC')     , ('1DodEMFCt6SFUt7EDPrZ975Vke9tCuo2fV', 'Grayscale', 'Grayscale GBTC ETF 1343', 'GBTC')     , ('1Hvsa6fxbQrmrnejA2jtgG3rBJnqYXHaXT', 'Grayscale', 'Grayscale GBTC ETF 1344', 'GBTC')     , ('1QKdWwiEL8eTGUqfQMWue4NTvKAk9hs9zU', 'Grayscale', 'Grayscale GBTC ETF 1345', 'GBTC')     , ('1E7hciu8jAjiStEJ4gKc7Ktrt6YGHemQaL', 'Grayscale', 'Grayscale GBTC ETF 1346', 'GBTC')     , ('1NQp87dkSMYPF8uExNAeVRQZG4BES8WrKs', 'Grayscale', 'Grayscale GBTC ETF 1347', 'GBTC')     , ('1HtJoqcaR55BC4fUN37PYvZRuChsDr7kTN', 'Grayscale', 'Grayscale GBTC ETF 1348', 'GBTC')     , ('1Fi2tJ68uU6X5URLGDNV22pGJVBbEkK1qt', 'Grayscale', 'Grayscale GBTC ETF 1349', 'GBTC')     , ('1EfXwrmfPUNtQpr7m3dDegtnWKSTCViiZJ', 'Grayscale', 'Grayscale GBTC ETF 1350', 'GBTC')     , ('17gf8qu1D45qm7fCwZvTKkMiuj1zPZN3We', 'Grayscale', 'Grayscale GBTC ETF 1351', 'GBTC')     , ('169MtSyCd3pcuuzMXqEibryFbgrNJzV3Ry', 'Grayscale', 'Grayscale GBTC ETF 1352', 'GBTC')     , ('155ed4215qkA5SVJLJfyveFTMu8u2CPFd9', 'Grayscale', 'Grayscale GBTC ETF 1353', 'GBTC')     , ('1LmVmcNgwemB3yfAFNcMwEbpmJvG75eDrR', 'Grayscale', 'Grayscale GBTC ETF 1354', 'GBTC')     , ('1F5FB7rmRPPEekf67ruWqLm9cV96ZS48Jm', 'Grayscale', 'Grayscale GBTC ETF 1355', 'GBTC')     , ('1MFLjysjrQzrNZAVptbDP2wr7on19kJi1x', 'Grayscale', 'Grayscale GBTC ETF 1356', 'GBTC')     , ('1FPyLC1sK1jctnjgHiTSvUjaLsiWCqFZMQ', 'Grayscale', 'Grayscale GBTC ETF 1357', 'GBTC')     , ('1K9PfSTYQNE5E2pp8Vsmnr44p3qtgHotBK', 'Grayscale', 'Grayscale GBTC ETF 1358', 'GBTC')     , ('13uZkudjjbmyZk9atvnCnaN36rHvBN8e96', 'Grayscale', 'Grayscale GBTC ETF 1359', 'GBTC')     , ('1MRJDipsWXX3Rz7FGkffS79oMpMbAWz3Up', 'Grayscale', 'Grayscale GBTC ETF 1360', 'GBTC')     , ('1H4RYx39UG5w2r77ahRHW2SPWDqaQUa3h3', 'Grayscale', 'Grayscale GBTC ETF 1361', 'GBTC')     , ('18dRi224ytBU2HdpxwujtkTUhdDoo4j5at', 'Grayscale', 'Grayscale GBTC ETF 1362', 'GBTC')     , ('1CT9p2k8vgCd6xg4F9EVCWjcSnQU8n3L6W', 'Grayscale', 'Grayscale GBTC ETF 1363', 'GBTC')     , ('15XFejSrpn9YBaTrLDvwuPYAVYdCtxEUhw', 'Grayscale', 'Grayscale GBTC ETF 1364', 'GBTC')     , ('1MvYn7frM6bPzZsQ6itxWcByCnRdfdRV4j', 'Grayscale', 'Grayscale GBTC ETF 1365', 'GBTC')     , ('114MrZps69WiQgcfqhAv9emukWM4kBmudt', 'Grayscale', 'Grayscale GBTC ETF 1366', 'GBTC')     , ('13gHmq8jopvn1u5Qwig9YfwNPZU3LgobyT', 'Grayscale', 'Grayscale GBTC ETF 1367', 'GBTC')     , ('1DWsRNnpLTxLqz35adDRXh4BXS2PJwVEDz', 'Grayscale', 'Grayscale GBTC ETF 1368', 'GBTC')     , ('1461LQyxnABvD35cctAm97QJQHV1mZvAgX', 'Grayscale', 'Grayscale GBTC ETF 1369', 'GBTC')     , ('1KaifdqynU1dzTNic4uQm18FF6RJA2WM6R', 'Grayscale', 'Grayscale GBTC ETF 1370', 'GBTC')     , ('1J1PhmJgHw1zfEGVewaWyoniGxRRC3xSk2', 'Grayscale', 'Grayscale GBTC ETF 1371', 'GBTC')     , ('1PQezvApdPCLjmjbqxMyidXsMkVkm6wcoe', 'Grayscale', 'Grayscale GBTC ETF 1372', 'GBTC')     , ('14RBiHzNzLUSPDwza1GiLnMJvkvW2BZ27Y', 'Grayscale', 'Grayscale GBTC ETF 1373', 'GBTC')     , ('1FVxLxurPmUfbDwJbNiwn8jyhb5vFo5GgZ', 'Grayscale', 'Grayscale GBTC ETF 1374', 'GBTC')     , ('1BjofMYRQ8L9aVhvGD8feawU7x4ym4KWEa', 'Grayscale', 'Grayscale GBTC ETF 1375', 'GBTC')     , ('1435xP4wokbjK278mSt1tKVQRd1V8Z9eF5', 'Grayscale', 'Grayscale GBTC ETF 1376', 'GBTC')     , ('1PokCc2twUVeMTGhfdqcRoohSP4eHMguAD', 'Grayscale', 'Grayscale GBTC ETF 1377', 'GBTC')     , ('1PCMYt2z5DG8ejsJf1SYbNV2oynBXP8ucx', 'Grayscale', 'Grayscale GBTC ETF 1378', 'GBTC')     , ('1DeyaV2H3uxKgvfeNhnMP7eviKnekpbYLY', 'Grayscale', 'Grayscale GBTC ETF 1379', 'GBTC')     , ('1JvQ4mHuQxFtgudoRcEcrfvEWHZyPJ5yK2', 'Grayscale', 'Grayscale GBTC ETF 1380', 'GBTC')     , ('1GJwkzuW2nVWkUaPRtt7zXriEVKLNCQn6F', 'Grayscale', 'Grayscale GBTC ETF 1381', 'GBTC')     , ('1Kb5aFdm5Uqtk5WgCVmsZhnD6EiGyBM9hG', 'Grayscale', 'Grayscale GBTC ETF 1382', 'GBTC')     , ('14aYyXpZ5stD2MoR1CAPVwuqQwKu2zybup', 'Grayscale', 'Grayscale GBTC ETF 1383', 'GBTC')     , ('1JnGGjSo3K1HwJKMQ2bLAHZeXiS8XZ8WUs', 'Grayscale', 'Grayscale GBTC ETF 1384', 'GBTC')     , ('1smur7RA6eLtHAxK7QpTSNfYHKQENJvVH', 'Grayscale', 'Grayscale GBTC ETF 1385', 'GBTC')     , ('1HszoiiJibbLyQBxF8wkMV6onBwA6p7ULf', 'Grayscale', 'Grayscale GBTC ETF 1386', 'GBTC')     , ('1Hwedw3WeuhByxB4NkNM4R16WQsnCk9qq6', 'Grayscale', 'Grayscale GBTC ETF 1387', 'GBTC')     , ('1Bj9x2v4G2sg1cqBQxetTa6UrrzEHiUr8t', 'Grayscale', 'Grayscale GBTC ETF 1388', 'GBTC')     , ('19gtz5NjEN6B65j1oowmWqFkTUA25ox2up', 'Grayscale', 'Grayscale GBTC ETF 1389', 'GBTC')     , ('1LGZZmj7zBmy49g9j9s9ir7h9hPwpJKECq', 'Grayscale', 'Grayscale GBTC ETF 1390', 'GBTC')     , ('1LRjesXxNqKosMap5GikU67TiGSkLRTPSG', 'Grayscale', 'Grayscale GBTC ETF 1391', 'GBTC')     , ('1Etbmyvvx78Mb8zmwp9UeLDLjThD6aqRGm', 'Grayscale', 'Grayscale GBTC ETF 1392', 'GBTC')     , ('1NGU7Hg4TNnwZtwBKJn6rNfTKHx4V17Lr5', 'Grayscale', 'Grayscale GBTC ETF 1393', 'GBTC')     , ('1GxnKBjSviYvjtzUcbGqKSfKhLW5NJRt2j', 'Grayscale', 'Grayscale GBTC ETF 1394', 'GBTC')     , ('1EpiLddQVVwhwGpYoYKrs1TsAC3M3w738', 'Grayscale', 'Grayscale GBTC ETF 1395', 'GBTC')     , ('1Ak4beVSBaBjXkpNSjstBXwkQGsiKxaoUF', 'Grayscale', 'Grayscale GBTC ETF 1396', 'GBTC')     , ('18EhmVrBDCnFAZkdnJoLTQC6aqq5E5mosy', 'Grayscale', 'Grayscale GBTC ETF 1397', 'GBTC')     , ('1PSacuyAj7gSkrpRSiZhJky49cmabNHZuY', 'Grayscale', 'Grayscale GBTC ETF 1398', 'GBTC')     , ('1HJUGGJok8CAHTUmgT9FJMBs4w8bSven7D', 'Grayscale', 'Grayscale GBTC ETF 1399', 'GBTC')     , ('17FCTWzi8kipV7jcbzTLPBhZ8W34wFspoJ', 'Grayscale', 'Grayscale GBTC ETF 1400', 'GBTC')     , ('17x1SnQAdWwygjToZoMZkLHwgxMsQ2Gwo7', 'Grayscale', 'Grayscale GBTC ETF 1401', 'GBTC')     , ('17F9M2HFnvFTTQLsk2sXgpWLRRwY3fPPVo', 'Grayscale', 'Grayscale GBTC ETF 1402', 'GBTC')     , ('1FQVSZBXyiD79SDnL5Bvkyb3xQUwNLxHuJ', 'Grayscale', 'Grayscale GBTC ETF 1403', 'GBTC')     , ('1MQgEPMAv3ocmwhorEQP7XiGunE1vVSaNn', 'Grayscale', 'Grayscale GBTC ETF 1404', 'GBTC')     , ('1A8F8rwgM5mGP5Xstd9Pdo9khjdF12poam', 'Grayscale', 'Grayscale GBTC ETF 1405', 'GBTC')     , ('1MM69vYWyk78qU4134JLp3gQVje2MujLRk', 'Grayscale', 'Grayscale GBTC ETF 1406', 'GBTC')     , ('12x9YNGkjjVQ3GrHVdy6VH4wf9CfnnfL7Q', 'Grayscale', 'Grayscale GBTC ETF 1407', 'GBTC')     , ('1NbZEK8V752ST2tnJCmuTb7yTfhPBenKGe', 'Grayscale', 'Grayscale GBTC ETF 1408', 'GBTC')     , ('1HzMG3CfHRLjAyrrvzMX3xWRv3yebNhjnk', 'Grayscale', 'Grayscale GBTC ETF 1409', 'GBTC')     , ('17QTZaKKABCdwCoxQt1ghzp6CCtW2bfgyv', 'Grayscale', 'Grayscale GBTC ETF 1410', 'GBTC')     , ('13nvnN8CGUotKGLZ7ZoUGLnNYFSHHWLT6J', 'Grayscale', 'Grayscale GBTC ETF 1411', 'GBTC')     , ('15zmQZuKYx9wjGUL6CY4iG9uV7Tf8WG1T2', 'Grayscale', 'Grayscale GBTC ETF 1412', 'GBTC')     , ('1xEXWuDX1KT53gmCyXo3V78Dxu5o9Rk3R', 'Grayscale', 'Grayscale GBTC ETF 1413', 'GBTC')     , ('1A3HSpx4BwRLtVefv17JFhpPPVb4SCu8xy', 'Grayscale', 'Grayscale GBTC ETF 1414', 'GBTC')     , ('1Huo5x4sa2Bby1W3KQhs5W6twdUFNMg9bD', 'Grayscale', 'Grayscale GBTC ETF 1415', 'GBTC')     , ('1MvFSP3KzJ151xZziuHyJ6HNfvpVtjkzCt', 'Grayscale', 'Grayscale GBTC ETF 1416', 'GBTC')     , ('1MBw2KqNu4UnSG1TguRNJs6DY3MZ9tBFXR', 'Grayscale', 'Grayscale GBTC ETF 1417', 'GBTC')     , ('1HLjiQP5DcC1isGrwyAY2bSSTBpTiNfJmU', 'Grayscale', 'Grayscale GBTC ETF 1418', 'GBTC')     , ('1Q1vyihm6qBV4azzynVQ2rywCpPJuxgUE4', 'Grayscale', 'Grayscale GBTC ETF 1419', 'GBTC')     , ('1Ai4LLkrGpde6LL9GXbxqXrN9uB1sjiKox', 'Grayscale', 'Grayscale GBTC ETF 1420', 'GBTC')     , ('1J8F5rNFBNzyVSRf1WqNF2D4FtJFrL1yNS', 'Grayscale', 'Grayscale GBTC ETF 1421', 'GBTC')     , ('19Xd27gk5diypahfBJPrXLs8A9R4LkHXUb', 'Grayscale', 'Grayscale GBTC ETF 1422', 'GBTC')     , ('15YxCw4c3jVES3t3JSRTBetxYVeVw8LPq6', 'Grayscale', 'Grayscale GBTC ETF 1423', 'GBTC')     , ('1Eg8YGTWMuYWhMtTsW742n8cuViSJPgWZm', 'Grayscale', 'Grayscale GBTC ETF 1424', 'GBTC')     , ('1LYeUCRuneFXpZxQjVbpAVA2ubdpzGjawC', 'Grayscale', 'Grayscale GBTC ETF 1425', 'GBTC')     , ('1LUTAa4bJ76Qn2UBSTDvqetys53ycaoCfh', 'Grayscale', 'Grayscale GBTC ETF 1426', 'GBTC')     , ('164GuAneJcomojt4Lxa1bhLARsMG5QxALL', 'Grayscale', 'Grayscale GBTC ETF 1427', 'GBTC')     , ('15zvBbsyXsHHoMubgt6oJSH6gYw5w79BYE', 'Grayscale', 'Grayscale GBTC ETF 1428', 'GBTC')     , ('1Nk84mwbMm2zTBfatopVEcwPKsM6MZDaMF', 'Grayscale', 'Grayscale GBTC ETF 1429', 'GBTC')     , ('1CUTQjv3BgEEmDDSHaNgZBbR4CmENch8Rp', 'Grayscale', 'Grayscale GBTC ETF 1430', 'GBTC')     , ('1JDTefT59T3BqTpERNCcejEzmoZ6wvgRMe', 'Grayscale', 'Grayscale GBTC ETF 1431', 'GBTC')     , ('17of8kvJcJ5x7kZZXdh7DE5x2eyt7DiJUV', 'Grayscale', 'Grayscale GBTC ETF 1432', 'GBTC')     , ('1ERQcMbszWzJzyS6paFep6yUL2e63JxufK', 'Grayscale', 'Grayscale GBTC ETF 1433', 'GBTC')     , ('1DdGwLkxdSKJbYvd7ZGsdz9NRDP4fW8LRR', 'Grayscale', 'Grayscale GBTC ETF 1434', 'GBTC')     , ('1FwXbbi6G3ZDVb5aNozCD9662LTZYQpkiW', 'Grayscale', 'Grayscale GBTC ETF 1435', 'GBTC')     , ('1Ko723BabsJVkMyoYbNeEMS9QC2nkcwq3q', 'Grayscale', 'Grayscale GBTC ETF 1436', 'GBTC')     , ('15pDHZYt9VuYUBmRjy1ns3UACLX5ndGzYV', 'Grayscale', 'Grayscale GBTC ETF 1437', 'GBTC')     , ('15UJM1TzW876bxRqYDhUM6SbQHnrEJKTSi', 'Grayscale', 'Grayscale GBTC ETF 1438', 'GBTC')     , ('1KzVkUj7aEeEuhUFoZ3b2cC8DWuync5hhF', 'Grayscale', 'Grayscale GBTC ETF 1439', 'GBTC')     , ('14a2aJtV2z9yeXK4GkKxkmgTVgeFaDnNxq', 'Grayscale', 'Grayscale GBTC ETF 1440', 'GBTC')     , ('1BJXHn4yi53vGTBqfbW9FwTtPgfi1PfoV2', 'Grayscale', 'Grayscale GBTC ETF 1441', 'GBTC')     , ('1JcBHvEDarp4zwqJrv7TvyjzMWNuTavESm', 'Grayscale', 'Grayscale GBTC ETF 1442', 'GBTC')     , ('1LqLHCCg4h6a3QwimQqWBn716qXbXhGLdQ', 'Grayscale', 'Grayscale GBTC ETF 1443', 'GBTC')     , ('1P6xNVUzsejwmLbmN81VBfe6RNtZPmKyZM', 'Grayscale', 'Grayscale GBTC ETF 1444', 'GBTC')     , ('12wsehBerNuK2muS3TrRmiVP1Y5ik5sTMF', 'Grayscale', 'Grayscale GBTC ETF 1445', 'GBTC')     , ('1FrNgZi3tc1sTLWftYErfpVVuA5kRijmCq', 'Grayscale', 'Grayscale GBTC ETF 1446', 'GBTC')     , ('1CNzdYXhuXVeYMPSTypW831SAx1WzXDbuQ', 'Grayscale', 'Grayscale GBTC ETF 1447', 'GBTC')     , ('1HFm1629tAjtBPjVNShCDaJa8jje8F2Qr3', 'Grayscale', 'Grayscale GBTC ETF 1448', 'GBTC')     , ('19ME1Wi5VBBvUVtLoiBzQiwPMf3m5mAz5Q', 'Grayscale', 'Grayscale GBTC ETF 1449', 'GBTC')     , ('13bXAtBx1ApgeWAcbyeNJtyRpxY7w51eSD', 'Grayscale', 'Grayscale GBTC ETF 1450', 'GBTC')     , ('1JnHxjK6W91Cqqjow9qwpptEZczbUdu6A4', 'Grayscale', 'Grayscale GBTC ETF 1451', 'GBTC')     , ('1KJ2QMM6ZuQfSEP7Q6B7N6EvNqDUBnsuv5', 'Grayscale', 'Grayscale GBTC ETF 1452', 'GBTC')     , ('1BDQW4haHbJEQkpq7maD7Cu491MaUoYu2e', 'Grayscale', 'Grayscale GBTC ETF 1453', 'GBTC')     , ('14V5Kw5uGMJ6Vt6VUatMr9SPZDEFzNVw4u', 'Grayscale', 'Grayscale GBTC ETF 1454', 'GBTC')     , ('1GQQqVmW9Pps3amtw9GidgDqsPCYS1ujd7', 'Grayscale', 'Grayscale GBTC ETF 1455', 'GBTC')     , ('1AXkx626ZM82MswXKAD2zrKYHJTF6zucip', 'Grayscale', 'Grayscale GBTC ETF 1456', 'GBTC')     , ('1A1iVJfER91eV7Ey1jxcXi3Lmz5UpTF1qY', 'Grayscale', 'Grayscale GBTC ETF 1457', 'GBTC')     , ('1LA2TYEpxUwqCqSs9vUEECji9KVyoBxDsb', 'Grayscale', 'Grayscale GBTC ETF 1458', 'GBTC')     , ('1PqszYQB3x34AebXM53dWqQoUj38f94CQU', 'Grayscale', 'Grayscale GBTC ETF 1459', 'GBTC')     , ('1CAUGAt7SxU6Yma3v6TSUx5Nk3XZAbj4GX', 'Grayscale', 'Grayscale GBTC ETF 1460', 'GBTC')     , ('1AQhovdE8vxYzFEKLLTyrCMyMGBDbqmtN2', 'Grayscale', 'Grayscale GBTC ETF 1461', 'GBTC')     , ('1LsuLZ785KPFAxjrkenXUtk6bUnTT6hTwX', 'Grayscale', 'Grayscale GBTC ETF 1462', 'GBTC')     , ('1DZ8mM9XXTG6iHwdxUx7cVXARhcAmFMGy5', 'Grayscale', 'Grayscale GBTC ETF 1463', 'GBTC')     , ('1CFzCtWyemZ6BTFqMYaKb2xjxeF9vxJK6t', 'Grayscale', 'Grayscale GBTC ETF 1464', 'GBTC')     , ('14zHNp5uBQFPCUSv8nqQ6HF6KvqdB9xG7G', 'Grayscale', 'Grayscale GBTC ETF 1465', 'GBTC')     , ('1G3KssGBtxLiMPLY5iLcaGffpKXX4zpS5k', 'Grayscale', 'Grayscale GBTC ETF 1466', 'GBTC')     , ('1FYX8W4YuzcYiZJp9DcfPMCSzqTANTTuz9', 'Grayscale', 'Grayscale GBTC ETF 1467', 'GBTC')     , ('17dazZyFig9M4iA1oN1vHdPVKbm3FZkrBC', 'Grayscale', 'Grayscale GBTC ETF 1468', 'GBTC')     , ('1LnL7Wd1Ao8jvrGPRtjfh7pkP4q3nrmjQD', 'Grayscale', 'Grayscale GBTC ETF 1469', 'GBTC')     , ('1DLryTc4xeZE5dVSwN4491Cpjao2exPErt', 'Grayscale', 'Grayscale GBTC ETF 1470', 'GBTC')     , ('1FyF5kXnkFVDXrL75rMSo1jPxVNHGa5v3v', 'Grayscale', 'Grayscale GBTC ETF 1471', 'GBTC')     , ('1GPR9iR3iYAfZPbxdKSPGcPcvMBwjZ7A6q', 'Grayscale', 'Grayscale GBTC ETF 1472', 'GBTC')     , ('1P8ErCGct4BA15nVBQ6eC3qunNP8A94SKS', 'Grayscale', 'Grayscale GBTC ETF 1473', 'GBTC')     , ('1ER39pibUfN5zahNBvxBmhka4Jk3JjJFfw', 'Grayscale', 'Grayscale GBTC ETF 1474', 'GBTC')     , ('1MgVzXJVzo2HYuZgt15AsgAiFtjzkLk4m6', 'Grayscale', 'Grayscale GBTC ETF 1475', 'GBTC')     , ('1239MbVMMGaKRbgGrDLgh5mqnzbw8Jpc26', 'Grayscale', 'Grayscale GBTC ETF 1476', 'GBTC')     , ('13MkSyBnyRFxRzDjr1iuGucDZsATg9hgAB', 'Grayscale', 'Grayscale GBTC ETF 1477', 'GBTC')     , ('15wP2GaprvSpZpvY4Jt2XX5rTXFmyr2iCy', 'Grayscale', 'Grayscale GBTC ETF 1478', 'GBTC')     , ('1QEgUVz1kF2Bpssz2ngqEKDy1jRYJucoQk', 'Grayscale', 'Grayscale GBTC ETF 1479', 'GBTC')     , ('1BM6U1cVZy4TcwPGqezxvmXxgPHWjjMe1J', 'Grayscale', 'Grayscale GBTC ETF 1480', 'GBTC')     , ('12ewYc1vcArQRAaZkQkXcu5RAQza66o6N9', 'Grayscale', 'Grayscale GBTC ETF 1481', 'GBTC')     , ('1HX9dbgcA3pXnTf8qCYy6gTCYuJZQxGrRU', 'Grayscale', 'Grayscale GBTC ETF 1482', 'GBTC')     , ('14egyDmUWUypSNPJZu4cuomuKYcMgUKaZT', 'Grayscale', 'Grayscale GBTC ETF 1483', 'GBTC')     , ('16Z7wuAUPce2rf9GRhKALvgfshRSLBN9UN', 'Grayscale', 'Grayscale GBTC ETF 1484', 'GBTC')     , ('18HDzjgyqmjUGXtWSGwc8o3vMkfv43yi8E', 'Grayscale', 'Grayscale GBTC ETF 1485', 'GBTC')     , ('1LhaP1jAhFwFrY3v7iFhQbnDnLKCZpz81h', 'Grayscale', 'Grayscale GBTC ETF 1486', 'GBTC')     , ('1BccPqfLynSuZKmd7vgocqY8XjKr8D9MCC', 'Grayscale', 'Grayscale GBTC ETF 1487', 'GBTC')     , ('13EcjjTun3EkkwkknrPLnCn6FkQj6YBWHz', 'Grayscale', 'Grayscale GBTC ETF 1488', 'GBTC')     , ('1KHhWJYsdEpD6Yu3F4TvAEQ145w77CvhP1', 'Grayscale', 'Grayscale GBTC ETF 1489', 'GBTC')     , ('1PxLMwHMWmVGWTXqFBPxDsVVqeEcxSj6Fp', 'Grayscale', 'Grayscale GBTC ETF 1490', 'GBTC')     , ('1GazAV6MARqEVxQMyksMpyRDgTo29CQPhx', 'Grayscale', 'Grayscale GBTC ETF 1491', 'GBTC')     , ('1JBjUHTxAwCrrSj6gdodMd5zmJv8mfZLYg', 'Grayscale', 'Grayscale GBTC ETF 1492', 'GBTC')     , ('1LuawgNTGFTBszHdk2V1WkgvCkcHwWmeoE', 'Grayscale', 'Grayscale GBTC ETF 1493', 'GBTC')     , ('1J7DXXsBVqaT1LPdHoce3adkVz1ojce3xb', 'Grayscale', 'Grayscale GBTC ETF 1494', 'GBTC')     , ('1FByJyyxgtddvM4TwLCVkg44jEZDDKgfWz', 'Grayscale', 'Grayscale GBTC ETF 1495', 'GBTC')     , ('1HsPs1x5GHt6hybJKW16hZZ5g4KCaRLArZ', 'Grayscale', 'Grayscale GBTC ETF 1496', 'GBTC')     , ('1HcHqgisfaJQah27onShK8XFxKLHv9MwFs', 'Grayscale', 'Grayscale GBTC ETF 1497', 'GBTC')     , ('1CPbZkbH62hTxVwedDQXagVs2nyyESDnEd', 'Grayscale', 'Grayscale GBTC ETF 1498', 'GBTC')     , ('18TWc8LRLZjhZVDRcmW5qBBSkWJoSEBXA1', 'Grayscale', 'Grayscale GBTC ETF 1499', 'GBTC')     , ('1L1ntSr5oaw8NjLXN9e7cJsoPipzKDDXhd', 'Grayscale', 'Grayscale GBTC ETF 1500', 'GBTC')     , ('14nVK9XWTc67f1wyHyedsKt74SQknv2oA5', 'Grayscale', 'Grayscale GBTC ETF 1501', 'GBTC')     , ('1K8WjNv6wGQ7TH8DpdsXaohBS2zNNjfdn2', 'Grayscale', 'Grayscale GBTC ETF 1502', 'GBTC')     , ('1HC42VyxECQFFboNFQgULE4zqi3goLCmqi', 'Grayscale', 'Grayscale GBTC ETF 1503', 'GBTC')     , ('1Cs3bdAoBZVx3sXb5F5CXPzZ2RfejsvAG1', 'Grayscale', 'Grayscale GBTC ETF 1504', 'GBTC')     , ('16yLdX7JiyNyZDKJfmCTN8Gxdwfk4dDLXm', 'Grayscale', 'Grayscale GBTC ETF 1505', 'GBTC')     , ('17CzAmGpwXztbtJdwXb7ANyKgqaG121BY6', 'Grayscale', 'Grayscale GBTC ETF 1506', 'GBTC')     , ('1BvBUoN1MMLxuMCJwfrJahG7gNHFcUuvDd', 'Grayscale', 'Grayscale GBTC ETF 1507', 'GBTC')     , ('16QYvw7Va5cERQ9oVUpwAn1RmnyyWUu3Zg', 'Grayscale', 'Grayscale GBTC ETF 1508', 'GBTC')     , ('1CXDsQY5FbiWPdme7sWtRg5hkmEfk4cr9C', 'Grayscale', 'Grayscale GBTC ETF 1509', 'GBTC')     , ('17QZLTrdQmpTM4Nk4tuog1MkSrR8uZCeut', 'Grayscale', 'Grayscale GBTC ETF 1510', 'GBTC')     , ('1GyAeCR2Ej2ScUvDjnWfp7UEt5UcHr5g71', 'Grayscale', 'Grayscale GBTC ETF 1511', 'GBTC')     , ('1DPZZiebRXkXxZA2Q7watXSNSZzmPAmZQu', 'Grayscale', 'Grayscale GBTC ETF 1512', 'GBTC')     , ('1KEkU7cgSpbdxFL3vtzDSvTcJc3fMuKNcc', 'Grayscale', 'Grayscale GBTC ETF 1513', 'GBTC')     , ('1Hy2up7uQDbPxNcdM14HiXGt3owPHNrn5p', 'Grayscale', 'Grayscale GBTC ETF 1514', 'GBTC')     , ('1HtbJrx6ABjkF5MCA8kk3z2ukyTuxEm9gk', 'Grayscale', 'Grayscale GBTC ETF 1515', 'GBTC')     , ('1FXmRimSBs8PqceVezpDvwwngEE64NYnDS', 'Grayscale', 'Grayscale GBTC ETF 1516', 'GBTC')     , ('193mSGSi9WpvAT2DZSjBibctJumjqYCJQu', 'Grayscale', 'Grayscale GBTC ETF 1517', 'GBTC')     , ('17MkFCJ5VGSAgJQwJrEX2rZ2XsL6xeWaZT', 'Grayscale', 'Grayscale GBTC ETF 1518', 'GBTC')     , ('1Lyb3Nkc6XDTHxurFf9FcaSzBqc46ZCqBY', 'Grayscale', 'Grayscale GBTC ETF 1519', 'GBTC')     , ('1CtNK3de7WErVLCnzXzdHnSQePKhpjCTMp', 'Grayscale', 'Grayscale GBTC ETF 1520', 'GBTC')     , ('14Hb1QwTfXowMNxTnaXqdYDPZW14uda7cW', 'Grayscale', 'Grayscale GBTC ETF 1521', 'GBTC')     , ('1B8PuutWDc6cqUxxfro3nGgWg6yN6dWjgr', 'Grayscale', 'Grayscale GBTC ETF 1522', 'GBTC')     , ('1DpunMJFcxSK4ZYV5z2uWgoAdK5629wEZS', 'Grayscale', 'Grayscale GBTC ETF 1523', 'GBTC')     , ('1827jYfj3FLQEfjyaaenG3cQ73MtimixvB', 'Grayscale', 'Grayscale GBTC ETF 1524', 'GBTC')     , ('1F8nf4QU6EZ5LZXzatxRUfzMKaX2ZFzApf', 'Grayscale', 'Grayscale GBTC ETF 1525', 'GBTC')     , ('1FZPJJ5Q1sqDMitfMwySmrtmkez9Sg9Q1G', 'Grayscale', 'Grayscale GBTC ETF 1526', 'GBTC')     , ('19rjkWyxw5tHewH7HSbRVPwpqzs1cGPcmS', 'Grayscale', 'Grayscale GBTC ETF 1527', 'GBTC')     , ('1CV6C38fKNyoNJGJJemxGwdPBkz15RrqJ3', 'Grayscale', 'Grayscale GBTC ETF 1528', 'GBTC')     , ('1JcBCwKv4uNh61hJoHEW9vP9RT4SpzEiJA', 'Grayscale', 'Grayscale GBTC ETF 1529', 'GBTC')     , ('16CAyWM7hmhx42RSj3H6CqP46CXLxATKu4', 'Grayscale', 'Grayscale GBTC ETF 1530', 'GBTC')     , ('1BDaLcjLnKfRZ64jz8UBv3tGfi1AXqc6Wy', 'Grayscale', 'Grayscale GBTC ETF 1531', 'GBTC')     , ('175CbpZSXrDjcg6w9jx3U1rYYcYszQwWWy', 'Grayscale', 'Grayscale GBTC ETF 1532', 'GBTC')     , ('1JiwprZFt31kLxhYFPhdcaQjsZw52b2xXe', 'Grayscale', 'Grayscale GBTC ETF 1533', 'GBTC')     , ('19E8SjeJ2EKs3FAq1pynSojhBfwYUinBJ6', 'Grayscale', 'Grayscale GBTC ETF 1534', 'GBTC')     , ('1FLev7pJihFhtSZQrzWFTAndmFW9m35ZfG', 'Grayscale', 'Grayscale GBTC ETF 1535', 'GBTC')     , ('16anfDbWWHk5EkQnV7c1Asj45LHCyArkMy', 'Grayscale', 'Grayscale GBTC ETF 1536', 'GBTC')     , ('1EAszARq7NExLAKsmQGk6Vjdj7X21BaKPW', 'Grayscale', 'Grayscale GBTC ETF 1537', 'GBTC')     , ('19Zy1B9s4GbYDpacEdYngtWRA2opGgWdYq', 'Grayscale', 'Grayscale GBTC ETF 1538', 'GBTC')     , ('1MkJqHbww8GyuU4Tc3JZmzz2LUyHqRy75i', 'Grayscale', 'Grayscale GBTC ETF 1539', 'GBTC')     , ('18j523FXJTAfRDSr2yf7gX5fWrAj4XzQr3', 'Grayscale', 'Grayscale GBTC ETF 1540', 'GBTC')     , ('12Hs4bN9VkfsmK6vRnYaxMU8TYPUKGRQvb', 'Grayscale', 'Grayscale GBTC ETF 1541', 'GBTC')     , ('1M9tDYNDPoUS2PHz8uY3acUKjDsF4ZeB5n', 'Grayscale', 'Grayscale GBTC ETF 1542', 'GBTC')     , ('1GzHvHWm8TsyHLyrL86dSHnWjbUpPFuYye', 'Grayscale', 'Grayscale GBTC ETF 1543', 'GBTC')     , ('14w4LJBrcTBGkniEpHNrtJZ3ZKdngcVyjt', 'Grayscale', 'Grayscale GBTC ETF 1544', 'GBTC')     , ('13hAAjgzPsRYAF45DcGyoXpWSE84rRYirD', 'Grayscale', 'Grayscale GBTC ETF 1545', 'GBTC')     , ('1MiFR8eCJAPGNYgVQruoFiWG4ofEKM28Bi', 'Grayscale', 'Grayscale GBTC ETF 1546', 'GBTC')     , ('14njchQ9i1JtYvsiF3zxeLp5ZnKRxrRzXD', 'Grayscale', 'Grayscale GBTC ETF 1547', 'GBTC')     , ('18g7ijZHNppNkm6bMaDj3tsaCevj9bdndy', 'Grayscale', 'Grayscale GBTC ETF 1548', 'GBTC')     , ('1AUcxbHqVJvgsdhWz7ZuYVLpmXWCziZnfg', 'Grayscale', 'Grayscale GBTC ETF 1549', 'GBTC')     , ('18iYYezJ2AveJxGkQk7voby3JHzxsp3FTg', 'Grayscale', 'Grayscale GBTC ETF 1550', 'GBTC')     , ('13HfUxV6KwZWhVoYvuZS4qBXbVJgP75gNu', 'Grayscale', 'Grayscale GBTC ETF 1551', 'GBTC')     , ('1UdU6LqMmr54E2Q19djGv58vq6VvUW1wn', 'Grayscale', 'Grayscale GBTC ETF 1552', 'GBTC')     , ('1J7YU4or62HJQhKMpAELFhwSqoRTAfDbHf', 'Grayscale', 'Grayscale GBTC ETF 1553', 'GBTC')     , ('1LrfBd5a1wY6f1DrFM5a1KT8BFR2QrZoh9', 'Grayscale', 'Grayscale GBTC ETF 1554', 'GBTC')     , ('1N2RaybZ7WaZRr2urKBreApWzpEwoiQUio', 'Grayscale', 'Grayscale GBTC ETF 1555', 'GBTC')     , ('1MsFyEGmSLY1UN372xrbNwFbvmSi6LVdzL', 'Grayscale', 'Grayscale GBTC ETF 1556', 'GBTC')     , ('1PmjbZ5Pe8fsq9LvKtTnLvQCX7u2hiGXSV', 'Grayscale', 'Grayscale GBTC ETF 1557', 'GBTC')     , ('1ECxFEsPwgipd4uDWznd9RowdeVgjvsEcV', 'Grayscale', 'Grayscale GBTC ETF 1558', 'GBTC')     , ('17s2MpNNtyk6t5nA1Cvd9s1Ma1ko3jDEMD', 'Grayscale', 'Grayscale GBTC ETF 1559', 'GBTC')     , ('1Ltf3gtGBvsQHKfASZE3EFAciYRqt9bE5Y', 'Grayscale', 'Grayscale GBTC ETF 1560', 'GBTC')     , ('1JyiJJLLDc9xHRsinLZY4AqhvmDeXKXUXb', 'Grayscale', 'Grayscale GBTC ETF 1561', 'GBTC')     , ('1Df9R4Npptz1duUXPJcD83UfgZ6TUFJ3KG', 'Grayscale', 'Grayscale GBTC ETF 1562', 'GBTC')     , ('1DWtxBupBQDoHfjxQbzzPvjRaxLNDah9ik', 'Grayscale', 'Grayscale GBTC ETF 1563', 'GBTC')     , ('1E2C9gs1yG6YxLNGFpuaN7WyWf9JzrzDLH', 'Grayscale', 'Grayscale GBTC ETF 1564', 'GBTC')     , ('1Hx3E9VPnrkmUTb7viyLDb9ea5C44HSTLd', 'Grayscale', 'Grayscale GBTC ETF 1565', 'GBTC')     , ('13YysXS5yKVDmw6UafaVGKktLPsyeqh1rV', 'Grayscale', 'Grayscale GBTC ETF 1566', 'GBTC')     , ('16HpJE9rjRgvQBoH31adUUgqsc1ZKPJJmR', 'Grayscale', 'Grayscale GBTC ETF 1567', 'GBTC')     , ('1DFPnEwduTN35wbfJQFNcKkVJSKa2zR3hq', 'Grayscale', 'Grayscale GBTC ETF 1568', 'GBTC')     , ('14QK5YfC5AKEEiYFXiU7WQ5ncnF3eAycaG', 'Grayscale', 'Grayscale GBTC ETF 1569', 'GBTC')     , ('1JPRag2s1a8o3DzoRNTxbH83Knfc9CfeEn', 'Grayscale', 'Grayscale GBTC ETF 1570', 'GBTC')     , ('1GfHS3jxmrLoXqgh4dDmTzVdFwBAyYFAEg', 'Grayscale', 'Grayscale GBTC ETF 1571', 'GBTC')     , ('1L5waLzR8s7ovRbkGpWJ7urckmJQU9AkBX', 'Grayscale', 'Grayscale GBTC ETF 1572', 'GBTC')     , ('1AjZVCZgr38Wqh9QnrxR7impQXfMCcV2ZA', 'Grayscale', 'Grayscale GBTC ETF 1573', 'GBTC')     , ('1ADXh6b8EYRgy32xU9aV3ux4X4iRWRf4G4', 'Grayscale', 'Grayscale GBTC ETF 1574', 'GBTC')     , ('1KcDdzWit6ENfch9e9taW9ktQFw7kWy4gd', 'Grayscale', 'Grayscale GBTC ETF 1575', 'GBTC')     , ('1Hy1iAnnYhpcezQLiZJNB8HjzAR8t3aAdT', 'Grayscale', 'Grayscale GBTC ETF 1576', 'GBTC')     , ('1BxEibco4oq2q6C6avByrAEs6WmjfBaLqC', 'Grayscale', 'Grayscale GBTC ETF 1577', 'GBTC')     , ('1HJNi7M24S3XFhor9onHSpQ4gtT2SuvWSR', 'Grayscale', 'Grayscale GBTC ETF 1578', 'GBTC')     , ('1LZGE6enKwxJRrJRU2ioDQwhUKkH9sNPjK', 'Grayscale', 'Grayscale GBTC ETF 1579', 'GBTC')     , ('1GgNQr4io6FtKTvPb2i9dmEduENtzcrkiW', 'Grayscale', 'Grayscale GBTC ETF 1580', 'GBTC')     , ('1JsxQrJEZHXGXPowvf7n4AYcw6gJgtzoWj', 'Grayscale', 'Grayscale GBTC ETF 1581', 'GBTC')     , ('1DBtRf6NjmKJKFpvZyzdTj6UJq3yzvDBGJ', 'Grayscale', 'Grayscale GBTC ETF 1582', 'GBTC')     , ('1BJ6gryuzuhTV4ZqcLcgToFqx1uBa8p9hH', 'Grayscale', 'Grayscale GBTC ETF 1583', 'GBTC')     , ('1JGZcapzSXdFHjz2tdErMQNZKgr2kAutT2', 'Grayscale', 'Grayscale GBTC ETF 1584', 'GBTC')     , ('1GAo13YuCTvHa7dfwyxptKHUrPf3vsLdB8', 'Grayscale', 'Grayscale GBTC ETF 1585', 'GBTC')     , ('1HrvrtcFKUiQNor5PG8hXuNyzrqmWGGdws', 'Grayscale', 'Grayscale GBTC ETF 1586', 'GBTC')     , ('1FM3yseuvM8fEAqPbsAqKjwMApbn5sKMk6', 'Grayscale', 'Grayscale GBTC ETF 1587', 'GBTC')     , ('1cDJHpteruQpBpXwCMfByHrNEpvGXB9wv', 'Grayscale', 'Grayscale GBTC ETF 1588', 'GBTC')     , ('19Shat4SLtXFhbkugQMouQR12nadAdNBwx', 'Grayscale', 'Grayscale GBTC ETF 1589', 'GBTC')     , ('1G8ZQNv8pSZCLphn84Ph32k8HsFkxH3mQ4', 'Grayscale', 'Grayscale GBTC ETF 1590', 'GBTC')     , ('13eez6WJPPHkpsofRebMFHVpKKXj8DBdc3', 'Grayscale', 'Grayscale GBTC ETF 1591', 'GBTC')     , ('1NCQd3oCcfxnjGq9ZvaFpMmz8KGmQHuBSD', 'Grayscale', 'Grayscale GBTC ETF 1592', 'GBTC')     , ('14RiEpGyDix54K3RdPagdmfsTTDFjcqeeA', 'Grayscale', 'Grayscale GBTC ETF 1593', 'GBTC')     , ('1JNuhbkJyFnDQeZvyD1eDJ2gfoyxMZvT7M', 'Grayscale', 'Grayscale GBTC ETF 1594', 'GBTC')     , ('1JgEVCqXUxJG4EHv9sVv9ApE8h5Fu5TutF', 'Grayscale', 'Grayscale GBTC ETF 1595', 'GBTC')     , ('1Q9wxCJkg4nzXHy8FQnXbkYbUmiCki1Kty', 'Grayscale', 'Grayscale GBTC ETF 1596', 'GBTC')     , ('1Kk5QrCWV2MRuw56pXg8HhiQtDpv6sc4yq', 'Grayscale', 'Grayscale GBTC ETF 1597', 'GBTC')     , ('1DVqMwwFmHbwpVvxF8gtU2HWmiYLRDCnYN', 'Grayscale', 'Grayscale GBTC ETF 1598', 'GBTC')     , ('1KEHN64GoNRsC9TnbmgiZ8mGzUDQu9zXtG', 'Grayscale', 'Grayscale GBTC ETF 1599', 'GBTC')     , ('1FTFUbTGfKxKK35ovKTSRsaPFuD387p2xm', 'Grayscale', 'Grayscale GBTC ETF 1600', 'GBTC')     , ('1ErPo4StxnVTfPf4rbJsZEER7tVGFwokXn', 'Grayscale', 'Grayscale GBTC ETF 1601', 'GBTC')     , ('15RAzkLdYPud9gZtTuv5L7GRFfT6akPMGp', 'Grayscale', 'Grayscale GBTC ETF 1602', 'GBTC')     , ('1CT1ieohomRV2hdJfrKgNoDuJ5tBgH95se', 'Grayscale', 'Grayscale GBTC ETF 1603', 'GBTC')     , ('18dp88hRjpcVNJ8tj6JxdPKHGgYkGAYeLj', 'Grayscale', 'Grayscale GBTC ETF 1604', 'GBTC')     , ('14Q1feVdXh3q34s7Fwcq7V2nrkrJFtfi5B', 'Grayscale', 'Grayscale GBTC ETF 1605', 'GBTC')     , ('16vd2YfcGK9mw3GZXzL5o23m7gdBGXKHNz', 'Grayscale', 'Grayscale GBTC ETF 1606', 'GBTC')     , ('1EoejV978rtCejgXqXrx72YeY1wC9q9eC3', 'Grayscale', 'Grayscale GBTC ETF 1607', 'GBTC')     , ('1EdBBrg4zzzKD654ZwFDhTk6PtuPvmcqs7', 'Grayscale', 'Grayscale GBTC ETF 1608', 'GBTC')     , ('1FEtSisM6HdKWduDRsButZTSQnBHceZ5Cn', 'Grayscale', 'Grayscale GBTC ETF 1609', 'GBTC')     , ('14dxXHxFWzKbwYDytuhrg517Xz5SuF9PBd', 'Grayscale', 'Grayscale GBTC ETF 1610', 'GBTC')     , ('1EWHwsmS2WyocR6Jh4A6yrH8mNBMnbp6tm', 'Grayscale', 'Grayscale GBTC ETF 1611', 'GBTC')     , ('17kLD1zp1YZoDF8pogy67fYavk4emPhmZi', 'Grayscale', 'Grayscale GBTC ETF 1612', 'GBTC')     , ('121gtt9eoLcdhFGz2Rh8kWQmyL1TgNpPMz', 'Grayscale', 'Grayscale GBTC ETF 1613', 'GBTC')     , ('17EwKxh1AZuFRDCX6WHcTWn8wB2rKK5iJZ', 'Grayscale', 'Grayscale GBTC ETF 1614', 'GBTC')     , ('1AiKj3NSp23kd3NKFC3YD7NqTRyWAGidYz', 'Grayscale', 'Grayscale GBTC ETF 1615', 'GBTC')     , ('1HGiAd4LjR7a4GBXyroGjoscec5bUPNpKV', 'Grayscale', 'Grayscale GBTC ETF 1616', 'GBTC')     , ('1A6VdXbdMrC42ZHzRCf75ho95pV1oGCLyW', 'Grayscale', 'Grayscale GBTC ETF 1617', 'GBTC')     , ('14NHSHuvHk3zFELoDMTVmug6AsxtYQhPL5', 'Grayscale', 'Grayscale GBTC ETF 1618', 'GBTC')     , ('1PAvvs1Ebjtvzrgv1ARg2GHJPZkTnZZgr7', 'Grayscale', 'Grayscale GBTC ETF 1619', 'GBTC')     , ('124gYpVYfwyVWaZAsazZhajcdRV2SvVEUf', 'Grayscale', 'Grayscale GBTC ETF 1620', 'GBTC')     , ('1AsygWuPQcD5NZjL1RnnxvgcdFKM2pYAMz', 'Grayscale', 'Grayscale GBTC ETF 1621', 'GBTC')     , ('1EKCr7MpYYSXfJ7UgTLFVV9mCQEKXiUu5Z', 'Grayscale', 'Grayscale GBTC ETF 1622', 'GBTC')     , ('1Cqt6fDv83MEhYvUeHffkWg5XeQGycvEaP', 'Grayscale', 'Grayscale GBTC ETF 1623', 'GBTC')     , ('1CS4cXQEtMe9u995WFKp81LB2VNCNNXmU', 'Grayscale', 'Grayscale GBTC ETF 1624', 'GBTC')     , ('1HQwHFJsU6GC8yDmagYnAUHdvQ8HGu8You', 'Grayscale', 'Grayscale GBTC ETF 1625', 'GBTC')     , ('12CKLhRtjLwaszbSyBFFfsK353sZBJ2kE6', 'Grayscale', 'Grayscale GBTC ETF 1626', 'GBTC')     , ('1A3gsTxW44oKCvLkxeYQonZQfW7dVYPPvR', 'Grayscale', 'Grayscale GBTC ETF 1627', 'GBTC')     , ('1ENc6kfUYtsmQqW3LG85LbTXWdRWfoysc', 'Grayscale', 'Grayscale GBTC ETF 1628', 'GBTC')     , ('12GTsgeiScr98ZsgdsrTXCaXDynCHNxZu1', 'Grayscale', 'Grayscale GBTC ETF 1629', 'GBTC')     , ('15oSzPcMRZtZ6mKS1ttTksYAm3HFknWomS', 'Grayscale', 'Grayscale GBTC ETF 1630', 'GBTC')     , ('1DFCezdYcdbiy57uzSFJsve85LK7LFqVaV', 'Grayscale', 'Grayscale GBTC ETF 1631', 'GBTC')     , ('1E1TES4Gm4XhEPrMpDc5bgD4emBGG6sFiW', 'Grayscale', 'Grayscale GBTC ETF 1632', 'GBTC')     , ('1EXuryDUEMgjFaY7gPzTvo5xn4nwFNufUe', 'Grayscale', 'Grayscale GBTC ETF 1633', 'GBTC')     , ('1GTKHzuTUvpXQpxr3jjddz751c3KtMTG1r', 'Grayscale', 'Grayscale GBTC ETF 1634', 'GBTC')     , ('18LZtMsmcjzooNdkvUHQcstjDvaA9RdTXd', 'Grayscale', 'Grayscale GBTC ETF 1635', 'GBTC')     , ('19H2M1H9YAbSt3hsZisb5VH1JDHyQjf4Z2', 'Grayscale', 'Grayscale GBTC ETF 1636', 'GBTC')     , ('12xDey6rk9MsyZBNjLGmmWH79mjHFvJXn7', 'Grayscale', 'Grayscale GBTC ETF 1637', 'GBTC')     , ('1E1iSatebmboK5KtpX46YNQXokbvTZsYC1', 'Grayscale', 'Grayscale GBTC ETF 1638', 'GBTC')     , ('13mhtYFVa9LyFnDaUZCKyjoiM6zaKSKdnR', 'Grayscale', 'Grayscale GBTC ETF 1639', 'GBTC')     , ('18hLyDuYe3XzzgPFpTdNfWZbkDncMPNL3L', 'Grayscale', 'Grayscale GBTC ETF 1640', 'GBTC')     , ('1Mwzbp9EvVfs4xjj7UgvoSjawCGCiBm7Lf', 'Grayscale', 'Grayscale GBTC ETF 1641', 'GBTC')     , ('1PNz1DnQWFdXx3pGXcxBcBsuyEfTXQHfJL', 'Grayscale', 'Grayscale GBTC ETF 1642', 'GBTC')     , ('1JfuPcmc6vt2KrARdeR1XgQJ3p7jhbUhhQ', 'Grayscale', 'Grayscale GBTC ETF 1643', 'GBTC')     , ('1FNXy9Yi5C5fSbGZh5KPrkju6JP53m6PPE', 'Grayscale', 'Grayscale GBTC ETF 1644', 'GBTC')     , ('1L61i1pjNELfF8NBufQ3gr6TpXZkZvn4AX', 'Grayscale', 'Grayscale GBTC ETF 1645', 'GBTC')     , ('1DGyizcv6SJiVuV9urBDDYz81oXSAce7iP', 'Grayscale', 'Grayscale GBTC ETF 1646', 'GBTC')     , ('1AAtY7GKejYwkg85dsqXFJ2TCqXufEqWx5', 'Grayscale', 'Grayscale GBTC ETF 1647', 'GBTC')     , ('19TRPmJNcutknYDk4advyrGxP8RqzGfv63', 'Grayscale', 'Grayscale GBTC ETF 1648', 'GBTC')     , ('1859q4kNpatWhJuLbtCF6schSK2Bvd3h9x', 'Grayscale', 'Grayscale GBTC ETF 1649', 'GBTC')     , ('164vMd7DehiENKsGo8UXYaaHjNgQdwZL9P', 'Grayscale', 'Grayscale GBTC ETF 1650', 'GBTC')     , ('1m6HZZyrgxVLPRKXX3my7UP3djN61WNRx', 'Grayscale', 'Grayscale GBTC ETF 1651', 'GBTC')     , ('1yWT2fbNCijCnKTLP5Z28b24uPsHELzkY', 'Grayscale', 'Grayscale GBTC ETF 1652', 'GBTC')     , ('154Yrf66vv2PJyvekbrJB9o8w2a7ioPGZh', 'Grayscale', 'Grayscale GBTC ETF 1653', 'GBTC')     , ('13yspux8c5RE27sfT3ULo2hNnRnDuScRr9', 'Grayscale', 'Grayscale GBTC ETF 1654', 'GBTC')     , ('17DGuumiErYmivrXCZKQB9QTPdasAU2wUg', 'Grayscale', 'Grayscale GBTC ETF 1655', 'GBTC')     , ('1J3q8E9LDVhqCUq5vnAr3BytYGLLrDm6KT', 'Grayscale', 'Grayscale GBTC ETF 1656', 'GBTC')     , ('1J8Acwitt96rVGAvLKk8GXWez2TnQM6TW9', 'Grayscale', 'Grayscale GBTC ETF 1657', 'GBTC')     , ('1NhKiYnUa2K84cT5zaHjy2ooccUKqzY6aP', 'Grayscale', 'Grayscale GBTC ETF 1658', 'GBTC')     , ('1NpCnwRSTL98Q7s22uC6i9Ad7jMzTkH774', 'Grayscale', 'Grayscale GBTC ETF 1659', 'GBTC')     , ('1NjoWWQQkBRRcDZuTd5dcL8L3nwTCY9JKi', 'Grayscale', 'Grayscale GBTC ETF 1660', 'GBTC')     , ('1Ba8SxYrvVVpZi4tvhfPkWQPA8SSxxz1PR', 'Grayscale', 'Grayscale GBTC ETF 1661', 'GBTC')     , ('1KrhcLWXf4H37M1dwepfs7wQBgNX489jE2', 'Grayscale', 'Grayscale GBTC ETF 1662', 'GBTC')     , ('1My7Fvvp5eSgNy9GFGDaCJTQY1BtSXsVZh', 'Grayscale', 'Grayscale GBTC ETF 1663', 'GBTC')     , ('15SRpX5g6H2o1HzJDLCVLvXRRnRWG4JY3g', 'Grayscale', 'Grayscale GBTC ETF 1664', 'GBTC')     , ('1NZ2QeiTQNebxcwqZqGGQB9jpYg4WjRmCQ', 'Grayscale', 'Grayscale GBTC ETF 1665', 'GBTC')     , ('17ghMfQYvJvkbnehP7h74VnWgpxkafAggA', 'Grayscale', 'Grayscale GBTC ETF 1666', 'GBTC')     , ('1Dcij7woPzNzjco31KeGJYJo3A2pyRCv73', 'Grayscale', 'Grayscale GBTC ETF 1667', 'GBTC')     , ('1GcYLBLyVvbizu5x4vGwVejUkxmVv4HWAY', 'Grayscale', 'Grayscale GBTC ETF 1668', 'GBTC')     , ('1PV872HyEuXxigjWVsGQKeme5gN4BF3Unr', 'Grayscale', 'Grayscale GBTC ETF 1669', 'GBTC')     , ('1KoKcE9iagW6TCENZkwJh1msb1Zjtsuj7C', 'Grayscale', 'Grayscale GBTC ETF 1670', 'GBTC')     , ('17iETTWbMBqoqcatayT7xy8tLUWqbsGd49', 'Grayscale', 'Grayscale GBTC ETF 1671', 'GBTC')     , ('15K3hDfmEFAQ5dweSgP1P5yaZvWJcSETtt', 'Grayscale', 'Grayscale GBTC ETF 1672', 'GBTC')     , ('16etb9eCJyVzWe53YUAsoPaqNaTV4jqtgH', 'Grayscale', 'Grayscale GBTC ETF 1673', 'GBTC')     , ('1D9ty6tvXnTK2sK1z7bYWZN5iQ9QieZi3h', 'Grayscale', 'Grayscale GBTC ETF 1674', 'GBTC')     , ('1FrM2wabAKCo6UyfnVMFBF6NcpeWa8rTux', 'Grayscale', 'Grayscale GBTC ETF 1675', 'GBTC')     , ('1GUNww1V3nXsWeNRj9uJPSPxogtJUqEee3', 'Grayscale', 'Grayscale GBTC ETF 1676', 'GBTC')     , ('124UAXuutiWdYLSFWpxxddJGJ2nsYABWnQ', 'Grayscale', 'Grayscale GBTC ETF 1677', 'GBTC')     , ('1EjFEZ8tNBsKoPmrXsJhKEuu7Ub9PzYhyf', 'Grayscale', 'Grayscale GBTC ETF 1678', 'GBTC')     , ('1JBuLBnW43HKQjeH58KbuQEPM9vuTMxDrk', 'Grayscale', 'Grayscale GBTC ETF 1679', 'GBTC')     , ('1Kk1rucihYmawEbkhpBCsngiF9TVE1LiTo', 'Grayscale', 'Grayscale GBTC ETF 1680', 'GBTC')     , ('13XdEpRenCJMEL968b9fuCweRt9RvEcGUv', 'Grayscale', 'Grayscale GBTC ETF 1681', 'GBTC')     , ('1DrioRBUC1YUhBPpoqBDmp86muuuBp3GRL', 'Grayscale', 'Grayscale GBTC ETF 1682', 'GBTC')     , ('1KJ3sU85HeUAEe524Jd2hspWXFMEDec49m', 'Grayscale', 'Grayscale GBTC ETF 1683', 'GBTC')     , ('16NdiWvKGYTfGfYVU76HehPZdiScL2jJWL', 'Grayscale', 'Grayscale GBTC ETF 1684', 'GBTC')     , ('1Bm1qreWzwuRxf5un6QYbVts8Ng8NwbK6U', 'Grayscale', 'Grayscale GBTC ETF 1685', 'GBTC')     , ('1KeePn8ZuVu4BfCLscyaz6nQyenNne9pdz', 'Grayscale', 'Grayscale GBTC ETF 1686', 'GBTC')     , ('1FQpZCNunb1qsVCRUZrQv6EhKRtXGStsu4', 'Grayscale', 'Grayscale GBTC ETF 1687', 'GBTC')     , ('18Q7bkdCfX3th1HFHzB2u4KoVAm36VjTFy', 'Grayscale', 'Grayscale GBTC ETF 1688', 'GBTC')     , ('1BX1B1nbdW1xgKVn91CmcZD3UtoHKm2Hoh', 'Grayscale', 'Grayscale GBTC ETF 1689', 'GBTC')     , ('1NRT1newCaSbcgcjGNLFuuHhjrRB7wBeDR', 'Grayscale', 'Grayscale GBTC ETF 1690', 'GBTC')     , ('12RSm6nBsuy5EA2MdgEz2WstTvdZ5q1Uhv', 'Grayscale', 'Grayscale GBTC ETF 1691', 'GBTC')     , ('1LSebKRB5T7CbjPVzGmQW8pUJNskqRMG6L', 'Grayscale', 'Grayscale GBTC ETF 1692', 'GBTC')     , ('15bJVLh21pfvN7RqWc9Z5eYVSjPjuW1UXx', 'Grayscale', 'Grayscale GBTC ETF 1693', 'GBTC')     , ('1Gas8xEvDUK2CUCryRC12pNfa5FTFeHezq', 'Grayscale', 'Grayscale GBTC ETF 1694', 'GBTC')     , ('19aCU1DDLYHmKoJDQjbJQMmKJmNzTt2GUG', 'Grayscale', 'Grayscale GBTC ETF 1695', 'GBTC')     , ('1KfG9vM66uDT54ZyEZxuNCcyDp1nM3B7gY', 'Grayscale', 'Grayscale GBTC ETF 1696', 'GBTC')     , ('1GxkEx2k4qb7FiK6rndGP9SH9S9AHMkn1U', 'Grayscale', 'Grayscale GBTC ETF 1697', 'GBTC')     , ('17jNhUheCeHf7o9uCQZXMxzu6RbLM3xWyF', 'Grayscale', 'Grayscale GBTC ETF 1698', 'GBTC')     , ('17TBpFuj6QxR4qTiC8LJGD38LNUV4J6ZuB', 'Grayscale', 'Grayscale GBTC ETF 1699', 'GBTC')     , ('1F2CKE4Fxsis4GsBDpyTdQWCWgDPgekKrJ', 'Grayscale', 'Grayscale GBTC ETF 1700', 'GBTC')     , ('14hiUb9z6fvic4YyFnXggdDsMH9jGwgUFr', 'Grayscale', 'Grayscale GBTC ETF 1701', 'GBTC')     , ('15D9gf6XikicvE9K33PCTPR78uxTno3gTX', 'Grayscale', 'Grayscale GBTC ETF 1702', 'GBTC')     , ('1FHyjhzsXmCne16E63SArTSs1dxUTE6qNY', 'Grayscale', 'Grayscale GBTC ETF 1703', 'GBTC')     , ('1AWP9ecA2in7foPHyBpGm8MT1KUz7mRnnN', 'Grayscale', 'Grayscale GBTC ETF 1704', 'GBTC')     , ('1F3ZsvyfsXLfomVcZ7mKefTSRU43cuzj6n', 'Grayscale', 'Grayscale GBTC ETF 1705', 'GBTC')     , ('1ArvGmKcaJrbjG16KGZmmpPNCSCpZgTq2s', 'Grayscale', 'Grayscale GBTC ETF 1706', 'GBTC')     , ('14wMSDdsB4Q8TGYko1DafWBQaBKai8uerG', 'Grayscale', 'Grayscale GBTC ETF 1707', 'GBTC')     , ('1FrzAC42F3VZ3U8SNqHmXfoAisHn2v5Se7', 'Grayscale', 'Grayscale GBTC ETF 1708', 'GBTC')     , ('1MJP1ATFBYV2h64Ttyf1s4a2RzTcX6ZHLk', 'Grayscale', 'Grayscale GBTC ETF 1709', 'GBTC')     , ('1GZKohw5TzS83vwMeomqqqs3vBRHC3QpAE', 'Grayscale', 'Grayscale GBTC ETF 1710', 'GBTC')     , ('1cqZnTqvVaBanU1aVPfDSUED5moaVYW2b', 'Grayscale', 'Grayscale GBTC ETF 1711', 'GBTC')     , ('1Pv9Jhdz7CDRSw7tAEhsUqs7Rc4L8ojtLn', 'Grayscale', 'Grayscale GBTC ETF 1712', 'GBTC')     , ('1DTHTJouot63UKGKacXMiX1RrnVJojLV8R', 'Grayscale', 'Grayscale GBTC ETF 1713', 'GBTC')     , ('13MCa4suEu36QXqV17uhntBJA6KEShqtvk', 'Grayscale', 'Grayscale GBTC ETF 1714', 'GBTC')     , ('1Kr611jwRniy85vj64WohSn15chF2PCHkK', 'Grayscale', 'Grayscale GBTC ETF 1715', 'GBTC')     , ('15KTzK4FdUJBWyJFobQp9y5f4yQtpV49j9', 'Grayscale', 'Grayscale GBTC ETF 1716', 'GBTC')     , ('1GrAmqjpgiA4jFfDWwi1d2uekN5QEk23ha', 'Grayscale', 'Grayscale GBTC ETF 1717', 'GBTC')     , ('15u9vgnUDvJccjFURkwD3u54GjZ43E56rF', 'Grayscale', 'Grayscale GBTC ETF 1718', 'GBTC')     , ('1FAHZfj3sTm5hMJGodbzfyaxkF4cnUxEZX', 'Grayscale', 'Grayscale GBTC ETF 1719', 'GBTC')     , ('1B2E2V9rCjDXc75mTg5hi588Gdh2nPxtHP', 'Grayscale', 'Grayscale GBTC ETF 1720', 'GBTC')     , ('1Q2X8emibjWmS4DB3RieYQcBQMW4eiua8V', 'Grayscale', 'Grayscale GBTC ETF 1721', 'GBTC')     , ('1KY2vbDkzW22CxpLr5P9cxSpszfLbThyzY', 'Grayscale', 'Grayscale GBTC ETF 1722', 'GBTC')     , ('1PJSWpYXrFVy5og184kvCw6W4PmFqMmhL1', 'Grayscale', 'Grayscale GBTC ETF 1723', 'GBTC')     , ('1JvP4ew2msWEPbcxnHMUhr1GV6ybP7rXCP', 'Grayscale', 'Grayscale GBTC ETF 1724', 'GBTC')     , ('1FpUFLkTDWj8RaGH5noEdxwxxRPLMeqjEt', 'Grayscale', 'Grayscale GBTC ETF 1725', 'GBTC')     , ('18K2K54tjHKUjNAFixN74nWw7mzifv3RoQ', 'Grayscale', 'Grayscale GBTC ETF 1726', 'GBTC')     , ('1C8zYj2DdR3XNwUyZ2So9NxzxTSXb5iZwF', 'Grayscale', 'Grayscale GBTC ETF 1727', 'GBTC')     , ('1Nv28b2SppqpNPtF7QzkEX1QB92dpaBp95', 'Grayscale', 'Grayscale GBTC ETF 1728', 'GBTC')     , ('1GBNtGFJgTdmHiJsuevBUtYPUeymsLknCK', 'Grayscale', 'Grayscale GBTC ETF 1729', 'GBTC')     , ('1GH9CssxkNtCpcuqDkgTxAocT2r71Bx8t4', 'Grayscale', 'Grayscale GBTC ETF 1730', 'GBTC')     , ('1NR6eUavnfZ5u1b5rNCaTt844k9Y2yzqaL', 'Grayscale', 'Grayscale GBTC ETF 1731', 'GBTC')     , ('1Kmgr13mw1sDiRpQiPSnRwfcFPfDLd7M7B', 'Grayscale', 'Grayscale GBTC ETF 1732', 'GBTC')     , ('1MXPmevYKfjmRN42FwxbxbuHEHaASL1fhQ', 'Grayscale', 'Grayscale GBTC ETF 1733', 'GBTC')     , ('1GFQFgrxrxuM1ATatL57uSzKmXrKVhbmcq', 'Grayscale', 'Grayscale GBTC ETF 1734', 'GBTC')     , ('1AoDMQ6CTW3EjkeXAtXQogRApmXBajUywj', 'Grayscale', 'Grayscale GBTC ETF 1735', 'GBTC')     , ('1NFHGqEDLZ7mEnjCp6mABCeWHA8juFQWwP', 'Grayscale', 'Grayscale GBTC ETF 1736', 'GBTC')     , ('13reYgNhQiCp9uM8RWr3oKyneKqBaEZy69', 'Grayscale', 'Grayscale GBTC ETF 1737', 'GBTC')     , ('1CYv15duSi9xWrytZussMvHnV9QuLzTCcN', 'Grayscale', 'Grayscale GBTC ETF 1738', 'GBTC')     , ('1LhB23C6mb5WPDC5EUoMnfGFTvNUXeVgDU', 'Grayscale', 'Grayscale GBTC ETF 1739', 'GBTC')     , ('1Ei89qGi3RhUHeykTyQ1LDCt7vUKVmeRfe', 'Grayscale', 'Grayscale GBTC ETF 1740', 'GBTC')     , ('14MxcLbnB5JCFkHsf2h9hVz3vWcwabLkWX', 'Grayscale', 'Grayscale GBTC ETF 1741', 'GBTC')     , ('1GK5RumeAxS9RjiVB2vqHZV4DULr7HHjEh', 'Grayscale', 'Grayscale GBTC ETF 1742', 'GBTC')     , ('1JJUWadhz4iFqh3afR1odWhvSCTjJ3HBd3', 'Grayscale', 'Grayscale GBTC ETF 1743', 'GBTC')     , ('19Mw2PpmwMPd8ei6LgDffgr72RqKrjTgLB', 'Grayscale', 'Grayscale GBTC ETF 1744', 'GBTC')     , ('1Bq9YDxTT1DoXq1iNtS2JBjc86DN8qj347', 'Grayscale', 'Grayscale GBTC ETF 1745', 'GBTC')     , ('1FuVXRakxvXUuaBmgt3gc4HiBGKA8zYqXp', 'Grayscale', 'Grayscale GBTC ETF 1746', 'GBTC')     , ('17jx1uq3jig4zKrD2GiLAVsiNbW2bbwudL', 'Grayscale', 'Grayscale GBTC ETF 1747', 'GBTC')     , ('15KGYTHXfxdXfSVJD4jaUAd4J7nq79X8Wx', 'Grayscale', 'Grayscale GBTC ETF 1748', 'GBTC')     , ('132mD5aXYfnq1GpeR9tgXQ1kMJDP2vQj6Z', 'Grayscale', 'Grayscale GBTC ETF 1749', 'GBTC')     , ('19vGfR3J1XmH2KjzWTa9JkunDkJ7oTrEnw', 'Grayscale', 'Grayscale GBTC ETF 1750', 'GBTC')     , ('168DkM8pkUWWQLZkCTFM5ZhVHBy1LCdmo6', 'Grayscale', 'Grayscale GBTC ETF 1751', 'GBTC')     , ('1MfrtgKgLKzMLRybBztwuRmY7CmQeC9JWT', 'Grayscale', 'Grayscale GBTC ETF 1752', 'GBTC')     , ('14WRazuDGCWDRY1vS5WwfbsDttXc8DMqt1', 'Grayscale', 'Grayscale GBTC ETF 1753', 'GBTC')     , ('156UwDT18hg47H2rZ5J2gJmjM5Sv4pibEw', 'Grayscale', 'Grayscale GBTC ETF 1754', 'GBTC')     , ('1BRuLkghrZNsDZbLqhtX1wLS3uecv4mW76', 'Grayscale', 'Grayscale GBTC ETF 1755', 'GBTC')     , ('1Ps924LqKQpaTo9AooQBeA2PiuoxC449BM', 'Grayscale', 'Grayscale GBTC ETF 1756', 'GBTC')     , ('1CY3gCfnTvpMkgGiJBHqd7V7psExT16K8D', 'Grayscale', 'Grayscale GBTC ETF 1757', 'GBTC')     , ('1LR81nXqHWen4ZHiVcUyDjdHYMxevuRY5s', 'Grayscale', 'Grayscale GBTC ETF 1758', 'GBTC')     , ('1B98UD61cCd3xp6K32itafQtYgibW6vD2K', 'Grayscale', 'Grayscale GBTC ETF 1759', 'GBTC')     , ('192eqaQ9ZoywWwHU4YeL4ei4aJT3Nr58mp', 'Grayscale', 'Grayscale GBTC ETF 1760', 'GBTC')     , ('14kihBbDNtRdoJpb5hfgEhdKf7cv6rTdxX', 'Grayscale', 'Grayscale GBTC ETF 1761', 'GBTC')     , ('1J8u81huPcQnCJy1L2M83ALkShh493JRT1', 'Grayscale', 'Grayscale GBTC ETF 1762', 'GBTC')     , ('1Bng2w8MjxVukLvqXDJuHQEtdwmTnxLhDy', 'Grayscale', 'Grayscale GBTC ETF 1763', 'GBTC')     , ('13J5w1TwLKXueCw47kNYh8pRCVh7rHAhYG', 'Grayscale', 'Grayscale GBTC ETF 1764', 'GBTC')     , ('1MPwZ4o8potKX3GGkwH7T4WmgZHKE4aPVY', 'Grayscale', 'Grayscale GBTC ETF 1765', 'GBTC')     , ('1EDKjQdgRty6V4e36vJZHJswm6CNr39GYQ', 'Grayscale', 'Grayscale GBTC ETF 1766', 'GBTC')     , ('1N5v5kzajnChxQUNn4CbBFWTdk4Bu68tZT', 'Grayscale', 'Grayscale GBTC ETF 1767', 'GBTC')     , ('1H1fjLRJwAdFBawZ62ttWAw8NUGeRsXhMG', 'Grayscale', 'Grayscale GBTC ETF 1768', 'GBTC')     , ('1BEfj1HzxEQwvYGibC4vVACTP5B3WqeahP', 'Grayscale', 'Grayscale GBTC ETF 1769', 'GBTC')     , ('17dXWxduisw9dZya4tRTHH346cS6UYACrX', 'Grayscale', 'Grayscale GBTC ETF 1770', 'GBTC')     , ('1DDvzNjZAj5aq2cfu1c8FhpsE7YdmTgLs3', 'Grayscale', 'Grayscale GBTC ETF 1771', 'GBTC')     , ('1PzbCwhtkJ8qkfxsnnVWUDLtDeLbSZsnRt', 'Grayscale', 'Grayscale GBTC ETF 1772', 'GBTC')     , ('1JVzQctkhXw2goFLCwBReubCVWEjkFYsBw', 'Grayscale', 'Grayscale GBTC ETF 1773', 'GBTC')     , ('1784HpCiee2zBmznfx38YMYC6FG3gbnCqr', 'Grayscale', 'Grayscale GBTC ETF 1774', 'GBTC')     , ('1Aby7ZGzmGNZBQQnD1PbzSwyzJ7Ga2yKqQ', 'Grayscale', 'Grayscale GBTC ETF 1775', 'GBTC')     , ('1C1PwJcQDCiorL3d4XmwivXXvNx2gK6JU3', 'Grayscale', 'Grayscale GBTC ETF 1776', 'GBTC')     , ('1Pt1sx5wAuajNVPUR96dknoos4gssXF4en', 'Grayscale', 'Grayscale GBTC ETF 1777', 'GBTC')     , ('16rtoo8KpFpWwnhJSPHwsDZPigCcxYH3GP', 'Grayscale', 'Grayscale GBTC ETF 1778', 'GBTC')     , ('1BMYGGPJ3LhKRdbwMnpCkePZTdpsiSykyf', 'Grayscale', 'Grayscale GBTC ETF 1779', 'GBTC')     , ('1GitJCdna6pCL2coELJpGf58vD3NuKHpY9', 'Grayscale', 'Grayscale GBTC ETF 1780', 'GBTC')     , ('1JgphvDYfQHMLgdbexTtwC3FJeBBNboqYu', 'Grayscale', 'Grayscale GBTC ETF 1781', 'GBTC')     , ('1AoG3U7UpVi7o6J8UHtd6F7VMV2EU2wSmb', 'Grayscale', 'Grayscale GBTC ETF 1782', 'GBTC')     , ('19C2397DW5AVPFvzoFYYjV2vEMNsm2L9w3', 'Grayscale', 'Grayscale GBTC ETF 1783', 'GBTC')     , ('1JXEvFjyDQVQYA8LXm5y6aChxMRSuhnupj', 'Grayscale', 'Grayscale GBTC ETF 1784', 'GBTC')     , ('1CyeKUA5SDjJbofnRYgpmNN3PSCtDWqCJm', 'Grayscale', 'Grayscale GBTC ETF 1785', 'GBTC')     , ('1Fmi4ojXbKdoKRA177uZiMWJinEpQKTN7', 'Grayscale', 'Grayscale GBTC ETF 1786', 'GBTC')     , ('1FHVb57QbXfKeiUfeDhqcsMod8wuJC5FbN', 'Grayscale', 'Grayscale GBTC ETF 1787', 'GBTC')     , ('1H9SUPzXAms3BLedqyFdLcrd3Y4PEEBvd5', 'Grayscale', 'Grayscale GBTC ETF 1788', 'GBTC')     , ('1DZfBC4M9USgEQNvUAChvdpFEc9MfgQu7a', 'Grayscale', 'Grayscale GBTC ETF 1789', 'GBTC')     , ('1LY26PQ1sByMzexfX2Gm6Q3MjjbaDfnx9S', 'Grayscale', 'Grayscale GBTC ETF 1790', 'GBTC')     , ('1GvqCu6wNHyNWkhc7mjpPnUqAtTUtReveY', 'Grayscale', 'Grayscale GBTC ETF 1791', 'GBTC')     , ('1NDhKCybVwRmrsQzPrs2uWSpxNfWkrnDPD', 'Grayscale', 'Grayscale GBTC ETF 1792', 'GBTC')     , ('1MVa2hCsm5UQVmJT6qTAA2zeqrhqaK8dR2', 'Grayscale', 'Grayscale GBTC ETF 1793', 'GBTC')     , ('1NaKDeX3Y1uXepypzz11oyG89E88ipyVBx', 'Grayscale', 'Grayscale GBTC ETF 1794', 'GBTC')     , ('17nFZo37c3mb64hymVVWVniPj8oy45tM1C', 'Grayscale', 'Grayscale GBTC ETF 1795', 'GBTC')     , ('16MsPcW1kdqSDK9UY23FedgnrzDSFNYdWG', 'Grayscale', 'Grayscale GBTC ETF 1796', 'GBTC')     , ('1PrYWx4vUSS3ZcWsRXcSabjEN6DAbZbor7', 'Grayscale', 'Grayscale GBTC ETF 1797', 'GBTC')     , ('1LfaHqh9Scgw9kKqpWuD3ndY2wmvkazWga', 'Grayscale', 'Grayscale GBTC ETF 1798', 'GBTC')     , ('1ERGtuPr4roKZySPacqQSFZyTod8JGVJ81', 'Grayscale', 'Grayscale GBTC ETF 1799', 'GBTC')     , ('1GHbL5dSw9zkmnYFeYMLKR58i2LonQAze8', 'Grayscale', 'Grayscale GBTC ETF 1800', 'GBTC')     , ('1CJinCdbGyf6geQV9c2exkZt9VoCCKbeCP', 'Grayscale', 'Grayscale GBTC ETF 1801', 'GBTC')     , ('1JkXnb6n282T1KcgDT496NZMJpxRHTBCsE', 'Grayscale', 'Grayscale GBTC ETF 1802', 'GBTC')     , ('1NsVQ6FcZ4RpWQQ1hwHdwPb9skUmkHC6Pa', 'Grayscale', 'Grayscale GBTC ETF 1803', 'GBTC')     , ('1ASd58Mxu7qPJMrPkMDs5R6gmf6VjAjMwz', 'Grayscale', 'Grayscale GBTC ETF 1804', 'GBTC')     , ('14BJix4Ggej8KJqW28pkab6RWKMPuChLFm', 'Grayscale', 'Grayscale GBTC ETF 1805', 'GBTC')     , ('12daPNtJYHEMwgARdMJxKGw7vLTezgDugA', 'Grayscale', 'Grayscale GBTC ETF 1806', 'GBTC')     , ('13VaPjeQMWtAXz816NAhBGG9pCEEeVdoRZ', 'Grayscale', 'Grayscale GBTC ETF 1807', 'GBTC')     , ('1JkawgFFfxnaT2Lo2BPCU5LJ1mR5Yt2hqg', 'Grayscale', 'Grayscale GBTC ETF 1808', 'GBTC')     , ('1PxUcESoWHCeoZLJgutHyiAUfgpr52fmFa', 'Grayscale', 'Grayscale GBTC ETF 1809', 'GBTC')     , ('1Fe3vCB4wWqPG8GrHwh92PcuAVL2omdym4', 'Grayscale', 'Grayscale GBTC ETF 1810', 'GBTC')     , ('16oPRJfjnQrS1CaaUz4KHAd3c2H8dkjWsQ', 'Grayscale', 'Grayscale GBTC ETF 1811', 'GBTC')     , ('18UkPtUBk3pj6VavLwtJdzKiMaQroqNW4g', 'Grayscale', 'Grayscale GBTC ETF 1812', 'GBTC')     , ('15qx6nsS9bpRay3N3zeEEQofz8pGLVudY3', 'Grayscale', 'Grayscale GBTC ETF 1813', 'GBTC')     , ('1BRxpahtqX7mJoBm5SU8PVe9SeHd3RVdfb', 'Grayscale', 'Grayscale GBTC ETF 1814', 'GBTC')     , ('15PbwT7crLACKPudzGbN2h55p9FWDpqbVD', 'Grayscale', 'Grayscale GBTC ETF 1815', 'GBTC')     , ('1HSnUwYUYqK3W4gdJTFUZoxisfGMYfYStd', 'Grayscale', 'Grayscale GBTC ETF 1816', 'GBTC')     , ('1BtnCMCEywkmAh22Gb68mRvvxcZfbpJ2dy', 'Grayscale', 'Grayscale GBTC ETF 1817', 'GBTC')     , ('15gPXUhPKLzLuVmd3iVmgJBYKVx8EVHo1q', 'Grayscale', 'Grayscale GBTC ETF 1818', 'GBTC')     , ('1BMw1gHqhMzQWPAFqQaUFR49G8JnjLi4Nz', 'Grayscale', 'Grayscale GBTC ETF 1819', 'GBTC')     , ('1LZof7gdxKdBzKNKpFRdLGDp1mvgB5n1F4', 'Grayscale', 'Grayscale GBTC ETF 1820', 'GBTC')     , ('18hBqCTdofPbu6oymvwRWef7eKcTydcpNM', 'Grayscale', 'Grayscale GBTC ETF 1821', 'GBTC')     , ('1GYpsEwEE3cuf5XfbuvecDiGHas7zFGAz5', 'Grayscale', 'Grayscale GBTC ETF 1822', 'GBTC')     , ('13HZfx1pbBSLW2nktMQota6XrZfmFmKNz6', 'Grayscale', 'Grayscale GBTC ETF 1823', 'GBTC')     , ('1Jnh7c85gt5GoYVXPm7YSFb4FLYCacQpiz', 'Grayscale', 'Grayscale GBTC ETF 1824', 'GBTC')     , ('16dwZnTh9Tt9xd2H5SQaeWL8zvkfhM4jWJ', 'Grayscale', 'Grayscale GBTC ETF 1825', 'GBTC')     , ('1jfmFoEPbLcW4tZR4HDtMT4tLQZiSaVdL', 'Grayscale', 'Grayscale GBTC ETF 1826', 'GBTC')     , ('12kkNndPhQgim8MmsHQ926XDChYJ38JSxM', 'Grayscale', 'Grayscale GBTC ETF 1827', 'GBTC')     , ('13L5qGjseyegqst2kbcd8EuYxSXuTtNCjQ', 'Grayscale', 'Grayscale GBTC ETF 1828', 'GBTC')     , ('1Ln3GviVWebcnnD74TRKaAKZbAGKXGnhu', 'Grayscale', 'Grayscale GBTC ETF 1829', 'GBTC')     , ('16uuoXdoHYxjGXv8thyws6cR2PXT7nKQbW', 'Grayscale', 'Grayscale GBTC ETF 1830', 'GBTC')     , ('1GMr5xMvNXSkUHrJEG3Cm1d9nM6zzy3Zga', 'Grayscale', 'Grayscale GBTC ETF 1831', 'GBTC')     , ('1E4UzniRJJTdv5xFyhnUpTgXAcJiAeJYym', 'Grayscale', 'Grayscale GBTC ETF 1832', 'GBTC')     , ('1LacF6V18ki4E3EcDex3QmPm3phWzMXEyn', 'Grayscale', 'Grayscale GBTC ETF 1833', 'GBTC')     , ('15W2tBP53NTuGAb2V2bAFfKwzAYE2rv7Ue', 'Grayscale', 'Grayscale GBTC ETF 1834', 'GBTC')     , ('1B9NcFqih8m6U7aRTvaWdnMDPvDpXpsgeR', 'Grayscale', 'Grayscale GBTC ETF 1835', 'GBTC')     , ('1CmjpLcuz9zEdRPh2CSH8NL6wa2K1SxNEp', 'Grayscale', 'Grayscale GBTC ETF 1836', 'GBTC')     , ('1N7LeCWYYvxLKtDki4ymeSNBuzojCj9CCz', 'Grayscale', 'Grayscale GBTC ETF 1837', 'GBTC')     , ('12b4wrqVjUoRBrkpGMscXPA66FveY1TEeD', 'Grayscale', 'Grayscale GBTC ETF 1838', 'GBTC')     , ('1N4MVfKsDXV5XR9GRsdxTRhmMQYHnPakGG', 'Grayscale', 'Grayscale GBTC ETF 1839', 'GBTC')     , ('1A7KVPGaz35eduTpsQUwsEJocax1qxNdSw', 'Grayscale', 'Grayscale GBTC ETF 1840', 'GBTC')     , ('1FGiVMTNVCw6n3G34RDPVpm6Ho4kqevQJ', 'Grayscale', 'Grayscale GBTC ETF 1841', 'GBTC')     , ('1H7NJxpFVhWZsMbAoHBNBpz7yigUeY8wdq', 'Grayscale', 'Grayscale GBTC ETF 1842', 'GBTC')     , ('1955ZwgAeBa8WKC6cs51wLt7PUQeMVQ44r', 'Grayscale', 'Grayscale GBTC ETF 1843', 'GBTC')     , ('1JUhcqm3cCsfhCokEGU3Azvq6zMyziNqXA', 'Grayscale', 'Grayscale GBTC ETF 1844', 'GBTC')     , ('1Mf2KCS4tUMrHi4sobX18NXLezgBbxgR2v', 'Grayscale', 'Grayscale GBTC ETF 1845', 'GBTC')     , ('1JEt21wEGpSfL8rZ1KVJdobVisRSYK8Wfx', 'Grayscale', 'Grayscale GBTC ETF 1846', 'GBTC')     , ('1C58aVZWeEueJnPeGESsmjA2g9JNZptcVZ', 'Grayscale', 'Grayscale GBTC ETF 1847', 'GBTC')     , ('141mse86EEdso41PJ7peRgYPvRwVuexcFD', 'Grayscale', 'Grayscale GBTC ETF 1848', 'GBTC')     , ('18RD6rwKDjrzSRzAMbuTn4WBm7rA9T7sMU', 'Grayscale', 'Grayscale GBTC ETF 1849', 'GBTC')     , ('1CqLFC14sg5GFEzxNWBPiJXKsuCWGe1wYY', 'Grayscale', 'Grayscale GBTC ETF 1850', 'GBTC')     , ('1KrXRR2gNdo6w1ACE5tviSs6D4XBsdfG4M', 'Grayscale', 'Grayscale GBTC ETF 1851', 'GBTC')     , ('1Nes3RhUXkcabMPqpkwYUyGfDv63sG5mhi', 'Grayscale', 'Grayscale GBTC ETF 1852', 'GBTC')     , ('196NQ2HzNuE1GEvdF9Be3mKBkkwBajXGC8', 'Grayscale', 'Grayscale GBTC ETF 1853', 'GBTC')     , ('1NHRSVBKakjtjjKczKJbdEh9QTn1994Swg', 'Grayscale', 'Grayscale GBTC ETF 1854', 'GBTC')     , ('19YVTWJ3iomwZLHymnitNRaxTu4EKKbBb2', 'Grayscale', 'Grayscale GBTC ETF 1855', 'GBTC')     , ('19gDvEi7bJtESp1HXeVaLcysxC2iGc2vcb', 'Grayscale', 'Grayscale GBTC ETF 1856', 'GBTC')     , ('1P6egVduu5AhyRc3F3agDUC5U34VtNkiSX', 'Grayscale', 'Grayscale GBTC ETF 1857', 'GBTC')     , ('1KyJv47r6Dg7DC9zKBTgouLubbYpAf26kE', 'Grayscale', 'Grayscale GBTC ETF 1858', 'GBTC')     , ('1MFrJ94Mj8JDZ1GY7hpbzqP2zJnnpW5xjw', 'Grayscale', 'Grayscale GBTC ETF 1859', 'GBTC')     , ('18GKgSgdzGLfe9UNwKdd6NTDFwGpSpzY1H', 'Grayscale', 'Grayscale GBTC ETF 1860', 'GBTC')     , ('1DxQ8BWxWG87Uy5SDGd7HbjUcoGPVvBS1d', 'Grayscale', 'Grayscale GBTC ETF 1861', 'GBTC')     , ('1JYfY1Rgnk66zGkbKjUvhNpP9WPiGyXXdq', 'Grayscale', 'Grayscale GBTC ETF 1862', 'GBTC')     , ('1JqwgeAASQamcYtMCLmKM3SPrjdeVSfDBb', 'Grayscale', 'Grayscale GBTC ETF 1863', 'GBTC')     , ('1Dnt8kTJuYo7DtQRZx58GiFLtEDBAXAVZc', 'Grayscale', 'Grayscale GBTC ETF 1864', 'GBTC')     , ('1H1jNibr2PLqok2yLk8LMeXkea3mjNEDUK', 'Grayscale', 'Grayscale GBTC ETF 1865', 'GBTC')     , ('1PSVTTrdNc2u78G7Gm9UP1gcBt9CXwkv5X', 'Grayscale', 'Grayscale GBTC ETF 1866', 'GBTC')     , ('15TQDa9MjfcPVPwazdu8TKQqqsGn6gtv5B', 'Grayscale', 'Grayscale GBTC ETF 1867', 'GBTC')     , ('15fbRYMMpXAPyoX9DqRF458pFDRh2N3JWV', 'Grayscale', 'Grayscale GBTC ETF 1868', 'GBTC')     , ('1HpDiYAopDMFFc3uYryFMNsHHg6A7eEmxN', 'Grayscale', 'Grayscale GBTC ETF 1869', 'GBTC')     , ('159whEK3GT2cuezSZjeb6Be8m5TyTqtHpu', 'Grayscale', 'Grayscale GBTC ETF 1870', 'GBTC')     , ('1FER7Lmb4jqHcDZ63KTNTCFrazvXeX8xQJ', 'Grayscale', 'Grayscale GBTC ETF 1871', 'GBTC')     , ('18VLXg3F9UVQks37z4sFDMFGiHFABczMfL', 'Grayscale', 'Grayscale GBTC ETF 1872', 'GBTC')     , ('128zAx6UP6mAZrypT2jj7wJLurkhdZZE4y', 'Grayscale', 'Grayscale GBTC ETF 1873', 'GBTC')     , ('1JZq4r3DWmzi3hjtRcCwidAvsgGKt2MPUc', 'Grayscale', 'Grayscale GBTC ETF 1874', 'GBTC')     , ('1HrnoWydCBdAf8H3J3kaPVEB7tEMkQsUtB', 'Grayscale', 'Grayscale GBTC ETF 1875', 'GBTC')     , ('13UWWRgLCPAADxvKzE3gshFXp7mFCpL8t7', 'Grayscale', 'Grayscale GBTC ETF 1876', 'GBTC')     , ('1GWbQXpdeXLqP3cAjpDeEtnBiTfoZ3KpDj', 'Grayscale', 'Grayscale GBTC ETF 1877', 'GBTC')     , ('1KSRniAw7pnpxwFvAwh1SceRug66nNPdfG', 'Grayscale', 'Grayscale GBTC ETF 1878', 'GBTC')     , ('1FqaYMXxH37UPZRrUQqfQiLcmBt5CthDrQ', 'Grayscale', 'Grayscale GBTC ETF 1879', 'GBTC')     , ('1J2zWkkgrus94fL1tp2miDYk5r5UVi2K4g', 'Grayscale', 'Grayscale GBTC ETF 1880', 'GBTC')     , ('1MXAXTA2CM7J4i1CborTt7zRc8pnMa1Qkx', 'Grayscale', 'Grayscale GBTC ETF 1881', 'GBTC')     , ('1BYTQU1L2KtWLMWeoNqYegWPV75nJdLHr9', 'Grayscale', 'Grayscale GBTC ETF 1882', 'GBTC')     , ('1HeUaVE2MG88CSEFckCeDrSZxZeRg2zW9F', 'Grayscale', 'Grayscale GBTC ETF 1883', 'GBTC')     , ('186hJ8EdPWMfNYEo7T43JYrKuZx3XGcwZk', 'Grayscale', 'Grayscale GBTC ETF 1884', 'GBTC')     , ('1CDc4XdDdCZEckJFNe48uyFGJvpc7tXvN7', 'Grayscale', 'Grayscale GBTC ETF 1885', 'GBTC')     , ('1DNa2NxfxmtGf7CndosdKTBp6ccJsawV9Y', 'Grayscale', 'Grayscale GBTC ETF 1886', 'GBTC')     , ('1DMChiKvoxe73R9gAkyK9JkHiFMvoaATUk', 'Grayscale', 'Grayscale GBTC ETF 1887', 'GBTC')     , ('1BDveRnSeZ5kDQrB5oG6iep3r6mNESc9cp', 'Grayscale', 'Grayscale GBTC ETF 1888', 'GBTC')     , ('1JJyeTwEML7zjaB38jkzBJmb2KpM2DDck', 'Grayscale', 'Grayscale GBTC ETF 1889', 'GBTC')     , ('1FY8boch6sBvTv1Ny8hZuVd13cw99Jbut8', 'Grayscale', 'Grayscale GBTC ETF 1890', 'GBTC')     , ('1MNgYjZXMdyeTqVTCwV92ys8pisRxBR7tg', 'Grayscale', 'Grayscale GBTC ETF 1891', 'GBTC')     , ('1Dq2RnFHZsjhR8ALVEq2PQpxJ8Uq2MNp4K', 'Grayscale', 'Grayscale GBTC ETF 1892', 'GBTC')     , ('1AEcdByWLdC8mVQE54oCRBb1u84dmHUqsM', 'Grayscale', 'Grayscale GBTC ETF 1893', 'GBTC')     , ('1HjBygEaSZhjanuD9TL42RRyM4WNeGBUfg', 'Grayscale', 'Grayscale GBTC ETF 1894', 'GBTC')     , ('1KA9LYwUVNvxMm8ngv9KHYXT33bsv9ZT7A', 'Grayscale', 'Grayscale GBTC ETF 1895', 'GBTC')     , ('1LT6UdgbHMzn7WKPqPFaVL8vAfSStJUMJ7', 'Grayscale', 'Grayscale GBTC ETF 1896', 'GBTC')     , ('18WXj5jVanf9xREHhcTPAeXmUfcdg9coch', 'Grayscale', 'Grayscale GBTC ETF 1897', 'GBTC')     , ('1GkAX9ya1SoLPspnMRTpkqpwjm4atW2TAD', 'Grayscale', 'Grayscale GBTC ETF 1898', 'GBTC')     , ('17pX84dtzJGjUsdJT5GMApreSZZmRN2Efj', 'Grayscale', 'Grayscale GBTC ETF 1899', 'GBTC')     , ('15J68bb4DYnDuahpA1CV3C1hdE3z3gh6XL', 'Grayscale', 'Grayscale GBTC ETF 1900', 'GBTC')     , ('14hmRhmyfoGnLixJNAggyFNjgZh4HXov89', 'Grayscale', 'Grayscale GBTC ETF 1901', 'GBTC')     , ('12fGSUe6GVjojEgQKLAy3TmcXRQDXctxGC', 'Grayscale', 'Grayscale GBTC ETF 1902', 'GBTC')     , ('1Q3bXyvdWNuhopTEmKuxDLNJ43vhEdys6B', 'Grayscale', 'Grayscale GBTC ETF 1903', 'GBTC')     , ('168F9xZsuhg6vq4LvTFdmNrCKMeWL4poL5', 'Grayscale', 'Grayscale GBTC ETF 1904', 'GBTC')     , ('19hAhkajxvCC7gW2xGoqHNmPbivcqFwyhB', 'Grayscale', 'Grayscale GBTC ETF 1905', 'GBTC')     , ('1K2b22njpfN2u83dscwfEBKEoRBFHjymRS', 'Grayscale', 'Grayscale GBTC ETF 1906', 'GBTC')     , ('13vWDpPBiK68QbRLdTHmo2EwYo3eJCxWGo', 'Grayscale', 'Grayscale GBTC ETF 1907', 'GBTC')     , ('1KNpFU7ZVvpx7FmFmoEmH6JXZSWk9xLKFa', 'Grayscale', 'Grayscale GBTC ETF 1908', 'GBTC')     , ('15N6r8xV6coB2NbxgAPjvUouv78p553wsB', 'Grayscale', 'Grayscale GBTC ETF 1909', 'GBTC')     , ('1LuBUt83FfD8cmoa21YfE3DN8hivc6MdE4', 'Grayscale', 'Grayscale GBTC ETF 1910', 'GBTC')     , ('1BzG6VepXr862rwEoweKh9vbTkZ1haAvcg', 'Grayscale', 'Grayscale GBTC ETF 1911', 'GBTC')     , ('17ssbPPVv4MNjyvsw4zaLz3oRjkxxPCS1w', 'Grayscale', 'Grayscale GBTC ETF 1912', 'GBTC')     , ('1KXeCeyQm2uyKkgp5PeKT16sjDygqfNjt', 'Grayscale', 'Grayscale GBTC ETF 1913', 'GBTC')     , ('18Rx6H8H2qARM2CXfkRn2yAfLCApTZ5yEw', 'Grayscale', 'Grayscale GBTC ETF 1914', 'GBTC')     , ('13RLcrte62q77oo1izKNZYDu4sU9vEvwCU', 'Grayscale', 'Grayscale GBTC ETF 1915', 'GBTC')     , ('173TkSa9jKrcBZM5sYov2SqiL9xCHgMshv', 'Grayscale', 'Grayscale GBTC ETF 1916', 'GBTC')     , ('15Fnb5trQqYfAm21zogUkpSiK9u4TXQBsm', 'Grayscale', 'Grayscale GBTC ETF 1917', 'GBTC')     , ('1PZEFHRp33LWzXkCSKJrYnSS5GLd18ou5o', 'Grayscale', 'Grayscale GBTC ETF 1918', 'GBTC')     , ('193vPTikBQ9CTkeLVSztHY8ixADQxG6nPm', 'Grayscale', 'Grayscale GBTC ETF 1919', 'GBTC')     , ('19N21phr9ejPKs5yidCa1j2bmKqwC8Ymeb', 'Grayscale', 'Grayscale GBTC ETF 1920', 'GBTC')     , ('1G6CT4mXkjRJKtg4v1tc7yFZnQMvLGgKFT', 'Grayscale', 'Grayscale GBTC ETF 1921', 'GBTC')     , ('1KePrkktK2HSo3hk3W32F5TYMComwoN82C', 'Grayscale', 'Grayscale GBTC ETF 1922', 'GBTC')     , ('1Gj9tANicdhd2tM8k5uphNZdZYNeRx3TY5', 'Grayscale', 'Grayscale GBTC ETF 1923', 'GBTC')     , ('1QHGvat4Vz3wxWyJ25P2iXL143oYCsJeun', 'Grayscale', 'Grayscale GBTC ETF 1924', 'GBTC')     , ('1KPxBM5aAWYeYb67zu7rymoNA5FCVvyxSV', 'Grayscale', 'Grayscale GBTC ETF 1925', 'GBTC')     , ('1DYrDSDNv1bYKvaqH84wBqyK4kLDi8Qibr', 'Grayscale', 'Grayscale GBTC ETF 1926', 'GBTC')     , ('1AnRDt8fhdgm9TgQdA72PrDNjFGHoQo14R', 'Grayscale', 'Grayscale GBTC ETF 1927', 'GBTC')     , ('1NpndwVM3tHcr79feae5dfP5ytr9dpxTcd', 'Grayscale', 'Grayscale GBTC ETF 1928', 'GBTC')     , ('12BGWrHn9xwnL4hUmKfKRjsrdLrGbQ9Nmk', 'Grayscale', 'Grayscale GBTC ETF 1929', 'GBTC')     , ('15gFKCHbxG82utWwQn73hE8N7zFjqUM1Rm', 'Grayscale', 'Grayscale GBTC ETF 1930', 'GBTC')     , ('13LrpkTAhj34tpBNpDGoxPGJVoZfJPjqf5', 'Grayscale', 'Grayscale GBTC ETF 1931', 'GBTC')     , ('1JrrdooFy4JgXVtZGg9bW63jhMgNPjhPwg', 'Grayscale', 'Grayscale GBTC ETF 1932', 'GBTC')     , ('1L58tsxvPpZB3HGbiMvtJkxEMFM2XcvxgF', 'Grayscale', 'Grayscale GBTC ETF 1933', 'GBTC')     , ('16NGPx66PeuZFfDaFzyevdRxZ6AGTXmVGQ', 'Grayscale', 'Grayscale GBTC ETF 1934', 'GBTC')     , ('1JBcRaXNJjkggqoW2VgUngNwnVs5W8psqp', 'Grayscale', 'Grayscale GBTC ETF 1935', 'GBTC')     , ('1Jwh4KLEEjL8XQSd9cAkNnm83sCwbQ4SyB', 'Grayscale', 'Grayscale GBTC ETF 1936', 'GBTC')     , ('15YXcG2ZFvcKoCrGwPfmTcLZEdbfv2qsYG', 'Grayscale', 'Grayscale GBTC ETF 1937', 'GBTC')     , ('18vriq3K3YfTRVwrTN9hC9RohXxszJHs6G', 'Grayscale', 'Grayscale GBTC ETF 1938', 'GBTC')     , ('1AsdEshDzEDS3p2HJn1zAMrygc5GDfzChx', 'Grayscale', 'Grayscale GBTC ETF 1939', 'GBTC')     , ('1GcEwNUw6pLtsu6RXLwZh3Tyqx5RQpuS2P', 'Grayscale', 'Grayscale GBTC ETF 1940', 'GBTC')     , ('1JYmhvysuaNy4TTSRhpzTNUw2zikQz4nYo', 'Grayscale', 'Grayscale GBTC ETF 1941', 'GBTC')     , ('1DdpvDzwgBXSJacwd4E8Gn7vC9H1CTYzmR', 'Grayscale', 'Grayscale GBTC ETF 1942', 'GBTC')     , ('16akPLxPFvyo8RbdHKRbi3TL6PT4AWvaCM', 'Grayscale', 'Grayscale GBTC ETF 1943', 'GBTC')     , ('1Ep68bnwo4xLFFnQWcAP3k54tzAyKM1x9a', 'Grayscale', 'Grayscale GBTC ETF 1944', 'GBTC')     , ('1MqF79YC4NvRYjTZEkMk49u6rCMbYeE4Kk', 'Grayscale', 'Grayscale GBTC ETF 1945', 'GBTC')     , ('1KgGSxdJ9Xu9hhSShSiEeaDyLkknVknce2', 'Grayscale', 'Grayscale GBTC ETF 1946', 'GBTC')     , ('16iMJDuH4jJi7BWPcz471HehqovBmhqg2U', 'Grayscale', 'Grayscale GBTC ETF 1947', 'GBTC')     , ('1HEsAkYbtqAtRQfJyAfzZDz8qPWhhbnkj', 'Grayscale', 'Grayscale GBTC ETF 1948', 'GBTC')     , ('1P3zConRyTXK4z7tvvtak5py68Nn3Qqzm8', 'Grayscale', 'Grayscale GBTC ETF 1949', 'GBTC')     , ('1KTV94Q74BA5WacLSNEd64ANpxQs4cmBHG', 'Grayscale', 'Grayscale GBTC ETF 1950', 'GBTC')     , ('1tmPqR5j1MY9qgSqFTJQA33rSekG2HLcc', 'Grayscale', 'Grayscale GBTC ETF 1951', 'GBTC')     , ('1NjbPyLmqT1n4zWmTnsUNuYorxz5XgrmRp', 'Grayscale', 'Grayscale GBTC ETF 1952', 'GBTC')     , ('1Lj872Wyx3iMVaGk7YEMfn3ufusChVasKb', 'Grayscale', 'Grayscale GBTC ETF 1953', 'GBTC')     , ('16biL5NHERB2TpX4oXAwLwpTdSWbAxREYo', 'Grayscale', 'Grayscale GBTC ETF 1954', 'GBTC')     , ('1K5NibPEvduqEWDJvC8EJ1ZK3Gr1fwtvzC', 'Grayscale', 'Grayscale GBTC ETF 1955', 'GBTC')     , ('1Bg1jrewRDyLEhxmeuTNVGdJpB6NRxkMft', 'Grayscale', 'Grayscale GBTC ETF 1956', 'GBTC')     , ('1L9xHPWm6AVWu8mRasPC3GctcssgEppR3m', 'Grayscale', 'Grayscale GBTC ETF 1957', 'GBTC')     , ('1h1H2dwTRkJkkk3vow1Lb5ZPnWLQTmb38', 'Grayscale', 'Grayscale GBTC ETF 1958', 'GBTC')     , ('1PoB1B83reUGjbGS6EoDmWwtjL482pRf4h', 'Grayscale', 'Grayscale GBTC ETF 1959', 'GBTC')     , ('1Pbpd68oZJhZHdFtiViFeUfdxVTtmpAJop', 'Grayscale', 'Grayscale GBTC ETF 1960', 'GBTC')     , ('1ESQePgM7wsGW4kuXKnhTdZjRZD2a6u1pM', 'Grayscale', 'Grayscale GBTC ETF 1961', 'GBTC')     , ('1MjuwoR2R6bbp8oPd22R69UKnipNwfGHPR', 'Grayscale', 'Grayscale GBTC ETF 1962', 'GBTC')     , ('198g7dbBmKfpEw6kkwqw6sbZT4tEKdQsJV', 'Grayscale', 'Grayscale GBTC ETF 1963', 'GBTC')     , ('1JnGjnNVeBKyNAgnXVAgbSdhFyLjC6VEKv', 'Grayscale', 'Grayscale GBTC ETF 1964', 'GBTC')     , ('1Me9s9cSCpRLJnMvLwnVUktMKVRXrm8GNw', 'Grayscale', 'Grayscale GBTC ETF 1965', 'GBTC')     , ('19UgYtwATeSBGg56vYUHU3QA19g1Zon7xf', 'Grayscale', 'Grayscale GBTC ETF 1966', 'GBTC')     , ('1HQu7sq3TRmdZXc1f5NfgJqrC1aiFLNusP', 'Grayscale', 'Grayscale GBTC ETF 1967', 'GBTC')     , ('1Etm4vxhaHn8GLX7xB9awjvq8L29Dvozfh', 'Grayscale', 'Grayscale GBTC ETF 1968', 'GBTC')     , ('1BHmMGoFq8h5WH7StpUkLwR9JXppSBhMHL', 'Grayscale', 'Grayscale GBTC ETF 1969', 'GBTC')     , ('1P1PCUT98YLHL8CSHjPrpG4q5pobSuuvmn', 'Grayscale', 'Grayscale GBTC ETF 1970', 'GBTC')     , ('19FA6ir6mZ2r3Z6YGnffbYUCPgmWiUA1Fd', 'Grayscale', 'Grayscale GBTC ETF 1971', 'GBTC')     , ('1NrwLnBmTcfg7Qu5WomqCjZ1Xdi8HMnZVk', 'Grayscale', 'Grayscale GBTC ETF 1972', 'GBTC')     , ('1HSwR3wefoLkXube6QZ7bwnqhvg11Xewvh', 'Grayscale', 'Grayscale GBTC ETF 1973', 'GBTC')     , ('14Zhyg1pmmZqw9yYAGu5HPwNYffwhSm9jJ', 'Grayscale', 'Grayscale GBTC ETF 1974', 'GBTC')     , ('1Hca72n9HqbMDVosw79srRAGYyVHURpKDP', 'Grayscale', 'Grayscale GBTC ETF 1975', 'GBTC')     , ('1vTiSdY53yZSeJv5JJaUS5hx63EdZCyto', 'Grayscale', 'Grayscale GBTC ETF 1976', 'GBTC')     , ('1KjKXsYHX8qJ7jxuUijhhh4W6EgBnBudWa', 'Grayscale', 'Grayscale GBTC ETF 1977', 'GBTC')     , ('1LRmTVDigiVoRwMohBFTDpjQHvTGyqHqNd', 'Grayscale', 'Grayscale GBTC ETF 1978', 'GBTC')     , ('1BdX56djDoGPiwLaWBwukDFZunNZfENepX', 'Grayscale', 'Grayscale GBTC ETF 1979', 'GBTC')     , ('12vdxsCwykoT23hVJCPGk1mfDyiFm6DUPM', 'Grayscale', 'Grayscale GBTC ETF 1980', 'GBTC')     , ('1JxYkyUvfu16Gx5R9NZ3Y6cNH23rvCEan8', 'Grayscale', 'Grayscale GBTC ETF 1981', 'GBTC')     , ('17rpdsEGQb5akMgpJdeqJvkHaafFUZ4TQD', 'Grayscale', 'Grayscale GBTC ETF 1982', 'GBTC')     , ('18SjowYvPjwtMKNCxViAsudrxi1NXYtEcG', 'Grayscale', 'Grayscale GBTC ETF 1983', 'GBTC')     , ('1CmhyxMd3cS3rErx957MhC3MDx5aDJrX2L', 'Grayscale', 'Grayscale GBTC ETF 1984', 'GBTC')     , ('1GP4U8xwuzZvLCiyz5iiz45Gh8CQ5AcrCU', 'Grayscale', 'Grayscale GBTC ETF 1985', 'GBTC')     , ('1Bzk4UJ8Ha3SGFAFjTnav39oZrNT3LBS4f', 'Grayscale', 'Grayscale GBTC ETF 1986', 'GBTC')     , ('1Lb3DYYXw35wy8eupKjXKU7ruSZzZtw1Fm', 'Grayscale', 'Grayscale GBTC ETF 1987', 'GBTC')     , ('1Jx6BCXR5eLLpRkSpqcR7WF9m3fjYysKMf', 'Grayscale', 'Grayscale GBTC ETF 1988', 'GBTC')     , ('13dEQKwPiCaVady35RUSB189eTuTDJecTJ', 'Grayscale', 'Grayscale GBTC ETF 1989', 'GBTC')     , ('1FPSGyLPdj9G4ipvi4omAXRQRDRh5dufvH', 'Grayscale', 'Grayscale GBTC ETF 1990', 'GBTC')     , ('16XCk67hrG8Mg8vCv1J3t6J8PTX8oZvbwk', 'Grayscale', 'Grayscale GBTC ETF 1991', 'GBTC')     , ('17JaKCpdoXMP6Ppy9EDLTMhZHXdY21PwZ', 'Grayscale', 'Grayscale GBTC ETF 1992', 'GBTC')     , ('1AxSasZ9QfYrTGA9jp5zw325YAcsjUgpxb', 'Grayscale', 'Grayscale GBTC ETF 1993', 'GBTC')     , ('1Fracv4vTPiXvF4YtM8uhMZGCDVgkAv7Mi', 'Grayscale', 'Grayscale GBTC ETF 1994', 'GBTC')     , ('1MKoRXCxKFB2xuMi6NmTewDZJmBnANn9pE', 'Grayscale', 'Grayscale GBTC ETF 1995', 'GBTC')     , ('18stJDRpoRmetmnbETmK6UKXpHXBRw5pwx', 'Grayscale', 'Grayscale GBTC ETF 1996', 'GBTC')     , ('19131Dhf9fr6jys2cy9fck5aBn9w8fL8vD', 'Grayscale', 'Grayscale GBTC ETF 1997', 'GBTC')     , ('147nFqTjCxS5dWWA3cNV4CRAa1DzhxEUzW', 'Grayscale', 'Grayscale GBTC ETF 1998', 'GBTC')     , ('1HZ8h36VzJPnT4TnAHzd8aFddgRkjHzqJM', 'Grayscale', 'Grayscale GBTC ETF 1999', 'GBTC')     , ('1LEqqRTmQk9MwwaCLHyeu925Du7GaJawbA', 'Grayscale', 'Grayscale GBTC ETF 2000', 'GBTC')     , ('1EUbjLum5GfV5U4PXqrwjXRdctu3pTRuwy', 'Grayscale', 'Grayscale GBTC ETF 2001', 'GBTC')     , ('17SXpcjqBfj22DWtMpDvVvpMdDpHWn6iNz', 'Grayscale', 'Grayscale GBTC ETF 2002', 'GBTC')     , ('1GMTg1V2g9WowJQQyt8TdNUeidioL54Pz7', 'Grayscale', 'Grayscale GBTC ETF 2003', 'GBTC')     , ('1D4BFVGjv5FXTzFGa9LzTBC4ZF9WBzKrCh', 'Grayscale', 'Grayscale GBTC ETF 2004', 'GBTC')     , ('1J1VrW8wno2a6mwey7ZFetV5jat1ngyWWq', 'Grayscale', 'Grayscale GBTC ETF 2005', 'GBTC')     , ('1N4m6QQJN2yNGad8Mm22DNgvdTgqFtpL2c', 'Grayscale', 'Grayscale GBTC ETF 2006', 'GBTC')     , ('1CCQYjdPUaExRWh2bpFXkWSGfoUvLi4fHW', 'Grayscale', 'Grayscale GBTC ETF 2007', 'GBTC')     , ('17QBVDMNhpnKPwVeLrU4mgDvZpkwbdt6FM', 'Grayscale', 'Grayscale GBTC ETF 2008', 'GBTC')     , ('1LoKMxjiYZTQh9K6B1X1JwzicPEWFaphzn', 'Grayscale', 'Grayscale GBTC ETF 2009', 'GBTC')     , ('1N33Ugq24CGdSrmC2YuU1ADFqUYYfdR4Lw', 'Grayscale', 'Grayscale GBTC ETF 2010', 'GBTC')     , ('1PKgGNystUi5AA6QusBps7SJkpxnGcAqdd', 'Grayscale', 'Grayscale GBTC ETF 2011', 'GBTC')     , ('1LQPk8MBTg8sxXeFXK7YLrZ6nSNMEsTEAY', 'Grayscale', 'Grayscale GBTC ETF 2012', 'GBTC')     , ('161FiHwNrSdWQhFKeNyBqC7cYgrYfTTeaM', 'Grayscale', 'Grayscale GBTC ETF 2013', 'GBTC')     , ('1GNs5QoDhWdWED8XLA3VnoWruUraFoGo63', 'Grayscale', 'Grayscale GBTC ETF 2014', 'GBTC')     , ('15M8L7bquq3Rm44Bh9J1rNdZYXjDKRr5J1', 'Grayscale', 'Grayscale GBTC ETF 2015', 'GBTC')     , ('1D53QHrqcHcc8WeEwhtqz2hDNdBK4DgSNj', 'Grayscale', 'Grayscale GBTC ETF 2016', 'GBTC')     , ('1GAZ7R9Rwdh7kVanEzCNw2jYPUpppn9FYy', 'Grayscale', 'Grayscale GBTC ETF 2017', 'GBTC')     , ('1D1q6cC3mTgwFeGh22PkiMxmxz2R8PMb2H', 'Grayscale', 'Grayscale GBTC ETF 2018', 'GBTC')     , ('14NxFyTX5wZMebbYopPaHxPEiNt54VTcUW', 'Grayscale', 'Grayscale GBTC ETF 2019', 'GBTC')     , ('193ZBEydXUa4PmMPqWsk8mSC2igittx5yB', 'Grayscale', 'Grayscale GBTC ETF 2020', 'GBTC')     , ('1DyKDj9KjPDmV6trjccRjtNnwhgEeAmmym', 'Grayscale', 'Grayscale GBTC ETF 2021', 'GBTC')     , ('1BM61D6a2bXun22pzKf8Bf2njwQLE4AkT1', 'Grayscale', 'Grayscale GBTC ETF 2022', 'GBTC')     , ('19Wq5tnfWWaZH2t3zzQnrwv9XgiRZvY7HP', 'Grayscale', 'Grayscale GBTC ETF 2023', 'GBTC')     , ('1NqEmtaXXK5fgJLCSDcdULqN7boLjkhDaX', 'Grayscale', 'Grayscale GBTC ETF 2024', 'GBTC')     , ('1Dsn2T7icmPEgdiKC5n8keMvePdeANe2vg', 'Grayscale', 'Grayscale GBTC ETF 2025', 'GBTC')     , ('1Fobc6Czahfq8UCENygpPD6qBdQWZ7XxaP', 'Grayscale', 'Grayscale GBTC ETF 2026', 'GBTC')     , ('19XUoisGCHgc8swYuH4veGnUozLTxs5y1z', 'Grayscale', 'Grayscale GBTC ETF 2027', 'GBTC')     , ('15RDGRwQ3PtRnCHNEiDmkDUieHFTmUhqrP', 'Grayscale', 'Grayscale GBTC ETF 2028', 'GBTC')     , ('1N36gNmH4e7V9exeu3PxgBumJyaw7R5shb', 'Grayscale', 'Grayscale GBTC ETF 2029', 'GBTC')     , ('1pZF2idvZTgCYSkEEmNois4ioRJ3xVKLi', 'Grayscale', 'Grayscale GBTC ETF 2030', 'GBTC')     , ('1JxAKDcsS48EyCboZNAkio2btjFM3nDWQs', 'Grayscale', 'Grayscale GBTC ETF 2031', 'GBTC')     , ('13JYQheW3ZF7bbitpWpJX8q4zU8X8z89qK', 'Grayscale', 'Grayscale GBTC ETF 2032', 'GBTC')     , ('1co5tUhUjBJTxseHcRmWLQQvo4SJShYCv', 'Grayscale', 'Grayscale GBTC ETF 2033', 'GBTC')     , ('1KzFhJJYtv5S6qQ92AYYaK3fJshoEEMgNZ', 'Grayscale', 'Grayscale GBTC ETF 2034', 'GBTC')     , ('1Eqq7xsd4EXqV7fhCaGbR1ojfkaQE8LX1p', 'Grayscale', 'Grayscale GBTC ETF 2035', 'GBTC')     , ('12ycBzBVYs1GjW13kThzfHjo4cgFBbkzN6', 'Grayscale', 'Grayscale GBTC ETF 2036', 'GBTC')     , ('1Ev99vFL2DURjNMhuwTcNApwks44NMsajt', 'Grayscale', 'Grayscale GBTC ETF 2037', 'GBTC')     , ('1GACm8KC5fVWFotvzcxHEWmBccsj4C8Gt4', 'Grayscale', 'Grayscale GBTC ETF 2038', 'GBTC')     , ('18QdDCe3TFsNx9AcyCJ7hTAoSW3nxZiTyv', 'Grayscale', 'Grayscale GBTC ETF 2039', 'GBTC')     , ('15JVET2ve4c3Xm2WKRM6gBi4pDk6sWnwgJ', 'Grayscale', 'Grayscale GBTC ETF 2040', 'GBTC')     , ('1KpqM3ekBkUraQ9DRFn7Jcwo73Ke1DLWnm', 'Grayscale', 'Grayscale GBTC ETF 2041', 'GBTC')     , ('1Ji8niFyC8Hp48S8wjE43u6HMcjTuCCU3V', 'Grayscale', 'Grayscale GBTC ETF 2042', 'GBTC')     , ('15bU9wwQMgs2iX7xQ2LUc9h8SDuxBiJFEF', 'Grayscale', 'Grayscale GBTC ETF 2043', 'GBTC')     , ('125FVENWHBVtMGttSQNbGc6iE7uaWN8xMo', 'Grayscale', 'Grayscale GBTC ETF 2044', 'GBTC')     , ('1EtNCCjVkVhVRfteJWGkR3CpqrjrcqAdTZ', 'Grayscale', 'Grayscale GBTC ETF 2045', 'GBTC')     , ('1DCaW9sxQ4VXeEfhzKfqfFfUyBUrNiaDH7', 'Grayscale', 'Grayscale GBTC ETF 2046', 'GBTC')     , ('1yAFbsD84UEEXAz319hA9P1jNpLZFjz7g', 'Grayscale', 'Grayscale GBTC ETF 2047', 'GBTC')     , ('1Nsjhc23KRfUeHXk5je7xmKZ1WAvdvrY8g', 'Grayscale', 'Grayscale GBTC ETF 2048', 'GBTC')     , ('1PFkSgnCyn24t8JMn1y7C3e85cTER3qs9W', 'Grayscale', 'Grayscale GBTC ETF 2049', 'GBTC')     , ('1BsjEnQS8EHUZzmnj82dL7Px5w3ykPqHcL', 'Grayscale', 'Grayscale GBTC ETF 2050', 'GBTC')     , ('18ECR5Z3rcTLk4RBwkuQKvFmZhs8sFbLsM', 'Grayscale', 'Grayscale GBTC ETF 2051', 'GBTC')     , ('1MqEvTCz211wtiYmHid4QhDNDnAs2EJd8m', 'Grayscale', 'Grayscale GBTC ETF 2052', 'GBTC')     , ('1JQqJRGRm124VtMFMwwrkJA1KEXsKSin1g', 'Grayscale', 'Grayscale GBTC ETF 2053', 'GBTC')     , ('1H2vmGMzVH5hb1pryj1bZuG3r7zyFGf3u3', 'Grayscale', 'Grayscale GBTC ETF 2054', 'GBTC')     , ('1KVcj2cz9AKzgSEjorJTti64sYBKQXcWpK', 'Grayscale', 'Grayscale GBTC ETF 2055', 'GBTC')     , ('1PF6DuJyXR5VSPbr2e8D2dBkSuUARWXm9W', 'Grayscale', 'Grayscale GBTC ETF 2056', 'GBTC')     , ('18uk8ABARfJQwZQCkHJCscBKJdRKwxzbvS', 'Grayscale', 'Grayscale GBTC ETF 2057', 'GBTC')     , ('1J9zFC9xmfs6jyZgVWQBCg6nc2TBUg6j6q', 'Grayscale', 'Grayscale GBTC ETF 2058', 'GBTC')     , ('1DYXpyd5sXDMXrdGci8gYNhN9W1teJJxBk', 'Grayscale', 'Grayscale GBTC ETF 2059', 'GBTC')     , ('1AJT4bJ1UkuJfwaQ4xFZX6MTxzLDZhLTLq', 'Grayscale', 'Grayscale GBTC ETF 2060', 'GBTC')     , ('17hs4SgiG7HVrzHwcXU41S2UzxKB3Z6ehE', 'Grayscale', 'Grayscale GBTC ETF 2061', 'GBTC')     /*     , ('', 'Grayscale', 'Grayscale GBTC ETF 2062', 'GBTC')     , ('', 'Grayscale', 'Grayscale GBTC ETF 2063', 'GBTC')     , ('', 'Grayscale', 'Grayscale GBTC ETF 2064', 'GBTC')     , ('', 'Grayscale', 'Grayscale GBTC ETF 2065', 'GBTC')     , ('', 'Grayscale', 'Grayscale GBTC ETF 2066', 'GBTC')     */     ) AS temp_table (address, issuer, distinct_name, etf_ticker)
9c7569bc-c40e-40b7-918d-1861652ee827,LunaX Trading,
a4296fff-c24c-45fb-9fb1-27ab89403eac,certain address bal over time,SELECT date, sum(balance) FROM terra.daily_balances WHERE currency = 'UST' AND address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8' -- anchor overseer GROUP BY 1 ORDER BY 1
a7c811c9-a7c8-4da4-b156-3b4a5c3a4e51,Untitled Query,select max(block_timestamp) from terra.msg_events
a837ef19-8be8-4266-ac35-429627648838,Untitled Query,
aafd6055-99e4-457c-bca3-ae6fc7ff97da,Anchor Earn - Balances and Behavior [T123],-- updated w col-5 data  WITH    redemptions as (   select      date_trunc('d', block_timestamp) as date,     sum(event_attributes:redeem_amount::float) / pow(10,6) as redemption_amount,     avg(event_attributes:redeem_amount::float) / pow(10,6) as avg_redemption,     min(event_attributes:redeem_amount::float) / pow(10,6) as min_redemption,     max(event_attributes:redeem_amount::float) / pow(10,6) as max_redemption, 	count(1) as redemption_tx_count   from terra.msg_events   where event_type = 'from_contract'     and event_attributes:to = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract     and event_attributes:"1_action" = 'redeem_stable'     and event_attributes:"0_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST     and event_attributes:"1_contract_address" = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s'     and event_attributes:"2_contract_address" = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu'   group by 1  -- below returns aUST not UST      --  select  --    date_trunc('day', block_timestamp) as date,  --    sum(msg_value:execute_msg:send:amount::float) / pow(10,6) as redemption_amount,  --    avg(msg_value:execute_msg:send:amount::float) / pow(10,6) as avg_redemption,  --    min(msg_value:execute_msg:send:amount::float) / pow(10,6) as min_redemption,  --    max(msg_value:execute_msg:send:amount::float) / pow(10,6) as max_redemption, 	-- count(1) as redemption_tx_count  --  from terra.msgs  --  where tx_status = 'SUCCEEDED'  --  	and msg_value:contract = 'terra1hzh9vpxhsk8253se0vv5jj6etdvxu3nv8z07zu' -- aUST contract  --  	and   --  		-- col 4  --  		(msg_value:execute_msg:send:msg LIKE '%redeem_stable%'  --  		or  --  		-- col 5  --    		(msg_value:execute_msg:send:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract  --  			and msg_value:execute_msg:send:msg = 'eyJyZWRlZW1fc3RhYmxlIjp7fX0=') --col 5 withdraw message  --  	)  --  group by 1 ), all_deposit as (   SELECT     date_trunc('day', block_timestamp) as date,   	sum(msg_value:coins[0]:amount::float) / pow(10,6) as deposit_amount,   	avg(msg_value:coins[0]:amount::float) / pow(10,6) as avg_deposit,   	min(msg_value:coins[0]:amount::float) / pow(10,6) as min_deposit,   	max(msg_value:coins[0]:amount::float) / pow(10,6) as max_deposit,   	count(1) as deposit_tx_count   FROM terra.msgs   WHERE tx_status = 'SUCCEEDED'   	AND msg_value:contract = 'terra1sepfj7s0aeg5967uxnfk4thzlerrsktkpelm5s' -- anchor market contract   	AND msg_value:execute_msg LIKE '%deposit_stable%'   GROUP BY 1 ), combined_activity as (   select     *,     deposit_amount - redemption_amount as net_depositor_change   from all_deposit   left join redemptions using (date) ), liquidations as (   SELECT     date_trunc('d', block_timestamp) as date,     sum(event_attributes:"0_repay_amount"::float) / pow(10,6) as loan_autorepay_amount,     avg(event_attributes:"0_repay_amount"::float) / pow(10,6) as avg_repay,     min(event_attributes:"0_repay_amount"::float) / pow(10,6) as min_repay,     max(event_attributes:"0_repay_amount"::float) / pow(10,6) as max_repay,     count(*) as num_liquidations   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_action" LIKE '%liquidate_collateral%'     AND tx_status = 'SUCCEEDED'   GROUP BY 1 ), anchor_earn as (   select   	combined_activity.date,   	combined_activity.deposit_amount,   	combined_activity.avg_deposit,   	combined_activity.min_deposit,   	combined_activity.max_deposit,   	combined_activity.deposit_tx_count,   	combined_activity.redemption_amount,   	combined_activity.avg_redemption,   	combined_activity.min_redemption,   	combined_activity.max_redemption,   	combined_activity.redemption_tx_count,   	combined_activity.net_depositor_change,     -- handle null values cause liqidations don't happen daily   	coalesce(liquidations.loan_autorepay_amount,0) as loan_autorepay_amount,   	coalesce(liquidations.avg_repay,0) as avg_repay,   	coalesce(liquidations.min_repay,0) as min_repay,   	coalesce(liquidations.max_repay,0) as max_repay   from combined_activity   left join liquidations using (date) ),    aggregations as (   SELECT     *,     net_depositor_change as daily_change,     SUM(deposit_amount) OVER (ORDER BY date) as cumulative_deposits,     -SUM(redemption_amount) OVER (ORDER BY date) as cumulative_redemptions,     -SUM(loan_autorepay_amount) OVER (ORDER BY date) as cumulative_liquidations,     SUM(daily_change) OVER (ORDER BY date) as cumulative_anchor_earn,   	avg(avg_deposit) over (order by date rows between 6 preceding and current row) as deposit_ma,   	avg(avg_redemption) over (order by date rows between 6 preceding and current row) as redemption_ma,   	avg(avg_repay) over (order by date rows between 6 preceding and current row) as repay_ma,   	avg(deposit_tx_count) over (order by date rows between 6 preceding and current row) as deposit_tx_ma,   	avg(redemption_tx_count) over (order by date rows between 6 preceding and current row) as redemption_tx_ma,   	avg(max_deposit) over (order by date rows between 6 preceding and current row) as max_deposit_ma,   	avg(max_redemption) over (order by date rows between 6 preceding and current row) as max_redemption_ma   FROM anchor_earn   ORDER BY 1   ), yield_reserve as (   SELECT     date,     balance as yield_reserve   FROM terra.daily_balances   WHERE address = 'terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8'   	AND currency = 'UST' ), final as (   select * from aggregations   left join yield_reserve using (date) ) select * from final
55326770-94da-422b-a25e-1c37943c536f,Issuers - gsheet,-- forked from Addresses - gsheet @ https://flipsidecrypto.xyz/edit/queries/4321318d-71b3-48ab-a6b5-fc4e77f3df34 -- forked from charliemarketplace / google-sheets-demo @ https://flipsidecrypto.xyz/charliemarketplace/q/bFnJ2s0TdbVp/google-sheets-demo with res AS ( SELECT   livequery.live.udf_api(     'GET',     'https://science.flipsidecrypto.xyz/googlesheets/readsheet',     { 'Content-Type': 'application/json' },      {        'sheets_id' : '13g-8F0HcKH2RH4CbPPP6NvIG0rmM_KK6BgcBM3VgkaM',        'tab_name' : 'Custodians'     }   ) as result ) select    VALUE:TICKER::STRING as ticker,   VALUE:ISSUER::STRING as issuer,   VALUE:FEE::FLOAT as fee,   VALUE:CUSTODIAN::STRING as custodian,   VALUE:TYPE::STRING as type from res, lateral flatten(result:data::ARRAY)
f6a8411c-f4f0-46e1-9e0e-27ae890965a0,Overall Buy / Sell Tickets Activity (Arena App Avalanche) copy,-- forked from Ali3N / Overall Buy / Sell Tickets Activity (Arena App Avalanche) @ https://flipsidecrypto.xyz/Ali3N/q/jdBJxju3-KPv/overall-buy-sell-tickets-activity-arena-app-avalanche select case when decoded_log:isBuy = 'true' then 'Buy Ticket' when decoded_log:isBuy = 'false' then 'Sell Ticket'  end as action, count (distinct tx_hash) as Actions, count (distinct origin_from_address) as Users, sum (decoded_log:amount/1e18) as Amount, avg (decoded_log:amount/1e18) as Average_Amount, min (case when decoded_Log:amount > 0 then decoded_log:amount/1e18 end) as Min_Amount, max (decoded_log:amount/1e18) as Max_Amount, Actions / Users as Action_Per_User, Amount / Users as Amount_Per_User, sum (decoded_log:protocolAmount/1e18) as Protocol_Fees from avalanche.core.ez_decoded_event_logs where contract_address = '0xc605c2cf66ee98ea925b1bb4fea584b71c00cc4c' and decoded_log:isBuy in ('false','true') group by 1 order by 1  limit 5
698efa47-cf01-487d-80b8-e019f83d6368,yvBOOST Zap In/Out Volume,-- all zap ins with in_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapIn'     AND contract_address = '0x92be6adb6a12da0ca607f9d87db2f9978cd6ec3e' -- yVault ZapIn contract   ),    -- originating from the yvboost pool boost_in AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN in_txs ON e.tx_id = in_txs.tx_id   WHERE from_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a' -- yvboost   ),    -- not all have amount_usd info so we need to join w prices hourly zapins AS (   SELECT     date_trunc('hour', block_timestamp) as date,     contract_address as token_address,     sum(amount) as native_amount,     sum(amount_usd) as usd_amount   FROM ethereum.udm_events e   RIGHT JOIN boost_in ON e.tx_id = boost_in.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = from_address   GROUP BY 1, 2   ORDER BY 1, 4 desc   ), price_in AS (   SELECT     date,     symbol,     native_amount,     price,     CASE       WHEN usd_amount IS NOT NULL THEN usd_amount       ELSE native_amount * price     END as usd_amount   FROM zapins z   JOIN ethereum.token_prices_hourly p     ON (date = p.hour AND z.token_address = p.token_address)   ), all_in AS (   SELECT     CASE       WHEN symbol = 'WETH' THEN 'ETH'       ELSE symbol     END AS symbol,     sum(usd_amount) as zap_in   FROM price_in   GROUP BY 1   ), -- all zapouts out_txs AS (   SELECT     tx_id   FROM ethereum.udm_events   WHERE event_name = 'zapOut'     AND contract_address = '0xd6b88257e91e4e4d4e990b3a858c849ef2dfde8c' -- yVault ZapOut contract   ), -- originating from the yvboost pool boost_out AS (   SELECT     e.tx_id   FROM ethereum.udm_events e   RIGHT JOIN out_txs ON e.tx_id = out_txs.tx_id   WHERE to_label = 'genesis'     AND contract_address = '0x9d409a0a012cfba9b15f6d4b36ac57a46966ab9a'   ), all_out AS (   SELECT     CASE       WHEN symbol = 'WETH' THEN 'ETH'       WHEN symbol LIKE '%susd' THEN 'SUSD'       WHEN symbol = '1inch exchange: 1inch token' THEN '1INCH'       ELSE symbol     END AS symbol,     sum(amount_usd) as zap_out   FROM ethereum.udm_events e   RIGHT JOIN boost_out ON e.tx_id = boost_out.tx_id   WHERE block_timestamp > '2021-04-29T23:59:59Z'     AND origin_address = to_address     AND symbol != 'yveCRV' -- 0 volume but it's messing up the table   GROUP BY 1   ) SELECT   a.symbol as token,   coalesce(zap_in,0) as zap_in,   coalesce(zap_out,0) as zap_out,   coalesce(zap_in,0) + coalesce(zap_out,0) as gross_volume_usd FROM all_in a FULL OUTER JOIN all_out b   ON a.symbol = b.symbol ORDER BY 4 desc
b666dfd3-aea1-4059-82cc-ac8bfe6c688f,Untitled Query,select 	coalesce(block_id, block_height) from flow.core.fact_blocks   order by block_height desc limit 100
b7e205ed-7675-40f6-a35c-9578b689c0fc,LOOP Airdrop Claim Txs [T92],SELECT   block_timestamp,   tx_id,   event_attributes:to as claimant_address,   event_attributes:"1_amount"::float / pow(10,6) as amount FROM terra.msg_events WHERE event_type = 'from_contract'   AND event_attributes:"0_contract_address" = 'terra1atch4d5t25csx7ranccl48udq94k57js6yh0vk' -- loop airdrop contract   AND tx_status = 'SUCCEEDED'
b8877117-a691-4a55-9ca6-e1d784acf7ec,Total NEAR Staked, Locked, Liquid, Circulating, Total Supply copy,-- forked from brian-terra / Total NEAR Staked, Locked, Liquid, Circulating, Total Supply @ https://flipsidecrypto.xyz/brian-terra/q/2023-04-13-10-07-pm-SiYQ-s  WITH latest AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address )),  month1 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'1 month')),  month2 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'2 month')),  month3 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'3 month')),  month4 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'4 month')),  month5 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'5 month')),  month6 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'6 month')),  month7 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'7 month')),  month8 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'8 month')),  month9 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'9 month')),  month10 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'10 month')),  month11 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'11 month')),  month12 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'12 month')),  month13 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'13 month')),  month14 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'14 month')),  month15 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'15 month')),  month16 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'16 month')),  month17 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'17 month')),  month18 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'18 month')),  month19 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'19 month')),  month20 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'20 month')),  month21 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'21 month')),  month22 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'22 month')),  month23 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'23 month')),  month24 AS (                 SELECT DISTINCT address,                                 balance,                                 block_timestamp                 FROM            near.core.fact_staking_pool_balances a                 WHERE           block_timestamp =                                 (                                        SELECT max(block_timestamp)                                        FROM   near.core.fact_staking_pool_balances b                                        WHERE  a.address = b.address                                        AND    block_timestamp < getdate() - interval'24 month')) , total_staked as (SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM latest UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month1 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month2 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month3 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month4 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month5 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month6 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month7 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month8 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month9 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month10 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month11 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month12 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month13 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month14 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month15 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month16 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month17 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month18 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month19 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month20 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month21 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month22 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month23 UNION ALL SELECT MAX(block_timestamp) as date, TO_CHAR(MAX(block_timestamp), 'MMMM YYYY') AS month, SUM(balance) AS total_staked FROM month24) , txns as (select distinct tx_hash from near.core.fact_transactions  where tx_status = 'Success' and ( tx_receiver = 'lockup.near'      or tx_signer = 'lockup.near') ), to_lockup as ( select block_timestamp,        tx_hash,        action_id,        deposit * 1e-24 as deposit from near.core.fact_transfers where tx_receiver = 'lockup.near'   and action_id like '%-2' ) , release_durations as ( select a.block_timestamp,        a.tx_hash,        a.deposit,        b.args:lockup_duration/86400 as lockup_duration_days,        b.args:lockup_timestamp::datetime as lockup_start,        b.args:release_duration/86400 as release_duration_days,        b.args:vesting_schedule:VestingSchedule:start_timestamp::datetime as vesting_start,        b.args:vesting_schedule:VestingSchedule:end_timestamp::datetime as vesting_end from near.core.fact_actions_events_function_call b, to_lockup a where a.tx_hash = b.tx_hash    and b.method_name = 'create'   and lockup_duration_days > (CASE WHEN vesting_start is null                                      AND release_duration_days is null THEN 1000                                    ELSE -1 END) ), total_locked as ( select distinct         TO_CHAR(block_timestamp, 'MMMM YYYY') AS month,        date_trunc('month', block_timestamp) as mon,        sum(deposit) OVER (order by mon asc) as total_near_locked  from to_lockup order by mon desc) , total_near_supply as (select date_trunc('month',block_timestamp) as mon, total_supply*1e-24 as total_supply  from near.core.fact_blocks) , near_supply as ( select TO_CHAR(mon, 'MMMM YYYY') AS month, mon, max(total_supply) as total_near from total_near_supply group by mon order by mon desc ) , circu_supply as (SELECT '2021-07-01'::datetime AS mon, 'July 2021' AS month, 396757000 AS circ_supply UNION ALL SELECT '2021-08-01'::datetime AS mon, 'August 2021' AS month, 422907000 AS circ_supply UNION ALL SELECT '2021-09-01'::datetime AS mon, 'September 2021' AS month, 446336000 AS circ_supply UNION ALL SELECT '2021-10-01'::datetime AS mon, 'October 2021' AS month, 472542000 AS circ_supply UNION ALL SELECT '2021-11-01'::datetime AS mon, 'November 2021' AS month, 531339000 AS circ_supply UNION ALL SELECT '2021-12-01'::datetime AS mon, 'December 2021' AS month, 568848000 AS circ_supply UNION ALL SELECT '2022-01-01'::datetime AS mon, 'January 2022' AS month, 602419000 AS circ_supply UNION ALL SELECT '2022-02-01'::datetime AS mon, 'February 2022' AS month, 630769000 AS circ_supply UNION ALL SELECT '2022-03-01'::datetime AS mon, 'March 2022' AS month, 643424000 AS circ_supply UNION ALL SELECT '2022-04-01'::datetime AS mon, 'April 2022' AS month, 660441000 AS circ_supply UNION ALL SELECT '2022-05-01'::datetime AS mon, 'May 2022' AS month, 676076000 AS circ_supply UNION ALL SELECT '2022-06-01'::datetime AS mon, 'June 2022' AS month, 703648000 AS circ_supply UNION ALL SELECT '2022-07-01'::datetime AS mon, 'July 2022' AS month, 725911000 AS circ_supply UNION ALL SELECT '2022-08-01'::datetime AS mon, 'August 2022' AS month, 751801000 AS circ_supply UNION ALL SELECT '2022-09-01'::datetime AS mon, 'September 2022' AS month, 775580000 AS circ_supply UNION ALL SELECT '2022-10-01'::datetime AS mon, 'October 2022' AS month, 799891000 AS circ_supply UNION ALL SELECT '2022-11-01'::datetime AS mon, 'November 2022' AS month, 818414000 AS circ_supply UNION ALL SELECT '2022-12-01'::datetime AS mon, 'December 2022' AS month, 833208000 AS circ_supply UNION ALL SELECT '2023-01-01'::datetime AS mon, 'January 2023' AS month, 848718000 AS circ_supply UNION ALL SELECT '2023-02-01'::datetime AS mon, 'February 2023' AS month, 853199000 AS circ_supply UNION ALL SELECT '2023-03-01'::datetime AS mon, 'March 2023' AS month, 864484000 AS circ_supply UNION ALL SELECT '2023-04-01'::datetime AS mon, 'April 2023' AS month, 883626000 AS circ_supply ) , circ as ( select mon, month, circ_supply as circulating_supply from circu_supply order by circulating_supply desc) select  date,          a.month,          total_staked as staked,          total_near - circulating_supply as locked,          circulating_supply - total_staked as liquid,         circulating_supply as circulating,         total_near as total_supply from total_staked a,  near_supply c, circ d where a.month = c.month   and c.month = d.month
b8c4a081-104d-4197-9a0c-265e122d9a9d,Untitled Query,select count(distinct nft_id) from flow.core.dim_allday_metadata   -- left join flow.core.dim_allday_metadata using (nft_id)   -- where nft_collection ilike '%allday%'
ba4e112e-79a5-464f-b922-917da4bcdc94,Loop Airdrop [T93],WITH claims AS (   SELECT     date_trunc('hour', block_timestamp) as date,     sum(event_attributes:"1_amount"::float) / pow(10,6) as amount   FROM terra.msg_events   WHERE event_type = 'from_contract'     AND event_attributes:"0_contract_address" = 'terra1atch4d5t25csx7ranccl48udq94k57js6yh0vk' -- loop airdrop contract     AND tx_status = 'SUCCEEDED'   AND block_timestamp < '2021-10-10T23:59:59Z'   GROUP BY 1   ) SELECT   *,   sum(amount) OVER (ORDER BY date) as cumulative,   avg(amount) OVER (ORDER BY date ROWS BETWEEN 8 PRECEDING AND CURRENT ROW) as moving_avg FROM claims
bf5e113d-3200-4bbc-8a4a-51e0d14d2b3d,Terra Wormhole Gross Transfer Volume [T101],SELECT   date_trunc('day', block_timestamp) as date,   event_attributes:amount[0]:denom as denom,   sum(event_attributes:amount[0]:amount) / pow(10,6) as amount FROM terra.msg_events WHERE event_type = 'transfer'   AND event_attributes:recipient = 'terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf'   AND block_timestamp > '2021-10-01T00:00:00Z' GROUP BY 1,2 ORDER BY 1
c6322182-31b7-45d8-826a-f96276393f75,Untitled Query,
cc76a540-5741-4581-9cc8-0b3b7a84d05b,Untitled Query,
cd581bd5-2b40-4809-b232-4d5d877d043c,Untitled Query,
cdbb6b80-df8b-4b0d-9126-8d97a53b0f11,Untitled Query,
d1003b4d-32b7-4f85-917d-a860fc7595d6,daily UST change [T49],WITH daily AS ( SELECT   date_trunc('day', date) as date,   sum(balance) as balance FROM terra.daily_balances WHERE currency = 'UST'   AND date > '2020-12-03T00:00:00Z' GROUP BY 1 ORDER BY 1) SELECT   date,   balance,   balance - LAG(balance) OVER (ORDER BY date) as daily_change,   ((balance / LAG(balance) OVER (ORDER BY date)) - 1) * 100 as pct_change FROM daily
d258abd2-54d9-4636-af55-d91e54e9d42b,THOR Hunt - Liquidity Deposit,SELECT * FROM thorchain.liquidity_actions WHERE tx_id = 'A8A23D1CE13303B7C48FF90B66DF3CAB71912EB673B18D649D2711694FE9CC79'
d9d61cf6-801a-47af-93e6-cdf7dbf9e86e,query 1,SELECT  	COUNT(distinct from_address) AS stakers_count FROM ethereum.core.fact_traces WHERE to_address = lower('0x00000000219ab540356cBB839Cbe05303d7705Fa') AND tx_status = 'SUCCESS' AND eth_value > 0
da29f263-db95-409a-89bd-a7d9bc9eb88b,Untitled Query,
db5d51eb-b0a3-474b-91b1-748b96f6689e,bridge,SELECT BLOCK_ID::string,   EVENT_FROM_ADDRESS_NAME,   EVENT_TO,   EVENT_CURRENCY FROM terra.transfers WHERE TX_ID = '2E629CBB611909DAE4CBE09778B0042B346399EC0AB2430AE49077C2B68136BC'
ddb038cf-3896-4a92-b54f-c64a1289e938,Untitled Query,select 	* from terra.gov_vote where voter_label_subtype = 'validator' limit 100
bf90ed06-ac46-4739-b438-652347bb233a,Atlas - Cohort - Param,-- forked from Atlas - Cosmose Cohort @ https://flipsidecrypto.xyz/edit/queries/b9999add-1c2b-4657-8051-81fc48498717  with cohort as ( 	select distinct tx_signer, min(date_trunc('month', block_timestamp))::date as created_month 	from near.core.fact_transactions 	where tx_receiver in ({{tx_receivers}})   group by 1 ), final as (   select     date_trunc('month', block_timestamp) as month_of,     created_month,     datediff(month, created_month, date_trunc('day', block_timestamp)) as months_since,     count(distinct t.tx_signer) as active_users,     count(tx_hash) as transactions   from near.core.fact_transactions t     left join cohort c       on t.tx_signer = c.tx_signer   where t.tx_receiver in ({{tx_receivers}})   and c.created_month >= '2022-09-01'::date   group by all ) select   f1.created_month::date as created_month,   f1.months_since,   f2.active_users as cohort_size,   f1.active_users,   f1.active_users / f2.active_users as retention_rate from final f1   left join final f2    on f1.created_month = f2.created_month and f2.months_since = 0   where f1.month_of < current_date() order by 1, 2
e0237973-a1bb-4f10-80a1-68a7fc574005,Untitled Query,
e4fda3b9-8f85-416b-b1c2-30f3808a4580,Luna ETH bridge,SELECT BLOCK_ID::string as block_id,   EVENT_FROM_ADDRESS_NAME,   EVENT_TO as asset_bridged_to_address,   EVENT_CURRENCY as token_bridged,   event_amount as amount,   event_amount_usd as amount_usd,   TX_Status,   block_timestamp FROM terra.transfers WHERE TX_ID = '2E629CBB611909DAE4CBE09778B0042B346399EC0AB2430AE49077C2B68136BC';
e589895f-95df-40d7-b28e-646a6bf46154,Untitled Query,select * from avalanche.core.fact_blocks where block_number = 1
e6c1ce17-8352-46b0-991d-becf3e18dee8,Untitled Query,
e8bd2ce3-d96a-4770-863c-1edf08139f6a,Untitled Query,select * from anchor.borrows limit 100
eeb2f5f5-d63e-4b40-9a49-bb896c801992,Untitled Query,‹
f18af03c-01e1-4784-82a6-8d26ed93af6e,Untitled Query,SELECT distinct currency  FROM terra.oracle_prices
f2a8d9a6-e4eb-4b86-8ce5-a73a8cf9ffcb,delegations  by address [T44],WITH delegations AS ( SELECT   delegator_address,   delegator_address_label,   validator_address,   validator_address_label,   CASE   	WHEN action = 'delegate' THEN event_amount   	WHEN action = 'undelegate' THEN -event_amount   	WHEN action = 'redelegate' THEN event_amount   END AS net_amount FROM terra.staking WHERE delegator_address = 'terra1dp0taj85ruc299rkdvzp4z5pfg6z6swaed74e6') SELECT validator_address_label, sum(net_amount) FROM delegations GROUP BY 1 ORDER BY 2 desc
f2909dc6-cebb-4810-9196-639299d80965,2023-05-02 09:23 AM,select * from flow.core.fact_blocks order by block_height ASC limit 10
f55fd88f-34ea-43db-a33b-6bab34ea81de,Untitled Query,
f7643ff4-c7c3-4caa-8fd4-7980c541988d,Untitled Query,select * from terra.oracle_prices  where symbol = 'bLUNA'   and block_timestamp > CURRENT_DATE - 1 limit 100
faea6dce-b387-4b16-8982-15ef941a523b,Untitled Query,
fe97f1cb-60fb-4da5-83b5-fb152e5dca2a,Untitled Query,
fdbc5216-7c02-49b5-8da8-b7638c994663,All Chains Delay - Cats,-- forked from All Chains Delay @ https://flipsidecrypto.xyz/edit/queries/ba5b9498-40ec-4d44-9465-5f65b06b363d with   arbitrum as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_blocks' as table_name     from       arbitrum.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_transactions' as table_name     from       arbitrum.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_event_logs' as table_name     from       arbitrum.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'arbitrum' as chain,       'fact_traces' as table_name     from       arbitrum.core.fact_traces   ),   avalanche as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_blocks' as table_name     from       avalanche.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_transactions' as table_name     from       avalanche.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_event_logs' as table_name     from       avalanche.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'avalanche' as chain,       'fact_traces' as table_name     from       avalanche.core.fact_traces   ),   axelar as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_blocks' as table_name     from       axelar.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_transactions' as table_name     from       axelar.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msgs' as table_name     from       axelar.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'axelar' as chain,       'fact_msg_attributes' as table_name     from       axelar.core.fact_msg_attributes   ),   bsc as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_blocks' as table_name     from       bsc.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_transactions' as table_name     from       bsc.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_event_logs' as table_name     from       bsc.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'bsc' as chain,       'fact_traces' as table_name     from       bsc.core.fact_traces   ),   cosmos as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_blocks' as table_name     from       cosmos.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_transactions' as table_name     from       cosmos.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msgs' as table_name     from       cosmos.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'cosmos' as chain,       'fact_msg_attributes' as table_name     from       cosmos.core.fact_msg_attributes   ),   ethereum as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_blocks' as table_name     from       ethereum.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_transactions' as table_name     from       ethereum.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_event_logs' as table_name     from       ethereum.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'ethereum' as chain,       'fact_traces' as table_name     from       ethereum.core.fact_traces   ),   flow as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_blocks' as table_name     from       flow.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_transactions' as table_name     from       flow.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'flow' as chain,       'fact_events' as table_name     from       flow.core.fact_events   ),   gnosis as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_blocks' as table_name     from       gnosis.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_transactions' as table_name     from       gnosis.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_event_logs' as table_name     from       gnosis.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'gnosis' as chain,       'fact_traces' as table_name     from       gnosis.core.fact_traces   ),   near as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_blocks' as table_name     from       near.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_transactions' as table_name     from       near.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'near' as chain,       'fact_receipts' as table_name     from       near.core.fact_receipts   ),   optimism as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_blocks' as table_name     from       optimism.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_transactions' as table_name     from       optimism.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_event_logs' as table_name     from       optimism.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'optimism' as chain,       'fact_traces' as table_name     from       optimism.core.fact_traces   ),   osmosis as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_blocks' as table_name     from       osmosis.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_transactions' as table_name     from       osmosis.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_msgs' as table_name     from       osmosis.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'osmosis' as chain,       'fact_msg_attributes' as table_name     from       osmosis.core.fact_msg_attributes   ),   polygon as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_blocks' as table_name     from       polygon.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_transactions' as table_name     from       polygon.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_event_logs' as table_name     from       polygon.core.fact_event_logs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'polygon' as chain,       'fact_traces' as table_name     from       polygon.core.fact_traces   ),   solana as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_blocks' as table_name     from       solana.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_transactions' as table_name     from       solana.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'solana' as chain,       'fact_events' as table_name     from       solana.core.fact_events   ),   terra as (     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_blocks' as table_name     from       terra.core.fact_blocks     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_transactions' as table_name     from       terra.core.fact_transactions     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_msgs' as table_name     from       terra.core.fact_msgs     union     select       datediff('second', max(block_timestamp), current_timestamp) / 60 as min_delay,       'terra' as chain,       'fact_msg_attributes' as table_name     from       terra.core.fact_msg_attributes   ),   all_together as (     select       *     from       arbitrum     UNION     select       *     from       avalanche     UNION     select       *     from       axelar     UNION     select       *     from       bsc     union     select       *     from       cosmos     union     select       *     from       ethereum     union     select       *     from       flow     union     select       *     from       gnosis     union     select       *     from       near     union     select       *     from       optimism     union     select       *     from       osmosis     union     select       *     from       polygon     union     select       *     from       solana     union     select       *     from       terra   ) select   chain,   iff(     lower(table_name) in (       'fact_blocks',       'fact_block',       'fact_transactions',       'fact_transaction'     ),     'top_level',     'event_level'   ) as table_type,   avg(min_delay) as min_delay from   all_together group by   1,   2 order by   1,   2
fe3d81c2-7c9f-42a7-897a-f91f15af7d94,DataDelay copy,-- forked from c07b21ae-40dc-4c88-b807-7d493e4adadf   select   * from   (     select       'arbitrum' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       arbitrum.core.fact_blocks     union     select       'avalanche' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       avalanche.core.fact_blocks     union     select       'axelar' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       axelar.core.fact_blocks     union     select       'base' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       base.goerli.fact_blocks     union     select       'bsc' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       bsc.core.fact_blocks     union     select       'cosmos' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       cosmos.core.fact_blocks     union     select       'ethereum' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       ethereum.core.fact_blocks     union     select       'flow' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       flow.core.fact_blocks     union     select       'near' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       near.core.fact_blocks     union     select       'optimism' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       optimism.core.fact_blocks     union     select       'osmosis' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       osmosis.core.fact_blocks     union     select       'polygon' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       polygon.core.fact_blocks     union     select       'solana' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       solana.core.fact_blocks     union     select       'terra' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       terra.core.fact_blocks     union     select       'thorchain' as block_chain,       datediff(         'minute',         max(block_timestamp),         current_timestamp()       ) as data_delay_in_minutes     from       thorchain.core.dim_block   ) order by   1 asc
1d381acd-db71-4eda-a6e4-7b7c17cacbba,Actions on Terra,select 	block_timestamp,   	tx_id,     msg_value:execute_msg,     msg_value from terra.msgs     where tx_id in  (   'B605FBBB70E18044C2881CAB2B0C4880E26C278347AFEF22DBD75B74CFC80200', -- first repay stable 5/7 21h   'BE0724294FAC0C215125A6EAE11149D6AF7A90568508FB62D8EBB63D85FE45F3', -- unlock first 20k bETH 5/8 1h20m   '5DC0422F171B2AA63277516FBB605D2AEDC0A55F024DCB233CD31ECD3D55E6A4', -- burn 40k bETH for webETH 5/8 1h23m   'EB4B0BD684DF3AF638F37734E93749BEBC1750951AD3937A7C2A16399A8B9468' -- small WH transfer, test? 5/8 1h31m ) order by 1
82d01010-21b4-49fc-b4a3-52653f737118,yodelling-olive,select * from near.social.fact_decoded_actions order by block_id desc limit 10 ;
e492f6d6-d004-4f11-81a4-7a6d0bbac6ef,Terra Mint & Burn copy,-- forked from thespence / Terra Mint & Burn @ https://flipsidecrypto.xyz/thespence/q/VfYhPOzeeQg6/terra-mint-burn SELECT   block_timestamp,   block_id,   tx_id,   chain_id,   action_method,   contract_label,   action_contract_address,   action_log -- This contains the detailed information about the transaction FROM   terra.classic.ez_event_actions WHERE   (     action_method ILIKE '%mint%'     OR action_method ILIKE '%burn%'   )   AND block_timestamp BETWEEN '2022-04-30'   AND '2022-05-16' ORDER BY   block_timestamp DESC;
733ddc75-4768-4ef7-998c-0f07e2bf46d2,Anchor and Mirror Address Balances [T49],WITH balances AS ( SELECT   date,   address,   balance, CASE   WHEN address = 'terra169urmlm8wcltyjsrn7gedheh7dker69ujmerv2' THEN 'mirror' -- mirror mint   WHEN address = 'terra1zpr8tq3ts96mthcdkukmqq4y9lhw0ycevsnw89' THEN 'mirror' -- mirror limit orders   WHEN address = 'terra17yap3mhph35pcwvhza38c2lkj7gzywzy05h7l0' THEN 'anchor' -- bluna reward   WHEN address = 'terra1939tzfn4hn960ychpcsjshu8jds3zdwlp8jed9' THEN 'anchor' -- bETH rewards   ELSE address_label END AS label FROM terra.daily_balances WHERE currency = 'UST' 	AND       (date = CURRENT_DATE       OR date LIKE '2020-12-03%'       OR date LIKE '2021-03-17%')     AND (label = 'anchor' OR label = 'mirror')     AND address != 'terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc' ), epochs AS ( SELECT   date,   sum(balance) as ust_balance FROM terra.daily_balances WHERE currency = 'UST'   AND (date LIKE '2020-12-03%' 	OR date LIKE '2021-03-17%'     OR date = CURRENT_DATE) GROUP BY 1) SELECT   CASE     WHEN sub.date LIKE '2020%' THEN 'Mirror Launch'     WHEN sub.date LIKE '2021-03%' THEN 'Anchor Launch'     WHEN sub.date = CURRENT_DATE THEN 'Today'   END AS event,   label,   ust_balance,   round(ust_balance - LAG(ust_balance) OVER (PARTITION BY label ORDER BY sub.date),2) as ust_increase,   round(ust_increase / sub.days_between,2) as avg_daily_ust,   CASE     WHEN avg_daily_ust IS NULL THEN NULL     ELSE round(avg_daily_ust_from_protocol / avg_daily_ust * 100,2)   END AS pct_from_protocol,   protocol_ust_balance,   sub.days_between,   round(avg_daily_ust_from_protocol,2) as avg_daily_ust_from_protocol FROM (SELECT   date,   label,   sum(balance) as protocol_ust_balance,   protocol_ust_balance - LAG(protocol_ust_balance) OVER (PARTITION BY label ORDER BY date) as protocol_ust_increase,   DATEDIFF(day, LAG(date) OVER (PARTITION BY label ORDER BY date), date) as days_between,   protocol_ust_increase / days_between as avg_daily_ust_from_protocol FROM balances GROUP BY 1,2 ORDER BY 2,1) sub JOIN epochs   ON sub.date = epochs.date ORDER BY 2 desc, sub.date
f8a142ad-0c83-48d3-85f2-241f77be7c80,Left in pool copy,-- forked from csp88g / Left in pool @ https://flipsidecrypto.xyz/csp88g/q/hsfVHzGT_3A-/left-in-pool with prize_pool as ( select  AMOUNT_PRECISE as win_amount, TO_ADDRESS as user, * from near.core.ez_token_transfers where contract_address = '17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1' and FROM_ADDRESS = 'aa-harvest-moon.near' and block_timestamp::date >= '2024-11-17' and block_timestamp::date < '2024-12-17' and transfer_type = 'nep141' ) select 25000 - sum(win_amount) as Amount from prize_pool
e3075086-9a43-4923-96c5-aa64d8d6b7d6,Account, Most Followings,-- top accounts by follow count -- looks like most are super close, but off by 1-3 -- why? WITH root_graph_events AS (   SELECT     tx_hash,     action_id_social,     block_timestamp,     signer_id,     VALUE :: STRING AS target_account,     IFF(       node_data :follow [value::string] = '',       'follow',       'unfollow'     ) AS TYPE,     IFF(       node_data :follow [value::string] = '',       1,       -1     ) AS type_value,     'graph' AS _source,     node_data,     node_data :follow [value::string] AS type_res   FROM     near.social.fact_decoded_actions,     LATERAL FLATTEN(object_keys(node_data :follow))   WHERE     node = 'graph'     AND TYPEOF(node_data) = 'OBJECT'     AND target_account IS NOT NULL ), index_data AS (   SELECT     tx_hash,     action_id_social,     block_timestamp,     signer_id,     COALESCE(       VALUE :accountId,       VALUE :value :accountId     ) :: STRING AS target_account,     COALESCE(       VALUE :type,       VALUE :value :type     ) :: STRING AS TYPE,     IFF(       TYPE = 'follow',       1,       -1     ) AS type_value,     'index' AS _source,     node_data,{} AS type_res   FROM     near.social.fact_decoded_actions,     LATERAL FLATTEN(TRY_PARSE_JSON(node_data :graph))   WHERE     node = 'index'     AND object_keys(node_data) [0] :: STRING = 'graph'     AND COALESCE(TRY_PARSE_JSON(node_data :graph) :key, TRY_PARSE_JSON(node_data :graph) [0] :key) :: STRING = 'follow'     AND target_account IS NOT NULL ), combo AS (   SELECT     *   FROM     root_graph_events   UNION   SELECT     *   FROM     index_data ), deduplicate AS (   SELECT     *   FROM     combo qualify ROW_NUMBER() over (       PARTITION BY concat_ws(         '-',         tx_hash,         signer_id,         target_account,         TYPE       )       ORDER BY         block_timestamp DESC     ) = 1 ), agg AS (   SELECT     signer_id,     target_account,     TYPE,     COUNT(1) AS num_actions   FROM     deduplicate   GROUP BY     1,     2,     3 ), construct AS (   SELECT     signer_id,     target_account,     OBJECT_AGG(       TYPE,       num_actions     ) AS action_object   FROM     agg   GROUP BY     1,     2 ), FINAL AS (   SELECT     signer_id,     target_account,     IFF(COALESCE(action_object :follow, 0) - COALESCE(action_object :unfollow, 0) > 0, TRUE, FALSE) AS currently_following   FROM     construct ) SELECT   signer_id,   SUM(     currently_following :: NUMBER   ) AS gross_following FROM   FINAL GROUP BY   1 ORDER BY   2 DESC LIMIT 100
b5c2ac9f-9acd-4c30-b69e-812a1dcaa53b,Copy of fabricant sales txs,select * from flow.core.fact_nft_sales where (nft_collection ilike '%fabricant%' 	or marketplace ilike '%fabricant%') and tx_id not in  ('28c9e8396f0747031654e4235bc647abb95c4e5da7f466187428ef80647dc70c', 'fabfe718461ff515ab8056867d4a438ba4a97f7df46d82213b470286fc074e90', '9abd902b3bac53d0e2a575ba2a565d608b7597b841dd8edd8d39458fc13c7a69', 'ce8904370f1e5c5780c9c16728479253565a59a50d6e790a22c9d66f52be2890', '5a839be693bb553e26ddc35a260d25ee039d7b2832fe49260ac41dd86c758534', '332073d8ee7ee98b476c2d7b45d93ca9be82f04a791d0e38abe8bc7e588facfa', 'f34938e0bf6c5cc67d12907ad449f0e7040bfc1be8e05eca1e76dc0162556a34', '20c17e8d3cafaa63d8d175c3ffaf3832bb916de6516fd034d81366c10072b46a', '4fd8ae41f420ad09df69222c3311fd9906ca4503bcc4bf5634dae0ccc0fe336f', '6e0c1f042dd55919bb576590e0a2789b04dbd14789f62cd27c4cfde4b8de882c', '1b598bd168a6fa669a9ceada302a5ef030555c4b52116d378f541d27d96ed2ac', 'fdd15a8a857a2924cef038eeb948f56ab8f55c80324f133b6481c0f26357d151', 'f1aedfc4efa3e3f5e2d0b8d431a3b669a9909fee40ae0f5e646b08e43b5ffa2f', 'd1714d3f5d236b8a70219249e5e3c588265f0c66f7b2bd8e5cea0e2c5d2fda17', 'e0d1f7567a26c57ec964e57313abe0828fce0afee52fef9d174bcfc0c4e3fb24', '96708fd213ebcb2512e38d5896338d4de8c6b1d9e74d4f3f5abb8e7d60164e82', '3041b6602e1e102f90eef6d8c4e87054313aac831cc33463437cdb3b2ae3e313', 'b7df1493a79f9c8838bf57195de052f30b35b1a98104a6939cdf23271a16875f', '78f8f715fc51be12f8902980145b00b574911a3d804ae35f06b68b20d56e7288', '4825b985b510edd9bfc9dbd957042cb1be1f78e5c5698d93554b8209133798ef', '836c2fca22f1d5eb8a00afe29bb0e8d7bff9805b18ddc8d39fd42957f91bb887', 'be44b8b9464eddc5ce1d75a41df736e90e7144498c7f58bf0d70c99559e8238a', 'b70916402722cdd7331a129a66077c2d5851aa348ff729eeea9e3bf06d9bbd27', 'b9f9032345344ebac1e1450650f370baa32661b90cc9ce728d314bfd181d9a4e', 'f36445048144cb8359e3ab3b328fe2dfd7a8a3697ab07f7b39cc652cfb125292', '3335822d4b0b73f5dcdd7e0aee07af5b48d3f77cdf028c5e54b78099314648ea', '9ea063cb3d8759da9dedc8ace2da8061597d08e48132c0f571dc6b395fa1a45c', 'd631c9784c439dc239199c9413bab4936cb1af5fc79a1aa87e223a953140504a', '7aea885c21ec78fc947b0c8c207c0fd9d883f504f27017e21d58abc0d6461ac0', 'b1646a3ee376a6b0435fbe943600501b3390f4e5d23d00a293caeb079fb5e282', '0655896aa70745a22ed3f7c7c75478db2371bb57ecb735c4d2247b6cc01cdae7', '59c3af7ebab58d2cd760d49af1e0cb0e493d531c17c9c2656352a220893ee9ff', '91f438d613d9fcefb6dcb29a0cb8e2b2e3a63a64b08120823a78c6525b295c30', '448d15750829c6185c101f605517c798381b45f0e8fc98337a3b41bc9ae47365', 'c090644cb6c5b6ce7059dd3d735cef01280522fe47dbd40cbdc841948b3c9413', 'a8d77129e7a9d793cfa42c2005720a0a158375f69bf854a721cd5b4e50ef7890', 'd1dc1dae638999791d7f6183c0f2ec4dedc7fb9713e5fb11726726559f0ec03e', '8075c3cbd13fa0538649480c5ce5b70bf981bb41f40ad93debd2a8c6f64bed29', '0de1271925538a610f24baaad63986e2434154a927cba0f917de8fe2a23bf6f5', 'cf19b0d9ff4482b7ecf27003383a1ce5ca9d0c13ea06f87a4af35bcef5c65a64', 'f979d5319f4a42ffb0bc3b930f2a7f4c0da2e158c47a8bd0934fc0ef366a5e4f', '8eb255d4ff09c5500a749e57e0977f7472850f8bf7e8a5a3bb647e5fd97e6e25', '78991938db281cf18e966a546337da79ed3df6cd26274f70c39f9ff0058445cb', '57c72733ad69be875a83ae156188b32be8564f36eb21f5f5744d82ce91bd84fe', '49c26e5da197c0de59543ae642f3d73843cb80330255eef8c1f7faa568921f95', 'c72ae7d0264f8afe4457fccce6ad6c73c58d3f5190016bf12ea052d4994afa97', 'b7957ffba3a6460b517fc7475daeb21ea3c9bb7f07009475d4537517816e12cb', '44749eef199921cd91668bdf23d519426e3bf05016f8419c9aac8cb38c29eae2', '6114714755a6df29c51fa9329909068bacb8b9da5d94d9225e248a5d38400ec6', '38334a0d4ff48a6f771f312fb180923929b198e3b8eb95c8a7a1ef49081d299a', '7d6235c2fc66310cc3866e8429517043df3227f1bb76c2e48a654a0b9eede217', 'b3c5c2e41df4a77084c13af484f173f77e1c5de64d5d38e2985d6da2b903a58d', 'f6cd0b980c207161b8c3fe1b0297e610decfa5125d6c9f1498ee831faa3122c4', 'd04fbbee76d2caf9a1f7337a41034b1dec2a7ea0da8f3eeea183f277dd0e9cc5', 'a792d85a37da4c92598572160b2a2c9aca545ec78d788993891cb0146c4008e1', '60ef6e7d83cda83b4ae58426eda1f09e8c2d21d972e91cd4c8a2e19ff5eeecd3', 'f154a1f8f712271c93f1275e0e18d7a58482c992b5be6993bfeb12a16556188e', '4acf2057e4447c50bed9d419991f706bc0937c1c8fcfba585ca184a2f5e9ed81', '2f4ef45e600cde5a9b24cc91c401961cfe38783f4825b4331044b244370b538f', 'ee3c7bb4622f5a3a211ccebababb61abfb1e4d0dae5850b89a2ff8d3dad6be85', '997fa2cab6f89cf0b2212cb8e2648c7f08b5c7cac4dadb8d8d0b9dad6e63a1ba', 'e90c3c7f36906d89f9c7ffdf81a2c66b507e08b934a104757ea5db1fe4c1a38e', 'db52747a6af2d1209a8a00cb560f3561c1d96d7406452bc1e539e0e877d98ddc', '37c32aecd7bbc5474cbbb0da9f98f36f25773cd99a03771f7c20e4150da92e4d', 'f9a388462e12b17597ed0b064101c25811394b4c44a5e78faec7572be6bbaa59', 'ef93caa12445072f722d9fa4ff16c834a0f4bdd0d5b8219c3f1d786bce3448fa', 'af19bab567b1bc2d96b4080b91e99387e5f73f2dcd1255088ef3cfed25919826', 'b9ce0cc930e599cee7a3f34e64a608c6d876920a554811fbc2f392afc2d9aefc', '072fdf1f880a909949fb037c31ad6df4f1d3e467681da55532225e5aed4cbb97', 'a594000d879edc53b0bdb2ad7b26681fd507c9567a9ffaa7bc2c335cd5e8c10d', '9179447e3f164e689f250b6d850880ddc9caf64cca7e14e8cc7bb9948f63ff26', '91698e6bf584ccd7e182569091f711f8070f3e2dc5ee5ef4b13d37dc9f45bc4f', 'a1ac7876ec5f51f13e0a58bba67f1aa5658ae938c6e2aeaa9dfb07f0f9011ccb', '8a4eaaf69e61ae92e48a7278dadfe2d00ecbcc4204bf32cd20476b8c6412a264', '4c73dcb98da53dae085634960b4655d921bfa0e04e4376b0ff0d48f9e8d57022', 'f24a4f38c796091da254f11932a87417197f487fe7e27006aae49a3108ec978d', '6ed094565a19470bf365a024c285e3026cca2bfc5d46242e0d9d8f737539178a', 'f6c9099a7b03482b8c364a01906f5af784c06646e717767d9225b4a5af9654f2', '77eb3665fd91f1aeb99925c9d412b287d3bec939c822ef9e5dbdd1bb8e7343de', '4c0f7780174026ef2d31a908e29076cc2d0762406c1bc72efc016f552a5d0c83', 'c8e3696dee2664a4a441b0af7d704af1ae816a590526a44a3773a9b2d45215a9', 'd82da55ea8bf2e13f9d01a25b7b3a8df61356ce624e3885bf22ac1a90b519efd', 'e812c0867afeaf52a38965cbecd0ed9073367c2cf46c2df948f0277a29a27f46', '3b610a94bb742c519840a15caa5cf0c8ece5f84dc40f08b6be76bf29c221f175', 'fa4749873abc2f02a9cb72d616d4d1487f4c59b04582a7438ec1b41687b399ba', '806d104882b05b2a3d346bdc9120f30b3c51e29e8a11fd9043fcd8fdb1d326d8', '9e01b1222aa9ea013e1ec53c2c99a5fc8d61b42aa08b66e68a423bb0ed2cd953', 'b2694ef72180685277226534137984fef4f35ca2ad903ade0c701142217d2550', '1d80d0268b2e3af12afb37add2c4c40e093a1bceb1b02d5f48db0796e0ebec40', '96db315b85450fdbf8c804f4baa98460ff64ea04aabd4def43a60f1931275b74', 'd33b8557b33010b563b6b52f387613eafdf9aabee73d002cfbae0d0088e96061', '0d0a6bf90c66e5f4d91b5b275115be6d95fa2e67e592669f15381cfc01f21fad', '2b2142c7d46a30b08f48b26d06f9fe5c42ef08a7c950f16356c865ae8801a9ca', 'd949aad16068e65861e167616a5775e950d83d02f05d023f00b04a6b89ebe98f', 'cfde816fef0206dc42c7ca3df2693e79f546c6c7516314b2bd4e65d4d74c3818', '4a593b3ad90e2ae0d619a83a57560bc85c3bc01c6273c0cd44a68b5c74102864', '8133f932f6f3d0c60b7ccbe73e7e1e39b4a2edd6503542ea53949d4f6e92cfc5', 'd6768b0654be29b8f650d73f06afbc6e4f33d0d36db7ae4f0c922435c3c05eeb', '29290df21fcf9f11f630346b1ca54074d9190e52389dc9e08ee185966e8f0d83', '759bed4e8eb5d0aae264523c1c77b308d937069f465bb8a6599b229149258f6f', '31424fa9b299c96d77d32d666a7d090d0088747cdeb0b56ac09207ef5066663b', '6772fecb2df2013bb96fc44ab87a0e9678f618fc560e89c42c3859c75680240f', '65ee1104c897ae30d13269417d6699c649004d533b7293a7fc9e6136ce3f4817', '2bc0dcf0fe2d09cb4e5fa2caeb372a8afdcd70a39181dc34f129417793cba90c', 'a5a2c456f4997b34d774a24d759bbc021e9b247b158084ec1d888a722bd1facd', '2eae924df039d911f3bc7e0e46dacbd68e174d7d3b6a97b12603dce2d70d11c0', 'a162310cf76b8a6baa82878c8af851a1264cca0b5e0fad50f11027dac028715d', '7967b0c96af1b0f819b445d755b3f8ae9058e6fb32ccbe2712dd61718bdda9ee', '24c766dcc35ec9f7246473bd54782282ac96b65926ff637a874c9646a6724183', 'f4a62fdf771b387dc75d71b42635b299f3ae531d44561c144f5f87d42d976b31', '339a28b96c533e61396aacc874cbc4e3aee4b6f7acf380ea2e6556d4f1a12f78', 'd535183e2889b9f7d99a254bb6a1fde541054088eba8212dc2d019dd2fe8c8d0', 'a4fb65ea22c4b57b130bf2db0c6b9176e7685b4d5fca1e9e55b557794f2f6cfc', '1b3888caf943d77abab6e89e9777bc077aefcad950fb4b91e0baab38f836350d', 'bd8b0c3999da791293b499ff61e6223d65d6262ad4cdb4fd5021edd4d85a0735', '7fd10ebfab708f42fbfba22e1e6774704dce2994cf6b45cc08ec62f7fca9b5c0', 'a64852a0abcbb44f095c5e010fe7fa64082b40ffb8b30f15b18a53ec53d82cdb', 'd3f6f191de56d46a0e1475b3f822e999b85e2a98eabdb9d78d34b27776e98753', '818f7feec88863e75ba9f023ee6952db83fb024734969055765b037040cc7c52', '8da16bee4214bff935aea0c77bab67c6fa90d5e142b7e3e9dccf164c25e39bb6', 'b62a663c7f3f2072599218546dd48808abc5593c7b8dc96e77ef64cb04aed67a', 'a192dfc2dbf1aee49dcb6c526383f4b6f74bfde004d0329a9a6267f9ec529ea1', 'd855652515c613966983e4d1103ea386022d990587853cef34894421fba81e79', '99cba13faf6c9d6498c4db2c31ce38332c245a2ebdee7daf7fb466010af80a9a', '85a7a8cf85f0e36ea6404f4567e2e39b9d095141da5f87fc4e390ff0a61ea3a3', '0d89e1bf7935c093d3e96698fe3bd6a1c7641a8b95fad303ae5b570db411ebfa', 'a3ca88a45d713f70407c0366b0dd71f99587f7729f338f7b142ef941ea547930', '8fa2dbf94e470544458de7590872a901294655776b643533bcb8914ee2699080', 'c5824bbc416534895ed046c7f1cdf98d1fa818cf29c84754aca807ee33195b29', '729b4530fef392128e65a84651c443b6047dc767681cb1a30ca622e99202fcb5', '88371ca5da8a6f486a0f5a874fc017aacc64cf1ae34b2a1cead3c21c304d415b', 'ecc9e810e0a3b018f4d02307ed5acb5e843f08eb8030792cdc83c8aae056f959', 'fcb6c83ff3a2c7c4186c7ed4db82f8f2f99e36870c61462e00444d96f6984c5b', '7b326088fe312a3eb499589b7793303e6197864d8f2b693feecb94827a6948be', 'e54b4059127b4e73a0b567346a23015174be8bc8a34b7644f7d496d71462b50e', '5ede0902c363de8e683a55c89bb90b0b5f7cd23adcfaffa38515e83114c44f90', '5aa91bf318451c562ef8dbabcaf8ce255132c72612e0294cb647fbd34079a9c9', 'ef15d1aaf5cc15e2e30be577c1f456ff26bcc15a071a09871288ecd22d1361a6', '2099b7e3f8ea0204cd3e2232b36afb599c1ac172bf09c99a7aa7d899d61ce91b', '71ac2138ba4e02dd3007d59aa9a1a5fed8e3ab6ef95a001130222483ffc3beb7', 'fca19a2594f1391a939dc6258f217283a684dded30553ce99fcf80cf7de47879', '639eb1c866042f5bd543b33bdb860592538cc4858de444199f280551da9f4878', '24b3f4ffc3a774bef9ccba21deff81ab4f570912bfd070d81008b43a0d6ad980', 'ac2cd0047c0b6780cf49f05f07cab5d5b06fc367f143802c71dc11438e816b74', '1349e6c7eb46976b03ad29299f8635b96bbf561711a9b8689af5a713dc0199bc', '0376c1efb09ea4164201f24bee6bed94dc2147f4d48e17dea8d9959cd7d5f718', 'c547e3c3f3e92c7eb598d54705790bd17e04b1e43789bd105f1f7c0adef4dba9', '987eda24db5e4817f0e07f471fae0e78b4b3e30af78f207dba6f5afee4ee2389', 'c7ed6c6adc41dfd7e312e18704d1fb0647475b6a7c50c22eadeccc4dac141b04', 'ad1081b873f79d4181b530b4446f345fbfea4c16648531863bed8c88c157d223', 'e30f33749aaf0bb2539784cf8e392a7076b2dd4499ce713f1530f891bb61a4aa', '11c82f900001ebfea1107621b59377469323202a809e1a39e3fb61c4721b453e', '467930624283eb1fdb042d28ea484e7c684c8a402549fbb87906ff5febe8b3fe', '4fa9b9701e1fd249b51b8870647b90da583532277bfbf6d68fbaa2414736779b', '1992e60fe765df0a14e540b8ce8aaf6abf4151c45a0ffd0daba73d512cd15400', '37cc45a1dd586b18c611d50b75d3cc5ddbc29163d640b858e51ebc34725a263d', '108289dcfde56059d6f650a0ee9009bba9e29193410e936039fa20df699a3727', '3e0caca2c4496a7da0bd0be8b5bc410d39c28a2a83ab40dffd7bf607496df324', '82fd144765b12d3233065a69af5469381792afa542b7da68d44e282d186890ff', 'd5e383bdc5818b51fa01ccddeb506cd343007ffae96739a5d16f726bcd7b6e1a', '67045ec0dd620da5c8de03a3a0d8631b543ce72428af4bb1c4c7c967eeecc48f', '5eedc71bdd688007a69c4605e6928d51f2f310652622e4edd2b218914b55e86d', '216569bc6373ac44bf1e3924523f333e0327e78145dcb92f360128252b0b1b08', 'a2c65cc1e828c4dd154e46ee49faf73bb497eefc9d7086ab9e634188550bf238', '8a487a40094b4e26bee935234a5ef50b90a2bd51dbd11876bca2dbf969c5b806', 'c799bff8a3b3ff330736b456c744b731cde00dc46602a13d280fba23f3a7f142', '416f96a08c740397d71bafb29a9fa35547d3f00479a157274f549a60894b0d12', '5a186ef2c7f7f73e8db37d8a50c8fefd412aa173adfaf84ae6c43b7b41705092', '7708ff00a0bb5fefc87c2980d2632354af4ef14d9f74b46ef9b685672200fbc3', 'f3f33bbabbd948a36d681465cb372fad56206eb4b4bab79f6e32568a0364d4bb', '941687baf566524ddf5a136bb073010adb7ece1112d3c5c185407d5d54b95203', '716c38895e41fe49626bf51e52be4cc4e831a0ca0ee1d880ca07aecbcedc7478', 'a32b56d8a867678c834e90683cd5a222fcb9d3a1d267ff36ae0891bdd3d88b46', '5af2808cdf553de10922293289c60ddac0a7cee3e650ef5e6cd871c5031ffb16', '352ad382d55eeb6d8bd4437eb454229e53cfc0b2917f114c4375e9c14a6f0b1c', '3a049827cee24358fb88a15d7558570c2c4c528b129d98dd566b74c46e1edad8', '33fffdd5c4ac69db3cf20b6e15ec9f9a3a87f1aeab6354f47e6d26dbb0924c61', '2ad5494198f7e0bc147ac1ada90e071fd94d81e4f7ea5ed2d89d01caa9773030', 'a419adc3856758c31d565400adc26271d96f92d06b136a4c390aedac255e80f0', '237cd3a4fc13aa2b3fe83c4f1dc0f4d9a97143535fe11047f0dfbca8564b5806', '3049d6ff9455037a84cafc4092f2b00b3bbb9a3fd85be1943a9e842ef7327f52', '68ce75438ee137220ee75b88c0cd22913710f861cb36aad7831df4a9bfa0c2fa', '85dff07272950b38f9d601d700c3574eba1fca167826afdc7b46b6bbf9f9ac1a', '717075817e7fe82ef7d89529582ad7bf8ab4acd95435fbaa2347b122cb2aa534', '432c90543efa51720e8b125e0fa3f95f59a342068178509ab52d0cef371cd814', 'b4cce6927a2a91d1dd8cdb6224a7b25b935443d5d6420f6e720e70100ed0d4e0', 'a0b99892e327c20c0046dfbeafdf933598dc35c754ba7b9887ca8788701405fb', '461e96d5fef491ca2e3282167b2963ff9275648b33ab22ca37c5e413b39d75fb', '0049cebabd23f0979cab9a69f6d09de5737fa3891d34c36a34f0c8d557f76b02', '3cb6744c740f9cd32e4792ecf4ceb3bdb913307f089153ae12d3522bbaa7ba24', '4a9f98c5b0916e56cd8103b6a598c766261442286fb5ee04f6ef8e8be8d1ec91', '46dcd021ecd211164569d87031bb7b5c2bd2c7ea19ff02194bc64ba85cced213', 'f9eb0dc641e3e5d403d63689808efcd6ecfe9a4a29027b12b645692c7ef1d270', 'df4fef7d23d56960dddd5940995a41ced3e0eb14b6e30044160117fd21d83748', 'a969e7c33d6e326aa4e7a3daffb1ff0085dc36970867840eba3936577a4e082e', '459be9d2488831ca05132076e94d32a3525e6cfba4e996c7e9ed31073ee99cda', 'e69cb7210e75a081d5614337b70ba4412818531b379a2925c9c70a60d13ff598', 'f75c96638bf969b9e89914c6f0fe565e76614e10248f4595da6411577e44a011', '8e743350127644c4fe100ebef9f2489ae6bc35185e0f46ccaf9a4d5bfe6639b6', '933d19536f79e42196cfc774405e6aa9a2a63627d11e48c7ee76131649b748c7', '57b85da5599025563abbddfa30fd77539eb37f13c1fdc1756d679a235ddae479', 'c9d3fc08ceb3456beea74df50c29e5f066ffb5e3aec3599037f2f7166ffd982d', '1146c5308092e4236fb928900a57b379778b90fcad3877f206f52bac248e718f', '41b24f407cad2c78f81ee968d0a5300eba0fc1c1a9f94d01597bf8308a40f3fb', 'aab79cca9e5dd70dfd7734215aa9e4e9bf86b862e949f00b35ceab7f9c57bda3', '684682353261bbaf169634387f6a2bbc42dd8bd451d380da96d6509df1b3bc7c', '6f68156b06dfc3e5f823e1c42800db39035f4cb92a02b27725bab29870c7fff4', '3a17774529348f78de1ae9764f656e45943a14ce244aaa40af287c3660b56059', '08dfaa096c73fd8080b031142b5fb1825d68d048efe6376b2b9d7f8bd92a1c7e', '41b24f407cad2c78f81ee968d0a5300eba0fc1c1a9f94d01597bf8308a40f3fb', '3f49f1793acefa6e6fa77083d93b7c8c53aa892d4be08d0ce74dd9ca6fcb5523', '023b9545e23fb7d4647c24dca6e423515c8b9ec4c7e8048e1c927fed76860db6', '9c90e31cf3da0e558423ff520274c0a8263c4b92cecfb4e8a515b51725f9c1dc', 'a615f3616e3934ebd55d147716f795a0f5a24f1588d79c88f990db37ebda5a9f', '977fd1b30b96256b5276574dc5c7a04ed6bfabd0c9bc43a3ce24b905c1dedf9a', '87627c8fb1d1ab7d06f0a9c38bae051aed0cdcd8f798cbeca0668e4bc9a17732', '87627c8fb1d1ab7d06f0a9c38bae051aed0cdcd8f798cbeca0668e4bc9a17732', '7e1cf019cd041916ede97246c1e4eaf9a0959a45e1996a1a22dc5eb584e3436f', '021c33c2260ee725a721307d2d7ad0b693e4a3e5f48a44fc876b24401d37ad82', '158c01ae0fed28d28f903f4fab317c4fb820b7b2a1f489be6d9512168c649bfb', 'd38ee348e513d290af3bd1367c2d546551fb5bca7b40ffc273709be97a97db0f', 'c9565ee2e02c05e8bc9e0425a4bd51d3dd958391bf8ed970b8c8beeb6814ae23', 'f94020332f9d9e062445a37407bfe1752a04fea54e2a81911fda154e36e6e9eb', '652dc4efa8be5d84e7b0d3d972dfe5ab6bfa187cedfcb1a7b54e6129dd737b6a', 'cf9b4299adcb7e82cbf41d4ac9156ec85ef974472b89c8e33590f93d4128fbcc', '9e60182e49aa75bb7a121b0a80b395230ae80f21db79c4d62cce9929a19a137a', 'd64e4cd59bc3369b7628b0ca3bd1ec55a9e5e9fb9440b3662c017e1e84e1d4c7', 'dd7195d42769e672a3df0ec9f1c13929a752b91d52abf2daa7cb7879f80ff6fa', '772403c344c340f77270af52a850a8dfdc27974d40aee9bbc8d875a99db5e78e', 'c4120646426f38842d538ed74a3a1b956c8ba53c5f7e74eef5549b7399046f66', 'c088b3f4a2cb09bf9d36246988d3b808e594be42a60665641bbeab397324ec77', 'aa5958e237cb106db6f2d665299ee5a8b466e5d97562a7900637a9d2692152d8', '90b2895a9b43ebe91c0b77acf072d90caebe2bf61f7577c31bcc39f77c66e7c1', 'c8eb0ea3a845ea0fe73ca11e134e72a4ad060a412b8f449ab4d72b9528417b5d', 'ee1bd0620146a3cb405cb9a7fc3ed1010ae417f5162802e49dedeb5b4ebc38d0', 'ae54201747f7b4cedeba2b7fa53f349febfe6281fb722796184831bdd906c0d5', '34e0550986590d81a44bc0f323aa5c319286487f5628f5a36ad894a432c694da', '7a2a266a85589b6880ceec9be00bb158cc6edab6db4db670744ad6bbbb342316', '02508199c611ccaf37f44c95e41ea73030a07b9533ad8606878c705afdd1e39f', '6f7fdab6213af5ca83e42af6cd11e4ba3204fa27679adc1884e6dd4f44f33e9a', '7db2742ca84ae39d2220822d568e9ccf2bb03b2f8fc019520809a6ec9f85f7dd', '02508199c611ccaf37f44c95e41ea73030a07b9533ad8606878c705afdd1e39f', 'fd8d01891812f932a46c186b6503b8321003cf145b8bc96217e707668cad74b8', '61ec5eb9363cacb9b5531507721e081cb41a8cd223abc822dc60f6367b053e67', '285d4728d403eb64d3151144a754e0182be6b5c7a20391dd40b84c5682cd1046', '7a785e685a32cb88a761a428fdda2f8ef4b044a7a2777167b9eabf5353cc5cda', '2e54b4474c0ab8814886e7a8a47e79f8800e1ec1a5474b5778f2e722998164d9', 'f127433625862a2588ce5f87655049c25216a2f736240d1830ab43bbec7683b8', 'ba09482bd463ad2ab5d1d5357d35fad54f9a8bd5a46fec3277ea497dbac5d925', 'ac60bd37ff6eb81201728ffb7b1142968f9e373df09ac4e5317a589ce9f1efcb', '7aaf787bfd1f1952da476633d1843653902a4eeb6654b2fe58f14da182f45354', 'e4b98fad82efc637109b3bae735124fd9edba4ac9c112bea542b0cddb406e3a5', 'd2d33a6f3977b39bb7a1fff9210a41e3deb5b56cff85b2f98cf6734b2483f3bb', 'cb3abe232c8db0d7194576631ef042acf4a322bf899d62849a77b1e97fac2619', 'ab71de72cfa6e5b33df248b02f78e6a3d8b040a8ee3b532b3cabdf83e235236b', '957336ed812908de8ca38327e738c715b12ffb124c81320bc0ff5d1fe61ab859', '81f66e9231cfff84df57e9a334a2f32bcc3f30945c2df48ed21256a8d0e33580', '606d53a982f721bf41aca8c328ee4f5936314213466b4865db0b26854be18a46', '77c4eeae077f687e43bb72323802ced9fff47417f00c25dbda728209e9989c1b', 'beb1cd2918117353ffb6e0503d4874a819c8eab1ed319cf8010c30f1080af113', 'd5849f423f9fbce16415ffcf233f0d5f6bdc1fb2551117199bb035dfcaf65ac6', '58856af06c7e6374c4befbff8ec0982ebc406eaa96d32ac1c42023cc2b217de0', '045c2e491e56903d69de59fceb4cc518534de83cc794334778814220bbd8807b', 'f6781677cc90ba118c0e7844024754d5d4d9f7a20f726569f1e4b4264be66951', '0ba1db5c9d78c0e5b6e3ae67dca18d5181f8f3c08b5abcaae4d9c450fa86a476', 'a9d0263572aecc8eb9a265f44d39bdb46b13aacb8aa179a7c0c95b1b5fc49823', '9e8991c5a5f72f693eb6cf7f60b55e581199ef4bc0373bec8c9531262101d20b', '957e556f78f545ebb4e3c1f08ce731c5a07e3c251aa034825dac071a0155b206', '055cdedd75b64d7eef745356aaac9ac541acfcf07528a3f55f7fe5a4a1a58c1c', 'a2488447bc599bb56d205e82b4bf137f35c3a979528f45ad99093d8dbf547389', '0ee2f6bb8ec270833f345906eaa83e50ccb0a9a2a808252f7bb892db73289929', '3ca03f81164be9cc48584fca9f3463129b7b11231c223e7a8d364553c8aed7e7', '35daaa0618333e6d0224af5ae76d750e8248ceaed5c7fa0261372e9b0bd40b7c', '8a7eff4bce2a2c752070f7d4e4c8b6ffcd252f3092d3c0315996e78fbf9110d4', '82b94d5a49f6f89a7fb54918005b92047e164228678ca3838cbb0a9781631494', 'e1b4b66db181bfd54045052ce0a37400db6792aac4e1aa79061b72596f4444cc', '53846f2b882baefd8e2f6fbb377cfad6751519c8e1d1f13bef882aab2e1853d7', 'c04d7189d1555b29fae2a072125761d929508cb79b06ee2def912f860cbe80ab', 'b6b1309f7a543d6ffdedbdbd114a6f4fb6b59d6ee25e631555ec4398c3c2298b', '930e0a69e1276ecac208e0fa7e5bd2eb3af3220c963460021a761c55368ab7d3', '468e7ce8a6780e8e4e0c637c676cfe3dffd3eee345fe7b57ce87915a46b58508', 'cbae9344bb66c3e638eed2e56699aa04d3396037a4cff3adfee552f0e89abdee', '9add606d1618be4bd378b2e81f1b98ee0203a3c9ba69a5c727e4514b42ba07d7', 'd6f7759b24920cfcd426ae03ebf711ce1ec69e28334918f0675595dde12f0b58', '41a30caa0c4a974d19b42531d8c4e7a4120df1292c73844ae66ce8e933426633', 'eb97cc66217ebde7f2defa309d24e9e90d48f05129a2c3563316650ac08e0457', '7b7309c542eb1332bbf8b2bb87c93da0d2f0977b2aa5cae14692ce913a8c8487', 'fe2bb7cfbad64199db303512729f553380e6ad956fe0a996c5c8882396fe7002', '27b58a30ac621f78b2450de184734fd736f54ba1522971f1f269fd1267e3da99', '2e3c4e26239abbc6228440e90bae9608b90d810e82736f18eea7200e4a5e7a43', 'd25baea8704fd03b3cde542c9c90d80001ea445c27438fea949dae8b88c555db', 'bf49a1804dc179929c9437a607830487d2872bb4ce299aac1dbc5e148aafc6a5', '5e6a5cacb71ac673844c9cad8256ca4ac7c1de4b2bfd0034c9d1e65780464bd0', '76575d64a8247f9f7c06e27177815c5f14e789c097e732d2696183e27203f42d', '266fb7cafe8e8c3875dcd9d6010df5328e76f9299ec6934e6c1d50b8729e4000', '8e5ec0c9e36d9d7eea903d061d993d04a9ea04f2c8cb941bdd8e482d0e3b845f', '1f690763f38e3e6d17cc5f13b551f3416ec5b8b36fc6b380e476e652d09273de', '8f36632b88da6a20e9d3852109ec72a7dae5be54d93cc3be99ed427e8c254c94', '0aa4abdad3a53077ba9d8d9427310a1d974edd1a1e7b1a5ff82a44b6ade6533c', '632bb3dbc6ed1410b9c7ab6c00f6edbd3804f9b09bb22eb20205daab4aad1c85', 'ac5a2ea7b805125d1be6ce792f75bb11c88a5d997cf6f12a1c71b40fa44cc0ba', '3981af2041c84805e62119b7df6414bea96ad05e7188e2a0d23adea7c44c0503', 'd79321ea1280e15792ecb51a14b23136294f255ad6c05f30fcfddadcec17ad37', '08d462f425708f8f9f38e3e2186a7327850ff699ae9556f81800d0046e86b081', '6fe751334c1ca659b9a49ee657eae2cee307468f4ef7d2cc0ba88b9f018b1c94', 'b9c991eabaf9674a2613be9ae0e3af4db6534ff5fbd2842637fddebbe970baaf', '8cd1dd2acf6d34f0ded043c4a947ed152c6d960d1d33497cd183a7298ac6f245', 'c1e8f2fbc73eb8ae1cdc9b315da7199463aff618dd60cf86359fe815728ad780') order by block_timestamp;