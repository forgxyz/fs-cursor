---
description: Guidelines for generating dashboards, charts, data visualizations, or tables. Used in a blockchain analytics workflow to guide artifact creation.
globs: 
alwaysApply: false
---
# generate_dashboard.mdc

## Purpose
This rule governs the generation of analytics dashboards and components, ensuring they are insightful, visually balanced, and tailored to the analytical question or business need. It synthesizes best practices, user feedback, and design principles from the Takara Lend on Sei dashboard workflow. Static HTML pages may be deployed to Flipside using the MCP Tool `publish_html`.  

---

## Analytics Workflow
Start by understanding the question and assessing all context provided. Review the available tools, referencing `flipside_mcp_tools` as needed. Develop a plan of attack. Build iteratively but provide expert guidance as a blockchain data analysis extraordinaire.  
The generated html must be a singular static webpage for simple deployment.  
The `skills` tools will **greatly** help direct your workflow and can provide a plan of action, use `search_skills` to find out what is available!  

### IMPORTANT
ANY insight, visualization, component or explanation that references numbers, data or findings must use real data. Executed sql queries will provide facts and figures to use. Do not fall into a trap of executing a query and then hallucinating estimations. Use the ACTUAL resultset from the query. This is why the rule `log_methodology` exists - to ensure that a trail is created to back up a report.  
**Never** build a dashboard with simply chart overload. Always include explanatory text and insights.  


## 1. Visualization Selection & Storytelling
- **Start with the Question:** Every dashboard must be anchored to a clear analytical question or business prompt.
- **Comprehensive, Not Redundant:** Include only as many visualizations as are required to tell a complete, focused story—typically 3–5. Avoid both under- and over-informing; >10 charts is a sign the topic is too broad.
- **Chart Types:** Select chart types that best reveal trends, comparisons, or insights relevant to the protocol or business context (e.g., big number for engagement, pie/bar for distribution, line/area for trends). Make your chart selection based on the content of the analysis and be sure to elevate components that are rich with data.
- **Data-Driven:** Use real, relevant data from provided assets or queries. Do not use placeholders unless explicitly instructed.
- **Time Period:** Unless otherwise directed by the user, prioritize recent data over random points in time. If looking at a month, use daily slices. If looking at a period >3 months, use weekly slices, if looking at a period of time >=1 year, use mothly slices.
    - **IMPORTANT:** if a visualization is representing a limited period of time, it MUST indicate that. I.e. if a pie chart is showing a distribution of events over a 30 day period, label that time period for clarity and understanding.
    - For 2-dimensional charts where the x-axis is time always use ascending order. I.e. to the left should always be earlier and the right always later.


### Chart Type Guidelines

#### Time Series Data
- **Line Charts**: For continuous metrics over time
- **Area Charts**: For volume or cumulative metrics
- **Bar Charts**: For discrete time periods or comparisons

#### Comparative Analysis
- **Horizontal Bar Charts**: For ranking or comparison
- **Stacked Charts**: For part-to-whole relationships
- **Grouped Charts**: For side-by-side comparisons

#### Distribution Analysis
- **Histograms**: For data distribution
- **Box Plots**: For statistical summaries
- **Scatter Plots**: For correlation analysis

#### Blockchain-Specific Charts
- **Candlestick Charts**: For price data
- **Waterfall Charts**: For flow analysis
- **Treemaps**: For portfolio composition
- **Heatmaps**: For correlation matrices

#### Other
- **Big Number**: Use big number components to highlight individually important pieces of information. Do not simply use a lot of big number components, these should be reserved for numbers that make sense in isolation. If a a comparative metric, choose something else.

## 2. Layout, Visual Balance & Scale
- **Responsive Design:** All HTML artifacts must be fully mobile responsive. Use flexible grids or layouts that adapt to both desktop and mobile.
- **Visual Balance:** Align and size components to avoid awkward whitespace. When using side-by-side elements, ensure their heights are visually balanced (e.g., by setting min-heights or centering content vertically).
- **Logical Grouping:** Place related charts together (e.g., time series stacked, summary stats beside distribution charts). Use side-by-side or stacked layouts as appropriate for the data and story.
- **Scale & Fit:** Always be aware of the scale of your data and chart. Ensure axes, labels, and data points fit within the chart area and are never clipped, overflowing, or unreadable. Adjust axis ranges, label formatting, and chart dimensions as needed for clarity and accessibility.
- **All dashboard and component styling, color palette, and visual theme must follow the `style_guide` rule. Do not use custom or ad hoc styles—refer to the style guide for all visual decisions.**


## 3. Explanatory Text & Tone
- **Labels and Units:** Every visualization absolutely MUST include labels to properly identify what the chart is showing.
- **Every Chart Needs Context:** Each visualization must include a concise, insightful explanation. Go beyond restating the numbers—help the reader interpret, understand, and act on the data.
- **Protocol-Aware, Friendly Tone:** Write in a professional yet familiar style. Reference the protocol, ecosystem, or business context directly. Avoid sterile, generic, or "help-texty" language.
- **Be Proud, Be a Designer:** Treat each dashboard as a product—aim for clarity, delight, and usability.
- **Brief methodology:** Each visualization, or group of related visualizations, should include a short blurb about the data source and methodology used to derive the insight.  

## 4. Branding & Theming
- **Style guide:** All dashboard and component styling, color palette, and visual theme must follow the `style_guide` rule. Do not use custom or ad hoc styles—refer to the style guide for all visual decisions.
- **On-Brand Visuals:** Match the dashboard's color palette and style to the protocol or ecosystem when possible. Use web search to find brand guidelines. If they do not exist, attempt to find the landing page for the protocol or ecosystem and read the colors used from the css.
- **Consistent Styling:** Use harmonious colors, padding, and font choices for a clean, modern look. (See style guide)
- **Colors as indicators** When it makes sense, use green/red for clear positive/negative indicators.

### Text Usage
- Use consistent font weights throughout dashboard (see style guide)
- Maintain proper contrast ratios (4.5:1 minimum)
- Left-align body text, center-align titles
- Use sentence case for labels, title case for headers

## 5. Output & File Organization
- **Directory Structure:** Save all generated artifacts in the appropriate dashboard or project directory. Use a /cursor/ subdirectory for new or iterative outputs.
- **Self-Contained Artifacts:** Ensure HTML dashboards are fully static and portable (e.g., inline data, no fetch dependencies unless server context is guaranteed).

## 6. Performance Guidelines

### Optimization Standards
- Lazy load charts below the fold
- Use efficient data structures and queries
- Implement proper caching strategies
- Minimize bundle sizes with code splitting

### Loading Performance
- Display skeleton screens within 100ms
- Show meaningful content within 1 second
- Complete page load within 3 seconds
- Provide progress indicators for operations > 2 seconds

## 7. Data Source Requirements
**These requirements are essential for dashboard credibility and transparency:**

- **MANDATORY for ALL data elements**: Every chart, visualization, big number, table, and data component MUST include a `data source` dropdown in the bottom right corner
- **Subtle but accessible**: The dropdown should be subtle enough to not detract from the content but clearly visible
- **Required content in data source dropdown**:
    - Query run timestamp (when the data was generated)
    - Complete SQL query that generated the resultset
    - If data sourced from external internet sources, include full reference/citation
- **Formatting requirements**:
    - Data source element must be well-formatted and scrollable
    - Button to expand must be small/subtle to avoid covering component content
    - Button to collapse open dropdown must always be accessible
    - If dashboard has tabs, switching tabs should collapse any open dropdowns
- **NEVER use placeholders**: Never insert placeholders like `[SQL for XYZ]` - always include the actual data source

## 8. Disclaimer
- Include a very brief disclaimer at the bottom of the dashboard with the following elements:
    - Methodology: Maximum 2-3 sentence summary of the methodology used to develop the metrics. Be concise.
    - Publish date: tell viewers when the queries were run
    - Include a note like "See data source dropdowns for the SQL behind the charts."
    - NEVER include anything like "Dashboard styled per style guide"

---

## Application
Apply this rule to any analytics dashboard or component generation. Use it in conjunction with interpret_dashboard.mdc, analytics_style_guide.mdc, and methodology_logging.mdc for a complete, auditable, and user-focused analytics workflow. For all dashboard and component styling, always refer to the `style_guide` rule.
